
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007570  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007750  08007750  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08007750  08007750  00017750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007758  08007758  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800775c  0800775c  0001775c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08007760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  200000b0  0800780c  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800780c  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d31  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  00030e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00033e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f28  00000000  00000000  00034d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001158d  00000000  00000000  0004bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b2d  00000000  00000000  0005d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eed22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049bc  00000000  00000000  000eed78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080076f0 	.word	0x080076f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	080076f0 	.word	0x080076f0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b96e 	b.w	8001034 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	9d08      	ldr	r5, [sp, #32]
 8000d76:	4604      	mov	r4, r0
 8000d78:	468c      	mov	ip, r1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8083 	bne.w	8000e86 <__udivmoddi4+0x116>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d947      	bls.n	8000e16 <__udivmoddi4+0xa6>
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b142      	cbz	r2, 8000d9e <__udivmoddi4+0x2e>
 8000d8c:	f1c2 0020 	rsb	r0, r2, #32
 8000d90:	fa24 f000 	lsr.w	r0, r4, r0
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4097      	lsls	r7, r2
 8000d98:	ea40 0c01 	orr.w	ip, r0, r1
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da2:	0c23      	lsrs	r3, r4, #16
 8000da4:	fbbc f6f8 	udiv	r6, ip, r8
 8000da8:	fa1f fe87 	uxth.w	lr, r7
 8000dac:	fb08 c116 	mls	r1, r8, r6, ip
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f10e 	mul.w	r1, r6, lr
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x60>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc2:	f080 8119 	bcs.w	8000ff8 <__udivmoddi4+0x288>
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	f240 8116 	bls.w	8000ff8 <__udivmoddi4+0x288>
 8000dcc:	3e02      	subs	r6, #2
 8000dce:	443b      	add	r3, r7
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x8c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	f080 8105 	bcs.w	8000ffc <__udivmoddi4+0x28c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f240 8102 	bls.w	8000ffc <__udivmoddi4+0x28c>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e00:	eba4 040e 	sub.w	r4, r4, lr
 8000e04:	2600      	movs	r6, #0
 8000e06:	b11d      	cbz	r5, 8000e10 <__udivmoddi4+0xa0>
 8000e08:	40d4      	lsrs	r4, r2
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xaa>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d150      	bne.n	8000ec4 <__udivmoddi4+0x154>
 8000e22:	1bcb      	subs	r3, r1, r7
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e32:	0c21      	lsrs	r1, r4, #16
 8000e34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0xe4>
 8000e44:	1879      	adds	r1, r7, r1
 8000e46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0xe2>
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	f200 80e9 	bhi.w	8001024 <__udivmoddi4+0x2b4>
 8000e52:	4684      	mov	ip, r0
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	b2a3      	uxth	r3, r4
 8000e58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e64:	fb08 f800 	mul.w	r8, r8, r0
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x10c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x10a>
 8000e74:	45a0      	cmp	r8, r4
 8000e76:	f200 80d9 	bhi.w	800102c <__udivmoddi4+0x2bc>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	eba4 0408 	sub.w	r4, r4, r8
 8000e80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e84:	e7bf      	b.n	8000e06 <__udivmoddi4+0x96>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0x12e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <__udivmoddi4+0x282>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x1cc>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0x140>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80b8 	bhi.w	8001020 <__udivmoddi4+0x2b0>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	468c      	mov	ip, r1
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0a8      	beq.n	8000e10 <__udivmoddi4+0xa0>
 8000ebe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ec4:	f1c2 0320 	rsb	r3, r2, #32
 8000ec8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ecc:	4097      	lsls	r7, r2
 8000ece:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed6:	40d9      	lsrs	r1, r3
 8000ed8:	4330      	orrs	r0, r6
 8000eda:	0c03      	lsrs	r3, r0, #16
 8000edc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee0:	fa1f f887 	uxth.w	r8, r7
 8000ee4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eec:	fb06 f108 	mul.w	r1, r6, r8
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x19c>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000efe:	f080 808d 	bcs.w	800101c <__udivmoddi4+0x2ac>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 808a 	bls.w	800101c <__udivmoddi4+0x2ac>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	443b      	add	r3, r7
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b281      	uxth	r1, r0
 8000f10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb00 f308 	mul.w	r3, r0, r8
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x1c4>
 8000f24:	1879      	adds	r1, r7, r1
 8000f26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2a:	d273      	bcs.n	8001014 <__udivmoddi4+0x2a4>
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d971      	bls.n	8001014 <__udivmoddi4+0x2a4>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4439      	add	r1, r7
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3a:	e778      	b.n	8000e2e <__udivmoddi4+0xbe>
 8000f3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000f40:	fa03 f406 	lsl.w	r4, r3, r6
 8000f44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f62:	fa1f f884 	uxth.w	r8, r4
 8000f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000f72:	458a      	cmp	sl, r1
 8000f74:	fa02 f206 	lsl.w	r2, r2, r6
 8000f78:	fa00 f306 	lsl.w	r3, r0, r6
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x220>
 8000f7e:	1861      	adds	r1, r4, r1
 8000f80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f84:	d248      	bcs.n	8001018 <__udivmoddi4+0x2a8>
 8000f86:	458a      	cmp	sl, r1
 8000f88:	d946      	bls.n	8001018 <__udivmoddi4+0x2a8>
 8000f8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000f8e:	4421      	add	r1, r4
 8000f90:	eba1 010a 	sub.w	r1, r1, sl
 8000f94:	b2bf      	uxth	r7, r7
 8000f96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa2:	fb00 f808 	mul.w	r8, r0, r8
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x24a>
 8000faa:	19e7      	adds	r7, r4, r7
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d22e      	bcs.n	8001010 <__udivmoddi4+0x2a0>
 8000fb2:	45b8      	cmp	r8, r7
 8000fb4:	d92c      	bls.n	8001010 <__udivmoddi4+0x2a0>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4427      	add	r7, r4
 8000fba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fbe:	eba7 0708 	sub.w	r7, r7, r8
 8000fc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fc6:	454f      	cmp	r7, r9
 8000fc8:	46c6      	mov	lr, r8
 8000fca:	4649      	mov	r1, r9
 8000fcc:	d31a      	bcc.n	8001004 <__udivmoddi4+0x294>
 8000fce:	d017      	beq.n	8001000 <__udivmoddi4+0x290>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x27a>
 8000fd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000fd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000fda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fde:	40f2      	lsrs	r2, r6
 8000fe0:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe4:	40f7      	lsrs	r7, r6
 8000fe6:	e9c5 2700 	strd	r2, r7, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	462e      	mov	r6, r5
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e70b      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	e6e9      	b.n	8000dd0 <__udivmoddi4+0x60>
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	e6fd      	b.n	8000dfc <__udivmoddi4+0x8c>
 8001000:	4543      	cmp	r3, r8
 8001002:	d2e5      	bcs.n	8000fd0 <__udivmoddi4+0x260>
 8001004:	ebb8 0e02 	subs.w	lr, r8, r2
 8001008:	eb69 0104 	sbc.w	r1, r9, r4
 800100c:	3801      	subs	r0, #1
 800100e:	e7df      	b.n	8000fd0 <__udivmoddi4+0x260>
 8001010:	4608      	mov	r0, r1
 8001012:	e7d2      	b.n	8000fba <__udivmoddi4+0x24a>
 8001014:	4660      	mov	r0, ip
 8001016:	e78d      	b.n	8000f34 <__udivmoddi4+0x1c4>
 8001018:	4681      	mov	r9, r0
 800101a:	e7b9      	b.n	8000f90 <__udivmoddi4+0x220>
 800101c:	4666      	mov	r6, ip
 800101e:	e775      	b.n	8000f0c <__udivmoddi4+0x19c>
 8001020:	4630      	mov	r0, r6
 8001022:	e74a      	b.n	8000eba <__udivmoddi4+0x14a>
 8001024:	f1ac 0c02 	sub.w	ip, ip, #2
 8001028:	4439      	add	r1, r7
 800102a:	e713      	b.n	8000e54 <__udivmoddi4+0xe4>
 800102c:	3802      	subs	r0, #2
 800102e:	443c      	add	r4, r7
 8001030:	e724      	b.n	8000e7c <__udivmoddi4+0x10c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	ed2d 8b02 	vpush	{d8}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f002 f892 	bl	800316c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f000 ff04 	bl	8001e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f001 f95a 	bl	8002304 <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f001 f930 	bl	80022b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001054:	f001 f902 	bl	800225c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001058:	f000 ff92 	bl	8001f80 <MX_TIM1_Init>
  MX_TIM3_Init();
 800105c:	f001 f83a 	bl	80020d4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001060:	f000 ffe6 	bl	8002030 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001064:	f000 ff5e 	bl	8001f24 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001068:	f001 f8aa 	bl	80021c0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 800106c:	4887      	ldr	r0, [pc, #540]	; (800128c <main+0x254>)
 800106e:	f003 fe27 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8001072:	213c      	movs	r1, #60	; 0x3c
 8001074:	4886      	ldr	r0, [pc, #536]	; (8001290 <main+0x258>)
 8001076:	f004 f835 	bl	80050e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800107a:	4886      	ldr	r0, [pc, #536]	; (8001294 <main+0x25c>)
 800107c:	f003 fdc6 	bl	8004c0c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8001080:	210c      	movs	r1, #12
 8001082:	4884      	ldr	r0, [pc, #528]	; (8001294 <main+0x25c>)
 8001084:	f003 fed8 	bl	8004e38 <HAL_TIM_PWM_Start>


  UART2.huart = &huart2;
 8001088:	4b83      	ldr	r3, [pc, #524]	; (8001298 <main+0x260>)
 800108a:	4a84      	ldr	r2, [pc, #528]	; (800129c <main+0x264>)
 800108c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800108e:	4b82      	ldr	r3, [pc, #520]	; (8001298 <main+0x260>)
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001094:	4b80      	ldr	r3, [pc, #512]	; (8001298 <main+0x260>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800109a:	487f      	ldr	r0, [pc, #508]	; (8001298 <main+0x260>)
 800109c:	f001 fa38 	bl	8002510 <UARTInit>
  UARTResetStart(&UART2);
 80010a0:	487d      	ldr	r0, [pc, #500]	; (8001298 <main+0x260>)
 80010a2:	f001 fa5d 	bl	8002560 <UARTResetStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	int16_t inputChar = UARTReadChar(&UART2);
 80010a6:	487c      	ldr	r0, [pc, #496]	; (8001298 <main+0x260>)
 80010a8:	f001 fa7e 	bl	80025a8 <UARTReadChar>
 80010ac:	4603      	mov	r3, r0
 80010ae:	80fb      	strh	r3, [r7, #6]
	  	if (inputChar != -1)
 80010b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d00b      	beq.n	80010d2 <main+0x9a>
	  	{
	  		UART_Protocol(&UART2, inputChar);
 80010ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010be:	4619      	mov	r1, r3
 80010c0:	4875      	ldr	r0, [pc, #468]	; (8001298 <main+0x260>)
 80010c2:	f001 fb33 	bl	800272c <UART_Protocol>
			len+=1;
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <main+0x268>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b74      	ldr	r3, [pc, #464]	; (80012a0 <main+0x268>)
 80010d0:	701a      	strb	r2, [r3, #0]

	  	}

	  if (micros() - Time_Velocity_Stamp >= 100) //measurement
 80010d2:	f001 fd53 	bl	8002b7c <micros>
 80010d6:	4b73      	ldr	r3, [pc, #460]	; (80012a4 <main+0x26c>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	1a84      	subs	r4, r0, r2
 80010de:	eb61 0503 	sbc.w	r5, r1, r3
 80010e2:	2d00      	cmp	r5, #0
 80010e4:	bf08      	it	eq
 80010e6:	2c64      	cmpeq	r4, #100	; 0x64
 80010e8:	d35c      	bcc.n	80011a4 <main+0x16c>
	  {
		  Time_Velocity_Stamp = micros();
 80010ea:	f001 fd47 	bl	8002b7c <micros>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	496c      	ldr	r1, [pc, #432]	; (80012a4 <main+0x26c>)
 80010f4:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000; //pulse per sec
 80010f8:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <main+0x270>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80012ac <main+0x274>
 8001102:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001106:	f001 f9a3 	bl	8002450 <Encoder_Velocity_Update>
 800110a:	eef0 7a40 	vmov.f32	s15, s0
 800110e:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001112:	eddf 6a67 	vldr	s13, [pc, #412]	; 80012b0 <main+0x278>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <main+0x270>)
 800111c:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <main+0x270>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80012b4 <main+0x27c>
 800112a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800112e:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <main+0x280>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <main+0x284>)
 8001140:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8001144:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <main+0x284>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800114e:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <main+0x288>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001158:	eddf 6a56 	vldr	s13, [pc, #344]	; 80012b4 <main+0x27c>
 800115c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001160:	4b58      	ldr	r3, [pc, #352]	; (80012c4 <main+0x28c>)
 8001162:	edc3 7a00 	vstr	s15, [r3]

		  //read position
		  Position_Read_Encoder = htim1.Instance->CNT;
 8001166:	4b4a      	ldr	r3, [pc, #296]	; (8001290 <main+0x258>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001174:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <main+0x290>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
		  Position_Now_Rad = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //rad
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <main+0x290>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <main+0x288>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800118e:	4b4a      	ldr	r3, [pc, #296]	; (80012b8 <main+0x280>)
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <main+0x294>)
 80011a0:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 80011a4:	f001 fcea 	bl	8002b7c <micros>
 80011a8:	4b49      	ldr	r3, [pc, #292]	; (80012d0 <main+0x298>)
 80011aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ae:	ebb0 0802 	subs.w	r8, r0, r2
 80011b2:	eb61 0903 	sbc.w	r9, r1, r3
 80011b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ba:	f04f 0300 	mov.w	r3, #0
 80011be:	454b      	cmp	r3, r9
 80011c0:	bf08      	it	eq
 80011c2:	4542      	cmpeq	r2, r8
 80011c4:	f4bf af6f 	bcs.w	80010a6 <main+0x6e>
	  {
		  	PWM_Out_Pre = PWM_Out;
 80011c8:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <main+0x29c>)
 80011ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <main+0x2a0>)
 80011d0:	801a      	strh	r2, [r3, #0]
			Time_Sampling_Stamp = micros();
 80011d2:	f001 fcd3 	bl	8002b7c <micros>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	493d      	ldr	r1, [pc, #244]	; (80012d0 <main+0x298>)
 80011dc:	e9c1 2300 	strd	r2, r3, [r1]

			if (initial == 1 && angle_rad_stop - angle_rad_start != 0)
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <main+0x2a4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	f040 813d 	bne.w	8001464 <main+0x42c>
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <main+0x2a8>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	4b3c      	ldr	r3, [pc, #240]	; (80012e4 <main+0x2ac>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	f000 812f 	beq.w	8001464 <main+0x42c>
			{
				//calculate tau
				//short if condition
				tau_max = 15/8*(angle_rad_stop - angle_rad_start)/omega_max >= sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max)) ? 15/8*(angle_rad_stop - angle_rad_start)/omega_max : sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max));
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <main+0x2a8>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <main+0x2ac>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001216:	4b34      	ldr	r3, [pc, #208]	; (80012e8 <main+0x2b0>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <main+0x2a8>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <main+0x2ac>)
 8001228:	edd3 7a00 	vldr	s15, [r3]
 800122c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001230:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80012ec <main+0x2b4>
 8001234:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <main+0x2b8>)
 800123a:	ed93 7a00 	vldr	s14, [r3]
 800123e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	2b00      	cmp	r3, #0
 800124c:	bfb8      	it	lt
 800124e:	425b      	neglt	r3, r3
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	f005 fe76 	bl	8006f4c <sqrtf>
 8001260:	eef0 7a40 	vmov.f32	s15, s0
 8001264:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126c:	db42      	blt.n	80012f4 <main+0x2bc>
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <main+0x2a8>)
 8001270:	ed93 7a00 	vldr	s14, [r3]
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <main+0x2ac>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <main+0x2b0>)
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	e056      	b.n	8001338 <main+0x300>
 800128a:	bf00      	nop
 800128c:	200003e0 	.word	0x200003e0
 8001290:	20000394 	.word	0x20000394
 8001294:	200002e8 	.word	0x200002e8
 8001298:	200001a8 	.word	0x200001a8
 800129c:	20000428 	.word	0x20000428
 80012a0:	2000046c 	.word	0x2000046c
 80012a4:	200000e0 	.word	0x200000e0
 80012a8:	200000e8 	.word	0x200000e8
 80012ac:	461c3c00 	.word	0x461c3c00
 80012b0:	461c4000 	.word	0x461c4000
 80012b4:	42700000 	.word	0x42700000
 80012b8:	20000000 	.word	0x20000000
 80012bc:	200000ec 	.word	0x200000ec
 80012c0:	20000004 	.word	0x20000004
 80012c4:	200000f8 	.word	0x200000f8
 80012c8:	200000f4 	.word	0x200000f4
 80012cc:	200000fc 	.word	0x200000fc
 80012d0:	200000d8 	.word	0x200000d8
 80012d4:	200000f0 	.word	0x200000f0
 80012d8:	200000f2 	.word	0x200000f2
 80012dc:	20000018 	.word	0x20000018
 80012e0:	2000010c 	.word	0x2000010c
 80012e4:	20000108 	.word	0x20000108
 80012e8:	20000010 	.word	0x20000010
 80012ec:	c0b8c078 	.word	0xc0b8c078
 80012f0:	20000014 	.word	0x20000014
 80012f4:	4b94      	ldr	r3, [pc, #592]	; (8001548 <main+0x510>)
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	4b94      	ldr	r3, [pc, #592]	; (800154c <main+0x514>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001550 <main+0x518>
 8001308:	ee67 6a87 	vmul.f32	s13, s15, s14
 800130c:	4b91      	ldr	r3, [pc, #580]	; (8001554 <main+0x51c>)
 800130e:	ed93 7a00 	vldr	s14, [r3]
 8001312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	2b00      	cmp	r3, #0
 8001320:	bfb8      	it	lt
 8001322:	425b      	neglt	r3, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f005 fe0c 	bl	8006f4c <sqrtf>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	4b87      	ldr	r3, [pc, #540]	; (8001558 <main+0x520>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
				//debug
				//problem is maybe sqrt / sqrtf
//				tau_max = 10;

				//calculate coeffient
				c_0 = angle_rad_start;
 800133e:	4b83      	ldr	r3, [pc, #524]	; (800154c <main+0x514>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a86      	ldr	r2, [pc, #536]	; (800155c <main+0x524>)
 8001344:	6013      	str	r3, [r2, #0]
				c_1 = 0;
 8001346:	4b86      	ldr	r3, [pc, #536]	; (8001560 <main+0x528>)
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
				c_2 = 0;
 800134e:	4b85      	ldr	r3, [pc, #532]	; (8001564 <main+0x52c>)
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
				c_3 = 10*((angle_rad_stop - angle_rad_start)/(powf(tau_max,3)));
 8001356:	4b7c      	ldr	r3, [pc, #496]	; (8001548 <main+0x510>)
 8001358:	ed93 7a00 	vldr	s14, [r3]
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <main+0x514>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001366:	4b7c      	ldr	r3, [pc, #496]	; (8001558 <main+0x520>)
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	f005 fd52 	bl	8006e1c <powf>
 8001378:	eeb0 7a40 	vmov.f32	s14, s0
 800137c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001380:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	4b77      	ldr	r3, [pc, #476]	; (8001568 <main+0x530>)
 800138a:	edc3 7a00 	vstr	s15, [r3]
				c_4 = 15*((angle_rad_start - angle_rad_stop)/(powf(tau_max,4)));
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <main+0x514>)
 8001390:	ed93 7a00 	vldr	s14, [r3]
 8001394:	4b6c      	ldr	r3, [pc, #432]	; (8001548 <main+0x510>)
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee37 8a67 	vsub.f32	s16, s14, s15
 800139e:	4b6e      	ldr	r3, [pc, #440]	; (8001558 <main+0x520>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	f005 fd36 	bl	8006e1c <powf>
 80013b0:	eeb0 7a40 	vmov.f32	s14, s0
 80013b4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80013bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c0:	4b6a      	ldr	r3, [pc, #424]	; (800156c <main+0x534>)
 80013c2:	edc3 7a00 	vstr	s15, [r3]
				c_5 = 6*((angle_rad_stop - angle_rad_start)/(powf(tau_max,5)));
 80013c6:	4b60      	ldr	r3, [pc, #384]	; (8001548 <main+0x510>)
 80013c8:	ed93 7a00 	vldr	s14, [r3]
 80013cc:	4b5f      	ldr	r3, [pc, #380]	; (800154c <main+0x514>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	ee37 8a67 	vsub.f32	s16, s14, s15
 80013d6:	4b60      	ldr	r3, [pc, #384]	; (8001558 <main+0x520>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	f005 fd1a 	bl	8006e1c <powf>
 80013e8:	eeb0 7a40 	vmov.f32	s14, s0
 80013ec:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80013f0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80013f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <main+0x538>)
 80013fa:	edc3 7a00 	vstr	s15, [r3]
				//save initial time
				//change microsec to second
				time_initial = micros()/1000000.0;
 80013fe:	f001 fbbd 	bl	8002b7c <micros>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff f86b 	bl	80004e4 <__aeabi_ul2d>
 800140e:	a34c      	add	r3, pc, #304	; (adr r3, 8001540 <main+0x508>)
 8001410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001414:	f7ff f9c6 	bl	80007a4 <__aeabi_ddiv>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fb30 	bl	8000a84 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	4a53      	ldr	r2, [pc, #332]	; (8001574 <main+0x53c>)
 8001428:	6013      	str	r3, [r2, #0]
				initial = 0;
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <main+0x540>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]

				//initial parameter in kalman filter
				theta_estimate = angle_rad_start;
 8001430:	4b46      	ldr	r3, [pc, #280]	; (800154c <main+0x514>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a51      	ldr	r2, [pc, #324]	; (800157c <main+0x544>)
 8001436:	6013      	str	r3, [r2, #0]
				omega_estimate = 0;
 8001438:	4b51      	ldr	r3, [pc, #324]	; (8001580 <main+0x548>)
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
				p_estimate11 = 1 ;
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <main+0x54c>)
 8001442:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001446:	601a      	str	r2, [r3, #0]
				p_estimate12 = 0 ;
 8001448:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <main+0x550>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
				p_estimate21 = 0 ;
 8001450:	4b4e      	ldr	r3, [pc, #312]	; (800158c <main+0x554>)
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
				p_estimate22 = 1 ;
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <main+0x558>)
 800145a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	f000 bccd 	b.w	8001dfe <main+0xdc6>

			}
			else if (initial == 0 && angle_rad_stop - angle_rad_start != 0)
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <main+0x540>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f47f ae1c 	bne.w	80010a6 <main+0x6e>
 800146e:	4b36      	ldr	r3, [pc, #216]	; (8001548 <main+0x510>)
 8001470:	ed93 7a00 	vldr	s14, [r3]
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <main+0x514>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	f43f ae0e 	beq.w	80010a6 <main+0x6e>
			{
				//at the final point
				//tau = (micros()/1000000.0)-time_initial ; in second unit
				if ((micros()/1000000.0)-time_initial >= tau_max)
 800148a:	f001 fb77 	bl	8002b7c <micros>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff f825 	bl	80004e4 <__aeabi_ul2d>
 800149a:	a329      	add	r3, pc, #164	; (adr r3, 8001540 <main+0x508>)
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f7ff f980 	bl	80007a4 <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4692      	mov	sl, r2
 80014aa:	469b      	mov	fp, r3
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <main+0x53c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fff5 	bl	80004a0 <__aeabi_f2d>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4650      	mov	r0, sl
 80014bc:	4659      	mov	r1, fp
 80014be:	f7fe fe8f 	bl	80001e0 <__aeabi_dsub>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4692      	mov	sl, r2
 80014c8:	469b      	mov	fp, r3
 80014ca:	4b23      	ldr	r3, [pc, #140]	; (8001558 <main+0x520>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ffe6 	bl	80004a0 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4650      	mov	r0, sl
 80014da:	4659      	mov	r1, fp
 80014dc:	f7ff fabe 	bl	8000a5c <__aeabi_dcmpge>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d068      	beq.n	80015b8 <main+0x580>
				{
					initial = 1;
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <main+0x540>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
					angle_rad_start = angle_rad_stop;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <main+0x510>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a16      	ldr	r2, [pc, #88]	; (800154c <main+0x514>)
 80014f2:	6013      	str	r3, [r2, #0]
					__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, 0);
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <main+0x55c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2200      	movs	r2, #0
 80014fa:	641a      	str	r2, [r3, #64]	; 0x40
					error_position = 0;
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <main+0x560>)
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
					error_position_diff = 0;
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <main+0x564>)
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
					error_position_int = 0;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <main+0x568>)
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
					error_position_prev = 0;
 8001514:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <main+0x56c>)
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
					error_velocity = 0;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <main+0x570>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
					error_velocity_diff = 0;
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <main+0x574>)
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
					error_velocity_int = 0;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <main+0x578>)
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					error_velocity_prev = 0;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <main+0x57c>)
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e5b3      	b.n	80010a6 <main+0x6e>
 800153e:	bf00      	nop
 8001540:	00000000 	.word	0x00000000
 8001544:	412e8480 	.word	0x412e8480
 8001548:	2000010c 	.word	0x2000010c
 800154c:	20000108 	.word	0x20000108
 8001550:	c0b8c078 	.word	0xc0b8c078
 8001554:	20000014 	.word	0x20000014
 8001558:	20000110 	.word	0x20000110
 800155c:	20000118 	.word	0x20000118
 8001560:	2000011c 	.word	0x2000011c
 8001564:	20000120 	.word	0x20000120
 8001568:	20000124 	.word	0x20000124
 800156c:	20000128 	.word	0x20000128
 8001570:	2000012c 	.word	0x2000012c
 8001574:	20000114 	.word	0x20000114
 8001578:	20000018 	.word	0x20000018
 800157c:	20000178 	.word	0x20000178
 8001580:	2000017c 	.word	0x2000017c
 8001584:	2000002c 	.word	0x2000002c
 8001588:	20000190 	.word	0x20000190
 800158c:	20000194 	.word	0x20000194
 8001590:	20000030 	.word	0x20000030
 8001594:	200002e8 	.word	0x200002e8
 8001598:	20000138 	.word	0x20000138
 800159c:	2000013c 	.word	0x2000013c
 80015a0:	20000140 	.word	0x20000140
 80015a4:	20000144 	.word	0x20000144
 80015a8:	2000015c 	.word	0x2000015c
 80015ac:	20000160 	.word	0x20000160
 80015b0:	20000164 	.word	0x20000164
 80015b4:	20000168 	.word	0x20000168
				}
				else //on going to final point
				{
					//tau = real time - initial time (duration in second unit)
					tau = micros()/1000000.0 - time_initial;
 80015b8:	f001 fae0 	bl	8002b7c <micros>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7fe ff8e 	bl	80004e4 <__aeabi_ul2d>
 80015c8:	a3fd      	add	r3, pc, #1012	; (adr r3, 80019c0 <main+0x988>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f8e9 	bl	80007a4 <__aeabi_ddiv>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4692      	mov	sl, r2
 80015d8:	469b      	mov	fp, r3
 80015da:	4bdf      	ldr	r3, [pc, #892]	; (8001958 <main+0x920>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ff5e 	bl	80004a0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4650      	mov	r0, sl
 80015ea:	4659      	mov	r1, fp
 80015ec:	f7fe fdf8 	bl	80001e0 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa44 	bl	8000a84 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4ad7      	ldr	r2, [pc, #860]	; (800195c <main+0x924>)
 8001600:	6013      	str	r3, [r2, #0]
					desired_position = c_0*powf(tau,0) + c_1*powf(tau,1) + c_2*powf(tau,2) + c_3*powf(tau,3) + c_4*powf(tau,4) + c_5*powf(tau,5);
 8001602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001606:	4bd6      	ldr	r3, [pc, #856]	; (8001960 <main+0x928>)
 8001608:	edd3 7a00 	vldr	s15, [r3]
 800160c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001610:	4bd2      	ldr	r3, [pc, #840]	; (800195c <main+0x924>)
 8001612:	edd3 6a00 	vldr	s13, [r3]
 8001616:	4bd3      	ldr	r3, [pc, #844]	; (8001964 <main+0x92c>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001620:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001624:	4bcd      	ldr	r3, [pc, #820]	; (800195c <main+0x924>)
 8001626:	edd3 7a00 	vldr	s15, [r3]
 800162a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	f005 fbf3 	bl	8006e1c <powf>
 8001636:	eeb0 7a40 	vmov.f32	s14, s0
 800163a:	4bcb      	ldr	r3, [pc, #812]	; (8001968 <main+0x930>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001644:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001648:	4bc4      	ldr	r3, [pc, #784]	; (800195c <main+0x924>)
 800164a:	edd3 7a00 	vldr	s15, [r3]
 800164e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	f005 fbe1 	bl	8006e1c <powf>
 800165a:	eeb0 7a40 	vmov.f32	s14, s0
 800165e:	4bc3      	ldr	r3, [pc, #780]	; (800196c <main+0x934>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	ee38 8a27 	vadd.f32	s16, s16, s15
 800166c:	4bbb      	ldr	r3, [pc, #748]	; (800195c <main+0x924>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001676:	eeb0 0a67 	vmov.f32	s0, s15
 800167a:	f005 fbcf 	bl	8006e1c <powf>
 800167e:	eeb0 7a40 	vmov.f32	s14, s0
 8001682:	4bbb      	ldr	r3, [pc, #748]	; (8001970 <main+0x938>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001690:	4bb2      	ldr	r3, [pc, #712]	; (800195c <main+0x924>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800169a:	eeb0 0a67 	vmov.f32	s0, s15
 800169e:	f005 fbbd 	bl	8006e1c <powf>
 80016a2:	eeb0 7a40 	vmov.f32	s14, s0
 80016a6:	4bb3      	ldr	r3, [pc, #716]	; (8001974 <main+0x93c>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b0:	ee78 7a27 	vadd.f32	s15, s16, s15
 80016b4:	4bb0      	ldr	r3, [pc, #704]	; (8001978 <main+0x940>)
 80016b6:	edc3 7a00 	vstr	s15, [r3]
					desired_velocity = 0 + c_1 + 2*c_2*powf(tau,1) + 3*c_3*powf(tau,2) + 4*c_4*powf(tau,3) + 5*c_5*powf(tau,4);
 80016ba:	4baa      	ldr	r3, [pc, #680]	; (8001964 <main+0x92c>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800197c <main+0x944>
 80016c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80016c8:	4ba7      	ldr	r3, [pc, #668]	; (8001968 <main+0x930>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80016d2:	4ba2      	ldr	r3, [pc, #648]	; (800195c <main+0x924>)
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016dc:	ee37 8a27 	vadd.f32	s16, s14, s15
 80016e0:	4ba2      	ldr	r3, [pc, #648]	; (800196c <main+0x934>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80016ea:	ee67 8a87 	vmul.f32	s17, s15, s14
 80016ee:	4b9b      	ldr	r3, [pc, #620]	; (800195c <main+0x924>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	f005 fb8e 	bl	8006e1c <powf>
 8001700:	eef0 7a40 	vmov.f32	s15, s0
 8001704:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001708:	ee38 8a27 	vadd.f32	s16, s16, s15
 800170c:	4b98      	ldr	r3, [pc, #608]	; (8001970 <main+0x938>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001716:	ee67 8a87 	vmul.f32	s17, s15, s14
 800171a:	4b90      	ldr	r3, [pc, #576]	; (800195c <main+0x924>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001724:	eeb0 0a67 	vmov.f32	s0, s15
 8001728:	f005 fb78 	bl	8006e1c <powf>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001734:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001738:	4b8e      	ldr	r3, [pc, #568]	; (8001974 <main+0x93c>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001742:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001746:	4b85      	ldr	r3, [pc, #532]	; (800195c <main+0x924>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f005 fb62 	bl	8006e1c <powf>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
 800175c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001760:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001764:	4b86      	ldr	r3, [pc, #536]	; (8001980 <main+0x948>)
 8001766:	edc3 7a00 	vstr	s15, [r3]
					//predict state
					//x_predict = A*x_estimate
					//x_predict = [theta_predict; omega_predict]
					//A = [1 dt; 0 1]
					//x_estimate = [theta_estimate; omega_estimate]
					theta_predict = theta_estimate + omega_estimate*CON_T;
 800176a:	4b86      	ldr	r3, [pc, #536]	; (8001984 <main+0x94c>)
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8001988 <main+0x950>
 8001774:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001778:	4b84      	ldr	r3, [pc, #528]	; (800198c <main+0x954>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	4b83      	ldr	r3, [pc, #524]	; (8001990 <main+0x958>)
 8001784:	edc3 7a00 	vstr	s15, [r3]
					omega_predict = omega_estimate;
 8001788:	4b7e      	ldr	r3, [pc, #504]	; (8001984 <main+0x94c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a81      	ldr	r2, [pc, #516]	; (8001994 <main+0x95c>)
 800178e:	6013      	str	r3, [r2, #0]
					//p_predict = A*p_estimate*transpose(A) + G*Q*transpose(G)
					//p_predict = [p_predict11 p_predict12 ; p_predict21 p_predict22]
					//p_estimate = [p_estimate11 p_estimate12 ; p_estimate21 p_estimate22] -> initial [1 0; 0 1]
					//G = [0.5*dt^2 ; dt]
					//Q = Sigma_a^2
					Q = powf(Sigma_a,2);
 8001790:	4b81      	ldr	r3, [pc, #516]	; (8001998 <main+0x960>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800179a:	eeb0 0a67 	vmov.f32	s0, s15
 800179e:	f005 fb3d 	bl	8006e1c <powf>
 80017a2:	eef0 7a40 	vmov.f32	s15, s0
 80017a6:	4b7d      	ldr	r3, [pc, #500]	; (800199c <main+0x964>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
					p_predict11 = p_estimate11 + (p_estimate12 + p_estimate21)*CON_T + p_estimate22*powf(CON_T,2)+powf(CON_T,4)*Q/4.0;
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <main+0x968>)
 80017ae:	ed93 7a00 	vldr	s14, [r3]
 80017b2:	4b7c      	ldr	r3, [pc, #496]	; (80019a4 <main+0x96c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017bc:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001988 <main+0x950>
 80017c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017c4:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <main+0x970>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee37 8a27 	vadd.f32	s16, s14, s15
 80017ce:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8001988 <main+0x950>
 80017d2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	f005 fb1f 	bl	8006e1c <powf>
 80017de:	eeb0 7a40 	vmov.f32	s14, s0
 80017e2:	4b72      	ldr	r3, [pc, #456]	; (80019ac <main+0x974>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017f0:	ee17 0a90 	vmov	r0, s15
 80017f4:	f7fe fe54 	bl	80004a0 <__aeabi_f2d>
 80017f8:	4682      	mov	sl, r0
 80017fa:	468b      	mov	fp, r1
 80017fc:	eddf 7a62 	vldr	s15, [pc, #392]	; 8001988 <main+0x950>
 8001800:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001804:	eeb0 0a67 	vmov.f32	s0, s15
 8001808:	f005 fb08 	bl	8006e1c <powf>
 800180c:	eeb0 7a40 	vmov.f32	s14, s0
 8001810:	4b62      	ldr	r3, [pc, #392]	; (800199c <main+0x964>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe fe3f 	bl	80004a0 <__aeabi_f2d>
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <main+0x978>)
 8001828:	f7fe ffbc 	bl	80007a4 <__aeabi_ddiv>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4650      	mov	r0, sl
 8001832:	4659      	mov	r1, fp
 8001834:	f7fe fcd6 	bl	80001e4 <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f920 	bl	8000a84 <__aeabi_d2f>
 8001844:	4603      	mov	r3, r0
 8001846:	4a5b      	ldr	r2, [pc, #364]	; (80019b4 <main+0x97c>)
 8001848:	6013      	str	r3, [r2, #0]
					p_predict12 = p_estimate12 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <main+0x974>)
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001988 <main+0x950>
 8001854:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <main+0x968>)
 800185a:	edd3 7a00 	vldr	s15, [r3]
 800185e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001862:	ee17 0a90 	vmov	r0, s15
 8001866:	f7fe fe1b 	bl	80004a0 <__aeabi_f2d>
 800186a:	4682      	mov	sl, r0
 800186c:	468b      	mov	fp, r1
 800186e:	eddf 7a46 	vldr	s15, [pc, #280]	; 8001988 <main+0x950>
 8001872:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001876:	eeb0 0a67 	vmov.f32	s0, s15
 800187a:	f005 facf 	bl	8006e1c <powf>
 800187e:	eeb0 7a40 	vmov.f32	s14, s0
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <main+0x964>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188c:	ee17 0a90 	vmov	r0, s15
 8001890:	f7fe fe06 	bl	80004a0 <__aeabi_f2d>
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800189c:	f7fe ff82 	bl	80007a4 <__aeabi_ddiv>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4650      	mov	r0, sl
 80018a6:	4659      	mov	r1, fp
 80018a8:	f7fe fc9c 	bl	80001e4 <__adddf3>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8e6 	bl	8000a84 <__aeabi_d2f>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a3f      	ldr	r2, [pc, #252]	; (80019b8 <main+0x980>)
 80018bc:	6013      	str	r3, [r2, #0]
					p_predict21 = p_estimate21 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 80018be:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <main+0x974>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001988 <main+0x950>
 80018c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <main+0x96c>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d6:	ee17 0a90 	vmov	r0, s15
 80018da:	f7fe fde1 	bl	80004a0 <__aeabi_f2d>
 80018de:	4682      	mov	sl, r0
 80018e0:	468b      	mov	fp, r1
 80018e2:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001988 <main+0x950>
 80018e6:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018ea:	eeb0 0a67 	vmov.f32	s0, s15
 80018ee:	f005 fa95 	bl	8006e1c <powf>
 80018f2:	eeb0 7a40 	vmov.f32	s14, s0
 80018f6:	4b29      	ldr	r3, [pc, #164]	; (800199c <main+0x964>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001900:	ee17 0a90 	vmov	r0, s15
 8001904:	f7fe fdcc 	bl	80004a0 <__aeabi_f2d>
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001910:	f7fe ff48 	bl	80007a4 <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4650      	mov	r0, sl
 800191a:	4659      	mov	r1, fp
 800191c:	f7fe fc62 	bl	80001e4 <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f8ac 	bl	8000a84 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a23      	ldr	r2, [pc, #140]	; (80019bc <main+0x984>)
 8001930:	6013      	str	r3, [r2, #0]
					p_predict22 = p_estimate22 + powf(CON_T,2)*Q;
 8001932:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001988 <main+0x950>
 8001936:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	f005 fa6d 	bl	8006e1c <powf>
 8001942:	eeb0 7a40 	vmov.f32	s14, s0
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <main+0x964>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <main+0x974>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	e037      	b.n	80019c8 <main+0x990>
 8001958:	20000114 	.word	0x20000114
 800195c:	20000130 	.word	0x20000130
 8001960:	20000118 	.word	0x20000118
 8001964:	2000011c 	.word	0x2000011c
 8001968:	20000120 	.word	0x20000120
 800196c:	20000124 	.word	0x20000124
 8001970:	20000128 	.word	0x20000128
 8001974:	2000012c 	.word	0x2000012c
 8001978:	20000134 	.word	0x20000134
 800197c:	00000000 	.word	0x00000000
 8001980:	20000158 	.word	0x20000158
 8001984:	2000017c 	.word	0x2000017c
 8001988:	3a83126f 	.word	0x3a83126f
 800198c:	20000178 	.word	0x20000178
 8001990:	20000170 	.word	0x20000170
 8001994:	20000174 	.word	0x20000174
 8001998:	20000008 	.word	0x20000008
 800199c:	20000100 	.word	0x20000100
 80019a0:	20000190 	.word	0x20000190
 80019a4:	20000194 	.word	0x20000194
 80019a8:	2000002c 	.word	0x2000002c
 80019ac:	20000030 	.word	0x20000030
 80019b0:	40100000 	.word	0x40100000
 80019b4:	20000180 	.word	0x20000180
 80019b8:	20000184 	.word	0x20000184
 80019bc:	20000188 	.word	0x20000188
 80019c0:	00000000 	.word	0x00000000
 80019c4:	412e8480 	.word	0x412e8480
 80019c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <main+0xbd0>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
					//update
					//z_predict = z - C*x_predict
					//z_predict = theta_error
					//z = sensor_theta_input
					//C = [0 1]
					z_predict = Velocity_Now_Rad - omega_predict;
 80019d2:	4b8e      	ldr	r3, [pc, #568]	; (8001c0c <main+0xbd4>)
 80019d4:	ed93 7a00 	vldr	s14, [r3]
 80019d8:	4b8d      	ldr	r3, [pc, #564]	; (8001c10 <main+0xbd8>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019e2:	4b8c      	ldr	r3, [pc, #560]	; (8001c14 <main+0xbdc>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]

					//S = C*p_predict*transpose(C) + R
					//R = Sigma_w^2
					R = powf(Sigma_w,2);
 80019e8:	4b8b      	ldr	r3, [pc, #556]	; (8001c18 <main+0xbe0>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019f2:	eeb0 0a67 	vmov.f32	s0, s15
 80019f6:	f005 fa11 	bl	8006e1c <powf>
 80019fa:	eef0 7a40 	vmov.f32	s15, s0
 80019fe:	4b87      	ldr	r3, [pc, #540]	; (8001c1c <main+0xbe4>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]
					s = p_predict22 + R;
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <main+0xbd0>)
 8001a06:	ed93 7a00 	vldr	s14, [r3]
 8001a0a:	4b84      	ldr	r3, [pc, #528]	; (8001c1c <main+0xbe4>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a14:	4b82      	ldr	r3, [pc, #520]	; (8001c20 <main+0xbe8>)
 8001a16:	edc3 7a00 	vstr	s15, [r3]

					//K = p_predict*transpose(C)*inv(S)
					//K = [k11;k21]
					k11 = p_predict12/s;
 8001a1a:	4b82      	ldr	r3, [pc, #520]	; (8001c24 <main+0xbec>)
 8001a1c:	edd3 6a00 	vldr	s13, [r3]
 8001a20:	4b7f      	ldr	r3, [pc, #508]	; (8001c20 <main+0xbe8>)
 8001a22:	ed93 7a00 	vldr	s14, [r3]
 8001a26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <main+0xbf0>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
					k21 = p_predict22/s;
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <main+0xbd0>)
 8001a32:	edd3 6a00 	vldr	s13, [r3]
 8001a36:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <main+0xbe8>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a40:	4b7a      	ldr	r3, [pc, #488]	; (8001c2c <main+0xbf4>)
 8001a42:	edc3 7a00 	vstr	s15, [r3]

					//x_estimate = x_predict + K*z_predict
					theta_estimate = theta_predict + k11*z_predict;
 8001a46:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <main+0xbf0>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <main+0xbdc>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a56:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <main+0xbf8>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a60:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <main+0xbfc>)
 8001a62:	edc3 7a00 	vstr	s15, [r3]
					omega_estimate = omega_predict + k21*z_predict;
 8001a66:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <main+0xbf4>)
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <main+0xbdc>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a76:	4b66      	ldr	r3, [pc, #408]	; (8001c10 <main+0xbd8>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <main+0xc00>)
 8001a82:	edc3 7a00 	vstr	s15, [r3]

					//p_estimate = (I - K*C)*p_predict
					//I = [1 0; 0 1]
					p_estimate11 = (p_predict11*(p_predict22+R)-p_predict12*p_predict21)/s;
 8001a86:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <main+0xbd0>)
 8001a88:	ed93 7a00 	vldr	s14, [r3]
 8001a8c:	4b63      	ldr	r3, [pc, #396]	; (8001c1c <main+0xbe4>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a96:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <main+0xc04>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa0:	4b60      	ldr	r3, [pc, #384]	; (8001c24 <main+0xbec>)
 8001aa2:	edd3 6a00 	vldr	s13, [r3]
 8001aa6:	4b66      	ldr	r3, [pc, #408]	; (8001c40 <main+0xc08>)
 8001aa8:	edd3 7a00 	vldr	s15, [r3]
 8001aac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <main+0xbe8>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001abe:	4b61      	ldr	r3, [pc, #388]	; (8001c44 <main+0xc0c>)
 8001ac0:	edc3 7a00 	vstr	s15, [r3]
					p_estimate12 = p_predict12*R/s;
 8001ac4:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <main+0xbec>)
 8001ac6:	ed93 7a00 	vldr	s14, [r3]
 8001aca:	4b54      	ldr	r3, [pc, #336]	; (8001c1c <main+0xbe4>)
 8001acc:	edd3 7a00 	vldr	s15, [r3]
 8001ad0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <main+0xbe8>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ade:	4b5a      	ldr	r3, [pc, #360]	; (8001c48 <main+0xc10>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]
					p_estimate21 = p_predict21*R/s;
 8001ae4:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <main+0xc08>)
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <main+0xbe4>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001af4:	4b4a      	ldr	r3, [pc, #296]	; (8001c20 <main+0xbe8>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <main+0xc14>)
 8001b00:	edc3 7a00 	vstr	s15, [r3]
					p_estimate22 = p_predict22*R/s;
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <main+0xbd0>)
 8001b06:	ed93 7a00 	vldr	s14, [r3]
 8001b0a:	4b44      	ldr	r3, [pc, #272]	; (8001c1c <main+0xbe4>)
 8001b0c:	edd3 7a00 	vldr	s15, [r3]
 8001b10:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <main+0xbe8>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b1e:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <main+0xc18>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]

					//use estimate theta

					//position control
					error_position = desired_position - Position_Now_Rad;
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <main+0xc1c>)
 8001b26:	ed93 7a00 	vldr	s14, [r3]
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <main+0xc20>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <main+0xc24>)
 8001b36:	edc3 7a00 	vstr	s15, [r3]
					error_position_diff = (error_position - error_position_prev)*1000.0;
 8001b3a:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <main+0xc24>)
 8001b3c:	ed93 7a00 	vldr	s14, [r3]
 8001b40:	4b47      	ldr	r3, [pc, #284]	; (8001c60 <main+0xc28>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b4a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001c64 <main+0xc2c>
 8001b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <main+0xc30>)
 8001b54:	edc3 7a00 	vstr	s15, [r3]
					error_position_int = error_position_int + error_position/1000.0;
 8001b58:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <main+0xc34>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fc9f 	bl	80004a0 <__aeabi_f2d>
 8001b62:	4682      	mov	sl, r0
 8001b64:	468b      	mov	fp, r1
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <main+0xc24>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7fe fc98 	bl	80004a0 <__aeabi_f2d>
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <main+0xc38>)
 8001b76:	f7fe fe15 	bl	80007a4 <__aeabi_ddiv>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	4650      	mov	r0, sl
 8001b80:	4659      	mov	r1, fp
 8001b82:	f7fe fb2f 	bl	80001e4 <__adddf3>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7fe ff79 	bl	8000a84 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4a35      	ldr	r2, [pc, #212]	; (8001c6c <main+0xc34>)
 8001b96:	6013      	str	r3, [r2, #0]
					command_velocity = position_kp*error_position + position_ki*error_position_int + position_kd*error_position_diff + position_bias;
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <main+0xc3c>)
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	; (8001c5c <main+0xc24>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <main+0xc40>)
 8001baa:	edd3 6a00 	vldr	s13, [r3]
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <main+0xc34>)
 8001bb0:	edd3 7a00 	vldr	s15, [r3]
 8001bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <main+0xc44>)
 8001bbe:	edd3 6a00 	vldr	s13, [r3]
 8001bc2:	4b29      	ldr	r3, [pc, #164]	; (8001c68 <main+0xc30>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bcc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <main+0xc48>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <main+0xc4c>)
 8001bdc:	edc3 7a00 	vstr	s15, [r3]
					error_position_prev = error_position;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <main+0xc24>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <main+0xc28>)
 8001be6:	6013      	str	r3, [r2, #0]

//					limitter velocity
					if (command_velocity > 1)
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <main+0xc4c>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	dd45      	ble.n	8001c88 <main+0xc50>
					{
						command_velocity = 1;
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <main+0xc4c>)
 8001bfe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	e04d      	b.n	8001ca2 <main+0xc6a>
 8001c06:	bf00      	nop
 8001c08:	2000018c 	.word	0x2000018c
 8001c0c:	200000f8 	.word	0x200000f8
 8001c10:	20000174 	.word	0x20000174
 8001c14:	20000198 	.word	0x20000198
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000104 	.word	0x20000104
 8001c20:	2000019c 	.word	0x2000019c
 8001c24:	20000184 	.word	0x20000184
 8001c28:	200001a0 	.word	0x200001a0
 8001c2c:	200001a4 	.word	0x200001a4
 8001c30:	20000170 	.word	0x20000170
 8001c34:	20000178 	.word	0x20000178
 8001c38:	2000017c 	.word	0x2000017c
 8001c3c:	20000180 	.word	0x20000180
 8001c40:	20000188 	.word	0x20000188
 8001c44:	2000002c 	.word	0x2000002c
 8001c48:	20000190 	.word	0x20000190
 8001c4c:	20000194 	.word	0x20000194
 8001c50:	20000030 	.word	0x20000030
 8001c54:	20000134 	.word	0x20000134
 8001c58:	200000fc 	.word	0x200000fc
 8001c5c:	20000138 	.word	0x20000138
 8001c60:	20000144 	.word	0x20000144
 8001c64:	447a0000 	.word	0x447a0000
 8001c68:	2000013c 	.word	0x2000013c
 8001c6c:	20000140 	.word	0x20000140
 8001c70:	408f4000 	.word	0x408f4000
 8001c74:	2000001c 	.word	0x2000001c
 8001c78:	20000148 	.word	0x20000148
 8001c7c:	2000014c 	.word	0x2000014c
 8001c80:	20000150 	.word	0x20000150
 8001c84:	20000154 	.word	0x20000154
					}
					else if (command_velocity < -1)
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <main+0xdcc>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	d502      	bpl.n	8001ca2 <main+0xc6a>
					{
						command_velocity = -1;
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <main+0xdcc>)
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <main+0xdd0>)
 8001ca0:	601a      	str	r2, [r3, #0]
					}

					//velocity control
					error_velocity = desired_velocity - omega_estimate + command_velocity;
 8001ca2:	4b5a      	ldr	r3, [pc, #360]	; (8001e0c <main+0xdd4>)
 8001ca4:	ed93 7a00 	vldr	s14, [r3]
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <main+0xdd8>)
 8001caa:	edd3 7a00 	vldr	s15, [r3]
 8001cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb2:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <main+0xdcc>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cbc:	4b55      	ldr	r3, [pc, #340]	; (8001e14 <main+0xddc>)
 8001cbe:	edc3 7a00 	vstr	s15, [r3]
					error_velocity_diff = (error_velocity - error_velocity_prev)*1000.0;
 8001cc2:	4b54      	ldr	r3, [pc, #336]	; (8001e14 <main+0xddc>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	4b53      	ldr	r3, [pc, #332]	; (8001e18 <main+0xde0>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001e1c <main+0xde4>
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <main+0xde8>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]
					error_velocity_int = error_velocity_int + error_velocity/1000.0;
 8001ce0:	4b50      	ldr	r3, [pc, #320]	; (8001e24 <main+0xdec>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fbdb 	bl	80004a0 <__aeabi_f2d>
 8001cea:	4682      	mov	sl, r0
 8001cec:	468b      	mov	fp, r1
 8001cee:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <main+0xddc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fbd4 	bl	80004a0 <__aeabi_f2d>
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <main+0xdf0>)
 8001cfe:	f7fe fd51 	bl	80007a4 <__aeabi_ddiv>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4650      	mov	r0, sl
 8001d08:	4659      	mov	r1, fp
 8001d0a:	f7fe fa6b 	bl	80001e4 <__adddf3>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	4610      	mov	r0, r2
 8001d14:	4619      	mov	r1, r3
 8001d16:	f7fe feb5 	bl	8000a84 <__aeabi_d2f>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a41      	ldr	r2, [pc, #260]	; (8001e24 <main+0xdec>)
 8001d1e:	6013      	str	r3, [r2, #0]
					PWM_Out = velocity_kp*error_velocity + velocity_ki*error_velocity_int + velocity_kd*error_velocity_diff + velocity_bias;
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <main+0xdf4>)
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <main+0xddc>)
 8001d28:	edd3 7a00 	vldr	s15, [r3]
 8001d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d30:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <main+0xdf8>)
 8001d32:	edd3 6a00 	vldr	s13, [r3]
 8001d36:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <main+0xdec>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <main+0xdfc>)
 8001d46:	edd3 6a00 	vldr	s13, [r3]
 8001d4a:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <main+0xde8>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	4b37      	ldr	r3, [pc, #220]	; (8001e38 <main+0xe00>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d66:	ee17 3a90 	vmov	r3, s15
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <main+0xe04>)
 8001d6e:	801a      	strh	r2, [r3, #0]
					error_velocity_prev = error_velocity;
 8001d70:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <main+0xddc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <main+0xde0>)
 8001d76:	6013      	str	r3, [r2, #0]
//						{
//							PWM_Out = PWM_Out_Pre - 5;
//						}
//					}
					//limitter pwm
					if (PWM_Out > 10000)
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <main+0xe04>)
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d82:	4293      	cmp	r3, r2
 8001d84:	dd04      	ble.n	8001d90 <main+0xd58>
					{
						PWM_Out = 10000;
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <main+0xe04>)
 8001d88:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	e009      	b.n	8001da4 <main+0xd6c>
					}
					else if (PWM_Out < -10000)
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <main+0xe04>)
 8001d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	; (8001e40 <main+0xe08>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	da03      	bge.n	8001da4 <main+0xd6c>
					{
						PWM_Out = -10000;
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <main+0xe04>)
 8001d9e:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8001da2:	801a      	strh	r2, [r3, #0]



					//control motor direction
					//if (PWM_Out < 0)
					if (angle_rad_start > angle_rad_stop)
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <main+0xe0c>)
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <main+0xe10>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db8:	dd11      	ble.n	8001dde <main+0xda6>
					{
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <main+0xe04>)
 8001dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bfb8      	it	lt
 8001dc4:	425b      	neglt	r3, r3
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <main+0xe14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd4:	481e      	ldr	r0, [pc, #120]	; (8001e50 <main+0xe18>)
 8001dd6:	f002 f8d3 	bl	8003f80 <HAL_GPIO_WritePin>
 8001dda:	f7ff b964 	b.w	80010a6 <main+0x6e>
					}
//					else if (PWM_Out >= 0)
					else
					{
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <main+0xe04>)
 8001de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bfb8      	it	lt
 8001de8:	425b      	neglt	r3, r3
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <main+0xe14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8001df2:	2201      	movs	r2, #1
 8001df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df8:	4815      	ldr	r0, [pc, #84]	; (8001e50 <main+0xe18>)
 8001dfa:	f002 f8c1 	bl	8003f80 <HAL_GPIO_WritePin>
  {
 8001dfe:	f7ff b952 	b.w	80010a6 <main+0x6e>
 8001e02:	bf00      	nop
 8001e04:	20000154 	.word	0x20000154
 8001e08:	bf800000 	.word	0xbf800000
 8001e0c:	20000158 	.word	0x20000158
 8001e10:	2000017c 	.word	0x2000017c
 8001e14:	2000015c 	.word	0x2000015c
 8001e18:	20000168 	.word	0x20000168
 8001e1c:	447a0000 	.word	0x447a0000
 8001e20:	20000160 	.word	0x20000160
 8001e24:	20000164 	.word	0x20000164
 8001e28:	408f4000 	.word	0x408f4000
 8001e2c:	20000020 	.word	0x20000020
 8001e30:	20000024 	.word	0x20000024
 8001e34:	20000028 	.word	0x20000028
 8001e38:	2000016c 	.word	0x2000016c
 8001e3c:	200000f0 	.word	0x200000f0
 8001e40:	ffffd8f0 	.word	0xffffd8f0
 8001e44:	20000108 	.word	0x20000108
 8001e48:	2000010c 	.word	0x2000010c
 8001e4c:	200002e8 	.word	0x200002e8
 8001e50:	40020400 	.word	0x40020400

08001e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b094      	sub	sp, #80	; 0x50
 8001e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e5a:	f107 0320 	add.w	r3, r7, #32
 8001e5e:	2230      	movs	r2, #48	; 0x30
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 ff4a 	bl	8006cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a26      	ldr	r2, [pc, #152]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b24      	ldr	r3, [pc, #144]	; (8001f1c <SystemClock_Config+0xc8>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e94:	2300      	movs	r3, #0
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <SystemClock_Config+0xcc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <SystemClock_Config+0xcc>)
 8001e9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <SystemClock_Config+0xcc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb8:	2310      	movs	r3, #16
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ec4:	2308      	movs	r3, #8
 8001ec6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ec8:	2364      	movs	r3, #100	; 0x64
 8001eca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f002 f9d3 	bl	8004284 <HAL_RCC_OscConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ee4:	f000 fe64 	bl	8002bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee8:	230f      	movs	r3, #15
 8001eea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eec:	2302      	movs	r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ef8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001efe:	f107 030c 	add.w	r3, r7, #12
 8001f02:	2103      	movs	r1, #3
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fc35 	bl	8004774 <HAL_RCC_ClockConfig>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f10:	f000 fe4e 	bl	8002bb0 <Error_Handler>
  }
}
 8001f14:	bf00      	nop
 8001f16:	3750      	adds	r7, #80	; 0x50
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000

08001f24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f2a:	4a13      	ldr	r2, [pc, #76]	; (8001f78 <MX_I2C1_Init+0x54>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_I2C1_Init+0x58>)
 8001f32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f4e:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f54:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f60:	4804      	ldr	r0, [pc, #16]	; (8001f74 <MX_I2C1_Init+0x50>)
 8001f62:	f002 f84b 	bl	8003ffc <HAL_I2C_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f6c:	f000 fe20 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000290 	.word	0x20000290
 8001f78:	40005400 	.word	0x40005400
 8001f7c:	000186a0 	.word	0x000186a0

08001f80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	; 0x30
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f86:	f107 030c 	add.w	r3, r7, #12
 8001f8a:	2224      	movs	r2, #36	; 0x24
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f004 feb4 	bl	8006cfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001f9e:	4a23      	ldr	r2, [pc, #140]	; (800202c <MX_TIM1_Init+0xac>)
 8001fa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8001fae:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001fb0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001fb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb6:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc2:	4b19      	ldr	r3, [pc, #100]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <MX_TIM1_Init+0xa8>)
 8001ff4:	f002 ffd0 	bl	8004f98 <HAL_TIM_Encoder_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ffe:	f000 fdd7 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4619      	mov	r1, r3
 800200e:	4806      	ldr	r0, [pc, #24]	; (8002028 <MX_TIM1_Init+0xa8>)
 8002010:	f003 fe74 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800201a:	f000 fdc9 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	3730      	adds	r7, #48	; 0x30
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000394 	.word	0x20000394
 800202c:	40010000 	.word	0x40010000

08002030 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002036:	f107 0308 	add.w	r3, r7, #8
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002044:	463b      	mov	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <MX_TIM2_Init+0xa0>)
 800204e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002052:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002054:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_TIM2_Init+0xa0>)
 8002056:	2263      	movs	r2, #99	; 0x63
 8002058:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <MX_TIM2_Init+0xa0>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <MX_TIM2_Init+0xa0>)
 8002062:	f04f 32ff 	mov.w	r2, #4294967295
 8002066:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <MX_TIM2_Init+0xa0>)
 800206a:	2200      	movs	r2, #0
 800206c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206e:	4b18      	ldr	r3, [pc, #96]	; (80020d0 <MX_TIM2_Init+0xa0>)
 8002070:	2200      	movs	r2, #0
 8002072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002074:	4816      	ldr	r0, [pc, #88]	; (80020d0 <MX_TIM2_Init+0xa0>)
 8002076:	f002 fd79 	bl	8004b6c <HAL_TIM_Base_Init>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002080:	f000 fd96 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002088:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800208a:	f107 0308 	add.w	r3, r7, #8
 800208e:	4619      	mov	r1, r3
 8002090:	480f      	ldr	r0, [pc, #60]	; (80020d0 <MX_TIM2_Init+0xa0>)
 8002092:	f003 fa7b 	bl	800558c <HAL_TIM_ConfigClockSource>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800209c:	f000 fd88 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <MX_TIM2_Init+0xa0>)
 80020ae:	f003 fe25 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020b8:	f000 fd7a 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <MX_TIM2_Init+0xa0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0201 	mvn.w	r2, #1
 80020c4:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003e0 	.word	0x200003e0

080020d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08e      	sub	sp, #56	; 0x38
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	f107 0320 	add.w	r3, r7, #32
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
 8002100:	615a      	str	r2, [r3, #20]
 8002102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <MX_TIM3_Init+0xe8>)
 8002108:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <MX_TIM3_Init+0xe4>)
 800210c:	2200      	movs	r2, #0
 800210e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002116:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002118:	f242 7210 	movw	r2, #10000	; 0x2710
 800211c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b26      	ldr	r3, [pc, #152]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002124:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800212a:	4823      	ldr	r0, [pc, #140]	; (80021b8 <MX_TIM3_Init+0xe4>)
 800212c:	f002 fd1e 	bl	8004b6c <HAL_TIM_Base_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002136:	f000 fd3b 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002144:	4619      	mov	r1, r3
 8002146:	481c      	ldr	r0, [pc, #112]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002148:	f003 fa20 	bl	800558c <HAL_TIM_ConfigClockSource>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002152:	f000 fd2d 	bl	8002bb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002156:	4818      	ldr	r0, [pc, #96]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002158:	f002 fe14 	bl	8004d84 <HAL_TIM_PWM_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002162:	f000 fd25 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	4619      	mov	r1, r3
 8002174:	4810      	ldr	r0, [pc, #64]	; (80021b8 <MX_TIM3_Init+0xe4>)
 8002176:	f003 fdc1 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002180:	f000 fd16 	bl	8002bb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002184:	2360      	movs	r3, #96	; 0x60
 8002186:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	220c      	movs	r2, #12
 8002198:	4619      	mov	r1, r3
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <MX_TIM3_Init+0xe4>)
 800219c:	f003 f938 	bl	8005410 <HAL_TIM_PWM_ConfigChannel>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021a6:	f000 fd03 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021aa:	4803      	ldr	r0, [pc, #12]	; (80021b8 <MX_TIM3_Init+0xe4>)
 80021ac:	f000 fe18 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 80021b0:	bf00      	nop
 80021b2:	3738      	adds	r7, #56	; 0x38
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	200002e8 	.word	0x200002e8
 80021bc:	40000400 	.word	0x40000400

080021c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	605a      	str	r2, [r3, #4]
 80021d0:	609a      	str	r2, [r3, #8]
 80021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d4:	463b      	mov	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <MX_TIM4_Init+0x94>)
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <MX_TIM4_Init+0x98>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <MX_TIM4_Init+0x94>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <MX_TIM4_Init+0x94>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <MX_TIM4_Init+0x94>)
 80021f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f6:	4b17      	ldr	r3, [pc, #92]	; (8002254 <MX_TIM4_Init+0x94>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fc:	4b15      	ldr	r3, [pc, #84]	; (8002254 <MX_TIM4_Init+0x94>)
 80021fe:	2200      	movs	r2, #0
 8002200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002202:	4814      	ldr	r0, [pc, #80]	; (8002254 <MX_TIM4_Init+0x94>)
 8002204:	f002 fcb2 	bl	8004b6c <HAL_TIM_Base_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800220e:	f000 fccf 	bl	8002bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002216:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002218:	f107 0308 	add.w	r3, r7, #8
 800221c:	4619      	mov	r1, r3
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_TIM4_Init+0x94>)
 8002220:	f003 f9b4 	bl	800558c <HAL_TIM_ConfigClockSource>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800222a:	f000 fcc1 	bl	8002bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222e:	2300      	movs	r3, #0
 8002230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002236:	463b      	mov	r3, r7
 8002238:	4619      	mov	r1, r3
 800223a:	4806      	ldr	r0, [pc, #24]	; (8002254 <MX_TIM4_Init+0x94>)
 800223c:	f003 fd5e 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002246:	f000 fcb3 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000248 	.word	0x20000248
 8002258:	40000800 	.word	0x40000800

0800225c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <MX_USART2_UART_Init+0x54>)
 8002264:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002268:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 800226c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002270:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002274:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <MX_USART2_UART_Init+0x50>)
 800227e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002286:	220c      	movs	r2, #12
 8002288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <MX_USART2_UART_Init+0x50>)
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002292:	2200      	movs	r2, #0
 8002294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002296:	4805      	ldr	r0, [pc, #20]	; (80022ac <MX_USART2_UART_Init+0x50>)
 8002298:	f003 fdb2 	bl	8005e00 <HAL_UART_Init>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80022a2:	f000 fc85 	bl	8002bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000428 	.word	0x20000428
 80022b0:	40004400 	.word	0x40004400

080022b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <MX_DMA_Init+0x4c>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <MX_DMA_Init+0x4c>)
 80022c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <MX_DMA_Init+0x4c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2010      	movs	r0, #16
 80022dc:	f001 f893 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022e0:	2010      	movs	r0, #16
 80022e2:	f001 f8ac 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	2011      	movs	r0, #17
 80022ec:	f001 f88b 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022f0:	2011      	movs	r0, #17
 80022f2:	f001 f8a4 	bl	800343e <HAL_NVIC_EnableIRQ>

}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800

08002304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08a      	sub	sp, #40	; 0x28
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <MX_GPIO_Init+0x138>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4a46      	ldr	r2, [pc, #280]	; (800243c <MX_GPIO_Init+0x138>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4b44      	ldr	r3, [pc, #272]	; (800243c <MX_GPIO_Init+0x138>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b40      	ldr	r3, [pc, #256]	; (800243c <MX_GPIO_Init+0x138>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	4a3f      	ldr	r2, [pc, #252]	; (800243c <MX_GPIO_Init+0x138>)
 8002340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002344:	6313      	str	r3, [r2, #48]	; 0x30
 8002346:	4b3d      	ldr	r3, [pc, #244]	; (800243c <MX_GPIO_Init+0x138>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	4b39      	ldr	r3, [pc, #228]	; (800243c <MX_GPIO_Init+0x138>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <MX_GPIO_Init+0x138>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <MX_GPIO_Init+0x138>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	4b32      	ldr	r3, [pc, #200]	; (800243c <MX_GPIO_Init+0x138>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a31      	ldr	r2, [pc, #196]	; (800243c <MX_GPIO_Init+0x138>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <MX_GPIO_Init+0x138>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	2120      	movs	r1, #32
 800238e:	482c      	ldr	r0, [pc, #176]	; (8002440 <MX_GPIO_Init+0x13c>)
 8002390:	f001 fdf6 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800239a:	482a      	ldr	r0, [pc, #168]	; (8002444 <MX_GPIO_Init+0x140>)
 800239c:	f001 fdf0 	bl	8003f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <MX_GPIO_Init+0x144>)
 80023a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4825      	ldr	r0, [pc, #148]	; (800244c <MX_GPIO_Init+0x148>)
 80023b6:	f001 fc5f 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 80023ba:	2381      	movs	r3, #129	; 0x81
 80023bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	481f      	ldr	r0, [pc, #124]	; (800244c <MX_GPIO_Init+0x148>)
 80023ce:	f001 fc53 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 80023d2:	2301      	movs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4816      	ldr	r0, [pc, #88]	; (8002440 <MX_GPIO_Init+0x13c>)
 80023e6:	f001 fc47 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80023ea:	2320      	movs	r3, #32
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480f      	ldr	r0, [pc, #60]	; (8002440 <MX_GPIO_Init+0x13c>)
 8002402:	f001 fc39 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800240a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002418:	f107 0314 	add.w	r3, r7, #20
 800241c:	4619      	mov	r1, r3
 800241e:	4809      	ldr	r0, [pc, #36]	; (8002444 <MX_GPIO_Init+0x140>)
 8002420:	f001 fc2a 	bl	8003c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	2028      	movs	r0, #40	; 0x28
 800242a:	f000 ffec 	bl	8003406 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800242e:	2028      	movs	r0, #40	; 0x28
 8002430:	f001 f805 	bl	800343e <HAL_NVIC_EnableIRQ>

}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	40020000 	.word	0x40020000
 8002444:	40020400 	.word	0x40020400
 8002448:	10210000 	.word	0x10210000
 800244c:	40020800 	.word	0x40020800

08002450 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8002450:	b5b0      	push	{r4, r5, r7, lr}
 8002452:	ed2d 8b02 	vpush	{d8}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT; //pulse
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <Encoder_Velocity_Update+0xa8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8002462:	f000 fb8b 	bl	8002b7c <micros>
 8002466:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <Encoder_Velocity_Update+0xac>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002474:	1a84      	subs	r4, r0, r2
 8002476:	eb61 0503 	sbc.w	r5, r1, r3
 800247a:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800247e:	4b20      	ldr	r3, [pc, #128]	; (8002500 <Encoder_Velocity_Update+0xb0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <Encoder_Velocity_Update+0xb4>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4293      	cmp	r3, r2
 8002492:	db06      	blt.n	80024a2 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <Encoder_Velocity_Update+0xb8>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	e00b      	b.n	80024ba <Encoder_Velocity_Update+0x6a>
		//EncoderPositionDiff -= 57344;
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	425b      	negs	r3, r3
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <Encoder_Velocity_Update+0xb4>)
 80024a8:	8812      	ldrh	r2, [r2, #0]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	db05      	blt.n	80024ba <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <Encoder_Velocity_Update+0xb8>)
 80024b0:	881b      	ldrh	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	4413      	add	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
		//EncoderPositionDiff += 57344;
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80024ba:	4a11      	ldr	r2, [pc, #68]	; (8002500 <Encoder_Velocity_Update+0xb0>)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <Encoder_Velocity_Update+0xac>)
 80024c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c6:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <Encoder_Velocity_Update+0xbc>)
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80024da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024de:	f7fe fbe9 	bl	8000cb4 <__aeabi_ul2f>
 80024e2:	ee07 0a10 	vmov	s14, r0
 80024e6:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 80024ea:	eeb0 0a67 	vmov.f32	s0, s15
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	ecbd 8b02 	vpop	{d8}
 80024f6:	bdb0      	pop	{r4, r5, r7, pc}
 80024f8:	20000394 	.word	0x20000394
 80024fc:	200001c8 	.word	0x200001c8
 8002500:	200001d0 	.word	0x200001d0
 8002504:	20000002 	.word	0x20000002
 8002508:	20000000 	.word	0x20000000
 800250c:	000f4240 	.word	0x000f4240

08002510 <UARTInit>:
	}


}
void UARTInit(UARTStucrture *uart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <UARTInit+0x4c>)
 800251a:	88db      	ldrh	r3, [r3, #6]
 800251c:	4619      	mov	r1, r3
 800251e:	2001      	movs	r0, #1
 8002520:	f004 fbac 	bl	8006c7c <calloc>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <UARTInit+0x4c>)
 800252e:	889b      	ldrh	r3, [r3, #4]
 8002530:	4619      	mov	r1, r3
 8002532:	2001      	movs	r0, #1
 8002534:	f004 fba2 	bl	8006c7c <calloc>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	81da      	strh	r2, [r3, #14]

}
 8002552:	bf00      	nop
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001a8 	.word	0x200001a8

08002560 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6919      	ldr	r1, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	88db      	ldrh	r3, [r3, #6]
 8002574:	461a      	mov	r2, r3
 8002576:	f003 fcfd 	bl	8005f74 <HAL_UART_Receive_DMA>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	88db      	ldrh	r3, [r3, #6]
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	1ad3      	subs	r3, r2, r3
}
 800259c:	4618      	mov	r0, r3
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80025b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b4:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8a9b      	ldrh	r3, [r3, #20]
 80025ba:	461c      	mov	r4, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ffe0 	bl	8002582 <UARTGetRxHead>
 80025c2:	4603      	mov	r3, r0
 80025c4:	429c      	cmp	r4, r3
 80025c6:	d013      	beq.n	80025f0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	8a92      	ldrh	r2, [r2, #20]
 80025d0:	4413      	add	r3, r2
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8a9b      	ldrh	r3, [r3, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	88d2      	ldrh	r2, [r2, #6]
 80025e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80025e4:	fb02 f201 	mul.w	r2, r2, r1
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80025f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd90      	pop	{r4, r7, pc}

080025fc <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	d13d      	bne.n	800268e <UARTTxDumpBuffer+0x92>
 8002612:	4b21      	ldr	r3, [pc, #132]	; (8002698 <UARTTxDumpBuffer+0x9c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d139      	bne.n	800268e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <UARTTxDumpBuffer+0x9c>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	89da      	ldrh	r2, [r3, #14]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	899b      	ldrh	r3, [r3, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d02d      	beq.n	8002688 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	89da      	ldrh	r2, [r3, #14]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002634:	429a      	cmp	r2, r3
 8002636:	d906      	bls.n	8002646 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	89da      	ldrh	r2, [r3, #14]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	b29b      	uxth	r3, r3
 8002644:	e005      	b.n	8002652 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	889a      	ldrh	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	8992      	ldrh	r2, [r2, #12]
 8002660:	4413      	add	r3, r2
 8002662:	89fa      	ldrh	r2, [r7, #14]
 8002664:	4619      	mov	r1, r3
 8002666:	f003 fc19 	bl	8005e9c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	899b      	ldrh	r3, [r3, #12]
 800266e:	461a      	mov	r2, r3
 8002670:	89fb      	ldrh	r3, [r7, #14]
 8002672:	4413      	add	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	8892      	ldrh	r2, [r2, #4]
 8002678:	fb93 f1f2 	sdiv	r1, r3, r2
 800267c:	fb02 f201 	mul.w	r2, r2, r1
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <UARTTxDumpBuffer+0x9c>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
	}
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200001d4 	.word	0x200001d4

0800269c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	889b      	ldrh	r3, [r3, #4]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	4293      	cmp	r3, r2
 80026b2:	bf28      	it	cs
 80026b4:	4613      	movcs	r3, r2
 80026b6:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80026b8:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	889b      	ldrh	r3, [r3, #4]
 80026be:	4619      	mov	r1, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	89db      	ldrh	r3, [r3, #14]
 80026c4:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80026c6:	4293      	cmp	r3, r2
 80026c8:	bfa8      	it	ge
 80026ca:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80026cc:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	89d2      	ldrh	r2, [r2, #14]
 80026d6:	4413      	add	r3, r2
 80026d8:	8aba      	ldrh	r2, [r7, #20]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 faff 	bl	8006ce0 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	89db      	ldrh	r3, [r3, #14]
 80026e6:	461a      	mov	r2, r3
 80026e8:	8afb      	ldrh	r3, [r7, #22]
 80026ea:	4413      	add	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	8892      	ldrh	r2, [r2, #4]
 80026f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80026f4:	fb02 f201 	mul.w	r2, r2, r1
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002700:	8afa      	ldrh	r2, [r7, #22]
 8002702:	8abb      	ldrh	r3, [r7, #20]
 8002704:	429a      	cmp	r2, r3
 8002706:	d00a      	beq.n	800271e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6898      	ldr	r0, [r3, #8]
 800270c:	8abb      	ldrh	r3, [r7, #20]
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002712:	8afa      	ldrh	r2, [r7, #22]
 8002714:	8abb      	ldrh	r3, [r7, #20]
 8002716:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002718:	461a      	mov	r2, r3
 800271a:	f004 fae1 	bl	8006ce0 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff ff6c 	bl	80025fc <UARTTxDumpBuffer>

}
 8002724:	bf00      	nop
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]

	switch (State)
 8002738:	4baa      	ldr	r3, [pc, #680]	; (80029e4 <UART_Protocol+0x2b8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b03      	cmp	r3, #3
 800273e:	f200 817a 	bhi.w	8002a36 <UART_Protocol+0x30a>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <UART_Protocol+0x1c>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	08002759 	.word	0x08002759
 800274c:	0800289f 	.word	0x0800289f
 8002750:	080028af 	.word	0x080028af
 8002754:	08002923 	.word	0x08002923
	{
	case Start_Mode:
		Mode = dataIn;
 8002758:	887b      	ldrh	r3, [r7, #2]
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4ba2      	ldr	r3, [pc, #648]	; (80029e8 <UART_Protocol+0x2bc>)
 800275e:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8002760:	4ba1      	ldr	r3, [pc, #644]	; (80029e8 <UART_Protocol+0x2bc>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	3b91      	subs	r3, #145	; 0x91
 8002766:	2b0d      	cmp	r3, #13
 8002768:	f200 8082 	bhi.w	8002870 <UART_Protocol+0x144>
 800276c:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <UART_Protocol+0x48>)
 800276e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002772:	bf00      	nop
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027bb 	.word	0x080027bb
 800277c:	080027c9 	.word	0x080027c9
 8002780:	080027d7 	.word	0x080027d7
 8002784:	080027e5 	.word	0x080027e5
 8002788:	080027f3 	.word	0x080027f3
 800278c:	08002801 	.word	0x08002801
 8002790:	0800280f 	.word	0x0800280f
 8002794:	0800281d 	.word	0x0800281d
 8002798:	0800282b 	.word	0x0800282b
 800279c:	08002839 	.word	0x08002839
 80027a0:	08002847 	.word	0x08002847
 80027a4:	08002855 	.word	0x08002855
 80027a8:	08002863 	.word	0x08002863
		{
		case Test_Command:
			Frame = 2;
 80027ac:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <UART_Protocol+0x2c0>)
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 80027b2:	4b8c      	ldr	r3, [pc, #560]	; (80029e4 <UART_Protocol+0x2b8>)
 80027b4:	2202      	movs	r2, #2
 80027b6:	701a      	strb	r2, [r3, #0]
			break;
 80027b8:	e070      	b.n	800289c <UART_Protocol+0x170>
		case Connect_MCU:
			Frame = 1;
 80027ba:	4b8c      	ldr	r3, [pc, #560]	; (80029ec <UART_Protocol+0x2c0>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80027c0:	4b88      	ldr	r3, [pc, #544]	; (80029e4 <UART_Protocol+0x2b8>)
 80027c2:	2203      	movs	r2, #3
 80027c4:	701a      	strb	r2, [r3, #0]
			break;
 80027c6:	e069      	b.n	800289c <UART_Protocol+0x170>
		case Disconnect_MCU:
			Frame = 1;
 80027c8:	4b88      	ldr	r3, [pc, #544]	; (80029ec <UART_Protocol+0x2c0>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80027ce:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <UART_Protocol+0x2b8>)
 80027d0:	2203      	movs	r2, #3
 80027d2:	701a      	strb	r2, [r3, #0]
			break;
 80027d4:	e062      	b.n	800289c <UART_Protocol+0x170>
		case Velocity_Set:
			Frame = 2;
 80027d6:	4b85      	ldr	r3, [pc, #532]	; (80029ec <UART_Protocol+0x2c0>)
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 80027dc:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <UART_Protocol+0x2b8>)
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
			break;
 80027e2:	e05b      	b.n	800289c <UART_Protocol+0x170>
		case Position_Set:
			Frame = 2;
 80027e4:	4b81      	ldr	r3, [pc, #516]	; (80029ec <UART_Protocol+0x2c0>)
 80027e6:	2202      	movs	r2, #2
 80027e8:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 80027ea:	4b7e      	ldr	r3, [pc, #504]	; (80029e4 <UART_Protocol+0x2b8>)
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]
			break;
 80027f0:	e054      	b.n	800289c <UART_Protocol+0x170>
		case Goal_1_Set:
			Frame = 2;
 80027f2:	4b7e      	ldr	r3, [pc, #504]	; (80029ec <UART_Protocol+0x2c0>)
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 80027f8:	4b7a      	ldr	r3, [pc, #488]	; (80029e4 <UART_Protocol+0x2b8>)
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
			break;
 80027fe:	e04d      	b.n	800289c <UART_Protocol+0x170>
		case Goal_N_Set:
			Frame = 3;
 8002800:	4b7a      	ldr	r3, [pc, #488]	; (80029ec <UART_Protocol+0x2c0>)
 8002802:	2203      	movs	r2, #3
 8002804:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <UART_Protocol+0x2b8>)
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]
			break;
 800280c:	e046      	b.n	800289c <UART_Protocol+0x170>
		case Go_to_Goal:
			Frame = 1;
 800280e:	4b77      	ldr	r3, [pc, #476]	; (80029ec <UART_Protocol+0x2c0>)
 8002810:	2201      	movs	r2, #1
 8002812:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002814:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <UART_Protocol+0x2b8>)
 8002816:	2203      	movs	r2, #3
 8002818:	701a      	strb	r2, [r3, #0]
			break;
 800281a:	e03f      	b.n	800289c <UART_Protocol+0x170>
		case Station_Request:
			Frame = 1;
 800281c:	4b73      	ldr	r3, [pc, #460]	; (80029ec <UART_Protocol+0x2c0>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002822:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <UART_Protocol+0x2b8>)
 8002824:	2203      	movs	r2, #3
 8002826:	701a      	strb	r2, [r3, #0]
			break;
 8002828:	e038      	b.n	800289c <UART_Protocol+0x170>
		case Position_Request:
			Frame = 1;
 800282a:	4b70      	ldr	r3, [pc, #448]	; (80029ec <UART_Protocol+0x2c0>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002830:	4b6c      	ldr	r3, [pc, #432]	; (80029e4 <UART_Protocol+0x2b8>)
 8002832:	2203      	movs	r2, #3
 8002834:	701a      	strb	r2, [r3, #0]
			break;
 8002836:	e031      	b.n	800289c <UART_Protocol+0x170>
		case Velocity_Request:
			Frame = 1;
 8002838:	4b6c      	ldr	r3, [pc, #432]	; (80029ec <UART_Protocol+0x2c0>)
 800283a:	2201      	movs	r2, #1
 800283c:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800283e:	4b69      	ldr	r3, [pc, #420]	; (80029e4 <UART_Protocol+0x2b8>)
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
			break;
 8002844:	e02a      	b.n	800289c <UART_Protocol+0x170>
		case Gripper_On:
			Frame = 1;
 8002846:	4b69      	ldr	r3, [pc, #420]	; (80029ec <UART_Protocol+0x2c0>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800284c:	4b65      	ldr	r3, [pc, #404]	; (80029e4 <UART_Protocol+0x2b8>)
 800284e:	2203      	movs	r2, #3
 8002850:	701a      	strb	r2, [r3, #0]
			break;
 8002852:	e023      	b.n	800289c <UART_Protocol+0x170>
		case Gripper_Off:
			Frame = 1;
 8002854:	4b65      	ldr	r3, [pc, #404]	; (80029ec <UART_Protocol+0x2c0>)
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800285a:	4b62      	ldr	r3, [pc, #392]	; (80029e4 <UART_Protocol+0x2b8>)
 800285c:	2203      	movs	r2, #3
 800285e:	701a      	strb	r2, [r3, #0]
			break;
 8002860:	e01c      	b.n	800289c <UART_Protocol+0x170>
		case Home_Set:
			Frame = 1;
 8002862:	4b62      	ldr	r3, [pc, #392]	; (80029ec <UART_Protocol+0x2c0>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002868:	4b5e      	ldr	r3, [pc, #376]	; (80029e4 <UART_Protocol+0x2b8>)
 800286a:	2203      	movs	r2, #3
 800286c:	701a      	strb	r2, [r3, #0]
			break;
 800286e:	e015      	b.n	800289c <UART_Protocol+0x170>
		default:
			State = Start_Mode;
 8002870:	4b5c      	ldr	r3, [pc, #368]	; (80029e4 <UART_Protocol+0x2b8>)
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 8002876:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <UART_Protocol+0x2bc>)
 8002878:	2290      	movs	r2, #144	; 0x90
 800287a:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 800287c:	4b5b      	ldr	r3, [pc, #364]	; (80029ec <UART_Protocol+0x2c0>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
			Data = 0;
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <UART_Protocol+0x2c4>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 8002888:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <UART_Protocol+0x2c8>)
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
			N = 0;
 800288e:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <UART_Protocol+0x2cc>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
			len = 0;
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <UART_Protocol+0x2d0>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
			break;
 800289a:	bf00      	nop
		break;
		}
		break;
 800289c:	e0cb      	b.n	8002a36 <UART_Protocol+0x30a>
	case N_Station:
		N = dataIn;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	4b55      	ldr	r3, [pc, #340]	; (80029f8 <UART_Protocol+0x2cc>)
 80028a4:	701a      	strb	r2, [r3, #0]
		State = Data_Frame;
 80028a6:	4b4f      	ldr	r3, [pc, #316]	; (80029e4 <UART_Protocol+0x2b8>)
 80028a8:	2202      	movs	r2, #2
 80028aa:	701a      	strb	r2, [r3, #0]
		break;
 80028ac:	e0c3      	b.n	8002a36 <UART_Protocol+0x30a>
	case Data_Frame:
		Data = dataIn;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <UART_Protocol+0x2c4>)
 80028b4:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 80028b6:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <UART_Protocol+0x2bc>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	3b91      	subs	r3, #145	; 0x91
 80028bc:	2b06      	cmp	r3, #6
 80028be:	f200 80b9 	bhi.w	8002a34 <UART_Protocol+0x308>
 80028c2:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <UART_Protocol+0x19c>)
 80028c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c8:	080028e5 	.word	0x080028e5
 80028cc:	08002a35 	.word	0x08002a35
 80028d0:	08002a35 	.word	0x08002a35
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	080028f5 	.word	0x080028f5
 80028dc:	080028fd 	.word	0x080028fd
 80028e0:	08002905 	.word	0x08002905
		{
		case Test_Command:
			State = Check_Sum;
 80028e4:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <UART_Protocol+0x2b8>)
 80028e6:	2203      	movs	r2, #3
 80028e8:	701a      	strb	r2, [r3, #0]
			break;
 80028ea:	e019      	b.n	8002920 <UART_Protocol+0x1f4>
		case Velocity_Set:
			State = Check_Sum;
 80028ec:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <UART_Protocol+0x2b8>)
 80028ee:	2203      	movs	r2, #3
 80028f0:	701a      	strb	r2, [r3, #0]
			break;
 80028f2:	e015      	b.n	8002920 <UART_Protocol+0x1f4>
		case Position_Set:
			State = Check_Sum;
 80028f4:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <UART_Protocol+0x2b8>)
 80028f6:	2203      	movs	r2, #3
 80028f8:	701a      	strb	r2, [r3, #0]
			break;
 80028fa:	e011      	b.n	8002920 <UART_Protocol+0x1f4>
		case Goal_1_Set:
			State = Check_Sum;
 80028fc:	4b39      	ldr	r3, [pc, #228]	; (80029e4 <UART_Protocol+0x2b8>)
 80028fe:	2203      	movs	r2, #3
 8002900:	701a      	strb	r2, [r3, #0]
			break;
 8002902:	e00d      	b.n	8002920 <UART_Protocol+0x1f4>
		case Goal_N_Set:
			N -= 1;
 8002904:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <UART_Protocol+0x2cc>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	3b01      	subs	r3, #1
 800290a:	b2da      	uxtb	r2, r3
 800290c:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <UART_Protocol+0x2cc>)
 800290e:	701a      	strb	r2, [r3, #0]
			if (N == 0)
 8002910:	4b39      	ldr	r3, [pc, #228]	; (80029f8 <UART_Protocol+0x2cc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d102      	bne.n	800291e <UART_Protocol+0x1f2>
			{
				State = Check_Sum;
 8002918:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <UART_Protocol+0x2b8>)
 800291a:	2203      	movs	r2, #3
 800291c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800291e:	bf00      	nop
		break;
		}

		break;
 8002920:	e088      	b.n	8002a34 <UART_Protocol+0x308>
	case Check_Sum:
		Sum = dataIn;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <UART_Protocol+0x2c8>)
 8002928:	701a      	strb	r2, [r3, #0]
		switch (Frame)
 800292a:	4b30      	ldr	r3, [pc, #192]	; (80029ec <UART_Protocol+0x2c0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d04c      	beq.n	80029cc <UART_Protocol+0x2a0>
 8002932:	2b03      	cmp	r3, #3
 8002934:	dc7a      	bgt.n	8002a2c <UART_Protocol+0x300>
 8002936:	2b01      	cmp	r3, #1
 8002938:	d002      	beq.n	8002940 <UART_Protocol+0x214>
 800293a:	2b02      	cmp	r3, #2
 800293c:	d021      	beq.n	8002982 <UART_Protocol+0x256>
 800293e:	e075      	b.n	8002a2c <UART_Protocol+0x300>
		{
		case 1:
			if (Sum == (uint8_t)~Mode)
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <UART_Protocol+0x2bc>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	43db      	mvns	r3, r3
 8002946:	b2da      	uxtb	r2, r3
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <UART_Protocol+0x2c8>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d102      	bne.n	8002956 <UART_Protocol+0x22a>
			{
				UART_Do_Command();
 8002950:	f000 f884 	bl	8002a5c <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8002954:	e06a      	b.n	8002a2c <UART_Protocol+0x300>
				State = Start_Mode;
 8002956:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <UART_Protocol+0x2b8>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <UART_Protocol+0x2bc>)
 800295e:	2290      	movs	r2, #144	; 0x90
 8002960:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8002962:	4b22      	ldr	r3, [pc, #136]	; (80029ec <UART_Protocol+0x2c0>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <UART_Protocol+0x2c4>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 800296e:	4b21      	ldr	r3, [pc, #132]	; (80029f4 <UART_Protocol+0x2c8>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
				N = 0;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <UART_Protocol+0x2cc>)
 8002976:	2200      	movs	r2, #0
 8002978:	701a      	strb	r2, [r3, #0]
				len = 0;
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <UART_Protocol+0x2d0>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
			break;
 8002980:	e054      	b.n	8002a2c <UART_Protocol+0x300>
		case 2:
			if (Sum == (uint8_t)~(Mode+Data))
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <UART_Protocol+0x2bc>)
 8002984:	781a      	ldrb	r2, [r3, #0]
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <UART_Protocol+0x2c4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4413      	add	r3, r2
 800298c:	b2db      	uxtb	r3, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <UART_Protocol+0x2c8>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	429a      	cmp	r2, r3
 8002998:	d102      	bne.n	80029a0 <UART_Protocol+0x274>
			{
				UART_Do_Command();
 800299a:	f000 f85f 	bl	8002a5c <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 800299e:	e045      	b.n	8002a2c <UART_Protocol+0x300>
				State = Start_Mode;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <UART_Protocol+0x2b8>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <UART_Protocol+0x2bc>)
 80029a8:	2290      	movs	r2, #144	; 0x90
 80029aa:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <UART_Protocol+0x2c0>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
				Data = 0;
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <UART_Protocol+0x2c4>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 80029b8:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <UART_Protocol+0x2c8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	701a      	strb	r2, [r3, #0]
				N = 0;
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <UART_Protocol+0x2cc>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
				len = 0;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <UART_Protocol+0x2d0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
			break;
 80029ca:	e02f      	b.n	8002a2c <UART_Protocol+0x300>
		case 3:

			if (Sum == (uint8_t)~(Mode))
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <UART_Protocol+0x2bc>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <UART_Protocol+0x2c8>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d111      	bne.n	8002a00 <UART_Protocol+0x2d4>
			{
				UART_Do_Command();
 80029dc:	f000 f83e 	bl	8002a5c <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 80029e0:	e023      	b.n	8002a2a <UART_Protocol+0x2fe>
 80029e2:	bf00      	nop
 80029e4:	200001c0 	.word	0x200001c0
 80029e8:	20000034 	.word	0x20000034
 80029ec:	200002e4 	.word	0x200002e4
 80029f0:	20000390 	.word	0x20000390
 80029f4:	200003dc 	.word	0x200003dc
 80029f8:	200001e4 	.word	0x200001e4
 80029fc:	2000046c 	.word	0x2000046c
				State = Start_Mode;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <UART_Protocol+0x314>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <UART_Protocol+0x318>)
 8002a08:	2290      	movs	r2, #144	; 0x90
 8002a0a:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <UART_Protocol+0x31c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <UART_Protocol+0x320>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <UART_Protocol+0x324>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
				N = 0;
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <UART_Protocol+0x328>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
				len = 0;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <UART_Protocol+0x32c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
			break;
 8002a2a:	bf00      	nop
		break;
		}

		State = Start_Mode;
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <UART_Protocol+0x314>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
		break;
 8002a32:	e000      	b.n	8002a36 <UART_Protocol+0x30a>
		break;
 8002a34:	bf00      	nop

	break;
	}

}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200001c0 	.word	0x200001c0
 8002a44:	20000034 	.word	0x20000034
 8002a48:	200002e4 	.word	0x200002e4
 8002a4c:	20000390 	.word	0x20000390
 8002a50:	200003dc 	.word	0x200003dc
 8002a54:	200001e4 	.word	0x200001e4
 8002a58:	2000046c 	.word	0x2000046c

08002a5c <UART_Do_Command>:
void UART_Do_Command()
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
	if (Frame == 1)
 8002a62:	4b31      	ldr	r3, [pc, #196]	; (8002b28 <UART_Do_Command+0xcc>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d113      	bne.n	8002a92 <UART_Do_Command+0x36>
	{
		uint8_t Test[] = {0, 0};
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	80bb      	strh	r3, [r7, #4]
		Test[0] = Mode;
 8002a6e:	4b2f      	ldr	r3, [pc, #188]	; (8002b2c <UART_Do_Command+0xd0>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	713b      	strb	r3, [r7, #4]
		Test[1] = Sum;
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <UART_Do_Command+0xd4>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	717b      	strb	r3, [r7, #5]
		UARTTxWrite(&UART2, Test, len);
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	; (8002b34 <UART_Do_Command+0xd8>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	1d3b      	adds	r3, r7, #4
 8002a82:	4619      	mov	r1, r3
 8002a84:	482c      	ldr	r0, [pc, #176]	; (8002b38 <UART_Do_Command+0xdc>)
 8002a86:	f7ff fe09 	bl	800269c <UARTTxWrite>
		len = 0;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <UART_Do_Command+0xd8>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e01f      	b.n	8002ad2 <UART_Do_Command+0x76>
	}
	else if (Frame == 2)
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <UART_Do_Command+0xcc>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d11b      	bne.n	8002ad2 <UART_Do_Command+0x76>
	{
		uint8_t Test[] = {0, 0, 0};
 8002a9a:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <UART_Do_Command+0xe0>)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	8019      	strh	r1, [r3, #0]
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	0c12      	lsrs	r2, r2, #16
 8002aa8:	701a      	strb	r2, [r3, #0]
		Test[0] = Mode;
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <UART_Do_Command+0xd0>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	703b      	strb	r3, [r7, #0]
		Test[1] = Data;
 8002ab0:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <UART_Do_Command+0xe4>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	707b      	strb	r3, [r7, #1]
		Test[2] = Sum;
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <UART_Do_Command+0xd4>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	70bb      	strb	r3, [r7, #2]
		UARTTxWrite(&UART2, Test, len);
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <UART_Do_Command+0xd8>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	463b      	mov	r3, r7
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	481c      	ldr	r0, [pc, #112]	; (8002b38 <UART_Do_Command+0xdc>)
 8002ac8:	f7ff fde8 	bl	800269c <UARTTxWrite>
		len = 0;
 8002acc:	4b19      	ldr	r3, [pc, #100]	; (8002b34 <UART_Do_Command+0xd8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
	{


	}

	switch (Mode)
 8002ad2:	4b16      	ldr	r3, [pc, #88]	; (8002b2c <UART_Do_Command+0xd0>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	3b91      	subs	r3, #145	; 0x91
 8002ad8:	2b0d      	cmp	r3, #13
 8002ada:	d820      	bhi.n	8002b1e <UART_Do_Command+0xc2>
 8002adc:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <UART_Do_Command+0x88>)
 8002ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae2:	bf00      	nop
 8002ae4:	08002b1d 	.word	0x08002b1d
 8002ae8:	08002b1d 	.word	0x08002b1d
 8002aec:	08002b1d 	.word	0x08002b1d
 8002af0:	08002b1d 	.word	0x08002b1d
 8002af4:	08002b1d 	.word	0x08002b1d
 8002af8:	08002b1d 	.word	0x08002b1d
 8002afc:	08002b1d 	.word	0x08002b1d
 8002b00:	08002b1d 	.word	0x08002b1d
 8002b04:	08002b1d 	.word	0x08002b1d
 8002b08:	08002b1d 	.word	0x08002b1d
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	08002b1d 	.word	0x08002b1d
 8002b14:	08002b1d 	.word	0x08002b1d
 8002b18:	08002b1d 	.word	0x08002b1d
	{
	case Test_Command:
		break;
 8002b1c:	bf00      	nop
	}




}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200002e4 	.word	0x200002e4
 8002b2c:	20000034 	.word	0x20000034
 8002b30:	200003dc 	.word	0x200003dc
 8002b34:	2000046c 	.word	0x2000046c
 8002b38:	200001a8 	.word	0x200001a8
 8002b3c:	08007708 	.word	0x08007708
 8002b40:	20000390 	.word	0x20000390

08002b44 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b4b0      	push	{r4, r5, r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d109      	bne.n	8002b68 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002b54:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8002b5e:	f143 0500 	adc.w	r5, r3, #0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b64:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bcb0      	pop	{r4, r5, r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	200003e0 	.word	0x200003e0
 8002b78:	200000d0 	.word	0x200000d0

08002b7c <micros>:
uint64_t micros()
{
 8002b7c:	b4b0      	push	{r4, r5, r7}
 8002b7e:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <micros+0x2c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	4618      	mov	r0, r3
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	4b07      	ldr	r3, [pc, #28]	; (8002bac <micros+0x30>)
 8002b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b92:	1884      	adds	r4, r0, r2
 8002b94:	eb41 0503 	adc.w	r5, r1, r3
 8002b98:	4622      	mov	r2, r4
 8002b9a:	462b      	mov	r3, r5
}
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bcb0      	pop	{r4, r5, r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200003e0 	.word	0x200003e0
 8002bac:	200000d0 	.word	0x200000d0

08002bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bb4:	b672      	cpsid	i
}
 8002bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <Error_Handler+0x8>
	...

08002bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <HAL_MspInit+0x4c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <HAL_MspInit+0x4c>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <HAL_MspInit+0x4c>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_MspInit+0x4c>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <HAL_MspInit+0x4c>)
 8002be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bec:	6413      	str	r3, [r2, #64]	; 0x40
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_MspInit+0x4c>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bfa:	2007      	movs	r0, #7
 8002bfc:	f000 fbf8 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40023800 	.word	0x40023800

08002c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a19      	ldr	r2, [pc, #100]	; (8002c90 <HAL_I2C_MspInit+0x84>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d12c      	bne.n	8002c88 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c50:	2312      	movs	r3, #18
 8002c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c54:	2301      	movs	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c5c:	2304      	movs	r3, #4
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	4619      	mov	r1, r3
 8002c66:	480c      	ldr	r0, [pc, #48]	; (8002c98 <HAL_I2C_MspInit+0x8c>)
 8002c68:	f001 f806 	bl	8003c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a07      	ldr	r2, [pc, #28]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b05      	ldr	r3, [pc, #20]	; (8002c94 <HAL_I2C_MspInit+0x88>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	; 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40005400 	.word	0x40005400
 8002c94:	40023800 	.word	0x40023800
 8002c98:	40020400 	.word	0x40020400

08002c9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08a      	sub	sp, #40	; 0x28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a19      	ldr	r2, [pc, #100]	; (8002d20 <HAL_TIM_Encoder_MspInit+0x84>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d12c      	bne.n	8002d18 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	4a17      	ldr	r2, [pc, #92]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8002cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0c:	f107 0314 	add.w	r3, r7, #20
 8002d10:	4619      	mov	r1, r3
 8002d12:	4805      	ldr	r0, [pc, #20]	; (8002d28 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002d14:	f000 ffb0 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40010000 	.word	0x40010000
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40020000 	.word	0x40020000

08002d2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d116      	bne.n	8002d6c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	4a23      	ldr	r2, [pc, #140]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	201c      	movs	r0, #28
 8002d60:	f000 fb51 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d64:	201c      	movs	r0, #28
 8002d66:	f000 fb6a 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d6a:	e02e      	b.n	8002dca <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <HAL_TIM_Base_MspInit+0xac>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b13      	ldr	r3, [pc, #76]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	693b      	ldr	r3, [r7, #16]
}
 8002d92:	e01a      	b.n	8002dca <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_TIM_Base_MspInit+0xb0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d115      	bne.n	8002dca <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6413      	str	r3, [r2, #64]	; 0x40
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <HAL_TIM_Base_MspInit+0xa8>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	201e      	movs	r0, #30
 8002dc0:	f000 fb21 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002dc4:	201e      	movs	r0, #30
 8002dc6:	f000 fb3a 	bl	800343e <HAL_NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3718      	adds	r7, #24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40000800 	.word	0x40000800

08002de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 030c 	add.w	r3, r7, #12
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_TIM_MspPostInit+0x68>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d11d      	bne.n	8002e3e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_TIM_MspPostInit+0x6c>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a10      	ldr	r2, [pc, #64]	; (8002e4c <HAL_TIM_MspPostInit+0x6c>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_TIM_MspPostInit+0x6c>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e32:	f107 030c 	add.w	r3, r7, #12
 8002e36:	4619      	mov	r1, r3
 8002e38:	4805      	ldr	r0, [pc, #20]	; (8002e50 <HAL_TIM_MspPostInit+0x70>)
 8002e3a:	f000 ff1d 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	40020400 	.word	0x40020400

08002e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a4c      	ldr	r2, [pc, #304]	; (8002fa4 <HAL_UART_MspInit+0x150>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f040 8091 	bne.w	8002f9a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	4b4a      	ldr	r3, [pc, #296]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	4a49      	ldr	r2, [pc, #292]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e86:	6413      	str	r3, [r2, #64]	; 0x40
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	4a42      	ldr	r2, [pc, #264]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea4:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_UART_MspInit+0x154>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ec0:	2307      	movs	r3, #7
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4838      	ldr	r0, [pc, #224]	; (8002fac <HAL_UART_MspInit+0x158>)
 8002ecc:	f000 fed4 	bl	8003c78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002ed2:	4a38      	ldr	r2, [pc, #224]	; (8002fb4 <HAL_UART_MspInit+0x160>)
 8002ed4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002ed6:	4b36      	ldr	r3, [pc, #216]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002ed8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002edc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ede:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002eea:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ef0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f04:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f06:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0c:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f12:	4827      	ldr	r0, [pc, #156]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f14:	f000 faae 	bl	8003474 <HAL_DMA_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002f1e:	f7ff fe47 	bl	8002bb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_UART_MspInit+0x15c>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f30:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <HAL_UART_MspInit+0x168>)
 8002f32:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002f34:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f3a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f3e:	2240      	movs	r2, #64	; 0x40
 8002f40:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f48:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f56:	4b18      	ldr	r3, [pc, #96]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f5c:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f6e:	4812      	ldr	r0, [pc, #72]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f70:	f000 fa80 	bl	8003474 <HAL_DMA_Init>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002f7a:	f7ff fe19 	bl	8002bb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f82:	635a      	str	r2, [r3, #52]	; 0x34
 8002f84:	4a0c      	ldr	r2, [pc, #48]	; (8002fb8 <HAL_UART_MspInit+0x164>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	2026      	movs	r0, #38	; 0x26
 8002f90:	f000 fa39 	bl	8003406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f94:	2026      	movs	r0, #38	; 0x26
 8002f96:	f000 fa52 	bl	800343e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002f9a:	bf00      	nop
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000
 8002fb0:	200001e8 	.word	0x200001e8
 8002fb4:	40026088 	.word	0x40026088
 8002fb8:	20000330 	.word	0x20000330
 8002fbc:	400260a0 	.word	0x400260a0

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <NMI_Handler+0x4>

08002fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <HardFault_Handler+0x4>

08002fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fd0:	e7fe      	b.n	8002fd0 <MemManage_Handler+0x4>

08002fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fd6:	e7fe      	b.n	8002fd6 <BusFault_Handler+0x4>

08002fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fdc:	e7fe      	b.n	8002fdc <UsageFault_Handler+0x4>

08002fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800300c:	f000 f900 	bl	8003210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003010:	bf00      	nop
 8003012:	bd80      	pop	{r7, pc}

08003014 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <DMA1_Stream5_IRQHandler+0x10>)
 800301a:	f000 fbc3 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200001e8 	.word	0x200001e8

08003028 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Stream6_IRQHandler+0x10>)
 800302e:	f000 fbb9 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000330 	.word	0x20000330

0800303c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM2_IRQHandler+0x10>)
 8003042:	f002 f8dd 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	200003e0 	.word	0x200003e0

08003050 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <TIM4_IRQHandler+0x10>)
 8003056:	f002 f8d3 	bl	8005200 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000248 	.word	0x20000248

08003064 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <USART2_IRQHandler+0x10>)
 800306a:	f002 ffb3 	bl	8005fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20000428 	.word	0x20000428

08003078 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800307c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003080:	f000 ff98 	bl	8003fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}

08003088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <_sbrk+0x5c>)
 8003092:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <_sbrk+0x60>)
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030a4:	4b11      	ldr	r3, [pc, #68]	; (80030ec <_sbrk+0x64>)
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <_sbrk+0x68>)
 80030a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030aa:	4b10      	ldr	r3, [pc, #64]	; (80030ec <_sbrk+0x64>)
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d207      	bcs.n	80030c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030b8:	f003 fde8 	bl	8006c8c <__errno>
 80030bc:	4603      	mov	r3, r0
 80030be:	220c      	movs	r2, #12
 80030c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030c2:	f04f 33ff 	mov.w	r3, #4294967295
 80030c6:	e009      	b.n	80030dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <_sbrk+0x64>)
 80030d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3718      	adds	r7, #24
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20020000 	.word	0x20020000
 80030e8:	00000400 	.word	0x00000400
 80030ec:	200001d8 	.word	0x200001d8
 80030f0:	20000488 	.word	0x20000488

080030f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030f8:	4b06      	ldr	r3, [pc, #24]	; (8003114 <SystemInit+0x20>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	4a05      	ldr	r2, [pc, #20]	; (8003114 <SystemInit+0x20>)
 8003100:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003104:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003118:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003150 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800311c:	480d      	ldr	r0, [pc, #52]	; (8003154 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800311e:	490e      	ldr	r1, [pc, #56]	; (8003158 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003120:	4a0e      	ldr	r2, [pc, #56]	; (800315c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003124:	e002      	b.n	800312c <LoopCopyDataInit>

08003126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800312a:	3304      	adds	r3, #4

0800312c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800312c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800312e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003130:	d3f9      	bcc.n	8003126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003132:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003134:	4c0b      	ldr	r4, [pc, #44]	; (8003164 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003138:	e001      	b.n	800313e <LoopFillZerobss>

0800313a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800313a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800313c:	3204      	adds	r2, #4

0800313e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800313e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003140:	d3fb      	bcc.n	800313a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003142:	f7ff ffd7 	bl	80030f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003146:	f003 fda7 	bl	8006c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800314a:	f7fd ff75 	bl	8001038 <main>
  bx  lr    
 800314e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003158:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800315c:	08007760 	.word	0x08007760
  ldr r2, =_sbss
 8003160:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8003164:	20000484 	.word	0x20000484

08003168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003168:	e7fe      	b.n	8003168 <ADC_IRQHandler>
	...

0800316c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003170:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_Init+0x40>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_Init+0x40>)
 8003176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800317a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <HAL_Init+0x40>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0a      	ldr	r2, [pc, #40]	; (80031ac <HAL_Init+0x40>)
 8003182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <HAL_Init+0x40>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <HAL_Init+0x40>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003194:	2003      	movs	r0, #3
 8003196:	f000 f92b 	bl	80033f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800319a:	2000      	movs	r0, #0
 800319c:	f000 f808 	bl	80031b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031a0:	f7ff fd0c 	bl	8002bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023c00 	.word	0x40023c00

080031b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <HAL_InitTick+0x54>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <HAL_InitTick+0x58>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 f943 	bl	800345a <HAL_SYSTICK_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e00e      	b.n	80031fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b0f      	cmp	r3, #15
 80031e2:	d80a      	bhi.n	80031fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e4:	2200      	movs	r2, #0
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	f000 f90b 	bl	8003406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031f0:	4a06      	ldr	r2, [pc, #24]	; (800320c <HAL_InitTick+0x5c>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	20000038 	.word	0x20000038
 8003208:	20000040 	.word	0x20000040
 800320c:	2000003c 	.word	0x2000003c

08003210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x20>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <HAL_IncTick+0x24>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4413      	add	r3, r2
 8003220:	4a04      	ldr	r2, [pc, #16]	; (8003234 <HAL_IncTick+0x24>)
 8003222:	6013      	str	r3, [r2, #0]
}
 8003224:	bf00      	nop
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000040 	.word	0x20000040
 8003234:	20000470 	.word	0x20000470

08003238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  return uwTick;
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <HAL_GetTick+0x14>)
 800323e:	681b      	ldr	r3, [r3, #0]
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20000470 	.word	0x20000470

08003250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800326c:	4013      	ands	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003278:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800327c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003282:	4a04      	ldr	r2, [pc, #16]	; (8003294 <__NVIC_SetPriorityGrouping+0x44>)
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	60d3      	str	r3, [r2, #12]
}
 8003288:	bf00      	nop
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800329c:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <__NVIC_GetPriorityGrouping+0x18>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	0a1b      	lsrs	r3, r3, #8
 80032a2:	f003 0307 	and.w	r3, r3, #7
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	db0b      	blt.n	80032de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4907      	ldr	r1, [pc, #28]	; (80032ec <__NVIC_EnableIRQ+0x38>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	2001      	movs	r0, #1
 80032d6:	fa00 f202 	lsl.w	r2, r0, r2
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000e100 	.word	0xe000e100

080032f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003344:	b480      	push	{r7}
 8003346:	b089      	sub	sp, #36	; 0x24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f1c3 0307 	rsb	r3, r3, #7
 800335e:	2b04      	cmp	r3, #4
 8003360:	bf28      	it	cs
 8003362:	2304      	movcs	r3, #4
 8003364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3304      	adds	r3, #4
 800336a:	2b06      	cmp	r3, #6
 800336c:	d902      	bls.n	8003374 <NVIC_EncodePriority+0x30>
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3b03      	subs	r3, #3
 8003372:	e000      	b.n	8003376 <NVIC_EncodePriority+0x32>
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	f04f 32ff 	mov.w	r2, #4294967295
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	401a      	ands	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800338c:	f04f 31ff 	mov.w	r1, #4294967295
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	43d9      	mvns	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	4313      	orrs	r3, r2
         );
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3724      	adds	r7, #36	; 0x24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033bc:	d301      	bcc.n	80033c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033be:	2301      	movs	r3, #1
 80033c0:	e00f      	b.n	80033e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033c2:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <SysTick_Config+0x40>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ca:	210f      	movs	r1, #15
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	f7ff ff8e 	bl	80032f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <SysTick_Config+0x40>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033da:	4b04      	ldr	r3, [pc, #16]	; (80033ec <SysTick_Config+0x40>)
 80033dc:	2207      	movs	r2, #7
 80033de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	e000e010 	.word	0xe000e010

080033f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff29 	bl	8003250 <__NVIC_SetPriorityGrouping>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003406:	b580      	push	{r7, lr}
 8003408:	b086      	sub	sp, #24
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003418:	f7ff ff3e 	bl	8003298 <__NVIC_GetPriorityGrouping>
 800341c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68b9      	ldr	r1, [r7, #8]
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f7ff ff8e 	bl	8003344 <NVIC_EncodePriority>
 8003428:	4602      	mov	r2, r0
 800342a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff ff5d 	bl	80032f0 <__NVIC_SetPriority>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b082      	sub	sp, #8
 8003442:	af00      	add	r7, sp, #0
 8003444:	4603      	mov	r3, r0
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff ff31 	bl	80032b4 <__NVIC_EnableIRQ>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b082      	sub	sp, #8
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff ffa2 	bl	80033ac <SysTick_Config>
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003480:	f7ff feda 	bl	8003238 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e099      	b.n	80035c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034b0:	e00f      	b.n	80034d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034b2:	f7ff fec1 	bl	8003238 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d908      	bls.n	80034d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e078      	b.n	80035c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1e8      	bne.n	80034b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4b38      	ldr	r3, [pc, #224]	; (80035cc <HAL_DMA_Init+0x158>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003516:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	2b04      	cmp	r3, #4
 800352a:	d107      	bne.n	800353c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	4313      	orrs	r3, r2
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b04      	cmp	r3, #4
 8003564:	d117      	bne.n	8003596 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	4313      	orrs	r3, r2
 800356e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00e      	beq.n	8003596 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fb01 	bl	8003b80 <DMA_CheckFifoParam>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d008      	beq.n	8003596 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2240      	movs	r2, #64	; 0x40
 8003588:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003592:	2301      	movs	r3, #1
 8003594:	e016      	b.n	80035c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fab8 	bl	8003b14 <DMA_CalcBaseAndBitshift>
 80035a4:	4603      	mov	r3, r0
 80035a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ac:	223f      	movs	r2, #63	; 0x3f
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	f010803f 	.word	0xf010803f

080035d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_DMA_Start_IT+0x26>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e040      	b.n	8003678 <HAL_DMA_Start_IT+0xa8>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d12f      	bne.n	800366a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2202      	movs	r2, #2
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 fa4a 	bl	8003ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003628:	223f      	movs	r2, #63	; 0x3f
 800362a:	409a      	lsls	r2, r3
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0216 	orr.w	r2, r2, #22
 800363e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0208 	orr.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e005      	b.n	8003676 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003672:	2302      	movs	r3, #2
 8003674:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003676:	7dfb      	ldrb	r3, [r7, #23]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800368e:	f7ff fdd3 	bl	8003238 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d008      	beq.n	80036b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2280      	movs	r2, #128	; 0x80
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e052      	b.n	8003758 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0216 	bic.w	r2, r2, #22
 80036c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695a      	ldr	r2, [r3, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <HAL_DMA_Abort+0x62>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0208 	bic.w	r2, r2, #8
 80036f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003702:	e013      	b.n	800372c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003704:	f7ff fd98 	bl	8003238 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b05      	cmp	r3, #5
 8003710:	d90c      	bls.n	800372c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2203      	movs	r2, #3
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e015      	b.n	8003758 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e4      	bne.n	8003704 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	223f      	movs	r2, #63	; 0x3f
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d004      	beq.n	800377e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e00c      	b.n	8003798 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2205      	movs	r2, #5
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b0:	4b92      	ldr	r3, [pc, #584]	; (80039fc <HAL_DMA_IRQHandler+0x258>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a92      	ldr	r2, [pc, #584]	; (8003a00 <HAL_DMA_IRQHandler+0x25c>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	2208      	movs	r2, #8
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01a      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fc:	2208      	movs	r2, #8
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003832:	2201      	movs	r2, #1
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f043 0202 	orr.w	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	2204      	movs	r2, #4
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	2204      	movs	r2, #4
 800386a:	409a      	lsls	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003874:	f043 0204 	orr.w	r2, r3, #4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003880:	2210      	movs	r2, #16
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03c      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389e:	2210      	movs	r2, #16
 80038a0:	409a      	lsls	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e01f      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e016      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0208 	bic.w	r2, r2, #8
 8003902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	2220      	movs	r2, #32
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 808e 	beq.w	8003a42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8086 	beq.w	8003a42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2220      	movs	r2, #32
 800393c:	409a      	lsls	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b05      	cmp	r3, #5
 800394c:	d136      	bne.n	80039bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0216 	bic.w	r2, r2, #22
 800395c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800396c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_DMA_IRQHandler+0x1da>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0208 	bic.w	r2, r2, #8
 800398c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	223f      	movs	r2, #63	; 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d07d      	beq.n	8003aae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
        }
        return;
 80039ba:	e078      	b.n	8003aae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01c      	beq.n	8003a04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d108      	bne.n	80039ea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d030      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
 80039e8:	e02b      	b.n	8003a42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d027      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
 80039fa:	e022      	b.n	8003a42 <HAL_DMA_IRQHandler+0x29e>
 80039fc:	20000038 	.word	0x20000038
 8003a00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10f      	bne.n	8003a32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0210 	bic.w	r2, r2, #16
 8003a20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d032      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d022      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2205      	movs	r2, #5
 8003a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	3301      	adds	r3, #1
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d307      	bcc.n	8003a8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1f2      	bne.n	8003a6e <HAL_DMA_IRQHandler+0x2ca>
 8003a88:	e000      	b.n	8003a8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003aae:	bf00      	nop
    }
  }
}
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d108      	bne.n	8003af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003af6:	e007      	b.n	8003b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	3b10      	subs	r3, #16
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <DMA_CalcBaseAndBitshift+0x64>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b2e:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <DMA_CalcBaseAndBitshift+0x68>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d909      	bls.n	8003b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	; 0x58
 8003b54:	e007      	b.n	8003b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	aaaaaaab 	.word	0xaaaaaaab
 8003b7c:	08007724 	.word	0x08007724

08003b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11f      	bne.n	8003bda <DMA_CheckFifoParam+0x5a>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d856      	bhi.n	8003c4e <DMA_CheckFifoParam+0xce>
 8003ba0:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <DMA_CheckFifoParam+0x28>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bcb 	.word	0x08003bcb
 8003bb0:	08003bb9 	.word	0x08003bb9
 8003bb4:	08003c4f 	.word	0x08003c4f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d046      	beq.n	8003c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc8:	e043      	b.n	8003c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bd2:	d140      	bne.n	8003c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd8:	e03d      	b.n	8003c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	d121      	bne.n	8003c28 <DMA_CheckFifoParam+0xa8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d837      	bhi.n	8003c5a <DMA_CheckFifoParam+0xda>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <DMA_CheckFifoParam+0x70>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c07 	.word	0x08003c07
 8003bf8:	08003c01 	.word	0x08003c01
 8003bfc:	08003c19 	.word	0x08003c19
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e030      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d025      	beq.n	8003c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c16:	e022      	b.n	8003c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c20:	d11f      	bne.n	8003c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c26:	e01c      	b.n	8003c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d903      	bls.n	8003c36 <DMA_CheckFifoParam+0xb6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c34:	e018      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3a:	e015      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	e00b      	b.n	8003c66 <DMA_CheckFifoParam+0xe6>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e00a      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
 8003c54:	e008      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e006      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
    }
  } 
  
  return status; 
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e159      	b.n	8003f48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 8148 	bne.w	8003f42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80a2 	beq.w	8003f42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <HAL_GPIO_Init+0x2e8>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	4a56      	ldr	r2, [pc, #344]	; (8003f60 <HAL_GPIO_Init+0x2e8>)
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0e:	4b54      	ldr	r3, [pc, #336]	; (8003f60 <HAL_GPIO_Init+0x2e8>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e1a:	4a52      	ldr	r2, [pc, #328]	; (8003f64 <HAL_GPIO_Init+0x2ec>)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a49      	ldr	r2, [pc, #292]	; (8003f68 <HAL_GPIO_Init+0x2f0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d019      	beq.n	8003e7a <HAL_GPIO_Init+0x202>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a48      	ldr	r2, [pc, #288]	; (8003f6c <HAL_GPIO_Init+0x2f4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d013      	beq.n	8003e76 <HAL_GPIO_Init+0x1fe>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a47      	ldr	r2, [pc, #284]	; (8003f70 <HAL_GPIO_Init+0x2f8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00d      	beq.n	8003e72 <HAL_GPIO_Init+0x1fa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a46      	ldr	r2, [pc, #280]	; (8003f74 <HAL_GPIO_Init+0x2fc>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d007      	beq.n	8003e6e <HAL_GPIO_Init+0x1f6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a45      	ldr	r2, [pc, #276]	; (8003f78 <HAL_GPIO_Init+0x300>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d101      	bne.n	8003e6a <HAL_GPIO_Init+0x1f2>
 8003e66:	2304      	movs	r3, #4
 8003e68:	e008      	b.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e6a:	2307      	movs	r3, #7
 8003e6c:	e006      	b.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e004      	b.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e002      	b.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <HAL_GPIO_Init+0x204>
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	f002 0203 	and.w	r2, r2, #3
 8003e82:	0092      	lsls	r2, r2, #2
 8003e84:	4093      	lsls	r3, r2
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e8c:	4935      	ldr	r1, [pc, #212]	; (8003f64 <HAL_GPIO_Init+0x2ec>)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	089b      	lsrs	r3, r3, #2
 8003e92:	3302      	adds	r3, #2
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e9a:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ec4:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	4013      	ands	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f12:	4a1a      	ldr	r2, [pc, #104]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f18:	4b18      	ldr	r3, [pc, #96]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f3c:	4a0f      	ldr	r2, [pc, #60]	; (8003f7c <HAL_GPIO_Init+0x304>)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	f67f aea2 	bls.w	8003c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3724      	adds	r7, #36	; 0x24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40013800 	.word	0x40013800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020400 	.word	0x40020400
 8003f70:	40020800 	.word	0x40020800
 8003f74:	40020c00 	.word	0x40020c00
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	40013c00 	.word	0x40013c00

08003f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f90:	787b      	ldrb	r3, [r7, #1]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f9c:	e003      	b.n	8003fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f9e:	887b      	ldrh	r3, [r7, #2]
 8003fa0:	041a      	lsls	r2, r3, #16
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fbe:	4b08      	ldr	r3, [pc, #32]	; (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc0:	695a      	ldr	r2, [r3, #20]
 8003fc2:	88fb      	ldrh	r3, [r7, #6]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fca:	4a05      	ldr	r2, [pc, #20]	; (8003fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f806 	bl	8003fe4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40013c00 	.word	0x40013c00

08003fe4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e12b      	b.n	8004266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fdf2 	bl	8002c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004060:	f000 fd5c 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a81      	ldr	r2, [pc, #516]	; (8004270 <HAL_I2C_Init+0x274>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d807      	bhi.n	8004080 <HAL_I2C_Init+0x84>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a80      	ldr	r2, [pc, #512]	; (8004274 <HAL_I2C_Init+0x278>)
 8004074:	4293      	cmp	r3, r2
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e006      	b.n	800408e <HAL_I2C_Init+0x92>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a7d      	ldr	r2, [pc, #500]	; (8004278 <HAL_I2C_Init+0x27c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	bf94      	ite	ls
 8004088:	2301      	movls	r3, #1
 800408a:	2300      	movhi	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0e7      	b.n	8004266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a78      	ldr	r2, [pc, #480]	; (800427c <HAL_I2C_Init+0x280>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a6a      	ldr	r2, [pc, #424]	; (8004270 <HAL_I2C_Init+0x274>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <HAL_I2C_Init+0xd4>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3301      	adds	r3, #1
 80040ce:	e009      	b.n	80040e4 <HAL_I2C_Init+0xe8>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <HAL_I2C_Init+0x284>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	3301      	adds	r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	495c      	ldr	r1, [pc, #368]	; (8004270 <HAL_I2C_Init+0x274>)
 8004100:	428b      	cmp	r3, r1
 8004102:	d819      	bhi.n	8004138 <HAL_I2C_Init+0x13c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e59      	subs	r1, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004118:	400b      	ands	r3, r1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_I2C_Init+0x138>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1e59      	subs	r1, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	fbb1 f3f3 	udiv	r3, r1, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	e051      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004134:	2304      	movs	r3, #4
 8004136:	e04f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d111      	bne.n	8004164 <HAL_I2C_Init+0x168>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e58      	subs	r0, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	440b      	add	r3, r1
 800414e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e012      	b.n	800418a <HAL_I2C_Init+0x18e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	0099      	lsls	r1, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Init+0x196>
 800418e:	2301      	movs	r3, #1
 8004190:	e022      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10e      	bne.n	80041b8 <HAL_I2C_Init+0x1bc>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1e58      	subs	r0, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	440b      	add	r3, r1
 80041a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	e00f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e58      	subs	r0, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	0099      	lsls	r1, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6809      	ldr	r1, [r1, #0]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6911      	ldr	r1, [r2, #16]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	000186a0 	.word	0x000186a0
 8004274:	001e847f 	.word	0x001e847f
 8004278:	003d08ff 	.word	0x003d08ff
 800427c:	431bde83 	.word	0x431bde83
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e264      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d075      	beq.n	800438e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a2:	4ba3      	ldr	r3, [pc, #652]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 030c 	and.w	r3, r3, #12
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d00c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ae:	4ba0      	ldr	r3, [pc, #640]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	2b08      	cmp	r3, #8
 80042b8:	d112      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ba:	4b9d      	ldr	r3, [pc, #628]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b99      	ldr	r3, [pc, #612]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d05b      	beq.n	800438c <HAL_RCC_OscConfig+0x108>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d157      	bne.n	800438c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e23f      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x74>
 80042ea:	4b91      	ldr	r3, [pc, #580]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a90      	ldr	r2, [pc, #576]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e01d      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b8b      	ldr	r3, [pc, #556]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a8a      	ldr	r2, [pc, #552]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b88      	ldr	r3, [pc, #544]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a87      	ldr	r2, [pc, #540]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e00b      	b.n	8004334 <HAL_RCC_OscConfig+0xb0>
 800431c:	4b84      	ldr	r3, [pc, #528]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a83      	ldr	r2, [pc, #524]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a80      	ldr	r2, [pc, #512]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004332:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d013      	beq.n	8004364 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fe ff7c 	bl	8003238 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe ff78 	bl	8003238 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e204      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0xc0>
 8004362:	e014      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7fe ff68 	bl	8003238 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800436c:	f7fe ff64 	bl	8003238 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1f0      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	4b6c      	ldr	r3, [pc, #432]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0xe8>
 800438a:	e000      	b.n	800438e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800438c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d063      	beq.n	8004462 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a6:	4b62      	ldr	r3, [pc, #392]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d11c      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b2:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d116      	bne.n	80043ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043be:	4b5c      	ldr	r3, [pc, #368]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e1c4      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b56      	ldr	r3, [pc, #344]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	4952      	ldr	r1, [pc, #328]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ea:	e03a      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f4:	4b4f      	ldr	r3, [pc, #316]	; (8004534 <HAL_RCC_OscConfig+0x2b0>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fe ff1d 	bl	8003238 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004402:	f7fe ff19 	bl	8003238 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e1a5      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004420:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4940      	ldr	r1, [pc, #256]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
 8004434:	e015      	b.n	8004462 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x2b0>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443c:	f7fe fefc 	bl	8003238 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004444:	f7fe fef8 	bl	8003238 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e184      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	4b36      	ldr	r3, [pc, #216]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d030      	beq.n	80044d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004476:	4b30      	ldr	r3, [pc, #192]	; (8004538 <HAL_RCC_OscConfig+0x2b4>)
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447c:	f7fe fedc 	bl	8003238 <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004484:	f7fe fed8 	bl	8003238 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e164      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0x200>
 80044a2:	e015      	b.n	80044d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <HAL_RCC_OscConfig+0x2b4>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7fe fec5 	bl	8003238 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fe fec1 	bl	8003238 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e14d      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a0 	beq.w	800461e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10f      	bne.n	800450e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6413      	str	r3, [r2, #64]	; 0x40
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x2ac>)
 8004500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004506:	60bb      	str	r3, [r7, #8]
 8004508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450a:	2301      	movs	r3, #1
 800450c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_RCC_OscConfig+0x2b8>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004516:	2b00      	cmp	r3, #0
 8004518:	d121      	bne.n	800455e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_RCC_OscConfig+0x2b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_RCC_OscConfig+0x2b8>)
 8004520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004526:	f7fe fe87 	bl	8003238 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	e011      	b.n	8004552 <HAL_RCC_OscConfig+0x2ce>
 800452e:	bf00      	nop
 8004530:	40023800 	.word	0x40023800
 8004534:	42470000 	.word	0x42470000
 8004538:	42470e80 	.word	0x42470e80
 800453c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004540:	f7fe fe7a 	bl	8003238 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e106      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x4e4>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x2f0>
 8004566:	4b81      	ldr	r3, [pc, #516]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a80      	ldr	r2, [pc, #512]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6713      	str	r3, [r2, #112]	; 0x70
 8004572:	e01c      	b.n	80045ae <HAL_RCC_OscConfig+0x32a>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b05      	cmp	r3, #5
 800457a:	d10c      	bne.n	8004596 <HAL_RCC_OscConfig+0x312>
 800457c:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	4a7a      	ldr	r2, [pc, #488]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004582:	f043 0304 	orr.w	r3, r3, #4
 8004586:	6713      	str	r3, [r2, #112]	; 0x70
 8004588:	4b78      	ldr	r3, [pc, #480]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	4a77      	ldr	r2, [pc, #476]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6713      	str	r3, [r2, #112]	; 0x70
 8004594:	e00b      	b.n	80045ae <HAL_RCC_OscConfig+0x32a>
 8004596:	4b75      	ldr	r3, [pc, #468]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	4a74      	ldr	r2, [pc, #464]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	6713      	str	r3, [r2, #112]	; 0x70
 80045a2:	4b72      	ldr	r3, [pc, #456]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a71      	ldr	r2, [pc, #452]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	f023 0304 	bic.w	r3, r3, #4
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d015      	beq.n	80045e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b6:	f7fe fe3f 	bl	8003238 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe fe3b 	bl	8003238 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e0c5      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	4b65      	ldr	r3, [pc, #404]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ee      	beq.n	80045be <HAL_RCC_OscConfig+0x33a>
 80045e0:	e014      	b.n	800460c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e2:	f7fe fe29 	bl	8003238 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045e8:	e00a      	b.n	8004600 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ea:	f7fe fe25 	bl	8003238 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e0af      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004600:	4b5a      	ldr	r3, [pc, #360]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1ee      	bne.n	80045ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d105      	bne.n	800461e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004612:	4b56      	ldr	r3, [pc, #344]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	4a55      	ldr	r2, [pc, #340]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 8004618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 809b 	beq.w	800475e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004628:	4b50      	ldr	r3, [pc, #320]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d05c      	beq.n	80046ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d141      	bne.n	80046c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463c:	4b4c      	ldr	r3, [pc, #304]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004642:	f7fe fdf9 	bl	8003238 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fe fdf5 	bl	8003238 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e081      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	4b43      	ldr	r3, [pc, #268]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f0      	bne.n	800464a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	019b      	lsls	r3, r3, #6
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	3b01      	subs	r3, #1
 8004682:	041b      	lsls	r3, r3, #16
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	4937      	ldr	r1, [pc, #220]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004692:	4b37      	ldr	r3, [pc, #220]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fe fdce 	bl	8003238 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fe fdca 	bl	8003238 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e056      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x41c>
 80046be:	e04e      	b.n	800475e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c0:	4b2b      	ldr	r3, [pc, #172]	; (8004770 <HAL_RCC_OscConfig+0x4ec>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c6:	f7fe fdb7 	bl	8003238 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ce:	f7fe fdb3 	bl	8003238 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e03f      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	4b22      	ldr	r3, [pc, #136]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <HAL_RCC_OscConfig+0x44a>
 80046ec:	e037      	b.n	800475e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e032      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046fa:	4b1c      	ldr	r3, [pc, #112]	; (800476c <HAL_RCC_OscConfig+0x4e8>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d028      	beq.n	800475a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d121      	bne.n	800475a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d11a      	bne.n	800475a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800472a:	4013      	ands	r3, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004730:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004732:	4293      	cmp	r3, r2
 8004734:	d111      	bne.n	800475a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3b01      	subs	r3, #1
 8004744:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d107      	bne.n	800475a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004756:	429a      	cmp	r2, r3
 8004758:	d001      	beq.n	800475e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40007000 	.word	0x40007000
 800476c:	40023800 	.word	0x40023800
 8004770:	42470060 	.word	0x42470060

08004774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e0cc      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004788:	4b68      	ldr	r3, [pc, #416]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d90c      	bls.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004796:	4b65      	ldr	r3, [pc, #404]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b63      	ldr	r3, [pc, #396]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d001      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e0b8      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d020      	beq.n	80047fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b59      	ldr	r3, [pc, #356]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047e0:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a52      	ldr	r2, [pc, #328]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ec:	4b50      	ldr	r3, [pc, #320]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	494d      	ldr	r1, [pc, #308]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d044      	beq.n	8004894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004812:	4b47      	ldr	r3, [pc, #284]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d119      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e07f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d003      	beq.n	8004832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800482e:	2b03      	cmp	r3, #3
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004832:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d109      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e06f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004842:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e067      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004852:	4b37      	ldr	r3, [pc, #220]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0203 	bic.w	r2, r3, #3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	4934      	ldr	r1, [pc, #208]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004864:	f7fe fce8 	bl	8003238 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800486a:	e00a      	b.n	8004882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800486c:	f7fe fce4 	bl	8003238 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e04f      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	4b2b      	ldr	r3, [pc, #172]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 020c 	and.w	r2, r3, #12
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	429a      	cmp	r2, r3
 8004892:	d1eb      	bne.n	800486c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004894:	4b25      	ldr	r3, [pc, #148]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d20c      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_RCC_ClockConfig+0x1b8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e032      	b.n	8004922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	4916      	ldr	r1, [pc, #88]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0308 	and.w	r3, r3, #8
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048e6:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	490e      	ldr	r1, [pc, #56]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048fa:	f000 f821 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fe:	4602      	mov	r2, r0
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	490a      	ldr	r1, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x1c0>)
 800490c:	5ccb      	ldrb	r3, [r1, r3]
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	4a09      	ldr	r2, [pc, #36]	; (8004938 <HAL_RCC_ClockConfig+0x1c4>)
 8004914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <HAL_RCC_ClockConfig+0x1c8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe fc48 	bl	80031b0 <HAL_InitTick>

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40023c00 	.word	0x40023c00
 8004930:	40023800 	.word	0x40023800
 8004934:	0800770c 	.word	0x0800770c
 8004938:	20000038 	.word	0x20000038
 800493c:	2000003c 	.word	0x2000003c

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	607b      	str	r3, [r7, #4]
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	2300      	movs	r3, #0
 8004952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004958:	4b67      	ldr	r3, [pc, #412]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d00d      	beq.n	8004980 <HAL_RCC_GetSysClockFreq+0x40>
 8004964:	2b08      	cmp	r3, #8
 8004966:	f200 80bd 	bhi.w	8004ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_RCC_GetSysClockFreq+0x34>
 800496e:	2b04      	cmp	r3, #4
 8004970:	d003      	beq.n	800497a <HAL_RCC_GetSysClockFreq+0x3a>
 8004972:	e0b7      	b.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004974:	4b61      	ldr	r3, [pc, #388]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004976:	60bb      	str	r3, [r7, #8]
       break;
 8004978:	e0b7      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800497a:	4b61      	ldr	r3, [pc, #388]	; (8004b00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800497c:	60bb      	str	r3, [r7, #8]
      break;
 800497e:	e0b4      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004980:	4b5d      	ldr	r3, [pc, #372]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800498a:	4b5b      	ldr	r3, [pc, #364]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d04d      	beq.n	8004a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004996:	4b58      	ldr	r3, [pc, #352]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	099b      	lsrs	r3, r3, #6
 800499c:	461a      	mov	r2, r3
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	ea02 0800 	and.w	r8, r2, r0
 80049ae:	ea03 0901 	and.w	r9, r3, r1
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	014b      	lsls	r3, r1, #5
 80049c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049c4:	0142      	lsls	r2, r0, #5
 80049c6:	4610      	mov	r0, r2
 80049c8:	4619      	mov	r1, r3
 80049ca:	ebb0 0008 	subs.w	r0, r0, r8
 80049ce:	eb61 0109 	sbc.w	r1, r1, r9
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	018b      	lsls	r3, r1, #6
 80049dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049e0:	0182      	lsls	r2, r0, #6
 80049e2:	1a12      	subs	r2, r2, r0
 80049e4:	eb63 0301 	sbc.w	r3, r3, r1
 80049e8:	f04f 0000 	mov.w	r0, #0
 80049ec:	f04f 0100 	mov.w	r1, #0
 80049f0:	00d9      	lsls	r1, r3, #3
 80049f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049f6:	00d0      	lsls	r0, r2, #3
 80049f8:	4602      	mov	r2, r0
 80049fa:	460b      	mov	r3, r1
 80049fc:	eb12 0208 	adds.w	r2, r2, r8
 8004a00:	eb43 0309 	adc.w	r3, r3, r9
 8004a04:	f04f 0000 	mov.w	r0, #0
 8004a08:	f04f 0100 	mov.w	r1, #0
 8004a0c:	0259      	lsls	r1, r3, #9
 8004a0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a12:	0250      	lsls	r0, r2, #9
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4610      	mov	r0, r2
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	f7fc f98c 	bl	8000d40 <__aeabi_uldivmod>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	e04a      	b.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a32:	4b31      	ldr	r3, [pc, #196]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	099b      	lsrs	r3, r3, #6
 8004a38:	461a      	mov	r2, r3
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a42:	f04f 0100 	mov.w	r1, #0
 8004a46:	ea02 0400 	and.w	r4, r2, r0
 8004a4a:	ea03 0501 	and.w	r5, r3, r1
 8004a4e:	4620      	mov	r0, r4
 8004a50:	4629      	mov	r1, r5
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	014b      	lsls	r3, r1, #5
 8004a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a60:	0142      	lsls	r2, r0, #5
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	1b00      	subs	r0, r0, r4
 8004a68:	eb61 0105 	sbc.w	r1, r1, r5
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	018b      	lsls	r3, r1, #6
 8004a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a7a:	0182      	lsls	r2, r0, #6
 8004a7c:	1a12      	subs	r2, r2, r0
 8004a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f04f 0100 	mov.w	r1, #0
 8004a8a:	00d9      	lsls	r1, r3, #3
 8004a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a90:	00d0      	lsls	r0, r2, #3
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	1912      	adds	r2, r2, r4
 8004a98:	eb45 0303 	adc.w	r3, r5, r3
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	0299      	lsls	r1, r3, #10
 8004aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004aaa:	0290      	lsls	r0, r2, #10
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	f7fc f940 	bl	8000d40 <__aeabi_uldivmod>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae0:	60bb      	str	r3, [r7, #8]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ae6:	60bb      	str	r3, [r7, #8]
      break;
 8004ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aea:	68bb      	ldr	r3, [r7, #8]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800
 8004afc:	00f42400 	.word	0x00f42400
 8004b00:	007a1200 	.word	0x007a1200

08004b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b08:	4b03      	ldr	r3, [pc, #12]	; (8004b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	20000038 	.word	0x20000038

08004b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b20:	f7ff fff0 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0a9b      	lsrs	r3, r3, #10
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4903      	ldr	r1, [pc, #12]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800771c 	.word	0x0800771c

08004b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b48:	f7ff ffdc 	bl	8004b04 <HAL_RCC_GetHCLKFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	0b5b      	lsrs	r3, r3, #13
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	4903      	ldr	r1, [pc, #12]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5a:	5ccb      	ldrb	r3, [r1, r3]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	0800771c 	.word	0x0800771c

08004b6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e041      	b.n	8004c02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fe f8ca 	bl	8002d2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4610      	mov	r0, r2
 8004bac:	f000 fdda 	bl	8005764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
	...

08004c0c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d001      	beq.n	8004c24 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e03c      	b.n	8004c9e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2202      	movs	r2, #2
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1e      	ldr	r2, [pc, #120]	; (8004cac <HAL_TIM_Base_Start+0xa0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d013      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1a      	ldr	r2, [pc, #104]	; (8004cb0 <HAL_TIM_Base_Start+0xa4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_TIM_Base_Start+0xa8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <HAL_TIM_Base_Start+0xac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <HAL_TIM_Base_Start+0x5c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <HAL_TIM_Base_Start+0xb0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d111      	bne.n	8004c8c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b06      	cmp	r3, #6
 8004c78:	d010      	beq.n	8004c9c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	e007      	b.n	8004c9c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40014000 	.word	0x40014000

08004cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e044      	b.n	8004d62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_TIM_Base_Start_IT+0xb0>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x6c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d013      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x6c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1a      	ldr	r2, [pc, #104]	; (8004d74 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x6c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a19      	ldr	r2, [pc, #100]	; (8004d78 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x6c>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <HAL_TIM_Base_Start_IT+0xbc>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <HAL_TIM_Base_Start_IT+0x6c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d111      	bne.n	8004d50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b06      	cmp	r3, #6
 8004d3c:	d010      	beq.n	8004d60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4e:	e007      	b.n	8004d60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40014000 	.word	0x40014000

08004d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f839 	bl	8004e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fcce 	bl	8005764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x24>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e022      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x3e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e015      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x58>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e068      	b.n	8004f7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x82>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb8:	e013      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0x92>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	e00b      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	e003      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fee0 	bl	8005cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <HAL_TIM_PWM_Start+0x14c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d107      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a1d      	ldr	r2, [pc, #116]	; (8004f84 <HAL_TIM_PWM_Start+0x14c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d018      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x10e>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f1c:	d013      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x10e>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a19      	ldr	r2, [pc, #100]	; (8004f88 <HAL_TIM_PWM_Start+0x150>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d00e      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x10e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a17      	ldr	r2, [pc, #92]	; (8004f8c <HAL_TIM_PWM_Start+0x154>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d009      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x10e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_TIM_PWM_Start+0x158>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d004      	beq.n	8004f46 <HAL_TIM_PWM_Start+0x10e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <HAL_TIM_PWM_Start+0x15c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d111      	bne.n	8004f6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d010      	beq.n	8004f7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f68:	e007      	b.n	8004f7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40000c00 	.word	0x40000c00
 8004f94:	40014000 	.word	0x40014000

08004f98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e097      	b.n	80050dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d106      	bne.n	8004fc6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fd fe6b 	bl	8002c9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2202      	movs	r2, #2
 8004fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	4610      	mov	r0, r2
 8004fee:	f000 fbb9 	bl	8005764 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	f023 0303 	bic.w	r3, r3, #3
 800501e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	4313      	orrs	r3, r2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005038:	f023 030c 	bic.w	r3, r3, #12
 800503c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005044:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005048:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	4313      	orrs	r3, r2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	011a      	lsls	r2, r3, #4
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	031b      	lsls	r3, r3, #12
 8005068:	4313      	orrs	r3, r2
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005076:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4313      	orrs	r3, r2
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005104:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800510c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800511a:	7b7b      	ldrb	r3, [r7, #13]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d001      	beq.n	8005124 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e069      	b.n	80051f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005134:	e031      	b.n	800519a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d110      	bne.n	800515e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800513c:	7bbb      	ldrb	r3, [r7, #14]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d102      	bne.n	8005148 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005142:	7b3b      	ldrb	r3, [r7, #12]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d001      	beq.n	800514c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e055      	b.n	80051f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800515c:	e01d      	b.n	800519a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d108      	bne.n	8005176 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005164:	7bbb      	ldrb	r3, [r7, #14]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d105      	bne.n	8005176 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800516a:	7b7b      	ldrb	r3, [r7, #13]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d102      	bne.n	8005176 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005170:	7b3b      	ldrb	r3, [r7, #12]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d001      	beq.n	800517a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e03e      	b.n	80051f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <HAL_TIM_Encoder_Start+0xc4>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d008      	beq.n	80051b8 <HAL_TIM_Encoder_Start+0xd4>
 80051a6:	e00f      	b.n	80051c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2201      	movs	r2, #1
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fd7d 	bl	8005cb0 <TIM_CCxChannelCmd>
      break;
 80051b6:	e016      	b.n	80051e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	2104      	movs	r1, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 fd75 	bl	8005cb0 <TIM_CCxChannelCmd>
      break;
 80051c6:	e00e      	b.n	80051e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fd6d 	bl	8005cb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	2104      	movs	r1, #4
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fd66 	bl	8005cb0 <TIM_CCxChannelCmd>
      break;
 80051e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d122      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d11b      	bne.n	800525c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0202 	mvn.w	r2, #2
 800522c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 fa70 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa62 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fa73 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d122      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b04      	cmp	r3, #4
 8005276:	d11b      	bne.n	80052b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0204 	mvn.w	r2, #4
 8005280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2202      	movs	r2, #2
 8005286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fa46 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 800529c:	e005      	b.n	80052aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa38 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fa49 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d122      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d11b      	bne.n	8005304 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0208 	mvn.w	r2, #8
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2204      	movs	r2, #4
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fa1c 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fa0e 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fa1f 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b10      	cmp	r3, #16
 8005310:	d122      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b10      	cmp	r3, #16
 800531e:	d11b      	bne.n	8005358 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0210 	mvn.w	r2, #16
 8005328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2208      	movs	r2, #8
 800532e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9f2 	bl	8005728 <HAL_TIM_IC_CaptureCallback>
 8005344:	e005      	b.n	8005352 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f9e4 	bl	8005714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 f9f5 	bl	800573c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10e      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b01      	cmp	r3, #1
 8005372:	d107      	bne.n	8005384 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0201 	mvn.w	r2, #1
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fd fbe0 	bl	8002b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538e:	2b80      	cmp	r3, #128	; 0x80
 8005390:	d10e      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d107      	bne.n	80053b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fd1e 	bl	8005dec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d10e      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d107      	bne.n	80053dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9ba 	bl	8005750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d10e      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d107      	bne.n	8005408 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0220 	mvn.w	r2, #32
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fce8 	bl	8005dd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005408:	bf00      	nop
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005426:	2302      	movs	r3, #2
 8005428:	e0ac      	b.n	8005584 <HAL_TIM_PWM_ConfigChannel+0x174>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b0c      	cmp	r3, #12
 8005436:	f200 809f 	bhi.w	8005578 <HAL_TIM_PWM_ConfigChannel+0x168>
 800543a:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800543c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005440:	08005475 	.word	0x08005475
 8005444:	08005579 	.word	0x08005579
 8005448:	08005579 	.word	0x08005579
 800544c:	08005579 	.word	0x08005579
 8005450:	080054b5 	.word	0x080054b5
 8005454:	08005579 	.word	0x08005579
 8005458:	08005579 	.word	0x08005579
 800545c:	08005579 	.word	0x08005579
 8005460:	080054f7 	.word	0x080054f7
 8005464:	08005579 	.word	0x08005579
 8005468:	08005579 	.word	0x08005579
 800546c:	08005579 	.word	0x08005579
 8005470:	08005537 	.word	0x08005537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68b9      	ldr	r1, [r7, #8]
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f9f2 	bl	8005864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0208 	orr.w	r2, r2, #8
 800548e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0204 	bic.w	r2, r2, #4
 800549e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6999      	ldr	r1, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
      break;
 80054b2:	e062      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fa38 	bl	8005930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6999      	ldr	r1, [r3, #24]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	430a      	orrs	r2, r1
 80054f2:	619a      	str	r2, [r3, #24]
      break;
 80054f4:	e041      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fa83 	bl	8005a08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0208 	orr.w	r2, r2, #8
 8005510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f022 0204 	bic.w	r2, r2, #4
 8005520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69d9      	ldr	r1, [r3, #28]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	430a      	orrs	r2, r1
 8005532:	61da      	str	r2, [r3, #28]
      break;
 8005534:	e021      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f000 facd 	bl	8005adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005550:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005560:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	69d9      	ldr	r1, [r3, #28]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	021a      	lsls	r2, r3, #8
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	61da      	str	r2, [r3, #28]
      break;
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005578:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_ConfigClockSource+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0b3      	b.n	800570c <HAL_TIM_ConfigClockSource+0x180>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d03e      	beq.n	800565c <HAL_TIM_ConfigClockSource+0xd0>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	f200 8087 	bhi.w	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	f000 8085 	beq.w	80056f8 <HAL_TIM_ConfigClockSource+0x16c>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d87f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055f4:	2b70      	cmp	r3, #112	; 0x70
 80055f6:	d01a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xa2>
 80055f8:	2b70      	cmp	r3, #112	; 0x70
 80055fa:	d87b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d050      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x116>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d877      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005604:	2b50      	cmp	r3, #80	; 0x50
 8005606:	d03c      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xf6>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d873      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d058      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x136>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d86f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005614:	2b30      	cmp	r3, #48	; 0x30
 8005616:	d064      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d86b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d060      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d867      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d05a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800562c:	e062      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f000 fb17 	bl	8005c70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005650:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	609a      	str	r2, [r3, #8]
      break;
 800565a:	e04e      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f000 fb00 	bl	8005c70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567e:	609a      	str	r2, [r3, #8]
      break;
 8005680:	e03b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	f000 fa74 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2150      	movs	r1, #80	; 0x50
 800569a:	4618      	mov	r0, r3
 800569c:	f000 facd 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80056a0:	e02b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fa93 	bl	8005bda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2160      	movs	r1, #96	; 0x60
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fabd 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80056c0:	e01b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fa54 	bl	8005b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 faad 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 80056e0:	e00b      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 faa4 	bl	8005c3a <TIM_ITRx_SetConfig>
        break;
 80056f2:	e002      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f4:	bf00      	nop
 80056f6:	e000      	b.n	80056fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80056f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a34      	ldr	r2, [pc, #208]	; (8005848 <TIM_Base_SetConfig+0xe4>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d00f      	beq.n	800579c <TIM_Base_SetConfig+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d00b      	beq.n	800579c <TIM_Base_SetConfig+0x38>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a31      	ldr	r2, [pc, #196]	; (800584c <TIM_Base_SetConfig+0xe8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d007      	beq.n	800579c <TIM_Base_SetConfig+0x38>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a30      	ldr	r2, [pc, #192]	; (8005850 <TIM_Base_SetConfig+0xec>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d003      	beq.n	800579c <TIM_Base_SetConfig+0x38>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a2f      	ldr	r2, [pc, #188]	; (8005854 <TIM_Base_SetConfig+0xf0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d108      	bne.n	80057ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a25      	ldr	r2, [pc, #148]	; (8005848 <TIM_Base_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01b      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d017      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a22      	ldr	r2, [pc, #136]	; (800584c <TIM_Base_SetConfig+0xe8>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a21      	ldr	r2, [pc, #132]	; (8005850 <TIM_Base_SetConfig+0xec>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00f      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a20      	ldr	r2, [pc, #128]	; (8005854 <TIM_Base_SetConfig+0xf0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <TIM_Base_SetConfig+0xf4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1e      	ldr	r2, [pc, #120]	; (800585c <TIM_Base_SetConfig+0xf8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <TIM_Base_SetConfig+0xfc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a08      	ldr	r2, [pc, #32]	; (8005848 <TIM_Base_SetConfig+0xe4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d103      	bne.n	8005834 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	615a      	str	r2, [r3, #20]
}
 800583a:	bf00      	nop
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	40010000 	.word	0x40010000
 800584c:	40000400 	.word	0x40000400
 8005850:	40000800 	.word	0x40000800
 8005854:	40000c00 	.word	0x40000c00
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f023 0201 	bic.w	r2, r3, #1
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0303 	bic.w	r3, r3, #3
 800589a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f023 0302 	bic.w	r3, r3, #2
 80058ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a1c      	ldr	r2, [pc, #112]	; (800592c <TIM_OC1_SetConfig+0xc8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d10c      	bne.n	80058da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f023 0308 	bic.w	r3, r3, #8
 80058c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f023 0304 	bic.w	r3, r3, #4
 80058d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a13      	ldr	r2, [pc, #76]	; (800592c <TIM_OC1_SetConfig+0xc8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d111      	bne.n	8005906 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	4313      	orrs	r3, r2
 8005904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	621a      	str	r2, [r3, #32]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	40010000 	.word	0x40010000

08005930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005930:	b480      	push	{r7}
 8005932:	b087      	sub	sp, #28
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f023 0210 	bic.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800595e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f023 0320 	bic.w	r3, r3, #32
 800597a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a1e      	ldr	r2, [pc, #120]	; (8005a04 <TIM_OC2_SetConfig+0xd4>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10d      	bne.n	80059ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <TIM_OC2_SetConfig+0xd4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d113      	bne.n	80059dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	40010000 	.word	0x40010000

08005a08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 0303 	bic.w	r3, r3, #3
 8005a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <TIM_OC3_SetConfig+0xd0>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d10d      	bne.n	8005a82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <TIM_OC3_SetConfig+0xd0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d113      	bne.n	8005ab2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	621a      	str	r2, [r3, #32]
}
 8005acc:	bf00      	nop
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	40010000 	.word	0x40010000

08005adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	031b      	lsls	r3, r3, #12
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a10      	ldr	r2, [pc, #64]	; (8005b78 <TIM_OC4_SetConfig+0x9c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d109      	bne.n	8005b50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e050      	b.n	8005db6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d60:	d013      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a18      	ldr	r2, [pc, #96]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a15      	ldr	r2, [pc, #84]	; (8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a13      	ldr	r2, [pc, #76]	; (8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d10c      	bne.n	8005da4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40014000 	.word	0x40014000

08005dd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e03f      	b.n	8005e92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fd f814 	bl	8002e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fd51 	bl	80068ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691a      	ldr	r2, [r3, #16]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d153      	bne.n	8005f5e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <HAL_UART_Transmit_DMA+0x26>
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e04c      	b.n	8005f60 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Transmit_DMA+0x38>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e045      	b.n	8005f60 <HAL_UART_Transmit_DMA+0xc4>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	88fa      	ldrh	r2, [r7, #6]
 8005ee6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2221      	movs	r2, #33	; 0x21
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f00:	4a19      	ldr	r2, [pc, #100]	; (8005f68 <HAL_UART_Transmit_DMA+0xcc>)
 8005f02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <HAL_UART_Transmit_DMA+0xd0>)
 8005f0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <HAL_UART_Transmit_DMA+0xd4>)
 8005f12:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	2200      	movs	r2, #0
 8005f1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005f1c:	f107 0308 	add.w	r3, r7, #8
 8005f20:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	6819      	ldr	r1, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	461a      	mov	r2, r3
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	f7fd fb4c 	bl	80035d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f40:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f58:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005f5e:	2302      	movs	r3, #2
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	080063a9 	.word	0x080063a9
 8005f6c:	080063fb 	.word	0x080063fb
 8005f70:	080064e3 	.word	0x080064e3

08005f74 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b20      	cmp	r3, #32
 8005f8c:	d11d      	bne.n	8005fca <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_UART_Receive_DMA+0x26>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e016      	b.n	8005fcc <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_UART_Receive_DMA+0x38>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e00f      	b.n	8005fcc <HAL_UART_Receive_DMA+0x58>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fad9 	bl	8006578 <UART_Start_Receive_DMA>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	e000      	b.n	8005fcc <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fca:	2302      	movs	r3, #2
  }
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10d      	bne.n	8006026 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_UART_IRQHandler+0x52>
 8006014:	6a3b      	ldr	r3, [r7, #32]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fbcd 	bl	80067be <UART_Receive_IT>
      return;
 8006024:	e17c      	b.n	8006320 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80b1 	beq.w	8006190 <HAL_UART_IRQHandler+0x1bc>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	f003 0301 	and.w	r3, r3, #1
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <HAL_UART_IRQHandler+0x70>
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80a6 	beq.w	8006190 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_UART_IRQHandler+0x90>
 800604e:	6a3b      	ldr	r3, [r7, #32]
 8006050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	f043 0201 	orr.w	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	f003 0304 	and.w	r3, r3, #4
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_UART_IRQHandler+0xb0>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d005      	beq.n	8006084 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607c:	f043 0202 	orr.w	r2, r3, #2
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00a      	beq.n	80060a4 <HAL_UART_IRQHandler+0xd0>
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d005      	beq.n	80060a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	f043 0204 	orr.w	r2, r3, #4
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <HAL_UART_IRQHandler+0xfa>
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d104      	bne.n	80060c2 <HAL_UART_IRQHandler+0xee>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d005      	beq.n	80060ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c6:	f043 0208 	orr.w	r2, r3, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 811f 	beq.w	8006316 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <HAL_UART_IRQHandler+0x11e>
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb66 	bl	80067be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fc:	2b40      	cmp	r3, #64	; 0x40
 80060fe:	bf0c      	ite	eq
 8006100:	2301      	moveq	r3, #1
 8006102:	2300      	movne	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <HAL_UART_IRQHandler+0x146>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d031      	beq.n	800617e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 faa6 	bl	800666c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d123      	bne.n	8006176 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800613c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006142:	2b00      	cmp	r3, #0
 8006144:	d013      	beq.n	800616e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	4a77      	ldr	r2, [pc, #476]	; (8006328 <HAL_UART_IRQHandler+0x354>)
 800614c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006152:	4618      	mov	r0, r3
 8006154:	f7fd fb04 	bl	8003760 <HAL_DMA_Abort_IT>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	e00e      	b.n	800618c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f904 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	e00a      	b.n	800618c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f900 	bl	800637c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e006      	b.n	800618c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f8fc 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800618a:	e0c4      	b.n	8006316 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	bf00      	nop
    return;
 800618e:	e0c2      	b.n	8006316 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	f040 80a2 	bne.w	80062de <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	f003 0310 	and.w	r3, r3, #16
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 809c 	beq.w	80062de <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8096 	beq.w	80062de <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	d14f      	bne.n	8006276 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80061e0:	8a3b      	ldrh	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 8099 	beq.w	800631a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80061ec:	8a3a      	ldrh	r2, [r7, #16]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	f080 8093 	bcs.w	800631a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8a3a      	ldrh	r2, [r7, #16]
 80061f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006204:	d02b      	beq.n	800625e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006214:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	695a      	ldr	r2, [r3, #20]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006234:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0210 	bic.w	r2, r2, #16
 8006252:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	4618      	mov	r0, r3
 800625a:	f7fd fa11 	bl	8003680 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006266:	b29b      	uxth	r3, r3
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	b29b      	uxth	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f88e 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006274:	e051      	b.n	800631a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800627e:	b29b      	uxth	r3, r3
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d047      	beq.n	800631e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800628e:	8a7b      	ldrh	r3, [r7, #18]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d044      	beq.n	800631e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062a2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0210 	bic.w	r2, r2, #16
 80062d0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062d2:	8a7b      	ldrh	r3, [r7, #18]
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f85a 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80062dc:	e01f      	b.n	800631e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_UART_IRQHandler+0x326>
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9fb 	bl	80066ee <UART_Transmit_IT>
    return;
 80062f8:	e012      	b.n	8006320 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <HAL_UART_IRQHandler+0x34c>
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	d008      	beq.n	8006320 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa3d 	bl	800678e <UART_EndTransmit_IT>
    return;
 8006314:	e004      	b.n	8006320 <HAL_UART_IRQHandler+0x34c>
    return;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <HAL_UART_IRQHandler+0x34c>
      return;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_UART_IRQHandler+0x34c>
      return;
 800631e:	bf00      	nop
  }
}
 8006320:	3728      	adds	r7, #40	; 0x28
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	080066c7 	.word	0x080066c7

0800632c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d113      	bne.n	80063ec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695a      	ldr	r2, [r3, #20]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68da      	ldr	r2, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063ea:	e002      	b.n	80063f2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff9d 	bl	800632c <HAL_UART_TxCpltCallback>
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff ff99 	bl	8006340 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d12a      	bne.n	8006488 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2200      	movs	r2, #0
 8006436:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006446:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695a      	ldr	r2, [r3, #20]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006466:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	2b01      	cmp	r3, #1
 8006476:	d107      	bne.n	8006488 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0210 	bic.w	r2, r2, #16
 8006486:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	2b01      	cmp	r3, #1
 800648e:	d106      	bne.n	800649e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006494:	4619      	mov	r1, r3
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff7a 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800649c:	e002      	b.n	80064a4 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f7ff ff58 	bl	8006354 <HAL_UART_RxCpltCallback>
}
 80064a4:	bf00      	nop
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d108      	bne.n	80064d4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	4619      	mov	r1, r3
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f7ff ff5f 	bl	8006390 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064d2:	e002      	b.n	80064da <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f7ff ff47 	bl	8006368 <HAL_UART_RxHalfCpltCallback>
}
 80064da:	bf00      	nop
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	bf0c      	ite	eq
 8006502:	2301      	moveq	r3, #1
 8006504:	2300      	movne	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b21      	cmp	r3, #33	; 0x21
 8006514:	d108      	bne.n	8006528 <UART_DMAError+0x46>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006522:	68b8      	ldr	r0, [r7, #8]
 8006524:	f000 f88c 	bl	8006640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b22      	cmp	r3, #34	; 0x22
 8006548:	d108      	bne.n	800655c <UART_DMAError+0x7a>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2200      	movs	r2, #0
 8006554:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f000 f888 	bl	800666c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f043 0210 	orr.w	r2, r3, #16
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006568:	68b8      	ldr	r0, [r7, #8]
 800656a:	f7ff ff07 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800656e:	bf00      	nop
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	4613      	mov	r3, r2
 8006584:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	88fa      	ldrh	r2, [r7, #6]
 8006590:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2222      	movs	r2, #34	; 0x22
 800659c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	4a23      	ldr	r2, [pc, #140]	; (8006634 <UART_Start_Receive_DMA+0xbc>)
 80065a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <UART_Start_Receive_DMA+0xc0>)
 80065ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	4a21      	ldr	r2, [pc, #132]	; (800663c <UART_Start_Receive_DMA+0xc4>)
 80065b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065bc:	2200      	movs	r2, #0
 80065be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065c0:	f107 0308 	add.w	r3, r7, #8
 80065c4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	f7fc fffa 	bl	80035d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065dc:	2300      	movs	r3, #0
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006608:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	695a      	ldr	r2, [r3, #20]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0201 	orr.w	r2, r2, #1
 8006618:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	695a      	ldr	r2, [r3, #20]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006628:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	08006417 	.word	0x08006417
 8006638:	080064ad 	.word	0x080064ad
 800663c:	080064e3 	.word	0x080064e3

08006640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006656:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2220      	movs	r2, #32
 800665c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006682:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0210 	bic.w	r2, r2, #16
 80066aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066ba:	bf00      	nop
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f7ff fe4b 	bl	800637c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e6:	bf00      	nop
 80066e8:	3710      	adds	r7, #16
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b21      	cmp	r3, #33	; 0x21
 8006700:	d13e      	bne.n	8006780 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670a:	d114      	bne.n	8006736 <UART_Transmit_IT+0x48>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d110      	bne.n	8006736 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006728:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	1c9a      	adds	r2, r3, #2
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	621a      	str	r2, [r3, #32]
 8006734:	e008      	b.n	8006748 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	1c59      	adds	r1, r3, #1
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6211      	str	r1, [r2, #32]
 8006740:	781a      	ldrb	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29b      	uxth	r3, r3
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	4619      	mov	r1, r3
 8006756:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10f      	bne.n	800677c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800676a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800677a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	e000      	b.n	8006782 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006780:	2302      	movs	r3, #2
  }
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68da      	ldr	r2, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7ff fdbc 	bl	800632c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b22      	cmp	r3, #34	; 0x22
 80067d0:	f040 8087 	bne.w	80068e2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067dc:	d117      	bne.n	800680e <UART_Receive_IT+0x50>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d113      	bne.n	800680e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006806:	1c9a      	adds	r2, r3, #2
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	629a      	str	r2, [r3, #40]	; 0x28
 800680c:	e026      	b.n	800685c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006814:	2300      	movs	r3, #0
 8006816:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006820:	d007      	beq.n	8006832 <UART_Receive_IT+0x74>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10a      	bne.n	8006840 <UART_Receive_IT+0x82>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	e008      	b.n	8006852 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684c:	b2da      	uxtb	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29b      	uxth	r3, r3
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4619      	mov	r1, r3
 800686a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800686c:	2b00      	cmp	r3, #0
 800686e:	d136      	bne.n	80068de <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0220 	bic.w	r2, r2, #32
 800687e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68da      	ldr	r2, [r3, #12]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800688e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695a      	ldr	r2, [r3, #20]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0201 	bic.w	r2, r2, #1
 800689e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d10e      	bne.n	80068ce <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0210 	bic.w	r2, r2, #16
 80068be:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fd62 	bl	8006390 <HAL_UARTEx_RxEventCallback>
 80068cc:	e002      	b.n	80068d4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff fd40 	bl	8006354 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	e002      	b.n	80068e4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	e000      	b.n	80068e4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80068e2:	2302      	movs	r3, #2
  }
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	b09f      	sub	sp, #124	; 0x7c
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	68d9      	ldr	r1, [r3, #12]
 8006904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	ea40 0301 	orr.w	r3, r0, r1
 800690c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800690e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	431a      	orrs	r2, r3
 8006918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	431a      	orrs	r2, r3
 800691e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	4313      	orrs	r3, r2
 8006924:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006930:	f021 010c 	bic.w	r1, r1, #12
 8006934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800693a:	430b      	orrs	r3, r1
 800693c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800693e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694a:	6999      	ldr	r1, [r3, #24]
 800694c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	ea40 0301 	orr.w	r3, r0, r1
 8006954:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4bc5      	ldr	r3, [pc, #788]	; (8006c70 <UART_SetConfig+0x384>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d004      	beq.n	800696a <UART_SetConfig+0x7e>
 8006960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	4bc3      	ldr	r3, [pc, #780]	; (8006c74 <UART_SetConfig+0x388>)
 8006966:	429a      	cmp	r2, r3
 8006968:	d103      	bne.n	8006972 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800696a:	f7fe f8eb 	bl	8004b44 <HAL_RCC_GetPCLK2Freq>
 800696e:	6778      	str	r0, [r7, #116]	; 0x74
 8006970:	e002      	b.n	8006978 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006972:	f7fe f8d3 	bl	8004b1c <HAL_RCC_GetPCLK1Freq>
 8006976:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006980:	f040 80b6 	bne.w	8006af0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006984:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006986:	461c      	mov	r4, r3
 8006988:	f04f 0500 	mov.w	r5, #0
 800698c:	4622      	mov	r2, r4
 800698e:	462b      	mov	r3, r5
 8006990:	1891      	adds	r1, r2, r2
 8006992:	6439      	str	r1, [r7, #64]	; 0x40
 8006994:	415b      	adcs	r3, r3
 8006996:	647b      	str	r3, [r7, #68]	; 0x44
 8006998:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800699c:	1912      	adds	r2, r2, r4
 800699e:	eb45 0303 	adc.w	r3, r5, r3
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f04f 0100 	mov.w	r1, #0
 80069aa:	00d9      	lsls	r1, r3, #3
 80069ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069b0:	00d0      	lsls	r0, r2, #3
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	1911      	adds	r1, r2, r4
 80069b8:	6639      	str	r1, [r7, #96]	; 0x60
 80069ba:	416b      	adcs	r3, r5
 80069bc:	667b      	str	r3, [r7, #100]	; 0x64
 80069be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	1891      	adds	r1, r2, r2
 80069ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80069cc:	415b      	adcs	r3, r3
 80069ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069d8:	f7fa f9b2 	bl	8000d40 <__aeabi_uldivmod>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4ba5      	ldr	r3, [pc, #660]	; (8006c78 <UART_SetConfig+0x38c>)
 80069e2:	fba3 2302 	umull	r2, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	011e      	lsls	r6, r3, #4
 80069ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069ec:	461c      	mov	r4, r3
 80069ee:	f04f 0500 	mov.w	r5, #0
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	1891      	adds	r1, r2, r2
 80069f8:	6339      	str	r1, [r7, #48]	; 0x30
 80069fa:	415b      	adcs	r3, r3
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
 80069fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a02:	1912      	adds	r2, r2, r4
 8006a04:	eb45 0303 	adc.w	r3, r5, r3
 8006a08:	f04f 0000 	mov.w	r0, #0
 8006a0c:	f04f 0100 	mov.w	r1, #0
 8006a10:	00d9      	lsls	r1, r3, #3
 8006a12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a16:	00d0      	lsls	r0, r2, #3
 8006a18:	4602      	mov	r2, r0
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	1911      	adds	r1, r2, r4
 8006a1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a20:	416b      	adcs	r3, r5
 8006a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	461a      	mov	r2, r3
 8006a2a:	f04f 0300 	mov.w	r3, #0
 8006a2e:	1891      	adds	r1, r2, r2
 8006a30:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a32:	415b      	adcs	r3, r3
 8006a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a3e:	f7fa f97f 	bl	8000d40 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4b8c      	ldr	r3, [pc, #560]	; (8006c78 <UART_SetConfig+0x38c>)
 8006a48:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	2164      	movs	r1, #100	; 0x64
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	3332      	adds	r3, #50	; 0x32
 8006a5a:	4a87      	ldr	r2, [pc, #540]	; (8006c78 <UART_SetConfig+0x38c>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a68:	441e      	add	r6, r3
 8006a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	4602      	mov	r2, r0
 8006a74:	460b      	mov	r3, r1
 8006a76:	1894      	adds	r4, r2, r2
 8006a78:	623c      	str	r4, [r7, #32]
 8006a7a:	415b      	adcs	r3, r3
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a82:	1812      	adds	r2, r2, r0
 8006a84:	eb41 0303 	adc.w	r3, r1, r3
 8006a88:	f04f 0400 	mov.w	r4, #0
 8006a8c:	f04f 0500 	mov.w	r5, #0
 8006a90:	00dd      	lsls	r5, r3, #3
 8006a92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a96:	00d4      	lsls	r4, r2, #3
 8006a98:	4622      	mov	r2, r4
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	1814      	adds	r4, r2, r0
 8006a9e:	653c      	str	r4, [r7, #80]	; 0x50
 8006aa0:	414b      	adcs	r3, r1
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	1891      	adds	r1, r2, r2
 8006ab0:	61b9      	str	r1, [r7, #24]
 8006ab2:	415b      	adcs	r3, r3
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006aba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006abe:	f7fa f93f 	bl	8000d40 <__aeabi_uldivmod>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	4b6c      	ldr	r3, [pc, #432]	; (8006c78 <UART_SetConfig+0x38c>)
 8006ac8:	fba3 1302 	umull	r1, r3, r3, r2
 8006acc:	095b      	lsrs	r3, r3, #5
 8006ace:	2164      	movs	r1, #100	; 0x64
 8006ad0:	fb01 f303 	mul.w	r3, r1, r3
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	3332      	adds	r3, #50	; 0x32
 8006ada:	4a67      	ldr	r2, [pc, #412]	; (8006c78 <UART_SetConfig+0x38c>)
 8006adc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	f003 0207 	and.w	r2, r3, #7
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4432      	add	r2, r6
 8006aec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006aee:	e0b9      	b.n	8006c64 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af2:	461c      	mov	r4, r3
 8006af4:	f04f 0500 	mov.w	r5, #0
 8006af8:	4622      	mov	r2, r4
 8006afa:	462b      	mov	r3, r5
 8006afc:	1891      	adds	r1, r2, r2
 8006afe:	6139      	str	r1, [r7, #16]
 8006b00:	415b      	adcs	r3, r3
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b08:	1912      	adds	r2, r2, r4
 8006b0a:	eb45 0303 	adc.w	r3, r5, r3
 8006b0e:	f04f 0000 	mov.w	r0, #0
 8006b12:	f04f 0100 	mov.w	r1, #0
 8006b16:	00d9      	lsls	r1, r3, #3
 8006b18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b1c:	00d0      	lsls	r0, r2, #3
 8006b1e:	4602      	mov	r2, r0
 8006b20:	460b      	mov	r3, r1
 8006b22:	eb12 0804 	adds.w	r8, r2, r4
 8006b26:	eb43 0905 	adc.w	r9, r3, r5
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	008b      	lsls	r3, r1, #2
 8006b3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b42:	0082      	lsls	r2, r0, #2
 8006b44:	4640      	mov	r0, r8
 8006b46:	4649      	mov	r1, r9
 8006b48:	f7fa f8fa 	bl	8000d40 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4b49      	ldr	r3, [pc, #292]	; (8006c78 <UART_SetConfig+0x38c>)
 8006b52:	fba3 2302 	umull	r2, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	011e      	lsls	r6, r3, #4
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f04f 0100 	mov.w	r1, #0
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	1894      	adds	r4, r2, r2
 8006b68:	60bc      	str	r4, [r7, #8]
 8006b6a:	415b      	adcs	r3, r3
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b72:	1812      	adds	r2, r2, r0
 8006b74:	eb41 0303 	adc.w	r3, r1, r3
 8006b78:	f04f 0400 	mov.w	r4, #0
 8006b7c:	f04f 0500 	mov.w	r5, #0
 8006b80:	00dd      	lsls	r5, r3, #3
 8006b82:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b86:	00d4      	lsls	r4, r2, #3
 8006b88:	4622      	mov	r2, r4
 8006b8a:	462b      	mov	r3, r5
 8006b8c:	1814      	adds	r4, r2, r0
 8006b8e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006b90:	414b      	adcs	r3, r1
 8006b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f04f 0100 	mov.w	r1, #0
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	f04f 0300 	mov.w	r3, #0
 8006ba6:	008b      	lsls	r3, r1, #2
 8006ba8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bac:	0082      	lsls	r2, r0, #2
 8006bae:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bb2:	f7fa f8c5 	bl	8000d40 <__aeabi_uldivmod>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <UART_SetConfig+0x38c>)
 8006bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	2164      	movs	r1, #100	; 0x64
 8006bc4:	fb01 f303 	mul.w	r3, r1, r3
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	3332      	adds	r3, #50	; 0x32
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <UART_SetConfig+0x38c>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bda:	441e      	add	r6, r3
 8006bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bde:	4618      	mov	r0, r3
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	1894      	adds	r4, r2, r2
 8006bea:	603c      	str	r4, [r7, #0]
 8006bec:	415b      	adcs	r3, r3
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bf4:	1812      	adds	r2, r2, r0
 8006bf6:	eb41 0303 	adc.w	r3, r1, r3
 8006bfa:	f04f 0400 	mov.w	r4, #0
 8006bfe:	f04f 0500 	mov.w	r5, #0
 8006c02:	00dd      	lsls	r5, r3, #3
 8006c04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c08:	00d4      	lsls	r4, r2, #3
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	462b      	mov	r3, r5
 8006c0e:	eb12 0a00 	adds.w	sl, r2, r0
 8006c12:	eb43 0b01 	adc.w	fp, r3, r1
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f04f 0100 	mov.w	r1, #0
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	008b      	lsls	r3, r1, #2
 8006c2a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c2e:	0082      	lsls	r2, r0, #2
 8006c30:	4650      	mov	r0, sl
 8006c32:	4659      	mov	r1, fp
 8006c34:	f7fa f884 	bl	8000d40 <__aeabi_uldivmod>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	460b      	mov	r3, r1
 8006c3c:	4b0e      	ldr	r3, [pc, #56]	; (8006c78 <UART_SetConfig+0x38c>)
 8006c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2164      	movs	r1, #100	; 0x64
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	3332      	adds	r3, #50	; 0x32
 8006c50:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <UART_SetConfig+0x38c>)
 8006c52:	fba2 2303 	umull	r2, r3, r2, r3
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	f003 020f 	and.w	r2, r3, #15
 8006c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4432      	add	r2, r6
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	377c      	adds	r7, #124	; 0x7c
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	bf00      	nop
 8006c70:	40011000 	.word	0x40011000
 8006c74:	40011400 	.word	0x40011400
 8006c78:	51eb851f 	.word	0x51eb851f

08006c7c <calloc>:
 8006c7c:	4b02      	ldr	r3, [pc, #8]	; (8006c88 <calloc+0xc>)
 8006c7e:	460a      	mov	r2, r1
 8006c80:	4601      	mov	r1, r0
 8006c82:	6818      	ldr	r0, [r3, #0]
 8006c84:	f000 b842 	b.w	8006d0c <_calloc_r>
 8006c88:	20000044 	.word	0x20000044

08006c8c <__errno>:
 8006c8c:	4b01      	ldr	r3, [pc, #4]	; (8006c94 <__errno+0x8>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000044 	.word	0x20000044

08006c98 <__libc_init_array>:
 8006c98:	b570      	push	{r4, r5, r6, lr}
 8006c9a:	4d0d      	ldr	r5, [pc, #52]	; (8006cd0 <__libc_init_array+0x38>)
 8006c9c:	4c0d      	ldr	r4, [pc, #52]	; (8006cd4 <__libc_init_array+0x3c>)
 8006c9e:	1b64      	subs	r4, r4, r5
 8006ca0:	10a4      	asrs	r4, r4, #2
 8006ca2:	2600      	movs	r6, #0
 8006ca4:	42a6      	cmp	r6, r4
 8006ca6:	d109      	bne.n	8006cbc <__libc_init_array+0x24>
 8006ca8:	4d0b      	ldr	r5, [pc, #44]	; (8006cd8 <__libc_init_array+0x40>)
 8006caa:	4c0c      	ldr	r4, [pc, #48]	; (8006cdc <__libc_init_array+0x44>)
 8006cac:	f000 fd20 	bl	80076f0 <_init>
 8006cb0:	1b64      	subs	r4, r4, r5
 8006cb2:	10a4      	asrs	r4, r4, #2
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42a6      	cmp	r6, r4
 8006cb8:	d105      	bne.n	8006cc6 <__libc_init_array+0x2e>
 8006cba:	bd70      	pop	{r4, r5, r6, pc}
 8006cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cc0:	4798      	blx	r3
 8006cc2:	3601      	adds	r6, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__libc_init_array+0xc>
 8006cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cca:	4798      	blx	r3
 8006ccc:	3601      	adds	r6, #1
 8006cce:	e7f2      	b.n	8006cb6 <__libc_init_array+0x1e>
 8006cd0:	08007758 	.word	0x08007758
 8006cd4:	08007758 	.word	0x08007758
 8006cd8:	08007758 	.word	0x08007758
 8006cdc:	0800775c 	.word	0x0800775c

08006ce0 <memcpy>:
 8006ce0:	440a      	add	r2, r1
 8006ce2:	4291      	cmp	r1, r2
 8006ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ce8:	d100      	bne.n	8006cec <memcpy+0xc>
 8006cea:	4770      	bx	lr
 8006cec:	b510      	push	{r4, lr}
 8006cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cf6:	4291      	cmp	r1, r2
 8006cf8:	d1f9      	bne.n	8006cee <memcpy+0xe>
 8006cfa:	bd10      	pop	{r4, pc}

08006cfc <memset>:
 8006cfc:	4402      	add	r2, r0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d100      	bne.n	8006d06 <memset+0xa>
 8006d04:	4770      	bx	lr
 8006d06:	f803 1b01 	strb.w	r1, [r3], #1
 8006d0a:	e7f9      	b.n	8006d00 <memset+0x4>

08006d0c <_calloc_r>:
 8006d0c:	b513      	push	{r0, r1, r4, lr}
 8006d0e:	434a      	muls	r2, r1
 8006d10:	4611      	mov	r1, r2
 8006d12:	9201      	str	r2, [sp, #4]
 8006d14:	f000 f80a 	bl	8006d2c <_malloc_r>
 8006d18:	4604      	mov	r4, r0
 8006d1a:	b118      	cbz	r0, 8006d24 <_calloc_r+0x18>
 8006d1c:	9a01      	ldr	r2, [sp, #4]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	f7ff ffec 	bl	8006cfc <memset>
 8006d24:	4620      	mov	r0, r4
 8006d26:	b002      	add	sp, #8
 8006d28:	bd10      	pop	{r4, pc}
	...

08006d2c <_malloc_r>:
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	1ccd      	adds	r5, r1, #3
 8006d30:	f025 0503 	bic.w	r5, r5, #3
 8006d34:	3508      	adds	r5, #8
 8006d36:	2d0c      	cmp	r5, #12
 8006d38:	bf38      	it	cc
 8006d3a:	250c      	movcc	r5, #12
 8006d3c:	2d00      	cmp	r5, #0
 8006d3e:	4606      	mov	r6, r0
 8006d40:	db01      	blt.n	8006d46 <_malloc_r+0x1a>
 8006d42:	42a9      	cmp	r1, r5
 8006d44:	d903      	bls.n	8006d4e <_malloc_r+0x22>
 8006d46:	230c      	movs	r3, #12
 8006d48:	6033      	str	r3, [r6, #0]
 8006d4a:	2000      	movs	r0, #0
 8006d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d4e:	f000 f857 	bl	8006e00 <__malloc_lock>
 8006d52:	4921      	ldr	r1, [pc, #132]	; (8006dd8 <_malloc_r+0xac>)
 8006d54:	680a      	ldr	r2, [r1, #0]
 8006d56:	4614      	mov	r4, r2
 8006d58:	b99c      	cbnz	r4, 8006d82 <_malloc_r+0x56>
 8006d5a:	4f20      	ldr	r7, [pc, #128]	; (8006ddc <_malloc_r+0xb0>)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	b923      	cbnz	r3, 8006d6a <_malloc_r+0x3e>
 8006d60:	4621      	mov	r1, r4
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f83c 	bl	8006de0 <_sbrk_r>
 8006d68:	6038      	str	r0, [r7, #0]
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f000 f837 	bl	8006de0 <_sbrk_r>
 8006d72:	1c43      	adds	r3, r0, #1
 8006d74:	d123      	bne.n	8006dbe <_malloc_r+0x92>
 8006d76:	230c      	movs	r3, #12
 8006d78:	6033      	str	r3, [r6, #0]
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	f000 f846 	bl	8006e0c <__malloc_unlock>
 8006d80:	e7e3      	b.n	8006d4a <_malloc_r+0x1e>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	1b5b      	subs	r3, r3, r5
 8006d86:	d417      	bmi.n	8006db8 <_malloc_r+0x8c>
 8006d88:	2b0b      	cmp	r3, #11
 8006d8a:	d903      	bls.n	8006d94 <_malloc_r+0x68>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	441c      	add	r4, r3
 8006d90:	6025      	str	r5, [r4, #0]
 8006d92:	e004      	b.n	8006d9e <_malloc_r+0x72>
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	42a2      	cmp	r2, r4
 8006d98:	bf0c      	ite	eq
 8006d9a:	600b      	streq	r3, [r1, #0]
 8006d9c:	6053      	strne	r3, [r2, #4]
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f000 f834 	bl	8006e0c <__malloc_unlock>
 8006da4:	f104 000b 	add.w	r0, r4, #11
 8006da8:	1d23      	adds	r3, r4, #4
 8006daa:	f020 0007 	bic.w	r0, r0, #7
 8006dae:	1ac2      	subs	r2, r0, r3
 8006db0:	d0cc      	beq.n	8006d4c <_malloc_r+0x20>
 8006db2:	1a1b      	subs	r3, r3, r0
 8006db4:	50a3      	str	r3, [r4, r2]
 8006db6:	e7c9      	b.n	8006d4c <_malloc_r+0x20>
 8006db8:	4622      	mov	r2, r4
 8006dba:	6864      	ldr	r4, [r4, #4]
 8006dbc:	e7cc      	b.n	8006d58 <_malloc_r+0x2c>
 8006dbe:	1cc4      	adds	r4, r0, #3
 8006dc0:	f024 0403 	bic.w	r4, r4, #3
 8006dc4:	42a0      	cmp	r0, r4
 8006dc6:	d0e3      	beq.n	8006d90 <_malloc_r+0x64>
 8006dc8:	1a21      	subs	r1, r4, r0
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f000 f808 	bl	8006de0 <_sbrk_r>
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	d1dd      	bne.n	8006d90 <_malloc_r+0x64>
 8006dd4:	e7cf      	b.n	8006d76 <_malloc_r+0x4a>
 8006dd6:	bf00      	nop
 8006dd8:	200001dc 	.word	0x200001dc
 8006ddc:	200001e0 	.word	0x200001e0

08006de0 <_sbrk_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	; (8006dfc <_sbrk_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fc f94c 	bl	8003088 <_sbrk>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_sbrk_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_sbrk_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000474 	.word	0x20000474

08006e00 <__malloc_lock>:
 8006e00:	4801      	ldr	r0, [pc, #4]	; (8006e08 <__malloc_lock+0x8>)
 8006e02:	f000 b809 	b.w	8006e18 <__retarget_lock_acquire_recursive>
 8006e06:	bf00      	nop
 8006e08:	2000047c 	.word	0x2000047c

08006e0c <__malloc_unlock>:
 8006e0c:	4801      	ldr	r0, [pc, #4]	; (8006e14 <__malloc_unlock+0x8>)
 8006e0e:	f000 b804 	b.w	8006e1a <__retarget_lock_release_recursive>
 8006e12:	bf00      	nop
 8006e14:	2000047c 	.word	0x2000047c

08006e18 <__retarget_lock_acquire_recursive>:
 8006e18:	4770      	bx	lr

08006e1a <__retarget_lock_release_recursive>:
 8006e1a:	4770      	bx	lr

08006e1c <powf>:
 8006e1c:	b508      	push	{r3, lr}
 8006e1e:	ed2d 8b04 	vpush	{d8-d9}
 8006e22:	eeb0 9a40 	vmov.f32	s18, s0
 8006e26:	eef0 8a60 	vmov.f32	s17, s1
 8006e2a:	f000 f8b5 	bl	8006f98 <__ieee754_powf>
 8006e2e:	4b43      	ldr	r3, [pc, #268]	; (8006f3c <powf+0x120>)
 8006e30:	f993 3000 	ldrsb.w	r3, [r3]
 8006e34:	3301      	adds	r3, #1
 8006e36:	eeb0 8a40 	vmov.f32	s16, s0
 8006e3a:	d012      	beq.n	8006e62 <powf+0x46>
 8006e3c:	eef4 8a68 	vcmp.f32	s17, s17
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	d60d      	bvs.n	8006e62 <powf+0x46>
 8006e46:	eeb4 9a49 	vcmp.f32	s18, s18
 8006e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4e:	d70d      	bvc.n	8006e6c <powf+0x50>
 8006e50:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e5c:	bf08      	it	eq
 8006e5e:	eeb0 8a67 	vmoveq.f32	s16, s15
 8006e62:	eeb0 0a48 	vmov.f32	s0, s16
 8006e66:	ecbd 8b04 	vpop	{d8-d9}
 8006e6a:	bd08      	pop	{r3, pc}
 8006e6c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8006f40 <powf+0x124>
 8006e70:	eeb4 9a69 	vcmp.f32	s18, s19
 8006e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e78:	d116      	bne.n	8006ea8 <powf+0x8c>
 8006e7a:	eef4 8a69 	vcmp.f32	s17, s19
 8006e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e82:	d057      	beq.n	8006f34 <powf+0x118>
 8006e84:	eeb0 0a68 	vmov.f32	s0, s17
 8006e88:	f000 fb50 	bl	800752c <finitef>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d0e8      	beq.n	8006e62 <powf+0x46>
 8006e90:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e98:	d5e3      	bpl.n	8006e62 <powf+0x46>
 8006e9a:	f7ff fef7 	bl	8006c8c <__errno>
 8006e9e:	2321      	movs	r3, #33	; 0x21
 8006ea0:	6003      	str	r3, [r0, #0]
 8006ea2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8006f44 <powf+0x128>
 8006ea6:	e7dc      	b.n	8006e62 <powf+0x46>
 8006ea8:	f000 fb40 	bl	800752c <finitef>
 8006eac:	bb50      	cbnz	r0, 8006f04 <powf+0xe8>
 8006eae:	eeb0 0a49 	vmov.f32	s0, s18
 8006eb2:	f000 fb3b 	bl	800752c <finitef>
 8006eb6:	b328      	cbz	r0, 8006f04 <powf+0xe8>
 8006eb8:	eeb0 0a68 	vmov.f32	s0, s17
 8006ebc:	f000 fb36 	bl	800752c <finitef>
 8006ec0:	b300      	cbz	r0, 8006f04 <powf+0xe8>
 8006ec2:	eeb4 8a48 	vcmp.f32	s16, s16
 8006ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eca:	d706      	bvc.n	8006eda <powf+0xbe>
 8006ecc:	f7ff fede 	bl	8006c8c <__errno>
 8006ed0:	2321      	movs	r3, #33	; 0x21
 8006ed2:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8006ed6:	6003      	str	r3, [r0, #0]
 8006ed8:	e7c3      	b.n	8006e62 <powf+0x46>
 8006eda:	f7ff fed7 	bl	8006c8c <__errno>
 8006ede:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006ee2:	2322      	movs	r3, #34	; 0x22
 8006ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee8:	6003      	str	r3, [r0, #0]
 8006eea:	d508      	bpl.n	8006efe <powf+0xe2>
 8006eec:	eeb0 0a68 	vmov.f32	s0, s17
 8006ef0:	f000 fb30 	bl	8007554 <rintf>
 8006ef4:	eeb4 0a68 	vcmp.f32	s0, s17
 8006ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efc:	d1d1      	bne.n	8006ea2 <powf+0x86>
 8006efe:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8006f48 <powf+0x12c>
 8006f02:	e7ae      	b.n	8006e62 <powf+0x46>
 8006f04:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0c:	d1a9      	bne.n	8006e62 <powf+0x46>
 8006f0e:	eeb0 0a49 	vmov.f32	s0, s18
 8006f12:	f000 fb0b 	bl	800752c <finitef>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0a3      	beq.n	8006e62 <powf+0x46>
 8006f1a:	eeb0 0a68 	vmov.f32	s0, s17
 8006f1e:	f000 fb05 	bl	800752c <finitef>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d09d      	beq.n	8006e62 <powf+0x46>
 8006f26:	f7ff feb1 	bl	8006c8c <__errno>
 8006f2a:	2322      	movs	r3, #34	; 0x22
 8006f2c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006f40 <powf+0x124>
 8006f30:	6003      	str	r3, [r0, #0]
 8006f32:	e796      	b.n	8006e62 <powf+0x46>
 8006f34:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006f38:	e793      	b.n	8006e62 <powf+0x46>
 8006f3a:	bf00      	nop
 8006f3c:	200000a8 	.word	0x200000a8
 8006f40:	00000000 	.word	0x00000000
 8006f44:	ff800000 	.word	0xff800000
 8006f48:	7f800000 	.word	0x7f800000

08006f4c <sqrtf>:
 8006f4c:	b508      	push	{r3, lr}
 8006f4e:	ed2d 8b02 	vpush	{d8}
 8006f52:	eeb0 8a40 	vmov.f32	s16, s0
 8006f56:	f000 fadf 	bl	8007518 <__ieee754_sqrtf>
 8006f5a:	4b0d      	ldr	r3, [pc, #52]	; (8006f90 <sqrtf+0x44>)
 8006f5c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f60:	3301      	adds	r3, #1
 8006f62:	d011      	beq.n	8006f88 <sqrtf+0x3c>
 8006f64:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6c:	d60c      	bvs.n	8006f88 <sqrtf+0x3c>
 8006f6e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006f94 <sqrtf+0x48>
 8006f72:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	d505      	bpl.n	8006f88 <sqrtf+0x3c>
 8006f7c:	f7ff fe86 	bl	8006c8c <__errno>
 8006f80:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f84:	2321      	movs	r3, #33	; 0x21
 8006f86:	6003      	str	r3, [r0, #0]
 8006f88:	ecbd 8b02 	vpop	{d8}
 8006f8c:	bd08      	pop	{r3, pc}
 8006f8e:	bf00      	nop
 8006f90:	200000a8 	.word	0x200000a8
 8006f94:	00000000 	.word	0x00000000

08006f98 <__ieee754_powf>:
 8006f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f9c:	ee10 5a90 	vmov	r5, s1
 8006fa0:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006fa4:	ed2d 8b02 	vpush	{d8}
 8006fa8:	eeb0 8a40 	vmov.f32	s16, s0
 8006fac:	eef0 8a60 	vmov.f32	s17, s1
 8006fb0:	f000 8291 	beq.w	80074d6 <__ieee754_powf+0x53e>
 8006fb4:	ee10 8a10 	vmov	r8, s0
 8006fb8:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006fbc:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006fc0:	dc06      	bgt.n	8006fd0 <__ieee754_powf+0x38>
 8006fc2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006fc6:	dd0a      	ble.n	8006fde <__ieee754_powf+0x46>
 8006fc8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006fcc:	f000 8283 	beq.w	80074d6 <__ieee754_powf+0x53e>
 8006fd0:	ecbd 8b02 	vpop	{d8}
 8006fd4:	48d8      	ldr	r0, [pc, #864]	; (8007338 <__ieee754_powf+0x3a0>)
 8006fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	f000 bab5 	b.w	8007548 <nanf>
 8006fde:	f1b8 0f00 	cmp.w	r8, #0
 8006fe2:	da1f      	bge.n	8007024 <__ieee754_powf+0x8c>
 8006fe4:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006fe8:	da2e      	bge.n	8007048 <__ieee754_powf+0xb0>
 8006fea:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006fee:	f2c0 827b 	blt.w	80074e8 <__ieee754_powf+0x550>
 8006ff2:	15fb      	asrs	r3, r7, #23
 8006ff4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006ff8:	fa47 f603 	asr.w	r6, r7, r3
 8006ffc:	fa06 f303 	lsl.w	r3, r6, r3
 8007000:	42bb      	cmp	r3, r7
 8007002:	f040 8271 	bne.w	80074e8 <__ieee754_powf+0x550>
 8007006:	f006 0601 	and.w	r6, r6, #1
 800700a:	f1c6 0602 	rsb	r6, r6, #2
 800700e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007012:	d120      	bne.n	8007056 <__ieee754_powf+0xbe>
 8007014:	2d00      	cmp	r5, #0
 8007016:	f280 8264 	bge.w	80074e2 <__ieee754_powf+0x54a>
 800701a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800701e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007022:	e00d      	b.n	8007040 <__ieee754_powf+0xa8>
 8007024:	2600      	movs	r6, #0
 8007026:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800702a:	d1f0      	bne.n	800700e <__ieee754_powf+0x76>
 800702c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007030:	f000 8251 	beq.w	80074d6 <__ieee754_powf+0x53e>
 8007034:	dd0a      	ble.n	800704c <__ieee754_powf+0xb4>
 8007036:	2d00      	cmp	r5, #0
 8007038:	f280 8250 	bge.w	80074dc <__ieee754_powf+0x544>
 800703c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800733c <__ieee754_powf+0x3a4>
 8007040:	ecbd 8b02 	vpop	{d8}
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	2602      	movs	r6, #2
 800704a:	e7ec      	b.n	8007026 <__ieee754_powf+0x8e>
 800704c:	2d00      	cmp	r5, #0
 800704e:	daf5      	bge.n	800703c <__ieee754_powf+0xa4>
 8007050:	eeb1 0a68 	vneg.f32	s0, s17
 8007054:	e7f4      	b.n	8007040 <__ieee754_powf+0xa8>
 8007056:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800705a:	d102      	bne.n	8007062 <__ieee754_powf+0xca>
 800705c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007060:	e7ee      	b.n	8007040 <__ieee754_powf+0xa8>
 8007062:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007066:	eeb0 0a48 	vmov.f32	s0, s16
 800706a:	d108      	bne.n	800707e <__ieee754_powf+0xe6>
 800706c:	f1b8 0f00 	cmp.w	r8, #0
 8007070:	db05      	blt.n	800707e <__ieee754_powf+0xe6>
 8007072:	ecbd 8b02 	vpop	{d8}
 8007076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800707a:	f000 ba4d 	b.w	8007518 <__ieee754_sqrtf>
 800707e:	f000 fa4e 	bl	800751e <fabsf>
 8007082:	b124      	cbz	r4, 800708e <__ieee754_powf+0xf6>
 8007084:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007088:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800708c:	d117      	bne.n	80070be <__ieee754_powf+0x126>
 800708e:	2d00      	cmp	r5, #0
 8007090:	bfbc      	itt	lt
 8007092:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007096:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800709a:	f1b8 0f00 	cmp.w	r8, #0
 800709e:	dacf      	bge.n	8007040 <__ieee754_powf+0xa8>
 80070a0:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80070a4:	ea54 0306 	orrs.w	r3, r4, r6
 80070a8:	d104      	bne.n	80070b4 <__ieee754_powf+0x11c>
 80070aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80070ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80070b2:	e7c5      	b.n	8007040 <__ieee754_powf+0xa8>
 80070b4:	2e01      	cmp	r6, #1
 80070b6:	d1c3      	bne.n	8007040 <__ieee754_powf+0xa8>
 80070b8:	eeb1 0a40 	vneg.f32	s0, s0
 80070bc:	e7c0      	b.n	8007040 <__ieee754_powf+0xa8>
 80070be:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80070c2:	3801      	subs	r0, #1
 80070c4:	ea56 0300 	orrs.w	r3, r6, r0
 80070c8:	d104      	bne.n	80070d4 <__ieee754_powf+0x13c>
 80070ca:	ee38 8a48 	vsub.f32	s16, s16, s16
 80070ce:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80070d2:	e7b5      	b.n	8007040 <__ieee754_powf+0xa8>
 80070d4:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80070d8:	dd6b      	ble.n	80071b2 <__ieee754_powf+0x21a>
 80070da:	4b99      	ldr	r3, [pc, #612]	; (8007340 <__ieee754_powf+0x3a8>)
 80070dc:	429c      	cmp	r4, r3
 80070de:	dc06      	bgt.n	80070ee <__ieee754_powf+0x156>
 80070e0:	2d00      	cmp	r5, #0
 80070e2:	daab      	bge.n	800703c <__ieee754_powf+0xa4>
 80070e4:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8007344 <__ieee754_powf+0x3ac>
 80070e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80070ec:	e7a8      	b.n	8007040 <__ieee754_powf+0xa8>
 80070ee:	4b96      	ldr	r3, [pc, #600]	; (8007348 <__ieee754_powf+0x3b0>)
 80070f0:	429c      	cmp	r4, r3
 80070f2:	dd02      	ble.n	80070fa <__ieee754_powf+0x162>
 80070f4:	2d00      	cmp	r5, #0
 80070f6:	dcf5      	bgt.n	80070e4 <__ieee754_powf+0x14c>
 80070f8:	e7a0      	b.n	800703c <__ieee754_powf+0xa4>
 80070fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80070fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007102:	eddf 6a92 	vldr	s13, [pc, #584]	; 800734c <__ieee754_powf+0x3b4>
 8007106:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800710a:	eee0 6a67 	vfms.f32	s13, s0, s15
 800710e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007112:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007116:	ee20 7a00 	vmul.f32	s14, s0, s0
 800711a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800711e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8007350 <__ieee754_powf+0x3b8>
 8007122:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007126:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007354 <__ieee754_powf+0x3bc>
 800712a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800712e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8007358 <__ieee754_powf+0x3c0>
 8007132:	eef0 6a67 	vmov.f32	s13, s15
 8007136:	eee0 6a07 	vfma.f32	s13, s0, s14
 800713a:	ee16 3a90 	vmov	r3, s13
 800713e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007142:	f023 030f 	bic.w	r3, r3, #15
 8007146:	ee00 3a90 	vmov	s1, r3
 800714a:	eee0 0a47 	vfms.f32	s1, s0, s14
 800714e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007152:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007156:	f025 050f 	bic.w	r5, r5, #15
 800715a:	ee07 5a10 	vmov	s14, r5
 800715e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007162:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800716e:	3e01      	subs	r6, #1
 8007170:	ea56 0200 	orrs.w	r2, r6, r0
 8007174:	ee07 5a10 	vmov	s14, r5
 8007178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800717c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007180:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007184:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007188:	ee17 4a10 	vmov	r4, s14
 800718c:	bf08      	it	eq
 800718e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007192:	2c00      	cmp	r4, #0
 8007194:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007198:	f340 8184 	ble.w	80074a4 <__ieee754_powf+0x50c>
 800719c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80071a0:	f340 80fc 	ble.w	800739c <__ieee754_powf+0x404>
 80071a4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8007344 <__ieee754_powf+0x3ac>
 80071a8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80071ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80071b0:	e746      	b.n	8007040 <__ieee754_powf+0xa8>
 80071b2:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80071b6:	bf01      	itttt	eq
 80071b8:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800735c <__ieee754_powf+0x3c4>
 80071bc:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80071c0:	f06f 0217 	mvneq.w	r2, #23
 80071c4:	ee17 4a90 	vmoveq	r4, s15
 80071c8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80071cc:	bf18      	it	ne
 80071ce:	2200      	movne	r2, #0
 80071d0:	3b7f      	subs	r3, #127	; 0x7f
 80071d2:	4413      	add	r3, r2
 80071d4:	4a62      	ldr	r2, [pc, #392]	; (8007360 <__ieee754_powf+0x3c8>)
 80071d6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80071da:	4294      	cmp	r4, r2
 80071dc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80071e0:	dd06      	ble.n	80071f0 <__ieee754_powf+0x258>
 80071e2:	4a60      	ldr	r2, [pc, #384]	; (8007364 <__ieee754_powf+0x3cc>)
 80071e4:	4294      	cmp	r4, r2
 80071e6:	f340 80a4 	ble.w	8007332 <__ieee754_powf+0x39a>
 80071ea:	3301      	adds	r3, #1
 80071ec:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80071f0:	2400      	movs	r4, #0
 80071f2:	4a5d      	ldr	r2, [pc, #372]	; (8007368 <__ieee754_powf+0x3d0>)
 80071f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80071f8:	ee07 1a90 	vmov	s15, r1
 80071fc:	ed92 7a00 	vldr	s14, [r2]
 8007200:	4a5a      	ldr	r2, [pc, #360]	; (800736c <__ieee754_powf+0x3d4>)
 8007202:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007206:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800720a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800720e:	1049      	asrs	r1, r1, #1
 8007210:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007214:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007218:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800721c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007220:	ee06 1a10 	vmov	s12, r1
 8007224:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007228:	ee36 7a47 	vsub.f32	s14, s12, s14
 800722c:	ee14 7a90 	vmov	r7, s9
 8007230:	4017      	ands	r7, r2
 8007232:	ee05 7a90 	vmov	s11, r7
 8007236:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800723a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800723e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007370 <__ieee754_powf+0x3d8>
 8007242:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007246:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800724a:	ee25 6a26 	vmul.f32	s12, s10, s13
 800724e:	eddf 6a49 	vldr	s13, [pc, #292]	; 8007374 <__ieee754_powf+0x3dc>
 8007252:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007256:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007378 <__ieee754_powf+0x3e0>
 800725a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800725e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800734c <__ieee754_powf+0x3b4>
 8007262:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007266:	eddf 6a45 	vldr	s13, [pc, #276]	; 800737c <__ieee754_powf+0x3e4>
 800726a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800726e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007380 <__ieee754_powf+0x3e8>
 8007272:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007276:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800727a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800727e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007282:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007286:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800728a:	eef0 7a45 	vmov.f32	s15, s10
 800728e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007296:	ee17 1a90 	vmov	r1, s15
 800729a:	4011      	ands	r1, r2
 800729c:	ee07 1a90 	vmov	s15, r1
 80072a0:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80072a4:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80072a8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80072ac:	ee27 7a24 	vmul.f32	s14, s14, s9
 80072b0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80072b4:	eeb0 6a47 	vmov.f32	s12, s14
 80072b8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80072bc:	ee16 1a10 	vmov	r1, s12
 80072c0:	4011      	ands	r1, r2
 80072c2:	ee06 1a90 	vmov	s13, r1
 80072c6:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80072ca:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8007384 <__ieee754_powf+0x3ec>
 80072ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007388 <__ieee754_powf+0x3f0>
 80072d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80072d6:	ee06 1a10 	vmov	s12, r1
 80072da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80072de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800738c <__ieee754_powf+0x3f4>
 80072e2:	492b      	ldr	r1, [pc, #172]	; (8007390 <__ieee754_powf+0x3f8>)
 80072e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80072e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072ec:	edd1 7a00 	vldr	s15, [r1]
 80072f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072f4:	ee07 3a90 	vmov	s15, r3
 80072f8:	4b26      	ldr	r3, [pc, #152]	; (8007394 <__ieee754_powf+0x3fc>)
 80072fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80072fe:	eef0 7a47 	vmov.f32	s15, s14
 8007302:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007306:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800730a:	edd4 0a00 	vldr	s1, [r4]
 800730e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee17 3a90 	vmov	r3, s15
 800731a:	4013      	ands	r3, r2
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8007324:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8007328:	eee6 6a65 	vfms.f32	s13, s12, s11
 800732c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8007330:	e70f      	b.n	8007152 <__ieee754_powf+0x1ba>
 8007332:	2401      	movs	r4, #1
 8007334:	e75d      	b.n	80071f2 <__ieee754_powf+0x25a>
 8007336:	bf00      	nop
 8007338:	0800772c 	.word	0x0800772c
 800733c:	00000000 	.word	0x00000000
 8007340:	3f7ffff7 	.word	0x3f7ffff7
 8007344:	7149f2ca 	.word	0x7149f2ca
 8007348:	3f800007 	.word	0x3f800007
 800734c:	3eaaaaab 	.word	0x3eaaaaab
 8007350:	3fb8aa3b 	.word	0x3fb8aa3b
 8007354:	36eca570 	.word	0x36eca570
 8007358:	3fb8aa00 	.word	0x3fb8aa00
 800735c:	4b800000 	.word	0x4b800000
 8007360:	001cc471 	.word	0x001cc471
 8007364:	005db3d6 	.word	0x005db3d6
 8007368:	08007730 	.word	0x08007730
 800736c:	fffff000 	.word	0xfffff000
 8007370:	3e6c3255 	.word	0x3e6c3255
 8007374:	3e53f142 	.word	0x3e53f142
 8007378:	3e8ba305 	.word	0x3e8ba305
 800737c:	3edb6db7 	.word	0x3edb6db7
 8007380:	3f19999a 	.word	0x3f19999a
 8007384:	3f76384f 	.word	0x3f76384f
 8007388:	3f763800 	.word	0x3f763800
 800738c:	369dc3a0 	.word	0x369dc3a0
 8007390:	08007740 	.word	0x08007740
 8007394:	08007738 	.word	0x08007738
 8007398:	3338aa3c 	.word	0x3338aa3c
 800739c:	f040 8092 	bne.w	80074c4 <__ieee754_powf+0x52c>
 80073a0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8007398 <__ieee754_powf+0x400>
 80073a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073a8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80073ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80073b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b4:	f73f aef6 	bgt.w	80071a4 <__ieee754_powf+0x20c>
 80073b8:	15db      	asrs	r3, r3, #23
 80073ba:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80073be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80073c2:	4103      	asrs	r3, r0
 80073c4:	4423      	add	r3, r4
 80073c6:	4949      	ldr	r1, [pc, #292]	; (80074ec <__ieee754_powf+0x554>)
 80073c8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80073cc:	3a7f      	subs	r2, #127	; 0x7f
 80073ce:	4111      	asrs	r1, r2
 80073d0:	ea23 0101 	bic.w	r1, r3, r1
 80073d4:	ee07 1a10 	vmov	s14, r1
 80073d8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80073dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80073e0:	f1c2 0217 	rsb	r2, r2, #23
 80073e4:	4110      	asrs	r0, r2
 80073e6:	2c00      	cmp	r4, #0
 80073e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073ec:	bfb8      	it	lt
 80073ee:	4240      	neglt	r0, r0
 80073f0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80073f4:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80074f0 <__ieee754_powf+0x558>
 80073f8:	ee17 3a10 	vmov	r3, s14
 80073fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007400:	f023 030f 	bic.w	r3, r3, #15
 8007404:	ee07 3a10 	vmov	s14, r3
 8007408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800740c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007410:	eddf 7a38 	vldr	s15, [pc, #224]	; 80074f4 <__ieee754_powf+0x55c>
 8007414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007418:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800741c:	eddf 6a36 	vldr	s13, [pc, #216]	; 80074f8 <__ieee754_powf+0x560>
 8007420:	eeb0 0a67 	vmov.f32	s0, s15
 8007424:	eea7 0a26 	vfma.f32	s0, s14, s13
 8007428:	eeb0 6a40 	vmov.f32	s12, s0
 800742c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8007430:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007434:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007438:	eddf 6a30 	vldr	s13, [pc, #192]	; 80074fc <__ieee754_powf+0x564>
 800743c:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007500 <__ieee754_powf+0x568>
 8007440:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007444:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8007504 <__ieee754_powf+0x56c>
 8007448:	eee6 6a07 	vfma.f32	s13, s12, s14
 800744c:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8007508 <__ieee754_powf+0x570>
 8007450:	eea6 6a87 	vfma.f32	s12, s13, s14
 8007454:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800750c <__ieee754_powf+0x574>
 8007458:	eee6 6a07 	vfma.f32	s13, s12, s14
 800745c:	eeb0 6a40 	vmov.f32	s12, s0
 8007460:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8007464:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007468:	eeb0 7a46 	vmov.f32	s14, s12
 800746c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007470:	ee20 6a06 	vmul.f32	s12, s0, s12
 8007474:	eee0 7a27 	vfma.f32	s15, s0, s15
 8007478:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800747c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007480:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007484:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007488:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800748c:	ee10 3a10 	vmov	r3, s0
 8007490:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8007494:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007498:	da1a      	bge.n	80074d0 <__ieee754_powf+0x538>
 800749a:	f000 f8b7 	bl	800760c <scalbnf>
 800749e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80074a2:	e5cd      	b.n	8007040 <__ieee754_powf+0xa8>
 80074a4:	4a1a      	ldr	r2, [pc, #104]	; (8007510 <__ieee754_powf+0x578>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	dd02      	ble.n	80074b0 <__ieee754_powf+0x518>
 80074aa:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8007514 <__ieee754_powf+0x57c>
 80074ae:	e67b      	b.n	80071a8 <__ieee754_powf+0x210>
 80074b0:	d108      	bne.n	80074c4 <__ieee754_powf+0x52c>
 80074b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074b6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80074ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074be:	f6ff af7b 	blt.w	80073b8 <__ieee754_powf+0x420>
 80074c2:	e7f2      	b.n	80074aa <__ieee754_powf+0x512>
 80074c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80074c8:	f73f af76 	bgt.w	80073b8 <__ieee754_powf+0x420>
 80074cc:	2000      	movs	r0, #0
 80074ce:	e78f      	b.n	80073f0 <__ieee754_powf+0x458>
 80074d0:	ee00 3a10 	vmov	s0, r3
 80074d4:	e7e3      	b.n	800749e <__ieee754_powf+0x506>
 80074d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80074da:	e5b1      	b.n	8007040 <__ieee754_powf+0xa8>
 80074dc:	eeb0 0a68 	vmov.f32	s0, s17
 80074e0:	e5ae      	b.n	8007040 <__ieee754_powf+0xa8>
 80074e2:	eeb0 0a48 	vmov.f32	s0, s16
 80074e6:	e5ab      	b.n	8007040 <__ieee754_powf+0xa8>
 80074e8:	2600      	movs	r6, #0
 80074ea:	e590      	b.n	800700e <__ieee754_powf+0x76>
 80074ec:	007fffff 	.word	0x007fffff
 80074f0:	3f317218 	.word	0x3f317218
 80074f4:	35bfbe8c 	.word	0x35bfbe8c
 80074f8:	3f317200 	.word	0x3f317200
 80074fc:	3331bb4c 	.word	0x3331bb4c
 8007500:	b5ddea0e 	.word	0xb5ddea0e
 8007504:	388ab355 	.word	0x388ab355
 8007508:	bb360b61 	.word	0xbb360b61
 800750c:	3e2aaaab 	.word	0x3e2aaaab
 8007510:	43160000 	.word	0x43160000
 8007514:	0da24260 	.word	0x0da24260

08007518 <__ieee754_sqrtf>:
 8007518:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800751c:	4770      	bx	lr

0800751e <fabsf>:
 800751e:	ee10 3a10 	vmov	r3, s0
 8007522:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007526:	ee00 3a10 	vmov	s0, r3
 800752a:	4770      	bx	lr

0800752c <finitef>:
 800752c:	b082      	sub	sp, #8
 800752e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007532:	9801      	ldr	r0, [sp, #4]
 8007534:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007538:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800753c:	bfac      	ite	ge
 800753e:	2000      	movge	r0, #0
 8007540:	2001      	movlt	r0, #1
 8007542:	b002      	add	sp, #8
 8007544:	4770      	bx	lr
	...

08007548 <nanf>:
 8007548:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007550 <nanf+0x8>
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	7fc00000 	.word	0x7fc00000

08007554 <rintf>:
 8007554:	ee10 2a10 	vmov	r2, s0
 8007558:	b513      	push	{r0, r1, r4, lr}
 800755a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800755e:	397f      	subs	r1, #127	; 0x7f
 8007560:	2916      	cmp	r1, #22
 8007562:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007566:	dc47      	bgt.n	80075f8 <rintf+0xa4>
 8007568:	b32b      	cbz	r3, 80075b6 <rintf+0x62>
 800756a:	2900      	cmp	r1, #0
 800756c:	ee10 3a10 	vmov	r3, s0
 8007570:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8007574:	da21      	bge.n	80075ba <rintf+0x66>
 8007576:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800757a:	425b      	negs	r3, r3
 800757c:	4921      	ldr	r1, [pc, #132]	; (8007604 <rintf+0xb0>)
 800757e:	0a5b      	lsrs	r3, r3, #9
 8007580:	0d12      	lsrs	r2, r2, #20
 8007582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007586:	0512      	lsls	r2, r2, #20
 8007588:	4313      	orrs	r3, r2
 800758a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	edd1 6a00 	vldr	s13, [r1]
 8007596:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800759a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800759e:	eddd 7a01 	vldr	s15, [sp, #4]
 80075a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075a6:	ee17 3a90 	vmov	r3, s15
 80075aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075ae:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80075b2:	ee00 3a10 	vmov	s0, r3
 80075b6:	b002      	add	sp, #8
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <rintf+0xb4>)
 80075bc:	410a      	asrs	r2, r1
 80075be:	4213      	tst	r3, r2
 80075c0:	d0f9      	beq.n	80075b6 <rintf+0x62>
 80075c2:	0854      	lsrs	r4, r2, #1
 80075c4:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80075c8:	d006      	beq.n	80075d8 <rintf+0x84>
 80075ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80075ce:	ea23 0304 	bic.w	r3, r3, r4
 80075d2:	fa42 f101 	asr.w	r1, r2, r1
 80075d6:	430b      	orrs	r3, r1
 80075d8:	4a0a      	ldr	r2, [pc, #40]	; (8007604 <rintf+0xb0>)
 80075da:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80075de:	ed90 7a00 	vldr	s14, [r0]
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075ea:	edcd 7a01 	vstr	s15, [sp, #4]
 80075ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80075f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80075f6:	e7de      	b.n	80075b6 <rintf+0x62>
 80075f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80075fc:	d3db      	bcc.n	80075b6 <rintf+0x62>
 80075fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007602:	e7d8      	b.n	80075b6 <rintf+0x62>
 8007604:	08007748 	.word	0x08007748
 8007608:	007fffff 	.word	0x007fffff

0800760c <scalbnf>:
 800760c:	ee10 3a10 	vmov	r3, s0
 8007610:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007614:	d025      	beq.n	8007662 <scalbnf+0x56>
 8007616:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800761a:	d302      	bcc.n	8007622 <scalbnf+0x16>
 800761c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007620:	4770      	bx	lr
 8007622:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007626:	d122      	bne.n	800766e <scalbnf+0x62>
 8007628:	4b2a      	ldr	r3, [pc, #168]	; (80076d4 <scalbnf+0xc8>)
 800762a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80076d8 <scalbnf+0xcc>
 800762e:	4298      	cmp	r0, r3
 8007630:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007634:	db16      	blt.n	8007664 <scalbnf+0x58>
 8007636:	ee10 3a10 	vmov	r3, s0
 800763a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800763e:	3a19      	subs	r2, #25
 8007640:	4402      	add	r2, r0
 8007642:	2afe      	cmp	r2, #254	; 0xfe
 8007644:	dd15      	ble.n	8007672 <scalbnf+0x66>
 8007646:	ee10 3a10 	vmov	r3, s0
 800764a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80076dc <scalbnf+0xd0>
 800764e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80076e0 <scalbnf+0xd4>
 8007652:	2b00      	cmp	r3, #0
 8007654:	eeb0 7a67 	vmov.f32	s14, s15
 8007658:	bfb8      	it	lt
 800765a:	eef0 7a66 	vmovlt.f32	s15, s13
 800765e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007662:	4770      	bx	lr
 8007664:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80076e4 <scalbnf+0xd8>
 8007668:	ee20 0a27 	vmul.f32	s0, s0, s15
 800766c:	4770      	bx	lr
 800766e:	0dd2      	lsrs	r2, r2, #23
 8007670:	e7e6      	b.n	8007640 <scalbnf+0x34>
 8007672:	2a00      	cmp	r2, #0
 8007674:	dd06      	ble.n	8007684 <scalbnf+0x78>
 8007676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800767a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800767e:	ee00 3a10 	vmov	s0, r3
 8007682:	4770      	bx	lr
 8007684:	f112 0f16 	cmn.w	r2, #22
 8007688:	da1a      	bge.n	80076c0 <scalbnf+0xb4>
 800768a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800768e:	4298      	cmp	r0, r3
 8007690:	ee10 3a10 	vmov	r3, s0
 8007694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007698:	dd0a      	ble.n	80076b0 <scalbnf+0xa4>
 800769a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80076dc <scalbnf+0xd0>
 800769e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80076e0 <scalbnf+0xd4>
 80076a2:	eef0 7a40 	vmov.f32	s15, s0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf18      	it	ne
 80076aa:	eeb0 0a47 	vmovne.f32	s0, s14
 80076ae:	e7db      	b.n	8007668 <scalbnf+0x5c>
 80076b0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80076e4 <scalbnf+0xd8>
 80076b4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80076e8 <scalbnf+0xdc>
 80076b8:	eef0 7a40 	vmov.f32	s15, s0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	e7f3      	b.n	80076a8 <scalbnf+0x9c>
 80076c0:	3219      	adds	r2, #25
 80076c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80076ca:	eddf 7a08 	vldr	s15, [pc, #32]	; 80076ec <scalbnf+0xe0>
 80076ce:	ee07 3a10 	vmov	s14, r3
 80076d2:	e7c4      	b.n	800765e <scalbnf+0x52>
 80076d4:	ffff3cb0 	.word	0xffff3cb0
 80076d8:	4c000000 	.word	0x4c000000
 80076dc:	7149f2ca 	.word	0x7149f2ca
 80076e0:	f149f2ca 	.word	0xf149f2ca
 80076e4:	0da24260 	.word	0x0da24260
 80076e8:	8da24260 	.word	0x8da24260
 80076ec:	33000000 	.word	0x33000000

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
