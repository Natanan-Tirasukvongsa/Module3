
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000442c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045c4  080045c4  000145c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080045ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000028  08004614  00020028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004614  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b64b  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fd  00000000  00000000  0002b6a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015571  00000000  00000000  0002e6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b915  00000000  00000000  00043c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c4c  00000000  00000000  0004f53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d918a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e0  00000000  00000000  000d91e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080045ac 	.word	0x080045ac

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	080045ac 	.word	0x080045ac

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2f>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ac:	bf24      	itt	cs
 80007ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007b6:	d90d      	bls.n	80007d4 <__aeabi_d2f+0x30>
 80007b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007cc:	bf08      	it	eq
 80007ce:	f020 0001 	biceq.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007d8:	d121      	bne.n	800081e <__aeabi_d2f+0x7a>
 80007da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007de:	bfbc      	itt	lt
 80007e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	4770      	bxlt	lr
 80007e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ee:	f1c2 0218 	rsb	r2, r2, #24
 80007f2:	f1c2 0c20 	rsb	ip, r2, #32
 80007f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007fa:	fa20 f002 	lsr.w	r0, r0, r2
 80007fe:	bf18      	it	ne
 8000800:	f040 0001 	orrne.w	r0, r0, #1
 8000804:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000808:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800080c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000810:	ea40 000c 	orr.w	r0, r0, ip
 8000814:	fa23 f302 	lsr.w	r3, r3, r2
 8000818:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800081c:	e7cc      	b.n	80007b8 <__aeabi_d2f+0x14>
 800081e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000822:	d107      	bne.n	8000834 <__aeabi_d2f+0x90>
 8000824:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000828:	bf1e      	ittt	ne
 800082a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800082e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000832:	4770      	bxne	lr
 8000834:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000838:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800083c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <__aeabi_frsub>:
 8000844:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000848:	e002      	b.n	8000850 <__addsf3>
 800084a:	bf00      	nop

0800084c <__aeabi_fsub>:
 800084c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000850 <__addsf3>:
 8000850:	0042      	lsls	r2, r0, #1
 8000852:	bf1f      	itttt	ne
 8000854:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000858:	ea92 0f03 	teqne	r2, r3
 800085c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000860:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000864:	d06a      	beq.n	800093c <__addsf3+0xec>
 8000866:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800086a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800086e:	bfc1      	itttt	gt
 8000870:	18d2      	addgt	r2, r2, r3
 8000872:	4041      	eorgt	r1, r0
 8000874:	4048      	eorgt	r0, r1
 8000876:	4041      	eorgt	r1, r0
 8000878:	bfb8      	it	lt
 800087a:	425b      	neglt	r3, r3
 800087c:	2b19      	cmp	r3, #25
 800087e:	bf88      	it	hi
 8000880:	4770      	bxhi	lr
 8000882:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000886:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800088a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800088e:	bf18      	it	ne
 8000890:	4240      	negne	r0, r0
 8000892:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000896:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800089a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800089e:	bf18      	it	ne
 80008a0:	4249      	negne	r1, r1
 80008a2:	ea92 0f03 	teq	r2, r3
 80008a6:	d03f      	beq.n	8000928 <__addsf3+0xd8>
 80008a8:	f1a2 0201 	sub.w	r2, r2, #1
 80008ac:	fa41 fc03 	asr.w	ip, r1, r3
 80008b0:	eb10 000c 	adds.w	r0, r0, ip
 80008b4:	f1c3 0320 	rsb	r3, r3, #32
 80008b8:	fa01 f103 	lsl.w	r1, r1, r3
 80008bc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008c0:	d502      	bpl.n	80008c8 <__addsf3+0x78>
 80008c2:	4249      	negs	r1, r1
 80008c4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80008c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80008cc:	d313      	bcc.n	80008f6 <__addsf3+0xa6>
 80008ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008d2:	d306      	bcc.n	80008e2 <__addsf3+0x92>
 80008d4:	0840      	lsrs	r0, r0, #1
 80008d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80008da:	f102 0201 	add.w	r2, r2, #1
 80008de:	2afe      	cmp	r2, #254	; 0xfe
 80008e0:	d251      	bcs.n	8000986 <__addsf3+0x136>
 80008e2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80008e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008ea:	bf08      	it	eq
 80008ec:	f020 0001 	biceq.w	r0, r0, #1
 80008f0:	ea40 0003 	orr.w	r0, r0, r3
 80008f4:	4770      	bx	lr
 80008f6:	0049      	lsls	r1, r1, #1
 80008f8:	eb40 0000 	adc.w	r0, r0, r0
 80008fc:	3a01      	subs	r2, #1
 80008fe:	bf28      	it	cs
 8000900:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000904:	d2ed      	bcs.n	80008e2 <__addsf3+0x92>
 8000906:	fab0 fc80 	clz	ip, r0
 800090a:	f1ac 0c08 	sub.w	ip, ip, #8
 800090e:	ebb2 020c 	subs.w	r2, r2, ip
 8000912:	fa00 f00c 	lsl.w	r0, r0, ip
 8000916:	bfaa      	itet	ge
 8000918:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800091c:	4252      	neglt	r2, r2
 800091e:	4318      	orrge	r0, r3
 8000920:	bfbc      	itt	lt
 8000922:	40d0      	lsrlt	r0, r2
 8000924:	4318      	orrlt	r0, r3
 8000926:	4770      	bx	lr
 8000928:	f092 0f00 	teq	r2, #0
 800092c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000930:	bf06      	itte	eq
 8000932:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000936:	3201      	addeq	r2, #1
 8000938:	3b01      	subne	r3, #1
 800093a:	e7b5      	b.n	80008a8 <__addsf3+0x58>
 800093c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000940:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000944:	bf18      	it	ne
 8000946:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094a:	d021      	beq.n	8000990 <__addsf3+0x140>
 800094c:	ea92 0f03 	teq	r2, r3
 8000950:	d004      	beq.n	800095c <__addsf3+0x10c>
 8000952:	f092 0f00 	teq	r2, #0
 8000956:	bf08      	it	eq
 8000958:	4608      	moveq	r0, r1
 800095a:	4770      	bx	lr
 800095c:	ea90 0f01 	teq	r0, r1
 8000960:	bf1c      	itt	ne
 8000962:	2000      	movne	r0, #0
 8000964:	4770      	bxne	lr
 8000966:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800096a:	d104      	bne.n	8000976 <__addsf3+0x126>
 800096c:	0040      	lsls	r0, r0, #1
 800096e:	bf28      	it	cs
 8000970:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000974:	4770      	bx	lr
 8000976:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800097a:	bf3c      	itt	cc
 800097c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000980:	4770      	bxcc	lr
 8000982:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000986:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800098a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800098e:	4770      	bx	lr
 8000990:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000994:	bf16      	itet	ne
 8000996:	4608      	movne	r0, r1
 8000998:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800099c:	4601      	movne	r1, r0
 800099e:	0242      	lsls	r2, r0, #9
 80009a0:	bf06      	itte	eq
 80009a2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009a6:	ea90 0f01 	teqeq	r0, r1
 80009aa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009ae:	4770      	bx	lr

080009b0 <__aeabi_ui2f>:
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	e004      	b.n	80009c0 <__aeabi_i2f+0x8>
 80009b6:	bf00      	nop

080009b8 <__aeabi_i2f>:
 80009b8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	bf48      	it	mi
 80009be:	4240      	negmi	r0, r0
 80009c0:	ea5f 0c00 	movs.w	ip, r0
 80009c4:	bf08      	it	eq
 80009c6:	4770      	bxeq	lr
 80009c8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80009cc:	4601      	mov	r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	e01c      	b.n	8000a0e <__aeabi_l2f+0x2a>

080009d4 <__aeabi_ul2f>:
 80009d4:	ea50 0201 	orrs.w	r2, r0, r1
 80009d8:	bf08      	it	eq
 80009da:	4770      	bxeq	lr
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e00a      	b.n	80009f8 <__aeabi_l2f+0x14>
 80009e2:	bf00      	nop

080009e4 <__aeabi_l2f>:
 80009e4:	ea50 0201 	orrs.w	r2, r0, r1
 80009e8:	bf08      	it	eq
 80009ea:	4770      	bxeq	lr
 80009ec:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80009f0:	d502      	bpl.n	80009f8 <__aeabi_l2f+0x14>
 80009f2:	4240      	negs	r0, r0
 80009f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009f8:	ea5f 0c01 	movs.w	ip, r1
 80009fc:	bf02      	ittt	eq
 80009fe:	4684      	moveq	ip, r0
 8000a00:	4601      	moveq	r1, r0
 8000a02:	2000      	moveq	r0, #0
 8000a04:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a08:	bf08      	it	eq
 8000a0a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a12:	fabc f28c 	clz	r2, ip
 8000a16:	3a08      	subs	r2, #8
 8000a18:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a1c:	db10      	blt.n	8000a40 <__aeabi_l2f+0x5c>
 8000a1e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a22:	4463      	add	r3, ip
 8000a24:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a28:	f1c2 0220 	rsb	r2, r2, #32
 8000a2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a30:	fa20 f202 	lsr.w	r2, r0, r2
 8000a34:	eb43 0002 	adc.w	r0, r3, r2
 8000a38:	bf08      	it	eq
 8000a3a:	f020 0001 	biceq.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	f102 0220 	add.w	r2, r2, #32
 8000a44:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a48:	f1c2 0220 	rsb	r2, r2, #32
 8000a4c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a50:	fa21 f202 	lsr.w	r2, r1, r2
 8000a54:	eb43 0002 	adc.w	r0, r3, r2
 8000a58:	bf08      	it	eq
 8000a5a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_uldivmod>:
 8000a60:	b953      	cbnz	r3, 8000a78 <__aeabi_uldivmod+0x18>
 8000a62:	b94a      	cbnz	r2, 8000a78 <__aeabi_uldivmod+0x18>
 8000a64:	2900      	cmp	r1, #0
 8000a66:	bf08      	it	eq
 8000a68:	2800      	cmpeq	r0, #0
 8000a6a:	bf1c      	itt	ne
 8000a6c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a70:	f04f 30ff 	movne.w	r0, #4294967295
 8000a74:	f000 b98e 	b.w	8000d94 <__aeabi_idiv0>
 8000a78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a80:	f000 f826 	bl	8000ad0 <__udivmoddi4>
 8000a84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a8c:	b004      	add	sp, #16
 8000a8e:	4770      	bx	lr

08000a90 <__aeabi_f2ulz>:
 8000a90:	b5d0      	push	{r4, r6, r7, lr}
 8000a92:	f7ff fe2f 	bl	80006f4 <__aeabi_f2d>
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__aeabi_f2ulz+0x38>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4606      	mov	r6, r0
 8000a9c:	460f      	mov	r7, r1
 8000a9e:	f7ff fb9b 	bl	80001d8 <__aeabi_dmul>
 8000aa2:	f000 f979 	bl	8000d98 <__aeabi_d2uiz>
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	f7ff fe02 	bl	80006b0 <__aeabi_ui2d>
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <__aeabi_f2ulz+0x3c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f7ff fb92 	bl	80001d8 <__aeabi_dmul>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4630      	mov	r0, r6
 8000aba:	4639      	mov	r1, r7
 8000abc:	f7ff fcba 	bl	8000434 <__aeabi_dsub>
 8000ac0:	f000 f96a 	bl	8000d98 <__aeabi_d2uiz>
 8000ac4:	4621      	mov	r1, r4
 8000ac6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ac8:	3df00000 	.word	0x3df00000
 8000acc:	41f00000 	.word	0x41f00000

08000ad0 <__udivmoddi4>:
 8000ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad4:	9d08      	ldr	r5, [sp, #32]
 8000ad6:	4604      	mov	r4, r0
 8000ad8:	468c      	mov	ip, r1
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f040 8083 	bne.w	8000be6 <__udivmoddi4+0x116>
 8000ae0:	428a      	cmp	r2, r1
 8000ae2:	4617      	mov	r7, r2
 8000ae4:	d947      	bls.n	8000b76 <__udivmoddi4+0xa6>
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	b142      	cbz	r2, 8000afe <__udivmoddi4+0x2e>
 8000aec:	f1c2 0020 	rsb	r0, r2, #32
 8000af0:	fa24 f000 	lsr.w	r0, r4, r0
 8000af4:	4091      	lsls	r1, r2
 8000af6:	4097      	lsls	r7, r2
 8000af8:	ea40 0c01 	orr.w	ip, r0, r1
 8000afc:	4094      	lsls	r4, r2
 8000afe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b02:	0c23      	lsrs	r3, r4, #16
 8000b04:	fbbc f6f8 	udiv	r6, ip, r8
 8000b08:	fa1f fe87 	uxth.w	lr, r7
 8000b0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b14:	fb06 f10e 	mul.w	r1, r6, lr
 8000b18:	4299      	cmp	r1, r3
 8000b1a:	d909      	bls.n	8000b30 <__udivmoddi4+0x60>
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 8119 	bcs.w	8000d58 <__udivmoddi4+0x288>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 8116 	bls.w	8000d58 <__udivmoddi4+0x288>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	443b      	add	r3, r7
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b44:	45a6      	cmp	lr, r4
 8000b46:	d909      	bls.n	8000b5c <__udivmoddi4+0x8c>
 8000b48:	193c      	adds	r4, r7, r4
 8000b4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b4e:	f080 8105 	bcs.w	8000d5c <__udivmoddi4+0x28c>
 8000b52:	45a6      	cmp	lr, r4
 8000b54:	f240 8102 	bls.w	8000d5c <__udivmoddi4+0x28c>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	443c      	add	r4, r7
 8000b5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b60:	eba4 040e 	sub.w	r4, r4, lr
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa0>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xaa>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f282 	clz	r2, r2
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d150      	bne.n	8000c24 <__udivmoddi4+0x154>
 8000b82:	1bcb      	subs	r3, r1, r7
 8000b84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b88:	fa1f f887 	uxth.w	r8, r7
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b92:	0c21      	lsrs	r1, r4, #16
 8000b94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d907      	bls.n	8000bb4 <__udivmoddi4+0xe4>
 8000ba4:	1879      	adds	r1, r7, r1
 8000ba6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000baa:	d202      	bcs.n	8000bb2 <__udivmoddi4+0xe2>
 8000bac:	428b      	cmp	r3, r1
 8000bae:	f200 80e9 	bhi.w	8000d84 <__udivmoddi4+0x2b4>
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	1ac9      	subs	r1, r1, r3
 8000bb6:	b2a3      	uxth	r3, r4
 8000bb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bc4:	fb08 f800 	mul.w	r8, r8, r0
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	d907      	bls.n	8000bdc <__udivmoddi4+0x10c>
 8000bcc:	193c      	adds	r4, r7, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x10a>
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	f200 80d9 	bhi.w	8000d8c <__udivmoddi4+0x2bc>
 8000bda:	4618      	mov	r0, r3
 8000bdc:	eba4 0408 	sub.w	r4, r4, r8
 8000be0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be4:	e7bf      	b.n	8000b66 <__udivmoddi4+0x96>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x12e>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80b1 	beq.w	8000d52 <__udivmoddi4+0x282>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x1cc>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0x140>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80b8 	bhi.w	8000d80 <__udivmoddi4+0x2b0>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0103 	sbc.w	r1, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	468c      	mov	ip, r1
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0a8      	beq.n	8000b70 <__udivmoddi4+0xa0>
 8000c1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000c24:	f1c2 0320 	rsb	r3, r2, #32
 8000c28:	fa20 f603 	lsr.w	r6, r0, r3
 8000c2c:	4097      	lsls	r7, r2
 8000c2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c36:	40d9      	lsrs	r1, r3
 8000c38:	4330      	orrs	r0, r6
 8000c3a:	0c03      	lsrs	r3, r0, #16
 8000c3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb06 f108 	mul.w	r1, r6, r8
 8000c50:	4299      	cmp	r1, r3
 8000c52:	fa04 f402 	lsl.w	r4, r4, r2
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x19c>
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c5e:	f080 808d 	bcs.w	8000d7c <__udivmoddi4+0x2ac>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 808a 	bls.w	8000d7c <__udivmoddi4+0x2ac>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	443b      	add	r3, r7
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b281      	uxth	r1, r0
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb00 f308 	mul.w	r3, r0, r8
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1c4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c8a:	d273      	bcs.n	8000d74 <__udivmoddi4+0x2a4>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d971      	bls.n	8000d74 <__udivmoddi4+0x2a4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4439      	add	r1, r7
 8000c94:	1acb      	subs	r3, r1, r3
 8000c96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c9a:	e778      	b.n	8000b8e <__udivmoddi4+0xbe>
 8000c9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000ca0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ca4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ca8:	431c      	orrs	r4, r3
 8000caa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cb6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cba:	431f      	orrs	r7, r3
 8000cbc:	0c3b      	lsrs	r3, r7, #16
 8000cbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cc2:	fa1f f884 	uxth.w	r8, r4
 8000cc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cce:	fb09 fa08 	mul.w	sl, r9, r8
 8000cd2:	458a      	cmp	sl, r1
 8000cd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000cdc:	d908      	bls.n	8000cf0 <__udivmoddi4+0x220>
 8000cde:	1861      	adds	r1, r4, r1
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce4:	d248      	bcs.n	8000d78 <__udivmoddi4+0x2a8>
 8000ce6:	458a      	cmp	sl, r1
 8000ce8:	d946      	bls.n	8000d78 <__udivmoddi4+0x2a8>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4421      	add	r1, r4
 8000cf0:	eba1 010a 	sub.w	r1, r1, sl
 8000cf4:	b2bf      	uxth	r7, r7
 8000cf6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d02:	fb00 f808 	mul.w	r8, r0, r8
 8000d06:	45b8      	cmp	r8, r7
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x24a>
 8000d0a:	19e7      	adds	r7, r4, r7
 8000d0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d10:	d22e      	bcs.n	8000d70 <__udivmoddi4+0x2a0>
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d92c      	bls.n	8000d70 <__udivmoddi4+0x2a0>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4427      	add	r7, r4
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	eba7 0708 	sub.w	r7, r7, r8
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	454f      	cmp	r7, r9
 8000d28:	46c6      	mov	lr, r8
 8000d2a:	4649      	mov	r1, r9
 8000d2c:	d31a      	bcc.n	8000d64 <__udivmoddi4+0x294>
 8000d2e:	d017      	beq.n	8000d60 <__udivmoddi4+0x290>
 8000d30:	b15d      	cbz	r5, 8000d4a <__udivmoddi4+0x27a>
 8000d32:	ebb3 020e 	subs.w	r2, r3, lr
 8000d36:	eb67 0701 	sbc.w	r7, r7, r1
 8000d3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d3e:	40f2      	lsrs	r2, r6
 8000d40:	ea4c 0202 	orr.w	r2, ip, r2
 8000d44:	40f7      	lsrs	r7, r6
 8000d46:	e9c5 2700 	strd	r2, r7, [r5]
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	462e      	mov	r6, r5
 8000d54:	4628      	mov	r0, r5
 8000d56:	e70b      	b.n	8000b70 <__udivmoddi4+0xa0>
 8000d58:	4606      	mov	r6, r0
 8000d5a:	e6e9      	b.n	8000b30 <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fd      	b.n	8000b5c <__udivmoddi4+0x8c>
 8000d60:	4543      	cmp	r3, r8
 8000d62:	d2e5      	bcs.n	8000d30 <__udivmoddi4+0x260>
 8000d64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d68:	eb69 0104 	sbc.w	r1, r9, r4
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	e7df      	b.n	8000d30 <__udivmoddi4+0x260>
 8000d70:	4608      	mov	r0, r1
 8000d72:	e7d2      	b.n	8000d1a <__udivmoddi4+0x24a>
 8000d74:	4660      	mov	r0, ip
 8000d76:	e78d      	b.n	8000c94 <__udivmoddi4+0x1c4>
 8000d78:	4681      	mov	r9, r0
 8000d7a:	e7b9      	b.n	8000cf0 <__udivmoddi4+0x220>
 8000d7c:	4666      	mov	r6, ip
 8000d7e:	e775      	b.n	8000c6c <__udivmoddi4+0x19c>
 8000d80:	4630      	mov	r0, r6
 8000d82:	e74a      	b.n	8000c1a <__udivmoddi4+0x14a>
 8000d84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d88:	4439      	add	r1, r7
 8000d8a:	e713      	b.n	8000bb4 <__udivmoddi4+0xe4>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	e724      	b.n	8000bdc <__udivmoddi4+0x10c>
 8000d92:	bf00      	nop

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2uiz>:
 8000d98:	004a      	lsls	r2, r1, #1
 8000d9a:	d211      	bcs.n	8000dc0 <__aeabi_d2uiz+0x28>
 8000d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000da0:	d211      	bcs.n	8000dc6 <__aeabi_d2uiz+0x2e>
 8000da2:	d50d      	bpl.n	8000dc0 <__aeabi_d2uiz+0x28>
 8000da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dac:	d40e      	bmi.n	8000dcc <__aeabi_d2uiz+0x34>
 8000dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dba:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbe:	4770      	bx	lr
 8000dc0:	f04f 0000 	mov.w	r0, #0
 8000dc4:	4770      	bx	lr
 8000dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dca:	d102      	bne.n	8000dd2 <__aeabi_d2uiz+0x3a>
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	4770      	bx	lr

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b5b0      	push	{r4, r5, r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f001 f8a0 	bl	8001f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f89c 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 fa46 	bl	8001274 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000de8:	f000 fa1a 	bl	8001220 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000dec:	f000 f8fe 	bl	8000fec <MX_TIM1_Init>
  MX_TIM3_Init();
 8000df0:	f000 f9a0 	bl	8001134 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000df4:	f000 f952 	bl	800109c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000df8:	483b      	ldr	r0, [pc, #236]	; (8000ee8 <main+0x110>)
 8000dfa:	f002 f8f5 	bl	8002fe8 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000dfe:	213c      	movs	r1, #60	; 0x3c
 8000e00:	483a      	ldr	r0, [pc, #232]	; (8000eec <main+0x114>)
 8000e02:	f002 fb03 	bl	800340c <HAL_TIM_Encoder_Start>
  	//Start TIM3
  	HAL_TIM_Base_Start(&htim3);
 8000e06:	483a      	ldr	r0, [pc, #232]	; (8000ef0 <main+0x118>)
 8000e08:	f002 f894 	bl	8002f34 <HAL_TIM_Base_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000e0c:	210c      	movs	r1, #12
 8000e0e:	4838      	ldr	r0, [pc, #224]	; (8000ef0 <main+0x118>)
 8000e10:	f002 f9a6 	bl	8003160 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (micros() - Time_Stamp >= 1000)//uS
 8000e14:	f000 febe 	bl	8001b94 <micros>
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <main+0x11c>)
 8000e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1e:	1a84      	subs	r4, r0, r2
 8000e20:	eb61 0503 	sbc.w	r5, r1, r3
 8000e24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	bf08      	it	eq
 8000e30:	42a2      	cmpeq	r2, r4
 8000e32:	d2ef      	bcs.n	8000e14 <main+0x3c>
	  		{

	  			Time_Stamp = micros();
 8000e34:	f000 feae 	bl	8001b94 <micros>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	492d      	ldr	r1, [pc, #180]	; (8000ef4 <main+0x11c>)
 8000e3e:	e9c1 2300 	strd	r2, r3, [r1]
	  			Position_Encoder = htim1.Instance->CNT; //CNT
 8000e42:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <main+0x114>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	4a2b      	ldr	r2, [pc, #172]	; (8000ef8 <main+0x120>)
 8000e4a:	6013      	str	r3, [r2, #0]
	  			Position_Real = (Position_Encoder*360)/Encoder_Resolution;  //degree
 8000e4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ef8 <main+0x120>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000e60:	4b26      	ldr	r3, [pc, #152]	; (8000efc <main+0x124>)
 8000e62:	ed93 7a00 	vldr	s14, [r3]
 8000e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <main+0x128>)
 8000e6c:	edc3 7a00 	vstr	s15, [r3]

	  			if ((Distance_Calculated==1) && (Position_Real != Position_Want)&&(check == 0))
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <main+0x12c>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d118      	bne.n	8000eaa <main+0xd2>
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <main+0x128>)
 8000e7a:	ed93 7a00 	vldr	s14, [r3]
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <main+0x130>)
 8000e80:	edd3 7a00 	vldr	s15, [r3]
 8000e84:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	d00d      	beq.n	8000eaa <main+0xd2>
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <main+0x134>)
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d109      	bne.n	8000eaa <main+0xd2>
	  			{
	  				velo = 0;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <main+0x138>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
					Trajectory_Generation();
 8000e9c:	f000 fd10 	bl	80018c0 <Trajectory_Generation>
					Velocity_Control();
 8000ea0:	f000 fb22 	bl	80014e8 <Velocity_Control>
	  				Motor_Drive_PWM();
 8000ea4:	f000 faf2 	bl	800148c <Motor_Drive_PWM>
 8000ea8:	e017      	b.n	8000eda <main+0x102>
				{

					//Position_Control();

				}*/
	  			else if (Position_Real == Position_Want)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <main+0x128>)
 8000eac:	ed93 7a00 	vldr	s14, [r3]
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <main+0x130>)
 8000eb2:	edd3 7a00 	vldr	s15, [r3]
 8000eb6:	eeb4 7a67 	vcmp.f32	s14, s15
 8000eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ebe:	d10c      	bne.n	8000eda <main+0x102>
				{
					Distance_Calculated = 0;
 8000ec0:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <main+0x12c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	801a      	strh	r2, [r3, #0]
					Velocity_Want = 0;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <main+0x13c>)
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
					check = 0;
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <main+0x134>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	801a      	strh	r2, [r3, #0]
					Flag = 0;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <main+0x140>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	801a      	strh	r2, [r3, #0]
				}

	  			if ((Distance_Calculated==0))
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <main+0x12c>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d198      	bne.n	8000e14 <main+0x3c>
	  			{

	  				Distance_Calculation();
 8000ee2:	f000 fbbf 	bl	8001664 <Distance_Calculation>
	  if (micros() - Time_Stamp >= 1000)//uS
 8000ee6:	e795      	b.n	8000e14 <main+0x3c>
 8000ee8:	20000174 	.word	0x20000174
 8000eec:	2000012c 	.word	0x2000012c
 8000ef0:	200000e4 	.word	0x200000e4
 8000ef4:	20000050 	.word	0x20000050
 8000ef8:	20000080 	.word	0x20000080
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000084 	.word	0x20000084
 8000f04:	2000005a 	.word	0x2000005a
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	200000d0 	.word	0x200000d0
 8000f10:	200000ce 	.word	0x200000ce
 8000f14:	20000064 	.word	0x20000064
 8000f18:	200000cc 	.word	0x200000cc

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f003 fb36 	bl	800459c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	2310      	movs	r3, #16
 8000f82:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fb03 	bl	80025ac <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fac:	f000 fe0c 	bl	8001bc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2103      	movs	r1, #3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fd65 	bl	8002a9c <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fd8:	f000 fdf6 	bl	8001bc8 <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2224      	movs	r2, #36	; 0x24
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f003 face 	bl	800459c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <MX_TIM1_Init+0xa8>)
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <MX_TIM1_Init+0xac>)
 800100c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_TIM1_Init+0xa8>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <MX_TIM1_Init+0xa8>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM1_Init+0xa8>)
 800101c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001020:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_TIM1_Init+0xa8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001028:	4b1a      	ldr	r3, [pc, #104]	; (8001094 <MX_TIM1_Init+0xa8>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_TIM1_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001034:	2303      	movs	r3, #3
 8001036:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800103c:	2301      	movs	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800104c:	2301      	movs	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM1_Init+0xa8>)
 8001060:	f002 f92e 	bl	80032c0 <HAL_TIM_Encoder_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800106a:	f000 fdad 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	4806      	ldr	r0, [pc, #24]	; (8001094 <MX_TIM1_Init+0xa8>)
 800107c:	f002 ffd2 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001086:	f000 fd9f 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	; 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000012c 	.word	0x2000012c
 8001098:	40010000 	.word	0x40010000

0800109c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_TIM2_Init+0x94>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_TIM2_Init+0x94>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_TIM2_Init+0x94>)
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d4:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_TIM2_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010da:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_TIM2_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010e0:	4813      	ldr	r0, [pc, #76]	; (8001130 <MX_TIM2_Init+0x94>)
 80010e2:	f001 fed7 	bl	8002e94 <HAL_TIM_Base_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010ec:	f000 fd6c 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_TIM2_Init+0x94>)
 80010fe:	f002 fbd9 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001108:	f000 fd5e 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_TIM2_Init+0x94>)
 800111a:	f002 ff83 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 fd50 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000174 	.word	0x20000174

08001134 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08e      	sub	sp, #56	; 0x38
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <MX_TIM3_Init+0xe4>)
 8001166:	4a2d      	ldr	r2, [pc, #180]	; (800121c <MX_TIM3_Init+0xe8>)
 8001168:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800116a:	4b2b      	ldr	r3, [pc, #172]	; (8001218 <MX_TIM3_Init+0xe4>)
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <MX_TIM3_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001176:	4b28      	ldr	r3, [pc, #160]	; (8001218 <MX_TIM3_Init+0xe4>)
 8001178:	f242 7210 	movw	r2, #10000	; 0x2710
 800117c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <MX_TIM3_Init+0xe4>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <MX_TIM3_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800118a:	4823      	ldr	r0, [pc, #140]	; (8001218 <MX_TIM3_Init+0xe4>)
 800118c:	f001 fe82 	bl	8002e94 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001196:	f000 fd17 	bl	8001bc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a4:	4619      	mov	r1, r3
 80011a6:	481c      	ldr	r0, [pc, #112]	; (8001218 <MX_TIM3_Init+0xe4>)
 80011a8:	f002 fb84 	bl	80038b4 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80011b2:	f000 fd09 	bl	8001bc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011b6:	4818      	ldr	r0, [pc, #96]	; (8001218 <MX_TIM3_Init+0xe4>)
 80011b8:	f001 ff78 	bl	80030ac <HAL_TIM_PWM_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80011c2:	f000 fd01 	bl	8001bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ce:	f107 0320 	add.w	r3, r7, #32
 80011d2:	4619      	mov	r1, r3
 80011d4:	4810      	ldr	r0, [pc, #64]	; (8001218 <MX_TIM3_Init+0xe4>)
 80011d6:	f002 ff25 	bl	8004024 <HAL_TIMEx_MasterConfigSynchronization>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011e0:	f000 fcf2 	bl	8001bc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	220c      	movs	r2, #12
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_TIM3_Init+0xe4>)
 80011fc:	f002 fa9c 	bl	8003738 <HAL_TIM_PWM_ConfigChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001206:	f000 fcdf 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <MX_TIM3_Init+0xe4>)
 800120c:	f000 fd8e 	bl	8001d2c <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3738      	adds	r7, #56	; 0x38
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200000e4 	.word	0x200000e4
 800121c:	40000400 	.word	0x40000400

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	; (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f002 ff66 	bl	8004128 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 fcb1 	bl	8001bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200001bc 	.word	0x200001bc
 8001270:	40004400 	.word	0x40004400

08001274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]
 8001286:	60da      	str	r2, [r3, #12]
 8001288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <MX_GPIO_Init+0x15c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a4f      	ldr	r2, [pc, #316]	; (80013d0 <MX_GPIO_Init+0x15c>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b4d      	ldr	r3, [pc, #308]	; (80013d0 <MX_GPIO_Init+0x15c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a41      	ldr	r2, [pc, #260]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b3f      	ldr	r3, [pc, #252]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	4b3b      	ldr	r3, [pc, #236]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a3a      	ldr	r2, [pc, #232]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b38      	ldr	r3, [pc, #224]	; (80013d0 <MX_GPIO_Init+0x15c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	4835      	ldr	r0, [pc, #212]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001300:	f001 f916 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130a:	4833      	ldr	r0, [pc, #204]	; (80013d8 <MX_GPIO_Init+0x164>)
 800130c:	f001 f910 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MX_GPIO_Init+0x168>)
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	482e      	ldr	r0, [pc, #184]	; (80013e0 <MX_GPIO_Init+0x16c>)
 8001326:	f000 ff7f 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 800132a:	2381      	movs	r3, #129	; 0x81
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4828      	ldr	r0, [pc, #160]	; (80013e0 <MX_GPIO_Init+0x16c>)
 800133e:	f000 ff73 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8001342:	2301      	movs	r3, #1
 8001344:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	481f      	ldr	r0, [pc, #124]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001356:	f000 ff67 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800135a:	2320      	movs	r3, #32
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <MX_GPIO_Init+0x160>)
 8001372:	f000 ff59 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	4812      	ldr	r0, [pc, #72]	; (80013d8 <MX_GPIO_Init+0x164>)
 8001390:	f000 ff4a 	bl	8002228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001394:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a6:	2304      	movs	r3, #4
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	4809      	ldr	r0, [pc, #36]	; (80013d8 <MX_GPIO_Init+0x164>)
 80013b2:	f000 ff39 	bl	8002228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2028      	movs	r0, #40	; 0x28
 80013bc:	f000 fefd 	bl	80021ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c0:	2028      	movs	r0, #40	; 0x28
 80013c2:	f000 ff16 	bl	80021f2 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	10210000 	.word	0x10210000
 80013e0:	40020800 	.word	0x40020800

080013e4 <Encoder_Velocity_Update>:
#define  HTIM_ENCODER htim1
#define  MAX_SUBPOSITION_OVERFLOW 4096
#define  MAX_ENCODER_PERIOD 8192

float Encoder_Velocity_Update()
{
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	ed2d 8b02 	vpush	{d8}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 80013ee:	4b23      	ldr	r3, [pc, #140]	; (800147c <Encoder_Velocity_Update+0x98>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f4:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80013f6:	f000 fbcd 	bl	8001b94 <micros>
 80013fa:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80013fe:	4b20      	ldr	r3, [pc, #128]	; (8001480 <Encoder_Velocity_Update+0x9c>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001408:	1a84      	subs	r4, r0, r2
 800140a:	eb61 0503 	sbc.w	r5, r1, r3
 800140e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <Encoder_Velocity_Update+0xa0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001422:	db04      	blt.n	800142e <Encoder_Velocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e007      	b.n	800143e <Encoder_Velocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8001434:	dc03      	bgt.n	800143e <Encoder_Velocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800143c:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <Encoder_Velocity_Update+0xa0>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8001444:	490e      	ldr	r1, [pc, #56]	; (8001480 <Encoder_Velocity_Update+0x9c>)
 8001446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800144a:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <Encoder_Velocity_Update+0xa4>)
 8001452:	fb02 f303 	mul.w	r3, r2, r3
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800145e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001462:	f7ff fab7 	bl	80009d4 <__aeabi_ul2f>
 8001466:	ee07 0a10 	vmov	s14, r0
 800146a:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	ecbd 8b02 	vpop	{d8}
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	2000012c 	.word	0x2000012c
 8001480:	200000d8 	.word	0x200000d8
 8001484:	200000e0 	.word	0x200000e0
 8001488:	000f4240 	.word	0x000f4240

0800148c <Motor_Drive_PWM>:
void Motor_Drive_PWM()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	}
	else if(PWM_Out < -10000)
	{
		PWM_Out = -10000;
	}*/
	if (PWM_Out < 0)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <Motor_Drive_PWM+0x50>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da0d      	bge.n	80014b6 <Motor_Drive_PWM+0x2a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -PWM_Out);
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <Motor_Drive_PWM+0x50>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	425a      	negs	r2, r3
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <Motor_Drive_PWM+0x54>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <Motor_Drive_PWM+0x58>)
 80014b0:	f001 f83e 	bl	8002530 <HAL_GPIO_WritePin>
	else if (PWM_Out >= 0)
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
	}
}
 80014b4:	e010      	b.n	80014d8 <Motor_Drive_PWM+0x4c>
	else if (PWM_Out >= 0)
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <Motor_Drive_PWM+0x50>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0b      	blt.n	80014d8 <Motor_Drive_PWM+0x4c>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM_Out);
 80014c0:	4b06      	ldr	r3, [pc, #24]	; (80014dc <Motor_Drive_PWM+0x50>)
 80014c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <Motor_Drive_PWM+0x54>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80014cc:	2201      	movs	r2, #1
 80014ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <Motor_Drive_PWM+0x58>)
 80014d4:	f001 f82c 	bl	8002530 <HAL_GPIO_WritePin>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000007c 	.word	0x2000007c
 80014e0:	200000e4 	.word	0x200000e4
 80014e4:	40020400 	.word	0x40020400

080014e8 <Velocity_Control>:
void Velocity_Control()
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	ed2d 8b02 	vpush	{d8}
 80014ee:	af00      	add	r7, sp, #0
	velo = 1;
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <Velocity_Control+0x138>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	801a      	strh	r2, [r3, #0]
	Velocity_Encoder = (Velocity_Encoder*99 + Encoder_Velocity_Update())/100.0;
 80014f6:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <Velocity_Control+0x13c>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001628 <Velocity_Control+0x140>
 8001500:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001504:	f7ff ff6e 	bl	80013e4 <Encoder_Velocity_Update>
 8001508:	eef0 7a40 	vmov.f32	s15, s0
 800150c:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001510:	eddf 6a46 	vldr	s13, [pc, #280]	; 800162c <Velocity_Control+0x144>
 8001514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <Velocity_Control+0x13c>)
 800151a:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Real = (Velocity_Encoder*60)/Encoder_Resolution;
 800151e:	4b41      	ldr	r3, [pc, #260]	; (8001624 <Velocity_Control+0x13c>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001630 <Velocity_Control+0x148>
 8001528:	ee67 6a87 	vmul.f32	s13, s15, s14
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <Velocity_Control+0x14c>)
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001536:	4b40      	ldr	r3, [pc, #256]	; (8001638 <Velocity_Control+0x150>)
 8001538:	edc3 7a00 	vstr	s15, [r3]

	if (Velocity_Want > Velocity_Max)
 800153c:	4b3f      	ldr	r3, [pc, #252]	; (800163c <Velocity_Control+0x154>)
 800153e:	ed93 7a00 	vldr	s14, [r3]
 8001542:	4b3f      	ldr	r3, [pc, #252]	; (8001640 <Velocity_Control+0x158>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	dd04      	ble.n	800155c <Velocity_Control+0x74>
	{
		Velocity_Want = Velocity_Max;
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <Velocity_Control+0x158>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a39      	ldr	r2, [pc, #228]	; (800163c <Velocity_Control+0x154>)
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e014      	b.n	8001586 <Velocity_Control+0x9e>
	}
	else if (Velocity_Want < -Velocity_Max)
 800155c:	4b38      	ldr	r3, [pc, #224]	; (8001640 <Velocity_Control+0x158>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eeb1 7a67 	vneg.f32	s14, s15
 8001566:	4b35      	ldr	r3, [pc, #212]	; (800163c <Velocity_Control+0x154>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	dd07      	ble.n	8001586 <Velocity_Control+0x9e>
	{
		Velocity_Want = -Velocity_Max;
 8001576:	4b32      	ldr	r3, [pc, #200]	; (8001640 <Velocity_Control+0x158>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	eef1 7a67 	vneg.f32	s15, s15
 8001580:	4b2e      	ldr	r3, [pc, #184]	; (800163c <Velocity_Control+0x154>)
 8001582:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want - Velocity_Real;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <Velocity_Control+0x154>)
 8001588:	ed93 7a00 	vldr	s14, [r3]
 800158c:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <Velocity_Control+0x150>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <Velocity_Control+0x15c>)
 8001598:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <Velocity_Control+0x160>)
 800159e:	ed93 7a00 	vldr	s14, [r3]
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <Velocity_Control+0x15c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <Velocity_Control+0x160>)
 80015ae:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <Velocity_Control+0x15c>)
 80015b4:	ed93 7a00 	vldr	s14, [r3]
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <Velocity_Control+0x164>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <Velocity_Control+0x168>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <Velocity_Control+0x15c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <Velocity_Control+0x164>)
 80015ce:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <Velocity_Control+0x16c>)
 80015d2:	ed93 7a00 	vldr	s14, [r3]
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <Velocity_Control+0x15c>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <Velocity_Control+0x170>)
 80015e2:	edd3 6a00 	vldr	s13, [r3]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <Velocity_Control+0x160>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <Velocity_Control+0x174>)
 80015f6:	edd3 6a00 	vldr	s13, [r3]
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <Velocity_Control+0x168>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160c:	ee17 3a90 	vmov	r3, s15
 8001610:	b21a      	sxth	r2, r3
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <Velocity_Control+0x178>)
 8001614:	801a      	strh	r2, [r3, #0]
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	ecbd 8b02 	vpop	{d8}
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200000ce 	.word	0x200000ce
 8001624:	2000005c 	.word	0x2000005c
 8001628:	42c60000 	.word	0x42c60000
 800162c:	42c80000 	.word	0x42c80000
 8001630:	42700000 	.word	0x42700000
 8001634:	20000000 	.word	0x20000000
 8001638:	20000060 	.word	0x20000060
 800163c:	20000064 	.word	0x20000064
 8001640:	20000018 	.word	0x20000018
 8001644:	20000068 	.word	0x20000068
 8001648:	20000070 	.word	0x20000070
 800164c:	20000078 	.word	0x20000078
 8001650:	20000074 	.word	0x20000074
 8001654:	20000008 	.word	0x20000008
 8001658:	2000000c 	.word	0x2000000c
 800165c:	2000006c 	.word	0x2000006c
 8001660:	2000007c 	.word	0x2000007c

08001664 <Distance_Calculation>:
void Distance_Calculation()
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	af00      	add	r7, sp, #0
	Position_Start = Position_Real;
 8001668:	4b81      	ldr	r3, [pc, #516]	; (8001870 <Distance_Calculation+0x20c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a81      	ldr	r2, [pc, #516]	; (8001874 <Distance_Calculation+0x210>)
 800166e:	6013      	str	r3, [r2, #0]
	Distance_Degree_Set = Position_Want - Position_Start;
 8001670:	4b81      	ldr	r3, [pc, #516]	; (8001878 <Distance_Calculation+0x214>)
 8001672:	ed93 7a00 	vldr	s14, [r3]
 8001676:	4b7f      	ldr	r3, [pc, #508]	; (8001874 <Distance_Calculation+0x210>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001680:	4b7e      	ldr	r3, [pc, #504]	; (800187c <Distance_Calculation+0x218>)
 8001682:	edc3 7a00 	vstr	s15, [r3]
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;
 8001686:	4b7d      	ldr	r3, [pc, #500]	; (800187c <Distance_Calculation+0x218>)
 8001688:	ed93 7a00 	vldr	s14, [r3]
 800168c:	4b7c      	ldr	r3, [pc, #496]	; (8001880 <Distance_Calculation+0x21c>)
 800168e:	edd3 7a00 	vldr	s15, [r3]
 8001692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001696:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8001884 <Distance_Calculation+0x220>
 800169a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169e:	4b7a      	ldr	r3, [pc, #488]	; (8001888 <Distance_Calculation+0x224>)
 80016a0:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Max_Rad = (Velocity_Max*2*pi)/60;
 80016a4:	4b79      	ldr	r3, [pc, #484]	; (800188c <Distance_Calculation+0x228>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80016ae:	4b74      	ldr	r3, [pc, #464]	; (8001880 <Distance_Calculation+0x21c>)
 80016b0:	edd3 7a00 	vldr	s15, [r3]
 80016b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b8:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001890 <Distance_Calculation+0x22c>
 80016bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c0:	4b74      	ldr	r3, [pc, #464]	; (8001894 <Distance_Calculation+0x230>)
 80016c2:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend = Velocity_Max_Rad / Accel_Max;
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <Distance_Calculation+0x230>)
 80016c8:	edd3 6a00 	vldr	s13, [r3]
 80016cc:	4b72      	ldr	r3, [pc, #456]	; (8001898 <Distance_Calculation+0x234>)
 80016ce:	ed93 7a00 	vldr	s14, [r3]
 80016d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d6:	4b71      	ldr	r3, [pc, #452]	; (800189c <Distance_Calculation+0x238>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_M = Time_Blend * 1000000;
 80016dc:	4b6f      	ldr	r3, [pc, #444]	; (800189c <Distance_Calculation+0x238>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80018a0 <Distance_Calculation+0x23c>
 80016e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ea:	ee17 0a90 	vmov	r0, s15
 80016ee:	f7ff f9cf 	bl	8000a90 <__aeabi_f2ulz>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	496b      	ldr	r1, [pc, #428]	; (80018a4 <Distance_Calculation+0x240>)
 80016f8:	e9c1 2300 	strd	r2, r3, [r1]

	Distance_Blend = 0.5*Accel_Max*(Time_Blend*Time_Blend);
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <Distance_Calculation+0x234>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fff7 	bl	80006f4 <__aeabi_f2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b67      	ldr	r3, [pc, #412]	; (80018a8 <Distance_Calculation+0x244>)
 800170c:	f7fe fd64 	bl	80001d8 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	4b60      	ldr	r3, [pc, #384]	; (800189c <Distance_Calculation+0x238>)
 800171a:	ed93 7a00 	vldr	s14, [r3]
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <Distance_Calculation+0x238>)
 8001720:	edd3 7a00 	vldr	s15, [r3]
 8001724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe ffe2 	bl	80006f4 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fd4e 	bl	80001d8 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff f82e 	bl	80007a4 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	4a58      	ldr	r2, [pc, #352]	; (80018ac <Distance_Calculation+0x248>)
 800174c:	6013      	str	r3, [r2, #0]
	Time_All = 2*Time_Blend + (((Distance_Radian_Set-(2*Distance_Blend))/Velocity_Max_Rad));
 800174e:	4b53      	ldr	r3, [pc, #332]	; (800189c <Distance_Calculation+0x238>)
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <Distance_Calculation+0x224>)
 800175a:	edd3 6a00 	vldr	s13, [r3]
 800175e:	4b53      	ldr	r3, [pc, #332]	; (80018ac <Distance_Calculation+0x248>)
 8001760:	edd3 7a00 	vldr	s15, [r3]
 8001764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001768:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800176c:	4b49      	ldr	r3, [pc, #292]	; (8001894 <Distance_Calculation+0x230>)
 800176e:	edd3 6a00 	vldr	s13, [r3]
 8001772:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <Distance_Calculation+0x24c>)
 800177c:	edc3 7a00 	vstr	s15, [r3]
	Time_All_M = Time_All * 1000000;
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <Distance_Calculation+0x24c>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80018a0 <Distance_Calculation+0x23c>
 800178a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800178e:	ee17 0a90 	vmov	r0, s15
 8001792:	f7ff f97d 	bl	8000a90 <__aeabi_f2ulz>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4946      	ldr	r1, [pc, #280]	; (80018b4 <Distance_Calculation+0x250>)
 800179c:	e9c1 2300 	strd	r2, r3, [r1]
	if ((2*Distance_Blend) < Distance_Radian_Set)
 80017a0:	4b42      	ldr	r3, [pc, #264]	; (80018ac <Distance_Calculation+0x248>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017aa:	4b37      	ldr	r3, [pc, #220]	; (8001888 <Distance_Calculation+0x224>)
 80017ac:	edd3 7a00 	vldr	s15, [r3]
 80017b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d52c      	bpl.n	8001814 <Distance_Calculation+0x1b0>
	{
		Distance_Long = 1;
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <Distance_Calculation+0x254>)
 80017bc:	2201      	movs	r2, #1
 80017be:	801a      	strh	r2, [r3, #0]
		Time_All = 2*Time_Blend + (((Distance_Radian_Set-(2*Distance_Blend))/Velocity_Max_Rad));
 80017c0:	4b36      	ldr	r3, [pc, #216]	; (800189c <Distance_Calculation+0x238>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017ca:	4b2f      	ldr	r3, [pc, #188]	; (8001888 <Distance_Calculation+0x224>)
 80017cc:	edd3 6a00 	vldr	s13, [r3]
 80017d0:	4b36      	ldr	r3, [pc, #216]	; (80018ac <Distance_Calculation+0x248>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017da:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80017de:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <Distance_Calculation+0x230>)
 80017e0:	edd3 6a00 	vldr	s13, [r3]
 80017e4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80017e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <Distance_Calculation+0x24c>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
		Time_All_M = Time_All * 1000000;
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <Distance_Calculation+0x24c>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80018a0 <Distance_Calculation+0x23c>
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f7ff f944 	bl	8000a90 <__aeabi_f2ulz>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4929      	ldr	r1, [pc, #164]	; (80018b4 <Distance_Calculation+0x250>)
 800180e:	e9c1 2300 	strd	r2, r3, [r1]
 8001812:	e027      	b.n	8001864 <Distance_Calculation+0x200>
	}

	else if ((2*Distance_Blend) > Distance_Radian_Set)
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <Distance_Calculation+0x248>)
 8001816:	edd3 7a00 	vldr	s15, [r3]
 800181a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <Distance_Calculation+0x224>)
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182c:	dd1a      	ble.n	8001864 <Distance_Calculation+0x200>
	{
		Distance_Long = 0;
 800182e:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <Distance_Calculation+0x254>)
 8001830:	2200      	movs	r2, #0
 8001832:	801a      	strh	r2, [r3, #0]
		Time_All = 2*Time_Blend;
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <Distance_Calculation+0x238>)
 8001836:	edd3 7a00 	vldr	s15, [r3]
 800183a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <Distance_Calculation+0x24c>)
 8001840:	edc3 7a00 	vstr	s15, [r3]
		Time_All_M = Time_All * 1000000;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <Distance_Calculation+0x24c>)
 8001846:	edd3 7a00 	vldr	s15, [r3]
 800184a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80018a0 <Distance_Calculation+0x23c>
 800184e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001852:	ee17 0a90 	vmov	r0, s15
 8001856:	f7ff f91b 	bl	8000a90 <__aeabi_f2ulz>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4915      	ldr	r1, [pc, #84]	; (80018b4 <Distance_Calculation+0x250>)
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
	}

	Distance_Calculated = 1;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <Distance_Calculation+0x258>)
 8001866:	2201      	movs	r2, #1
 8001868:	801a      	strh	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	bdb0      	pop	{r4, r5, r7, pc}
 800186e:	bf00      	nop
 8001870:	20000084 	.word	0x20000084
 8001874:	200000b8 	.word	0x200000b8
 8001878:	20000010 	.word	0x20000010
 800187c:	200000bc 	.word	0x200000bc
 8001880:	20000004 	.word	0x20000004
 8001884:	43340000 	.word	0x43340000
 8001888:	200000c0 	.word	0x200000c0
 800188c:	20000018 	.word	0x20000018
 8001890:	42700000 	.word	0x42700000
 8001894:	20000088 	.word	0x20000088
 8001898:	20000014 	.word	0x20000014
 800189c:	2000008c 	.word	0x2000008c
 80018a0:	49742400 	.word	0x49742400
 80018a4:	20000098 	.word	0x20000098
 80018a8:	3fe00000 	.word	0x3fe00000
 80018ac:	200000c4 	.word	0x200000c4
 80018b0:	20000090 	.word	0x20000090
 80018b4:	200000a0 	.word	0x200000a0
 80018b8:	20000058 	.word	0x20000058
 80018bc:	2000005a 	.word	0x2000005a

080018c0 <Trajectory_Generation>:

	Velocity_Want = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}
void Trajectory_Generation()
{
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c4:	ed2d 8b02 	vpush	{d8}
 80018c8:	b095      	sub	sp, #84	; 0x54
 80018ca:	af00      	add	r7, sp, #0
	//max achieve velocity is 10 RPM or ~1.05 radian per second
	//acceleration is fixed at 0.5 radian per second^2
	Position_Encoder = htim1.Instance->CNT;
 80018cc:	4b96      	ldr	r3, [pc, #600]	; (8001b28 <Trajectory_Generation+0x268>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018d2:	4b96      	ldr	r3, [pc, #600]	; (8001b2c <Trajectory_Generation+0x26c>)
 80018d4:	601a      	str	r2, [r3, #0]
	Position_Rad  = (Position_Encoder*2*pi)/Encoder_Resolution;
 80018d6:	4b95      	ldr	r3, [pc, #596]	; (8001b2c <Trajectory_Generation+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	ee07 3a90 	vmov	s15, r3
 80018e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018e4:	4b92      	ldr	r3, [pc, #584]	; (8001b30 <Trajectory_Generation+0x270>)
 80018e6:	edd3 7a00 	vldr	s15, [r3]
 80018ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018ee:	4b91      	ldr	r3, [pc, #580]	; (8001b34 <Trajectory_Generation+0x274>)
 80018f0:	ed93 7a00 	vldr	s14, [r3]
 80018f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018f8:	4b8f      	ldr	r3, [pc, #572]	; (8001b38 <Trajectory_Generation+0x278>)
 80018fa:	edc3 7a00 	vstr	s15, [r3]
	if (Flag == 0)
 80018fe:	4b8f      	ldr	r3, [pc, #572]	; (8001b3c <Trajectory_Generation+0x27c>)
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <Trajectory_Generation+0x5a>
	{
		Flag = 1;
 8001906:	4a8d      	ldr	r2, [pc, #564]	; (8001b3c <Trajectory_Generation+0x27c>)
 8001908:	2301      	movs	r3, #1
 800190a:	8013      	strh	r3, [r2, #0]
		Time_Start = micros();
 800190c:	f000 f942 	bl	8001b94 <micros>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	498a      	ldr	r1, [pc, #552]	; (8001b40 <Trajectory_Generation+0x280>)
 8001916:	e9c1 2300 	strd	r2, r3, [r1]
	}
	Time_Now = micros();
 800191a:	f000 f93b 	bl	8001b94 <micros>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4988      	ldr	r1, [pc, #544]	; (8001b44 <Trajectory_Generation+0x284>)
 8001924:	e9c1 2300 	strd	r2, r3, [r1]
	if (Time_Now <= Time_Start+Time_Blend_M)
 8001928:	4b85      	ldr	r3, [pc, #532]	; (8001b40 <Trajectory_Generation+0x280>)
 800192a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192e:	4b86      	ldr	r3, [pc, #536]	; (8001b48 <Trajectory_Generation+0x288>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	1886      	adds	r6, r0, r2
 8001936:	64be      	str	r6, [r7, #72]	; 0x48
 8001938:	eb41 0303 	adc.w	r3, r1, r3
 800193c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800193e:	4b81      	ldr	r3, [pc, #516]	; (8001b44 <Trajectory_Generation+0x284>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001948:	4299      	cmp	r1, r3
 800194a:	bf08      	it	eq
 800194c:	4290      	cmpeq	r0, r2
 800194e:	d322      	bcc.n	8001996 <Trajectory_Generation+0xd6>
	{
		Velocity_Want = Velocity_Max*((Time_Now-Time_Start)/Time_Blend_M);
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <Trajectory_Generation+0x284>)
 8001952:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001956:	4b7a      	ldr	r3, [pc, #488]	; (8001b40 <Trajectory_Generation+0x280>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	1a84      	subs	r4, r0, r2
 800195e:	643c      	str	r4, [r7, #64]	; 0x40
 8001960:	eb61 0303 	sbc.w	r3, r1, r3
 8001964:	647b      	str	r3, [r7, #68]	; 0x44
 8001966:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <Trajectory_Generation+0x288>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001970:	f7ff f876 	bl	8000a60 <__aeabi_uldivmod>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f82a 	bl	80009d4 <__aeabi_ul2f>
 8001980:	ee07 0a10 	vmov	s14, r0
 8001984:	4b71      	ldr	r3, [pc, #452]	; (8001b4c <Trajectory_Generation+0x28c>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198e:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <Trajectory_Generation+0x290>)
 8001990:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Want = 0;
		check = 1;
		Flag = 2;
	}

}
 8001994:	e0c0      	b.n	8001b18 <Trajectory_Generation+0x258>
	else if ((Time_Now > Time_Start+Time_Blend_M) && (Time_Now < Time_Start+Time_All_M-Time_Blend_M))
 8001996:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <Trajectory_Generation+0x280>)
 8001998:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199c:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <Trajectory_Generation+0x288>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	1886      	adds	r6, r0, r2
 80019a4:	63be      	str	r6, [r7, #56]	; 0x38
 80019a6:	eb41 0303 	adc.w	r3, r1, r3
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ac:	4b65      	ldr	r3, [pc, #404]	; (8001b44 <Trajectory_Generation+0x284>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80019b6:	4299      	cmp	r1, r3
 80019b8:	bf08      	it	eq
 80019ba:	4290      	cmpeq	r0, r2
 80019bc:	d21e      	bcs.n	80019fc <Trajectory_Generation+0x13c>
 80019be:	4b60      	ldr	r3, [pc, #384]	; (8001b40 <Trajectory_Generation+0x280>)
 80019c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019c4:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <Trajectory_Generation+0x294>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	1884      	adds	r4, r0, r2
 80019cc:	eb41 0503 	adc.w	r5, r1, r3
 80019d0:	4b5d      	ldr	r3, [pc, #372]	; (8001b48 <Trajectory_Generation+0x288>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	1aa1      	subs	r1, r4, r2
 80019d8:	6339      	str	r1, [r7, #48]	; 0x30
 80019da:	eb65 0303 	sbc.w	r3, r5, r3
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
 80019e0:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <Trajectory_Generation+0x284>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80019ea:	428b      	cmp	r3, r1
 80019ec:	bf08      	it	eq
 80019ee:	4282      	cmpeq	r2, r0
 80019f0:	d204      	bcs.n	80019fc <Trajectory_Generation+0x13c>
		Velocity_Want = Velocity_Max;
 80019f2:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <Trajectory_Generation+0x28c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a56      	ldr	r2, [pc, #344]	; (8001b50 <Trajectory_Generation+0x290>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e08d      	b.n	8001b18 <Trajectory_Generation+0x258>
	else if ((Time_Now >= Time_Start+Time_All_M-Time_Blend_M) && (Time_Now <Time_Start+Time_All_M))
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <Trajectory_Generation+0x280>)
 80019fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <Trajectory_Generation+0x294>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	eb10 0802 	adds.w	r8, r0, r2
 8001a0c:	eb41 0903 	adc.w	r9, r1, r3
 8001a10:	4b4d      	ldr	r3, [pc, #308]	; (8001b48 <Trajectory_Generation+0x288>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	ebb8 0102 	subs.w	r1, r8, r2
 8001a1a:	62b9      	str	r1, [r7, #40]	; 0x28
 8001a1c:	eb69 0303 	sbc.w	r3, r9, r3
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <Trajectory_Generation+0x284>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a2c:	428b      	cmp	r3, r1
 8001a2e:	bf08      	it	eq
 8001a30:	4282      	cmpeq	r2, r0
 8001a32:	d352      	bcc.n	8001ada <Trajectory_Generation+0x21a>
 8001a34:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <Trajectory_Generation+0x280>)
 8001a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <Trajectory_Generation+0x294>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	1884      	adds	r4, r0, r2
 8001a42:	623c      	str	r4, [r7, #32]
 8001a44:	eb41 0303 	adc.w	r3, r1, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4a:	4b3e      	ldr	r3, [pc, #248]	; (8001b44 <Trajectory_Generation+0x284>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a54:	428b      	cmp	r3, r1
 8001a56:	bf08      	it	eq
 8001a58:	4282      	cmpeq	r2, r0
 8001a5a:	d23e      	bcs.n	8001ada <Trajectory_Generation+0x21a>
		Velocity_Want = (-Velocity_Max)*((((Time_Now-Time_Start)-(Time_All_M-Time_Blend_M))/Time_Blend_M)-1);
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <Trajectory_Generation+0x28c>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	eeb1 8a67 	vneg.f32	s16, s15
 8001a66:	4b37      	ldr	r3, [pc, #220]	; (8001b44 <Trajectory_Generation+0x284>)
 8001a68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <Trajectory_Generation+0x280>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	1a84      	subs	r4, r0, r2
 8001a74:	61bc      	str	r4, [r7, #24]
 8001a76:	eb61 0303 	sbc.w	r3, r1, r3
 8001a7a:	61fb      	str	r3, [r7, #28]
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <Trajectory_Generation+0x288>)
 8001a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a82:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <Trajectory_Generation+0x294>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	ebb0 0a02 	subs.w	sl, r0, r2
 8001a8c:	eb61 0b03 	sbc.w	fp, r1, r3
 8001a90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001a94:	460b      	mov	r3, r1
 8001a96:	eb13 030a 	adds.w	r3, r3, sl
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	eb43 030b 	adc.w	r3, r3, fp
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <Trajectory_Generation+0x288>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001aae:	f7fe ffd7 	bl	8000a60 <__aeabi_uldivmod>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	f112 31ff 	adds.w	r1, r2, #4294967295
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ac6:	f7fe ff85 	bl	80009d4 <__aeabi_ul2f>
 8001aca:	ee07 0a90 	vmov	s15, r0
 8001ace:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <Trajectory_Generation+0x290>)
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
 8001ad8:	e01e      	b.n	8001b18 <Trajectory_Generation+0x258>
	else if (Time_Now >= Time_Start+Time_All_M)
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <Trajectory_Generation+0x280>)
 8001adc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <Trajectory_Generation+0x294>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	1884      	adds	r4, r0, r2
 8001ae8:	603c      	str	r4, [r7, #0]
 8001aea:	eb41 0303 	adc.w	r3, r1, r3
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <Trajectory_Generation+0x284>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001afa:	428b      	cmp	r3, r1
 8001afc:	bf08      	it	eq
 8001afe:	4282      	cmpeq	r2, r0
 8001b00:	d30a      	bcc.n	8001b18 <Trajectory_Generation+0x258>
		Velocity_Want = 0;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <Trajectory_Generation+0x290>)
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
		check = 1;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <Trajectory_Generation+0x298>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	801a      	strh	r2, [r3, #0]
		Flag = 2;
 8001b10:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <Trajectory_Generation+0x27c>)
 8001b12:	2202      	movs	r2, #2
 8001b14:	801a      	strh	r2, [r3, #0]
}
 8001b16:	e7ff      	b.n	8001b18 <Trajectory_Generation+0x258>
 8001b18:	bf00      	nop
 8001b1a:	3754      	adds	r7, #84	; 0x54
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	ecbd 8b02 	vpop	{d8}
 8001b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b26:	bf00      	nop
 8001b28:	2000012c 	.word	0x2000012c
 8001b2c:	20000080 	.word	0x20000080
 8001b30:	20000004 	.word	0x20000004
 8001b34:	20000000 	.word	0x20000000
 8001b38:	200000c8 	.word	0x200000c8
 8001b3c:	200000cc 	.word	0x200000cc
 8001b40:	200000a8 	.word	0x200000a8
 8001b44:	200000b0 	.word	0x200000b0
 8001b48:	20000098 	.word	0x20000098
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	20000064 	.word	0x20000064
 8001b54:	200000a0 	.word	0x200000a0
 8001b58:	200000d0 	.word	0x200000d0

08001b5c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b4b0      	push	{r4, r5, r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d109      	bne.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b72:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001b76:	f143 0500 	adc.w	r5, r3, #0
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001b7c:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bcb0      	pop	{r4, r5, r7}
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20000174 	.word	0x20000174
 8001b90:	20000048 	.word	0x20000048

08001b94 <micros>:
uint64_t micros()
{
 8001b94:	b4b0      	push	{r4, r5, r7}
 8001b96:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <micros+0x2c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <micros+0x30>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	1884      	adds	r4, r0, r2
 8001bac:	eb41 0503 	adc.w	r5, r1, r3
 8001bb0:	4622      	mov	r2, r4
 8001bb2:	462b      	mov	r3, r5
}
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bcb0      	pop	{r4, r5, r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000174 	.word	0x20000174
 8001bc4:	20000048 	.word	0x20000048

08001bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <Error_Handler+0x8>
	...

08001bd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_MspInit+0x4c>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_MspInit+0x4c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a08      	ldr	r2, [pc, #32]	; (8001c20 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_MspInit+0x4c>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c12:	2007      	movs	r0, #7
 8001c14:	f000 fac6 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40023800 	.word	0x40023800

08001c24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_TIM_Encoder_MspInit+0x84>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d12c      	bne.n	8001ca0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6453      	str	r3, [r2, #68]	; 0x44
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <HAL_TIM_Encoder_MspInit+0x88>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8001c7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001c9c:	f000 fac4 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc4:	d116      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	201c      	movs	r0, #28
 8001ce8:	f000 fa67 	bl	80021ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cec:	201c      	movs	r0, #28
 8001cee:	f000 fa80 	bl	80021f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cf2:	e012      	b.n	8001d1a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_TIM_Base_MspInit+0x74>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10d      	bne.n	8001d1a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_TIM_Base_MspInit+0x70>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
}
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40000400 	.word	0x40000400

08001d2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_TIM_MspPostInit+0x68>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d11d      	bne.n	8001d8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a10      	ldr	r2, [pc, #64]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <HAL_TIM_MspPostInit+0x6c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	; (8001d9c <HAL_TIM_MspPostInit+0x70>)
 8001d86:	f000 fa4f 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020400 	.word	0x40020400

08001da0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0314 	add.w	r3, r7, #20
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <HAL_UART_MspInit+0x84>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d12b      	bne.n	8001e1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a10      	ldr	r2, [pc, #64]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_UART_MspInit+0x88>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <HAL_UART_MspInit+0x8c>)
 8001e16:	f000 fa07 	bl	8002228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3728      	adds	r7, #40	; 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40004400 	.word	0x40004400
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	40020000 	.word	0x40020000

08001e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <NMI_Handler+0x4>

08001e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <HardFault_Handler+0x4>

08001e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <MemManage_Handler+0x4>

08001e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e46:	e7fe      	b.n	8001e46 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7c:	f000 f8a2 	bl	8001fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <TIM2_IRQHandler+0x10>)
 8001e8a:	f001 fb4d 	bl	8003528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	20000174 	.word	0x20000174

08001e98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ea0:	f000 fb60 	bl	8002564 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <SystemInit+0x20>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <SystemInit+0x20>)
 8001eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed2:	490e      	ldr	r1, [pc, #56]	; (8001f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed4:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed8:	e002      	b.n	8001ee0 <LoopCopyDataInit>

08001eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ede:	3304      	adds	r3, #4

08001ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee4:	d3f9      	bcc.n	8001eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee8:	4c0b      	ldr	r4, [pc, #44]	; (8001f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eec:	e001      	b.n	8001ef2 <LoopFillZerobss>

08001eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef0:	3204      	adds	r2, #4

08001ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef4:	d3fb      	bcc.n	8001eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ef6:	f7ff ffd7 	bl	8001ea8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efa:	f002 fb2b 	bl	8004554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001efe:	f7fe ff6b 	bl	8000dd8 <main>
  bx  lr    
 8001f02:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f0c:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001f10:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8001f14:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001f18:	20000204 	.word	0x20000204

08001f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f1c:	e7fe      	b.n	8001f1c <ADC_IRQHandler>
	...

08001f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_Init+0x40>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_Init+0x40>)
 8001f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f30:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_Init+0x40>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_Init+0x40>)
 8001f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_Init+0x40>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_Init+0x40>)
 8001f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f48:	2003      	movs	r0, #3
 8001f4a:	f000 f92b 	bl	80021a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f000 f808 	bl	8001f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f54:	f7ff fe3e 	bl	8001bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6c:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_InitTick+0x54>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x58>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	4619      	mov	r1, r3
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f000 f943 	bl	800220e <HAL_SYSTICK_Config>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00e      	b.n	8001fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b0f      	cmp	r3, #15
 8001f96:	d80a      	bhi.n	8001fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f000 f90b 	bl	80021ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <HAL_InitTick+0x5c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	2000001c 	.word	0x2000001c
 8001fbc:	20000024 	.word	0x20000024
 8001fc0:	20000020 	.word	0x20000020

08001fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_IncTick+0x20>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <HAL_IncTick+0x24>)
 8001fd6:	6013      	str	r3, [r2, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	20000024 	.word	0x20000024
 8001fe8:	20000200 	.word	0x20000200

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000200 	.word	0x20000200

08002004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800202c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x44>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__NVIC_GetPriorityGrouping+0x18>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	f003 0307 	and.w	r3, r3, #7
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	2b00      	cmp	r3, #0
 8002078:	db0b      	blt.n	8002092 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	4907      	ldr	r1, [pc, #28]	; (80020a0 <__NVIC_EnableIRQ+0x38>)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	095b      	lsrs	r3, r3, #5
 8002088:	2001      	movs	r0, #1
 800208a:	fa00 f202 	lsl.w	r2, r0, r2
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000e100 	.word	0xe000e100

080020a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	db0a      	blt.n	80020ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <__NVIC_SetPriority+0x4c>)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	0112      	lsls	r2, r2, #4
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	440b      	add	r3, r1
 80020c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020cc:	e00a      	b.n	80020e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4908      	ldr	r1, [pc, #32]	; (80020f4 <__NVIC_SetPriority+0x50>)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	3b04      	subs	r3, #4
 80020dc:	0112      	lsls	r2, r2, #4
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	440b      	add	r3, r1
 80020e2:	761a      	strb	r2, [r3, #24]
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000e100 	.word	0xe000e100
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b089      	sub	sp, #36	; 0x24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f1c3 0307 	rsb	r3, r3, #7
 8002112:	2b04      	cmp	r3, #4
 8002114:	bf28      	it	cs
 8002116:	2304      	movcs	r3, #4
 8002118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3304      	adds	r3, #4
 800211e:	2b06      	cmp	r3, #6
 8002120:	d902      	bls.n	8002128 <NVIC_EncodePriority+0x30>
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	3b03      	subs	r3, #3
 8002126:	e000      	b.n	800212a <NVIC_EncodePriority+0x32>
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800212c:	f04f 32ff 	mov.w	r2, #4294967295
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	401a      	ands	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002140:	f04f 31ff 	mov.w	r1, #4294967295
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	43d9      	mvns	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	4313      	orrs	r3, r2
         );
}
 8002152:	4618      	mov	r0, r3
 8002154:	3724      	adds	r7, #36	; 0x24
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3b01      	subs	r3, #1
 800216c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002170:	d301      	bcc.n	8002176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002172:	2301      	movs	r3, #1
 8002174:	e00f      	b.n	8002196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <SysTick_Config+0x40>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217e:	210f      	movs	r1, #15
 8002180:	f04f 30ff 	mov.w	r0, #4294967295
 8002184:	f7ff ff8e 	bl	80020a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <SysTick_Config+0x40>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <SysTick_Config+0x40>)
 8002190:	2207      	movs	r2, #7
 8002192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	e000e010 	.word	0xe000e010

080021a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff29 	bl	8002004 <__NVIC_SetPriorityGrouping>
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4603      	mov	r3, r0
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	607a      	str	r2, [r7, #4]
 80021c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021cc:	f7ff ff3e 	bl	800204c <__NVIC_GetPriorityGrouping>
 80021d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	6978      	ldr	r0, [r7, #20]
 80021d8:	f7ff ff8e 	bl	80020f8 <NVIC_EncodePriority>
 80021dc:	4602      	mov	r2, r0
 80021de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff5d 	bl	80020a4 <__NVIC_SetPriority>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	4603      	mov	r3, r0
 80021fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff31 	bl	8002068 <__NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff ffa2 	bl	8002160 <SysTick_Config>
 800221c:	4603      	mov	r3, r0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e159      	b.n	80024f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002244:	2201      	movs	r2, #1
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	4013      	ands	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8148 	bne.w	80024f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d005      	beq.n	800227a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002276:	2b02      	cmp	r3, #2
 8002278:	d130      	bne.n	80022dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	2203      	movs	r2, #3
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 0201 	and.w	r2, r3, #1
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d017      	beq.n	8002318 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d123      	bne.n	800236c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	08da      	lsrs	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	3208      	adds	r2, #8
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	08da      	lsrs	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3208      	adds	r2, #8
 8002366:	69b9      	ldr	r1, [r7, #24]
 8002368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0203 	and.w	r2, r3, #3
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 80a2 	beq.w	80024f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b57      	ldr	r3, [pc, #348]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a56      	ldr	r2, [pc, #344]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_GPIO_Init+0x2e8>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ca:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a49      	ldr	r2, [pc, #292]	; (8002518 <HAL_GPIO_Init+0x2f0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d019      	beq.n	800242a <HAL_GPIO_Init+0x202>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a48      	ldr	r2, [pc, #288]	; (800251c <HAL_GPIO_Init+0x2f4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_GPIO_Init+0x1fe>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HAL_GPIO_Init+0x2f8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00d      	beq.n	8002422 <HAL_GPIO_Init+0x1fa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a46      	ldr	r2, [pc, #280]	; (8002524 <HAL_GPIO_Init+0x2fc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d007      	beq.n	800241e <HAL_GPIO_Init+0x1f6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a45      	ldr	r2, [pc, #276]	; (8002528 <HAL_GPIO_Init+0x300>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_GPIO_Init+0x1f2>
 8002416:	2304      	movs	r3, #4
 8002418:	e008      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241a:	2307      	movs	r3, #7
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x204>
 800241e:	2303      	movs	r3, #3
 8002420:	e004      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002422:	2302      	movs	r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x204>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_GPIO_Init+0x204>
 800242a:	2300      	movs	r3, #0
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f002 0203 	and.w	r2, r2, #3
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	4093      	lsls	r3, r2
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800243c:	4935      	ldr	r1, [pc, #212]	; (8002514 <HAL_GPIO_Init+0x2ec>)
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	089b      	lsrs	r3, r3, #2
 8002442:	3302      	adds	r3, #2
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244a:	4b38      	ldr	r3, [pc, #224]	; (800252c <HAL_GPIO_Init+0x304>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800246e:	4a2f      	ldr	r2, [pc, #188]	; (800252c <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_GPIO_Init+0x304>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002498:	4a24      	ldr	r2, [pc, #144]	; (800252c <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_GPIO_Init+0x304>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c2:	4a1a      	ldr	r2, [pc, #104]	; (800252c <HAL_GPIO_Init+0x304>)
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <HAL_GPIO_Init+0x304>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4013      	ands	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024ec:	4a0f      	ldr	r2, [pc, #60]	; (800252c <HAL_GPIO_Init+0x304>)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3301      	adds	r3, #1
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	f67f aea2 	bls.w	8002244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	40023800 	.word	0x40023800
 8002514:	40013800 	.word	0x40013800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	40021000 	.word	0x40021000
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002570:	695a      	ldr	r2, [r3, #20]
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f806 	bl	8002594 <HAL_GPIO_EXTI_Callback>
  }
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e264      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d075      	beq.n	80026b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	4ba3      	ldr	r3, [pc, #652]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d00c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d6:	4ba0      	ldr	r3, [pc, #640]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d112      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025e2:	4b9d      	ldr	r3, [pc, #628]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ee:	d10b      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	4b99      	ldr	r3, [pc, #612]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d05b      	beq.n	80026b4 <HAL_RCC_OscConfig+0x108>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d157      	bne.n	80026b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e23f      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	d106      	bne.n	8002620 <HAL_RCC_OscConfig+0x74>
 8002612:	4b91      	ldr	r3, [pc, #580]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a90      	ldr	r2, [pc, #576]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e01d      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x98>
 800262a:	4b8b      	ldr	r3, [pc, #556]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a8a      	ldr	r2, [pc, #552]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	4b88      	ldr	r3, [pc, #544]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a87      	ldr	r2, [pc, #540]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800263c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	e00b      	b.n	800265c <HAL_RCC_OscConfig+0xb0>
 8002644:	4b84      	ldr	r3, [pc, #528]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a83      	ldr	r2, [pc, #524]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b81      	ldr	r3, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a80      	ldr	r2, [pc, #512]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002664:	f7ff fcc2 	bl	8001fec <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800266c:	f7ff fcbe 	bl	8001fec <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	; 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e204      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	4b76      	ldr	r3, [pc, #472]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0xc0>
 800268a:	e014      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7ff fcae 	bl	8001fec <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002694:	f7ff fcaa 	bl	8001fec <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	; 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1f0      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0xe8>
 80026b2:	e000      	b.n	80026b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d063      	beq.n	800278a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	4b65      	ldr	r3, [pc, #404]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ce:	4b62      	ldr	r3, [pc, #392]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d11c      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d116      	bne.n	8002714 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	4b5c      	ldr	r3, [pc, #368]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d001      	beq.n	80026fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e1c4      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	4952      	ldr	r1, [pc, #328]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	e03a      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d020      	beq.n	800275e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <HAL_RCC_OscConfig+0x2b0>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7ff fc63 	bl	8001fec <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7ff fc5f 	bl	8001fec <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1a5      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	4b46      	ldr	r3, [pc, #280]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002748:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4940      	ldr	r1, [pc, #256]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]
 800275c:	e015      	b.n	800278a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800275e:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_RCC_OscConfig+0x2b0>)
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff fc42 	bl	8001fec <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7ff fc3e 	bl	8001fec <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e184      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	4b36      	ldr	r3, [pc, #216]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d030      	beq.n	80027f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d016      	beq.n	80027cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800279e:	4b30      	ldr	r3, [pc, #192]	; (8002860 <HAL_RCC_OscConfig+0x2b4>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7ff fc22 	bl	8001fec <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f7ff fc1e 	bl	8001fec <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e164      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	4b26      	ldr	r3, [pc, #152]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x200>
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027cc:	4b24      	ldr	r3, [pc, #144]	; (8002860 <HAL_RCC_OscConfig+0x2b4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7ff fc0b 	bl	8001fec <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7ff fc07 	bl	8001fec <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e14d      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ec:	4b1a      	ldr	r3, [pc, #104]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a0 	beq.w	8002946 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800280a:	4b13      	ldr	r3, [pc, #76]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10f      	bne.n	8002836 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	4a0e      	ldr	r2, [pc, #56]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	; 0x40
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002832:	2301      	movs	r3, #1
 8002834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d121      	bne.n	8002886 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <HAL_RCC_OscConfig+0x2b8>)
 8002848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800284e:	f7ff fbcd 	bl	8001fec <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002854:	e011      	b.n	800287a <HAL_RCC_OscConfig+0x2ce>
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000
 8002860:	42470e80 	.word	0x42470e80
 8002864:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7ff fbc0 	bl	8001fec <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e106      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287a:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <HAL_RCC_OscConfig+0x4e4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x2f0>
 800288e:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
 800289a:	e01c      	b.n	80028d6 <HAL_RCC_OscConfig+0x32a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d10c      	bne.n	80028be <HAL_RCC_OscConfig+0x312>
 80028a4:	4b7b      	ldr	r3, [pc, #492]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a7a      	ldr	r2, [pc, #488]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028aa:	f043 0304 	orr.w	r3, r3, #4
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	4b78      	ldr	r3, [pc, #480]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a77      	ldr	r2, [pc, #476]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
 80028bc:	e00b      	b.n	80028d6 <HAL_RCC_OscConfig+0x32a>
 80028be:	4b75      	ldr	r3, [pc, #468]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a74      	ldr	r2, [pc, #464]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b72      	ldr	r3, [pc, #456]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a71      	ldr	r2, [pc, #452]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d015      	beq.n	800290a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7ff fb85 	bl	8001fec <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7ff fb81 	bl	8001fec <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e0c5      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fc:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ee      	beq.n	80028e6 <HAL_RCC_OscConfig+0x33a>
 8002908:	e014      	b.n	8002934 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7ff fb6f 	bl	8001fec <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff fb6b 	bl	8001fec <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0af      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002928:	4b5a      	ldr	r3, [pc, #360]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002934:	7dfb      	ldrb	r3, [r7, #23]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d105      	bne.n	8002946 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	4b56      	ldr	r3, [pc, #344]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	4a55      	ldr	r2, [pc, #340]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002940:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002944:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 809b 	beq.w	8002a86 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002950:	4b50      	ldr	r3, [pc, #320]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d05c      	beq.n	8002a16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d141      	bne.n	80029e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <HAL_RCC_OscConfig+0x4ec>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7ff fb3f 	bl	8001fec <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7ff fb3b 	bl	8001fec <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e081      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002984:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f0      	bne.n	8002972 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	019b      	lsls	r3, r3, #6
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4937      	ldr	r1, [pc, #220]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ba:	4b37      	ldr	r3, [pc, #220]	; (8002a98 <HAL_RCC_OscConfig+0x4ec>)
 80029bc:	2201      	movs	r2, #1
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7ff fb14 	bl	8001fec <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c8:	f7ff fb10 	bl	8001fec <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e056      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029da:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0x41c>
 80029e6:	e04e      	b.n	8002a86 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e8:	4b2b      	ldr	r3, [pc, #172]	; (8002a98 <HAL_RCC_OscConfig+0x4ec>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ee:	f7ff fafd 	bl	8001fec <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f4:	e008      	b.n	8002a08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f6:	f7ff faf9 	bl	8001fec <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e03f      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a08:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1f0      	bne.n	80029f6 <HAL_RCC_OscConfig+0x44a>
 8002a14:	e037      	b.n	8002a86 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e032      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a22:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_RCC_OscConfig+0x4e8>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d028      	beq.n	8002a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d121      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d11a      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a52:	4013      	ands	r3, r2
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a58:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d111      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40007000 	.word	0x40007000
 8002a94:	40023800 	.word	0x40023800
 8002a98:	42470060 	.word	0x42470060

08002a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d101      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0cc      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b68      	ldr	r3, [pc, #416]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d90c      	bls.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b65      	ldr	r3, [pc, #404]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b63      	ldr	r3, [pc, #396]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0b8      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d020      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d005      	beq.n	8002afc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af0:	4b59      	ldr	r3, [pc, #356]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4a58      	ldr	r2, [pc, #352]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002afa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4b53      	ldr	r3, [pc, #332]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b50      	ldr	r3, [pc, #320]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	494d      	ldr	r1, [pc, #308]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d044      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d107      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b47      	ldr	r3, [pc, #284]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d119      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e07f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5a:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e06f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e067      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f023 0203 	bic.w	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	4934      	ldr	r1, [pc, #208]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7ff fa2e 	bl	8001fec <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b94:	f7ff fa2a 	bl	8001fec <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04f      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002baa:	4b2b      	ldr	r3, [pc, #172]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 020c 	and.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d1eb      	bne.n	8002b94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b25      	ldr	r3, [pc, #148]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0307 	and.w	r3, r3, #7
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d20c      	bcs.n	8002be4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x1b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e032      	b.n	8002c4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf0:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4916      	ldr	r1, [pc, #88]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	490e      	ldr	r1, [pc, #56]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c22:	f000 f821 	bl	8002c68 <HAL_RCC_GetSysClockFreq>
 8002c26:	4602      	mov	r2, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	490a      	ldr	r1, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	5ccb      	ldrb	r3, [r1, r3]
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c3e:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f98e 	bl	8001f64 <HAL_InitTick>

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023c00 	.word	0x40023c00
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	080045c4 	.word	0x080045c4
 8002c60:	2000001c 	.word	0x2000001c
 8002c64:	20000020 	.word	0x20000020

08002c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	607b      	str	r3, [r7, #4]
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c80:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d00d      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x40>
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f200 80bd 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0x34>
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d003      	beq.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c9a:	e0b7      	b.n	8002e0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b61      	ldr	r3, [pc, #388]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c9e:	60bb      	str	r3, [r7, #8]
       break;
 8002ca0:	e0b7      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ca2:	4b61      	ldr	r3, [pc, #388]	; (8002e28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ca4:	60bb      	str	r3, [r7, #8]
      break;
 8002ca6:	e0b4      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ca8:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cb2:	4b5b      	ldr	r3, [pc, #364]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04d      	beq.n	8002d5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbe:	4b58      	ldr	r3, [pc, #352]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	ea02 0800 	and.w	r8, r2, r0
 8002cd6:	ea03 0901 	and.w	r9, r3, r1
 8002cda:	4640      	mov	r0, r8
 8002cdc:	4649      	mov	r1, r9
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cec:	0142      	lsls	r2, r0, #5
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	ebb0 0008 	subs.w	r0, r0, r8
 8002cf6:	eb61 0109 	sbc.w	r1, r1, r9
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	018b      	lsls	r3, r1, #6
 8002d04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d08:	0182      	lsls	r2, r0, #6
 8002d0a:	1a12      	subs	r2, r2, r0
 8002d0c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d10:	f04f 0000 	mov.w	r0, #0
 8002d14:	f04f 0100 	mov.w	r1, #0
 8002d18:	00d9      	lsls	r1, r3, #3
 8002d1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d1e:	00d0      	lsls	r0, r2, #3
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	eb12 0208 	adds.w	r2, r2, r8
 8002d28:	eb43 0309 	adc.w	r3, r3, r9
 8002d2c:	f04f 0000 	mov.w	r0, #0
 8002d30:	f04f 0100 	mov.w	r1, #0
 8002d34:	0259      	lsls	r1, r3, #9
 8002d36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d3a:	0250      	lsls	r0, r2, #9
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	f7fd fe88 	bl	8000a60 <__aeabi_uldivmod>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4613      	mov	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e04a      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b31      	ldr	r3, [pc, #196]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	461a      	mov	r2, r3
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d6a:	f04f 0100 	mov.w	r1, #0
 8002d6e:	ea02 0400 	and.w	r4, r2, r0
 8002d72:	ea03 0501 	and.w	r5, r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	014b      	lsls	r3, r1, #5
 8002d84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d88:	0142      	lsls	r2, r0, #5
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	1b00      	subs	r0, r0, r4
 8002d90:	eb61 0105 	sbc.w	r1, r1, r5
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	018b      	lsls	r3, r1, #6
 8002d9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002da2:	0182      	lsls	r2, r0, #6
 8002da4:	1a12      	subs	r2, r2, r0
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	f04f 0000 	mov.w	r0, #0
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	00d9      	lsls	r1, r3, #3
 8002db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db8:	00d0      	lsls	r0, r2, #3
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	1912      	adds	r2, r2, r4
 8002dc0:	eb45 0303 	adc.w	r3, r5, r3
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	0299      	lsls	r1, r3, #10
 8002dce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dd2:	0290      	lsls	r0, r2, #10
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f7fd fe3c 	bl	8000a60 <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	0c1b      	lsrs	r3, r3, #16
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	60bb      	str	r3, [r7, #8]
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e0e:	60bb      	str	r3, [r7, #8]
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	68bb      	ldr	r3, [r7, #8]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400
 8002e28:	007a1200 	.word	0x007a1200

08002e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e32:	681b      	ldr	r3, [r3, #0]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000001c 	.word	0x2000001c

08002e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e48:	f7ff fff0 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0a9b      	lsrs	r3, r3, #10
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4903      	ldr	r1, [pc, #12]	; (8002e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080045d4 	.word	0x080045d4

08002e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e70:	f7ff ffdc 	bl	8002e2c <HAL_RCC_GetHCLKFreq>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0b5b      	lsrs	r3, r3, #13
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	4903      	ldr	r1, [pc, #12]	; (8002e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e82:	5ccb      	ldrb	r3, [r1, r3]
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	080045d4 	.word	0x080045d4

08002e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e041      	b.n	8002f2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fefa 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 fdda 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e03c      	b.n	8002fc6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1e      	ldr	r2, [pc, #120]	; (8002fd4 <HAL_TIM_Base_Start+0xa0>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d018      	beq.n	8002f90 <HAL_TIM_Base_Start+0x5c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f66:	d013      	beq.n	8002f90 <HAL_TIM_Base_Start+0x5c>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1a      	ldr	r2, [pc, #104]	; (8002fd8 <HAL_TIM_Base_Start+0xa4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00e      	beq.n	8002f90 <HAL_TIM_Base_Start+0x5c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <HAL_TIM_Base_Start+0xa8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d009      	beq.n	8002f90 <HAL_TIM_Base_Start+0x5c>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <HAL_TIM_Base_Start+0xac>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d004      	beq.n	8002f90 <HAL_TIM_Base_Start+0x5c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a16      	ldr	r2, [pc, #88]	; (8002fe4 <HAL_TIM_Base_Start+0xb0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d111      	bne.n	8002fb4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d010      	beq.n	8002fc4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb2:	e007      	b.n	8002fc4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40014000 	.word	0x40014000

08002fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d001      	beq.n	8003000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e044      	b.n	800308a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1e      	ldr	r2, [pc, #120]	; (8003098 <HAL_TIM_Base_Start_IT+0xb0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x6c>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800302a:	d013      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x6c>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1a      	ldr	r2, [pc, #104]	; (800309c <HAL_TIM_Base_Start_IT+0xb4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x6c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x6c>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_TIM_Base_Start_IT+0x6c>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a16      	ldr	r2, [pc, #88]	; (80030a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d111      	bne.n	8003078 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b06      	cmp	r3, #6
 8003064:	d010      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0201 	orr.w	r2, r2, #1
 8003074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003076:	e007      	b.n	8003088 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40010000 	.word	0x40010000
 800309c:	40000400 	.word	0x40000400
 80030a0:	40000800 	.word	0x40000800
 80030a4:	40000c00 	.word	0x40000c00
 80030a8:	40014000 	.word	0x40014000

080030ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e041      	b.n	8003142 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f839 	bl	800314a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f000 fcce 	bl	8003a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d109      	bne.n	8003184 <HAL_TIM_PWM_Start+0x24>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b01      	cmp	r3, #1
 800317a:	bf14      	ite	ne
 800317c:	2301      	movne	r3, #1
 800317e:	2300      	moveq	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	e022      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d109      	bne.n	800319e <HAL_TIM_PWM_Start+0x3e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b01      	cmp	r3, #1
 8003194:	bf14      	ite	ne
 8003196:	2301      	movne	r3, #1
 8003198:	2300      	moveq	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	e015      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d109      	bne.n	80031b8 <HAL_TIM_PWM_Start+0x58>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e008      	b.n	80031ca <HAL_TIM_PWM_Start+0x6a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e068      	b.n	80032a4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_PWM_Start+0x82>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	e013      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_PWM_Start+0x92>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031f0:	e00b      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_PWM_Start+0xa2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003200:	e003      	b.n	800320a <HAL_TIM_PWM_Start+0xaa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2201      	movs	r2, #1
 8003210:	6839      	ldr	r1, [r7, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fee0 	bl	8003fd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a23      	ldr	r2, [pc, #140]	; (80032ac <HAL_TIM_PWM_Start+0x14c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d107      	bne.n	8003232 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003230:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1d      	ldr	r2, [pc, #116]	; (80032ac <HAL_TIM_PWM_Start+0x14c>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d018      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003244:	d013      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_TIM_PWM_Start+0x150>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00e      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a17      	ldr	r2, [pc, #92]	; (80032b4 <HAL_TIM_PWM_Start+0x154>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d009      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a16      	ldr	r2, [pc, #88]	; (80032b8 <HAL_TIM_PWM_Start+0x158>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d004      	beq.n	800326e <HAL_TIM_PWM_Start+0x10e>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <HAL_TIM_PWM_Start+0x15c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d111      	bne.n	8003292 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d010      	beq.n	80032a2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003290:	e007      	b.n	80032a2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 0201 	orr.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40014000 	.word	0x40014000

080032c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e097      	b.n	8003404 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fe fc9b 	bl	8001c24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003304:	f023 0307 	bic.w	r3, r3, #7
 8003308:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fbb9 	bl	8003a8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003342:	f023 0303 	bic.w	r3, r3, #3
 8003346:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	4313      	orrs	r3, r2
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003360:	f023 030c 	bic.w	r3, r3, #12
 8003364:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800336c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	4313      	orrs	r3, r2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	011a      	lsls	r2, r3, #4
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	031b      	lsls	r3, r3, #12
 8003390:	4313      	orrs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80033a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	4313      	orrs	r3, r2
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800341c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003424:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800342c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003434:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d110      	bne.n	800345e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d102      	bne.n	8003448 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003442:	7b7b      	ldrb	r3, [r7, #13]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d001      	beq.n	800344c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e069      	b.n	8003520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800345c:	e031      	b.n	80034c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b04      	cmp	r3, #4
 8003462:	d110      	bne.n	8003486 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003464:	7bbb      	ldrb	r3, [r7, #14]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800346a:	7b3b      	ldrb	r3, [r7, #12]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d001      	beq.n	8003474 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e055      	b.n	8003520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	e01d      	b.n	80034c2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d108      	bne.n	800349e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003492:	7b7b      	ldrb	r3, [r7, #13]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003498:	7b3b      	ldrb	r3, [r7, #12]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d001      	beq.n	80034a2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e03e      	b.n	8003520 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_TIM_Encoder_Start+0xc4>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d008      	beq.n	80034e0 <HAL_TIM_Encoder_Start+0xd4>
 80034ce:	e00f      	b.n	80034f0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	2100      	movs	r1, #0
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fd7d 	bl	8003fd8 <TIM_CCxChannelCmd>
      break;
 80034de:	e016      	b.n	800350e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2201      	movs	r2, #1
 80034e6:	2104      	movs	r1, #4
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fd75 	bl	8003fd8 <TIM_CCxChannelCmd>
      break;
 80034ee:	e00e      	b.n	800350e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2201      	movs	r2, #1
 80034f6:	2100      	movs	r1, #0
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fd6d 	bl	8003fd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2201      	movs	r2, #1
 8003504:	2104      	movs	r1, #4
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fd66 	bl	8003fd8 <TIM_CCxChannelCmd>
      break;
 800350c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f042 0201 	orr.w	r2, r2, #1
 800351c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d122      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d11b      	bne.n	8003584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0202 	mvn.w	r2, #2
 8003554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa70 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003570:	e005      	b.n	800357e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 fa62 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fa73 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	2b04      	cmp	r3, #4
 8003590:	d122      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d11b      	bne.n	80035d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0204 	mvn.w	r2, #4
 80035a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 fa46 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 80035c4:	e005      	b.n	80035d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa38 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa49 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d122      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa1c 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa0e 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa1f 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b10      	cmp	r3, #16
 8003638:	d122      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b10      	cmp	r3, #16
 8003646:	d11b      	bne.n	8003680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0210 	mvn.w	r2, #16
 8003650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2208      	movs	r2, #8
 8003656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9f2 	bl	8003a50 <HAL_TIM_IC_CaptureCallback>
 800366c:	e005      	b.n	800367a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9e4 	bl	8003a3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 f9f5 	bl	8003a64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d10e      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0301 	and.w	r3, r3, #1
 8003698:	2b01      	cmp	r3, #1
 800369a:	d107      	bne.n	80036ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f06f 0201 	mvn.w	r2, #1
 80036a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe fa58 	bl	8001b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b6:	2b80      	cmp	r3, #128	; 0x80
 80036b8:	d10e      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c4:	2b80      	cmp	r3, #128	; 0x80
 80036c6:	d107      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fd1e 	bl	8004114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d10e      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	d107      	bne.n	8003704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9ba 	bl	8003a78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b20      	cmp	r3, #32
 8003710:	d10e      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b20      	cmp	r3, #32
 800371e:	d107      	bne.n	8003730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0220 	mvn.w	r2, #32
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fce8 	bl	8004100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800374e:	2302      	movs	r3, #2
 8003750:	e0ac      	b.n	80038ac <HAL_TIM_PWM_ConfigChannel+0x174>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b0c      	cmp	r3, #12
 800375e:	f200 809f 	bhi.w	80038a0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003762:	a201      	add	r2, pc, #4	; (adr r2, 8003768 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	0800379d 	.word	0x0800379d
 800376c:	080038a1 	.word	0x080038a1
 8003770:	080038a1 	.word	0x080038a1
 8003774:	080038a1 	.word	0x080038a1
 8003778:	080037dd 	.word	0x080037dd
 800377c:	080038a1 	.word	0x080038a1
 8003780:	080038a1 	.word	0x080038a1
 8003784:	080038a1 	.word	0x080038a1
 8003788:	0800381f 	.word	0x0800381f
 800378c:	080038a1 	.word	0x080038a1
 8003790:	080038a1 	.word	0x080038a1
 8003794:	080038a1 	.word	0x080038a1
 8003798:	0800385f 	.word	0x0800385f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f9f2 	bl	8003b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699a      	ldr	r2, [r3, #24]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6999      	ldr	r1, [r3, #24]
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	619a      	str	r2, [r3, #24]
      break;
 80037da:	e062      	b.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68b9      	ldr	r1, [r7, #8]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa38 	bl	8003c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6999      	ldr	r1, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	021a      	lsls	r2, r3, #8
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	619a      	str	r2, [r3, #24]
      break;
 800381c:	e041      	b.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fa83 	bl	8003d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69da      	ldr	r2, [r3, #28]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f042 0208 	orr.w	r2, r2, #8
 8003838:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	69da      	ldr	r2, [r3, #28]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0204 	bic.w	r2, r2, #4
 8003848:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69d9      	ldr	r1, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	61da      	str	r2, [r3, #28]
      break;
 800385c:	e021      	b.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	4618      	mov	r0, r3
 8003866:	f000 facd 	bl	8003e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69da      	ldr	r2, [r3, #28]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69d9      	ldr	r1, [r3, #28]
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	021a      	lsls	r2, r3, #8
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	61da      	str	r2, [r3, #28]
      break;
 800389e:	e000      	b.n	80038a2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80038a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_TIM_ConfigClockSource+0x18>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e0b3      	b.n	8003a34 <HAL_TIM_ConfigClockSource+0x180>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003904:	d03e      	beq.n	8003984 <HAL_TIM_ConfigClockSource+0xd0>
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	f200 8087 	bhi.w	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 800390e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003912:	f000 8085 	beq.w	8003a20 <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391a:	d87f      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 800391c:	2b70      	cmp	r3, #112	; 0x70
 800391e:	d01a      	beq.n	8003956 <HAL_TIM_ConfigClockSource+0xa2>
 8003920:	2b70      	cmp	r3, #112	; 0x70
 8003922:	d87b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 8003924:	2b60      	cmp	r3, #96	; 0x60
 8003926:	d050      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x116>
 8003928:	2b60      	cmp	r3, #96	; 0x60
 800392a:	d877      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 800392c:	2b50      	cmp	r3, #80	; 0x50
 800392e:	d03c      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0xf6>
 8003930:	2b50      	cmp	r3, #80	; 0x50
 8003932:	d873      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 8003934:	2b40      	cmp	r3, #64	; 0x40
 8003936:	d058      	beq.n	80039ea <HAL_TIM_ConfigClockSource+0x136>
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d86f      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 800393c:	2b30      	cmp	r3, #48	; 0x30
 800393e:	d064      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x156>
 8003940:	2b30      	cmp	r3, #48	; 0x30
 8003942:	d86b      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 8003944:	2b20      	cmp	r3, #32
 8003946:	d060      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x156>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d867      	bhi.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d05c      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x156>
 8003950:	2b10      	cmp	r3, #16
 8003952:	d05a      	beq.n	8003a0a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003954:	e062      	b.n	8003a1c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	6899      	ldr	r1, [r3, #8]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f000 fb17 	bl	8003f98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003978:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	609a      	str	r2, [r3, #8]
      break;
 8003982:	e04e      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6818      	ldr	r0, [r3, #0]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	6899      	ldr	r1, [r3, #8]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f000 fb00 	bl	8003f98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039a6:	609a      	str	r2, [r3, #8]
      break;
 80039a8:	e03b      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fa74 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2150      	movs	r1, #80	; 0x50
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 facd 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e02b      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6859      	ldr	r1, [r3, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f000 fa93 	bl	8003f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2160      	movs	r1, #96	; 0x60
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fabd 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80039e8:	e01b      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	f000 fa54 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2140      	movs	r1, #64	; 0x40
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 faad 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003a08:	e00b      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4619      	mov	r1, r3
 8003a14:	4610      	mov	r0, r2
 8003a16:	f000 faa4 	bl	8003f62 <TIM_ITRx_SetConfig>
        break;
 8003a1a:	e002      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003a20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a31      	ldr	r2, [pc, #196]	; (8003b74 <TIM_Base_SetConfig+0xe8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a30      	ldr	r2, [pc, #192]	; (8003b78 <TIM_Base_SetConfig+0xec>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x38>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <TIM_Base_SetConfig+0xf0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d017      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a22      	ldr	r2, [pc, #136]	; (8003b74 <TIM_Base_SetConfig+0xe8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <TIM_Base_SetConfig+0xec>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a20      	ldr	r2, [pc, #128]	; (8003b7c <TIM_Base_SetConfig+0xf0>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <TIM_Base_SetConfig+0xf4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <TIM_Base_SetConfig+0xf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x8a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <TIM_Base_SetConfig+0xfc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <TIM_Base_SetConfig+0xe4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	615a      	str	r2, [r3, #20]
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40010000 	.word	0x40010000
 8003b74:	40000400 	.word	0x40000400
 8003b78:	40000800 	.word	0x40000800
 8003b7c:	40000c00 	.word	0x40000c00
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800

08003b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0303 	bic.w	r3, r3, #3
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f023 0302 	bic.w	r3, r3, #2
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <TIM_OC1_SetConfig+0xc8>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d10c      	bne.n	8003c02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0308 	bic.w	r3, r3, #8
 8003bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	697a      	ldr	r2, [r7, #20]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a13      	ldr	r2, [pc, #76]	; (8003c54 <TIM_OC1_SetConfig+0xc8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d111      	bne.n	8003c2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000

08003c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0210 	bic.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0320 	bic.w	r3, r3, #32
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <TIM_OC2_SetConfig+0xd4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d10d      	bne.n	8003cd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a15      	ldr	r2, [pc, #84]	; (8003d2c <TIM_OC2_SetConfig+0xd4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d113      	bne.n	8003d04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	621a      	str	r2, [r3, #32]
}
 8003d1e:	bf00      	nop
 8003d20:	371c      	adds	r7, #28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40010000 	.word	0x40010000

08003d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0303 	bic.w	r3, r3, #3
 8003d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	021b      	lsls	r3, r3, #8
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <TIM_OC3_SetConfig+0xd0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10d      	bne.n	8003daa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a14      	ldr	r2, [pc, #80]	; (8003e00 <TIM_OC3_SetConfig+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d113      	bne.n	8003dda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000

08003e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a10      	ldr	r2, [pc, #64]	; (8003ea0 <TIM_OC4_SetConfig+0x9c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d109      	bne.n	8003e78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	019b      	lsls	r3, r3, #6
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40010000 	.word	0x40010000

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 031f 	and.w	r3, r3, #31
 8003fea:	2201      	movs	r2, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1a      	ldr	r2, [r3, #32]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	401a      	ands	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1a      	ldr	r2, [r3, #32]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 031f 	and.w	r3, r3, #31
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	431a      	orrs	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004024:	b480      	push	{r7}
 8004026:	b085      	sub	sp, #20
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004038:	2302      	movs	r3, #2
 800403a:	e050      	b.n	80040de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1c      	ldr	r2, [pc, #112]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d018      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d013      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00e      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a16      	ldr	r2, [pc, #88]	; (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d009      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d004      	beq.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a13      	ldr	r2, [pc, #76]	; (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d10c      	bne.n	80040cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40000400 	.word	0x40000400
 80040f4:	40000800 	.word	0x40000800
 80040f8:	40000c00 	.word	0x40000c00
 80040fc:	40014000 	.word	0x40014000

08004100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e03f      	b.n	80041ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fe26 	bl	8001da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800416a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f829 	bl	80041c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004180:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695a      	ldr	r2, [r3, #20]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004190:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2220      	movs	r2, #32
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c8:	b09f      	sub	sp, #124	; 0x7c
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041da:	68d9      	ldr	r1, [r3, #12]
 80041dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	ea40 0301 	orr.w	r3, r0, r1
 80041e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	431a      	orrs	r2, r3
 80041f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80041fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004208:	f021 010c 	bic.w	r1, r1, #12
 800420c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004212:	430b      	orrs	r3, r1
 8004214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	6999      	ldr	r1, [r3, #24]
 8004224:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	ea40 0301 	orr.w	r3, r0, r1
 800422c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4bc5      	ldr	r3, [pc, #788]	; (8004548 <UART_SetConfig+0x384>)
 8004234:	429a      	cmp	r2, r3
 8004236:	d004      	beq.n	8004242 <UART_SetConfig+0x7e>
 8004238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4bc3      	ldr	r3, [pc, #780]	; (800454c <UART_SetConfig+0x388>)
 800423e:	429a      	cmp	r2, r3
 8004240:	d103      	bne.n	800424a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004242:	f7fe fe13 	bl	8002e6c <HAL_RCC_GetPCLK2Freq>
 8004246:	6778      	str	r0, [r7, #116]	; 0x74
 8004248:	e002      	b.n	8004250 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800424a:	f7fe fdfb 	bl	8002e44 <HAL_RCC_GetPCLK1Freq>
 800424e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	f040 80b6 	bne.w	80043c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800425c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800425e:	461c      	mov	r4, r3
 8004260:	f04f 0500 	mov.w	r5, #0
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	1891      	adds	r1, r2, r2
 800426a:	6439      	str	r1, [r7, #64]	; 0x40
 800426c:	415b      	adcs	r3, r3
 800426e:	647b      	str	r3, [r7, #68]	; 0x44
 8004270:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004274:	1912      	adds	r2, r2, r4
 8004276:	eb45 0303 	adc.w	r3, r5, r3
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	00d9      	lsls	r1, r3, #3
 8004284:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004288:	00d0      	lsls	r0, r2, #3
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	1911      	adds	r1, r2, r4
 8004290:	6639      	str	r1, [r7, #96]	; 0x60
 8004292:	416b      	adcs	r3, r5
 8004294:	667b      	str	r3, [r7, #100]	; 0x64
 8004296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042a4:	415b      	adcs	r3, r3
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80042b0:	f7fc fbd6 	bl	8000a60 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4ba5      	ldr	r3, [pc, #660]	; (8004550 <UART_SetConfig+0x38c>)
 80042ba:	fba3 2302 	umull	r2, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	011e      	lsls	r6, r3, #4
 80042c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042c4:	461c      	mov	r4, r3
 80042c6:	f04f 0500 	mov.w	r5, #0
 80042ca:	4622      	mov	r2, r4
 80042cc:	462b      	mov	r3, r5
 80042ce:	1891      	adds	r1, r2, r2
 80042d0:	6339      	str	r1, [r7, #48]	; 0x30
 80042d2:	415b      	adcs	r3, r3
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042da:	1912      	adds	r2, r2, r4
 80042dc:	eb45 0303 	adc.w	r3, r5, r3
 80042e0:	f04f 0000 	mov.w	r0, #0
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	00d9      	lsls	r1, r3, #3
 80042ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ee:	00d0      	lsls	r0, r2, #3
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	1911      	adds	r1, r2, r4
 80042f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80042f8:	416b      	adcs	r3, r5
 80042fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	461a      	mov	r2, r3
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	1891      	adds	r1, r2, r2
 8004308:	62b9      	str	r1, [r7, #40]	; 0x28
 800430a:	415b      	adcs	r3, r3
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800430e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004312:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004316:	f7fc fba3 	bl	8000a60 <__aeabi_uldivmod>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4b8c      	ldr	r3, [pc, #560]	; (8004550 <UART_SetConfig+0x38c>)
 8004320:	fba3 1302 	umull	r1, r3, r3, r2
 8004324:	095b      	lsrs	r3, r3, #5
 8004326:	2164      	movs	r1, #100	; 0x64
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	3332      	adds	r3, #50	; 0x32
 8004332:	4a87      	ldr	r2, [pc, #540]	; (8004550 <UART_SetConfig+0x38c>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004340:	441e      	add	r6, r3
 8004342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004344:	4618      	mov	r0, r3
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	1894      	adds	r4, r2, r2
 8004350:	623c      	str	r4, [r7, #32]
 8004352:	415b      	adcs	r3, r3
 8004354:	627b      	str	r3, [r7, #36]	; 0x24
 8004356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800435a:	1812      	adds	r2, r2, r0
 800435c:	eb41 0303 	adc.w	r3, r1, r3
 8004360:	f04f 0400 	mov.w	r4, #0
 8004364:	f04f 0500 	mov.w	r5, #0
 8004368:	00dd      	lsls	r5, r3, #3
 800436a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800436e:	00d4      	lsls	r4, r2, #3
 8004370:	4622      	mov	r2, r4
 8004372:	462b      	mov	r3, r5
 8004374:	1814      	adds	r4, r2, r0
 8004376:	653c      	str	r4, [r7, #80]	; 0x50
 8004378:	414b      	adcs	r3, r1
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
 800437c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	461a      	mov	r2, r3
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	1891      	adds	r1, r2, r2
 8004388:	61b9      	str	r1, [r7, #24]
 800438a:	415b      	adcs	r3, r3
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004392:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004396:	f7fc fb63 	bl	8000a60 <__aeabi_uldivmod>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <UART_SetConfig+0x38c>)
 80043a0:	fba3 1302 	umull	r1, r3, r3, r2
 80043a4:	095b      	lsrs	r3, r3, #5
 80043a6:	2164      	movs	r1, #100	; 0x64
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3332      	adds	r3, #50	; 0x32
 80043b2:	4a67      	ldr	r2, [pc, #412]	; (8004550 <UART_SetConfig+0x38c>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 0207 	and.w	r2, r3, #7
 80043be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4432      	add	r2, r6
 80043c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043c6:	e0b9      	b.n	800453c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ca:	461c      	mov	r4, r3
 80043cc:	f04f 0500 	mov.w	r5, #0
 80043d0:	4622      	mov	r2, r4
 80043d2:	462b      	mov	r3, r5
 80043d4:	1891      	adds	r1, r2, r2
 80043d6:	6139      	str	r1, [r7, #16]
 80043d8:	415b      	adcs	r3, r3
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80043e0:	1912      	adds	r2, r2, r4
 80043e2:	eb45 0303 	adc.w	r3, r5, r3
 80043e6:	f04f 0000 	mov.w	r0, #0
 80043ea:	f04f 0100 	mov.w	r1, #0
 80043ee:	00d9      	lsls	r1, r3, #3
 80043f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043f4:	00d0      	lsls	r0, r2, #3
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	eb12 0804 	adds.w	r8, r2, r4
 80043fe:	eb43 0905 	adc.w	r9, r3, r5
 8004402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4618      	mov	r0, r3
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	008b      	lsls	r3, r1, #2
 8004416:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800441a:	0082      	lsls	r2, r0, #2
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	f7fc fb1e 	bl	8000a60 <__aeabi_uldivmod>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <UART_SetConfig+0x38c>)
 800442a:	fba3 2302 	umull	r2, r3, r3, r2
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	011e      	lsls	r6, r3, #4
 8004432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004434:	4618      	mov	r0, r3
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	1894      	adds	r4, r2, r2
 8004440:	60bc      	str	r4, [r7, #8]
 8004442:	415b      	adcs	r3, r3
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800444a:	1812      	adds	r2, r2, r0
 800444c:	eb41 0303 	adc.w	r3, r1, r3
 8004450:	f04f 0400 	mov.w	r4, #0
 8004454:	f04f 0500 	mov.w	r5, #0
 8004458:	00dd      	lsls	r5, r3, #3
 800445a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800445e:	00d4      	lsls	r4, r2, #3
 8004460:	4622      	mov	r2, r4
 8004462:	462b      	mov	r3, r5
 8004464:	1814      	adds	r4, r2, r0
 8004466:	64bc      	str	r4, [r7, #72]	; 0x48
 8004468:	414b      	adcs	r3, r1
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800446c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4618      	mov	r0, r3
 8004472:	f04f 0100 	mov.w	r1, #0
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	008b      	lsls	r3, r1, #2
 8004480:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004484:	0082      	lsls	r2, r0, #2
 8004486:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800448a:	f7fc fae9 	bl	8000a60 <__aeabi_uldivmod>
 800448e:	4602      	mov	r2, r0
 8004490:	460b      	mov	r3, r1
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <UART_SetConfig+0x38c>)
 8004494:	fba3 1302 	umull	r1, r3, r3, r2
 8004498:	095b      	lsrs	r3, r3, #5
 800449a:	2164      	movs	r1, #100	; 0x64
 800449c:	fb01 f303 	mul.w	r3, r1, r3
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	3332      	adds	r3, #50	; 0x32
 80044a6:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <UART_SetConfig+0x38c>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044b2:	441e      	add	r6, r3
 80044b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b6:	4618      	mov	r0, r3
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	1894      	adds	r4, r2, r2
 80044c2:	603c      	str	r4, [r7, #0]
 80044c4:	415b      	adcs	r3, r3
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044cc:	1812      	adds	r2, r2, r0
 80044ce:	eb41 0303 	adc.w	r3, r1, r3
 80044d2:	f04f 0400 	mov.w	r4, #0
 80044d6:	f04f 0500 	mov.w	r5, #0
 80044da:	00dd      	lsls	r5, r3, #3
 80044dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80044e0:	00d4      	lsls	r4, r2, #3
 80044e2:	4622      	mov	r2, r4
 80044e4:	462b      	mov	r3, r5
 80044e6:	eb12 0a00 	adds.w	sl, r2, r0
 80044ea:	eb43 0b01 	adc.w	fp, r3, r1
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	008b      	lsls	r3, r1, #2
 8004502:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004506:	0082      	lsls	r2, r0, #2
 8004508:	4650      	mov	r0, sl
 800450a:	4659      	mov	r1, fp
 800450c:	f7fc faa8 	bl	8000a60 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <UART_SetConfig+0x38c>)
 8004516:	fba3 1302 	umull	r1, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2164      	movs	r1, #100	; 0x64
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	3332      	adds	r3, #50	; 0x32
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <UART_SetConfig+0x38c>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	f003 020f 	and.w	r2, r3, #15
 8004534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4432      	add	r2, r6
 800453a:	609a      	str	r2, [r3, #8]
}
 800453c:	bf00      	nop
 800453e:	377c      	adds	r7, #124	; 0x7c
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004546:	bf00      	nop
 8004548:	40011000 	.word	0x40011000
 800454c:	40011400 	.word	0x40011400
 8004550:	51eb851f 	.word	0x51eb851f

08004554 <__libc_init_array>:
 8004554:	b570      	push	{r4, r5, r6, lr}
 8004556:	4d0d      	ldr	r5, [pc, #52]	; (800458c <__libc_init_array+0x38>)
 8004558:	4c0d      	ldr	r4, [pc, #52]	; (8004590 <__libc_init_array+0x3c>)
 800455a:	1b64      	subs	r4, r4, r5
 800455c:	10a4      	asrs	r4, r4, #2
 800455e:	2600      	movs	r6, #0
 8004560:	42a6      	cmp	r6, r4
 8004562:	d109      	bne.n	8004578 <__libc_init_array+0x24>
 8004564:	4d0b      	ldr	r5, [pc, #44]	; (8004594 <__libc_init_array+0x40>)
 8004566:	4c0c      	ldr	r4, [pc, #48]	; (8004598 <__libc_init_array+0x44>)
 8004568:	f000 f820 	bl	80045ac <_init>
 800456c:	1b64      	subs	r4, r4, r5
 800456e:	10a4      	asrs	r4, r4, #2
 8004570:	2600      	movs	r6, #0
 8004572:	42a6      	cmp	r6, r4
 8004574:	d105      	bne.n	8004582 <__libc_init_array+0x2e>
 8004576:	bd70      	pop	{r4, r5, r6, pc}
 8004578:	f855 3b04 	ldr.w	r3, [r5], #4
 800457c:	4798      	blx	r3
 800457e:	3601      	adds	r6, #1
 8004580:	e7ee      	b.n	8004560 <__libc_init_array+0xc>
 8004582:	f855 3b04 	ldr.w	r3, [r5], #4
 8004586:	4798      	blx	r3
 8004588:	3601      	adds	r6, #1
 800458a:	e7f2      	b.n	8004572 <__libc_init_array+0x1e>
 800458c:	080045e4 	.word	0x080045e4
 8004590:	080045e4 	.word	0x080045e4
 8004594:	080045e4 	.word	0x080045e4
 8004598:	080045e8 	.word	0x080045e8

0800459c <memset>:
 800459c:	4402      	add	r2, r0
 800459e:	4603      	mov	r3, r0
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d100      	bne.n	80045a6 <memset+0xa>
 80045a4:	4770      	bx	lr
 80045a6:	f803 1b01 	strb.w	r1, [r3], #1
 80045aa:	e7f9      	b.n	80045a0 <memset+0x4>

080045ac <_init>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	bf00      	nop
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr

080045b8 <_fini>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	bf00      	nop
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr
