
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006c04  08006c04  00016c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c54  08006c54  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08006c54  08006c54  00016c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c5c  08006c5c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08006c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000098  08006cfc  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  08006cfc  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001094a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207f  00000000  00000000  00030a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00032a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  00033a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e93  00000000  00000000  00034958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011219  00000000  00000000  0004b7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091819  00000000  00000000  0005ca04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee21d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004788  00000000  00000000  000ee270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006bec 	.word	0x08006bec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08006bec 	.word	0x08006bec

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006f0:	ed2d 8b02 	vpush	{d8}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f002 f872 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f9ac 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 fc00 	bl	8000f04 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f000 fbd6 	bl	8000eb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000708:	f000 fbaa 	bl	8000e60 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800070c:	f000 fa3a 	bl	8000b84 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000710:	f000 fae2 	bl	8000cd8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000714:	f000 fa8e 	bl	8000c34 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000718:	f000 fa06 	bl	8000b28 <MX_I2C1_Init>
  MX_TIM4_Init();
 800071c:	f000 fb52 	bl	8000dc4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000720:	48ae      	ldr	r0, [pc, #696]	; (80009dc <main+0x2f0>)
 8000722:	f003 fe07 	bl	8004334 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000726:	213c      	movs	r1, #60	; 0x3c
 8000728:	48ad      	ldr	r0, [pc, #692]	; (80009e0 <main+0x2f4>)
 800072a:	f004 f815 	bl	8004758 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800072e:	48ad      	ldr	r0, [pc, #692]	; (80009e4 <main+0x2f8>)
 8000730:	f003 fda6 	bl	8004280 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000734:	210c      	movs	r1, #12
 8000736:	48ab      	ldr	r0, [pc, #684]	; (80009e4 <main+0x2f8>)
 8000738:	f003 feb8 	bl	80044ac <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 800073c:	4baa      	ldr	r3, [pc, #680]	; (80009e8 <main+0x2fc>)
 800073e:	4aab      	ldr	r2, [pc, #684]	; (80009ec <main+0x300>)
 8000740:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000742:	4ba9      	ldr	r3, [pc, #676]	; (80009e8 <main+0x2fc>)
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000748:	4ba7      	ldr	r3, [pc, #668]	; (80009e8 <main+0x2fc>)
 800074a:	22ff      	movs	r2, #255	; 0xff
 800074c:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800074e:	48a6      	ldr	r0, [pc, #664]	; (80009e8 <main+0x2fc>)
 8000750:	f001 fb8c 	bl	8001e6c <UARTInit>
  UARTResetStart(&UART2);
 8000754:	48a4      	ldr	r0, [pc, #656]	; (80009e8 <main+0x2fc>)
 8000756:	f001 fbb1 	bl	8001ebc <UARTResetStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	int16_t inputChar = UARTReadChar(&UART2);
 800075a:	48a3      	ldr	r0, [pc, #652]	; (80009e8 <main+0x2fc>)
 800075c:	f001 fbd2 	bl	8001f04 <UARTReadChar>
 8000760:	4603      	mov	r3, r0
 8000762:	80fb      	strh	r3, [r7, #6]
	  	if (inputChar != -1)
 8000764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d005      	beq.n	800077a <main+0x8e>
	  	{
	  		UART_Protocol(&UART2, inputChar);
 800076e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000772:	4619      	mov	r1, r3
 8000774:	489c      	ldr	r0, [pc, #624]	; (80009e8 <main+0x2fc>)
 8000776:	f001 fbef 	bl	8001f58 <UART_Protocol>
	  	}

	  if (micros() - Time_Velocity_Stamp >= 100)
 800077a:	f001 fd39 	bl	80021f0 <micros>
 800077e:	4b9c      	ldr	r3, [pc, #624]	; (80009f0 <main+0x304>)
 8000780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000784:	1a84      	subs	r4, r0, r2
 8000786:	eb61 0503 	sbc.w	r5, r1, r3
 800078a:	2d00      	cmp	r5, #0
 800078c:	bf08      	it	eq
 800078e:	2c64      	cmpeq	r4, #100	; 0x64
 8000790:	d33d      	bcc.n	800080e <main+0x122>
	  {
		  Time_Velocity_Stamp = micros();
 8000792:	f001 fd2d 	bl	80021f0 <micros>
 8000796:	4602      	mov	r2, r0
 8000798:	460b      	mov	r3, r1
 800079a:	4995      	ldr	r1, [pc, #596]	; (80009f0 <main+0x304>)
 800079c:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 80007a0:	4b94      	ldr	r3, [pc, #592]	; (80009f4 <main+0x308>)
 80007a2:	edd3 7a00 	vldr	s15, [r3]
 80007a6:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80009f8 <main+0x30c>
 80007aa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80007ae:	f000 fc4f 	bl	8001050 <Encoder_Velocity_Update>
 80007b2:	eef0 7a40 	vmov.f32	s15, s0
 80007b6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80007ba:	eddf 6a90 	vldr	s13, [pc, #576]	; 80009fc <main+0x310>
 80007be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007c2:	4b8c      	ldr	r3, [pc, #560]	; (80009f4 <main+0x308>)
 80007c4:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 80007c8:	4b8a      	ldr	r3, [pc, #552]	; (80009f4 <main+0x308>)
 80007ca:	edd3 7a00 	vldr	s15, [r3]
 80007ce:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8000a00 <main+0x314>
 80007d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80007d6:	4b8b      	ldr	r3, [pc, #556]	; (8000a04 <main+0x318>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	ee07 3a90 	vmov	s15, r3
 80007de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007e6:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <main+0x31c>)
 80007e8:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 80007ec:	4b86      	ldr	r3, [pc, #536]	; (8000a08 <main+0x31c>)
 80007ee:	edd3 7a00 	vldr	s15, [r3]
 80007f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80007f6:	4b85      	ldr	r3, [pc, #532]	; (8000a0c <main+0x320>)
 80007f8:	edd3 7a00 	vldr	s15, [r3]
 80007fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000800:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8000a00 <main+0x314>
 8000804:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000808:	4b81      	ldr	r3, [pc, #516]	; (8000a10 <main+0x324>)
 800080a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 800080e:	f001 fcef 	bl	80021f0 <micros>
 8000812:	4b80      	ldr	r3, [pc, #512]	; (8000a14 <main+0x328>)
 8000814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000818:	ebb0 0802 	subs.w	r8, r0, r2
 800081c:	eb61 0903 	sbc.w	r9, r1, r3
 8000820:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000824:	f04f 0300 	mov.w	r3, #0
 8000828:	454b      	cmp	r3, r9
 800082a:	bf08      	it	eq
 800082c:	4542      	cmpeq	r2, r8
 800082e:	d294      	bcs.n	800075a <main+0x6e>
	  {

			Time_Sampling_Stamp = micros();
 8000830:	f001 fcde 	bl	80021f0 <micros>
 8000834:	4602      	mov	r2, r0
 8000836:	460b      	mov	r3, r1
 8000838:	4976      	ldr	r1, [pc, #472]	; (8000a14 <main+0x328>)
 800083a:	e9c1 2300 	strd	r2, r3, [r1]
			if(NO_KALMAN)
 800083e:	4b76      	ldr	r3, [pc, #472]	; (8000a18 <main+0x32c>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d020      	beq.n	8000888 <main+0x19c>
			{
				Position_Read_Encoder = htim1.Instance->CNT; //Read Encoder
 8000846:	4b66      	ldr	r3, [pc, #408]	; (80009e0 <main+0x2f4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000854:	4b71      	ldr	r3, [pc, #452]	; (8000a1c <main+0x330>)
 8000856:	edc3 7a00 	vstr	s15, [r3]
				Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 800085a:	4b70      	ldr	r3, [pc, #448]	; (8000a1c <main+0x330>)
 800085c:	edd3 7a00 	vldr	s15, [r3]
 8000860:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000a20 <main+0x334>
 8000864:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000868:	4b66      	ldr	r3, [pc, #408]	; (8000a04 <main+0x318>)
 800086a:	881b      	ldrh	r3, [r3, #0]
 800086c:	ee07 3a90 	vmov	s15, r3
 8000870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000878:	4b6a      	ldr	r3, [pc, #424]	; (8000a24 <main+0x338>)
 800087a:	edc3 7a00 	vstr	s15, [r3]
				NO_KALMAN=Prev_NO_KALMAN;
 800087e:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <main+0x33c>)
 8000880:	781a      	ldrb	r2, [r3, #0]
 8000882:	4b65      	ldr	r3, [pc, #404]	; (8000a18 <main+0x32c>)
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e049      	b.n	800091c <main+0x230>
			}
			else
			{
				if(NO_KALMAN!=Prev_NO_KALMAN)
 8000888:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <main+0x32c>)
 800088a:	781a      	ldrb	r2, [r3, #0]
 800088c:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <main+0x33c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	429a      	cmp	r2, r3
 8000892:	d02a      	beq.n	80008ea <main+0x1fe>
				{
					Position_Read_Encoder = htim1.Instance->CNT; //Read Encoder
 8000894:	4b52      	ldr	r3, [pc, #328]	; (80009e0 <main+0x2f4>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008a2:	4b5e      	ldr	r3, [pc, #376]	; (8000a1c <main+0x330>)
 80008a4:	edc3 7a00 	vstr	s15, [r3]
					Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 80008a8:	4b5c      	ldr	r3, [pc, #368]	; (8000a1c <main+0x330>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8000a20 <main+0x334>
 80008b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008b6:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <main+0x318>)
 80008b8:	881b      	ldrh	r3, [r3, #0]
 80008ba:	ee07 3a90 	vmov	s15, r3
 80008be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008c6:	4b57      	ldr	r3, [pc, #348]	; (8000a24 <main+0x338>)
 80008c8:	edc3 7a00 	vstr	s15, [r3]
					Position_Kalman = Position_Now_Degree*pi/180;
 80008cc:	4b55      	ldr	r3, [pc, #340]	; (8000a24 <main+0x338>)
 80008ce:	ed93 7a00 	vldr	s14, [r3]
 80008d2:	4b4e      	ldr	r3, [pc, #312]	; (8000a0c <main+0x320>)
 80008d4:	edd3 7a00 	vldr	s15, [r3]
 80008d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008dc:	eddf 6a53 	vldr	s13, [pc, #332]	; 8000a2c <main+0x340>
 80008e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008e4:	4b52      	ldr	r3, [pc, #328]	; (8000a30 <main+0x344>)
 80008e6:	edc3 7a00 	vstr	s15, [r3]
				}

				Kalman_Filter();
 80008ea:	f000 fc57 	bl	800119c <Kalman_Filter>
				Position_Now_Rad = Position_Kalman;
 80008ee:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <main+0x344>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a50      	ldr	r2, [pc, #320]	; (8000a34 <main+0x348>)
 80008f4:	6013      	str	r3, [r2, #0]
				Velocity_Now_Rad = Velocity_Kalman;
 80008f6:	4b50      	ldr	r3, [pc, #320]	; (8000a38 <main+0x34c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <main+0x324>)
 80008fc:	6013      	str	r3, [r2, #0]
				Position_Now_Degree = Position_Now_Rad*180/pi;
 80008fe:	4b4d      	ldr	r3, [pc, #308]	; (8000a34 <main+0x348>)
 8000900:	edd3 7a00 	vldr	s15, [r3]
 8000904:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000a2c <main+0x340>
 8000908:	ee67 6a87 	vmul.f32	s13, s15, s14
 800090c:	4b3f      	ldr	r3, [pc, #252]	; (8000a0c <main+0x320>)
 800090e:	ed93 7a00 	vldr	s14, [r3]
 8000912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000916:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <main+0x338>)
 8000918:	edc3 7a00 	vstr	s15, [r3]
			}


		if ((Distance_Calculated == 0 )&& (Position_Now_Degree != Position_Want_Degree)) //Distance not calculated and not arrive at next station
 800091c:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <main+0x350>)
 800091e:	881b      	ldrh	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10d      	bne.n	8000940 <main+0x254>
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <main+0x338>)
 8000926:	ed93 7a00 	vldr	s14, [r3]
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <main+0x354>)
 800092c:	edd3 7a00 	vldr	s15, [r3]
 8000930:	eeb4 7a67 	vcmp.f32	s14, s15
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	d002      	beq.n	8000940 <main+0x254>
			{
				Distance_Calculation();		//Calculate distance
 800093a:	f000 feb9 	bl	80016b0 <Distance_Calculation>
 800093e:	e01f      	b.n	8000980 <main+0x294>
			}
			else if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree) && (Trajectory_Flag < 5)) //Distance calculated and not arrive at next station
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <main+0x350>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d11b      	bne.n	8000980 <main+0x294>
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <main+0x338>)
 800094a:	ed93 7a00 	vldr	s14, [r3]
 800094e:	4b3c      	ldr	r3, [pc, #240]	; (8000a40 <main+0x354>)
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	eeb4 7a67 	vcmp.f32	s14, s15
 8000958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800095c:	d010      	beq.n	8000980 <main+0x294>
 800095e:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <main+0x358>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	2b04      	cmp	r3, #4
 8000964:	d80c      	bhi.n	8000980 <main+0x294>
			{
				Trajectory_Generation();	//Get Velocity_Want_RPM
 8000966:	f001 f80b 	bl	8001980 <Trajectory_Generation>
				Velocity_Control();
 800096a:	f000 fdcb 	bl	8001504 <Velocity_Control>
				Motor_Drive_PWM();			//Drive
 800096e:	f000 fbcf 	bl	8001110 <Motor_Drive_PWM>

				if(Trajectory_Flag == 4)
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <main+0x358>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	2b04      	cmp	r3, #4
 8000978:	d102      	bne.n	8000980 <main+0x294>
					{
						Distance_Calculation();
						Trajectory_Flag = 0;
					}*/

					Trajectory_Flag = 5;
 800097a:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <main+0x358>)
 800097c:	2205      	movs	r2, #5
 800097e:	801a      	strh	r2, [r3, #0]


			}


			if (Trajectory_Flag == 5)		//Reach next station
 8000980:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <main+0x358>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	2b05      	cmp	r3, #5
 8000986:	d123      	bne.n	80009d0 <main+0x2e4>
			{

				if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 8000988:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <main+0x35c>)
 800098a:	ed93 7a00 	vldr	s14, [r3]
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <main+0x354>)
 8000990:	edd3 7a00 	vldr	s15, [r3]
 8000994:	eeb4 7a67 	vcmp.f32	s14, s15
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	d00d      	beq.n	80009ba <main+0x2ce>
				{
					Trajectory_Flag = 0;	//Reset flag
 800099e:	4b29      	ldr	r3, [pc, #164]	; (8000a44 <main+0x358>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	801a      	strh	r2, [r3, #0]
					Distance_Calculated = 0;//Reset distance
 80009a4:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <main+0x350>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	801a      	strh	r2, [r3, #0]
					Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 80009aa:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <main+0x360>)
 80009ac:	f04f 0200 	mov.w	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
					Velocity_Error_Sum = 0;
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <main+0x364>)
 80009b4:	f04f 0200 	mov.w	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
				}
				Velocity_Want_RPM = 0;
 80009ba:	4b24      	ldr	r3, [pc, #144]	; (8000a4c <main+0x360>)
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
				Velocity_Control();
 80009c2:	f000 fd9f 	bl	8001504 <Velocity_Control>
				PWM_Out = 0;
 80009c6:	4b23      	ldr	r3, [pc, #140]	; (8000a54 <main+0x368>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	801a      	strh	r2, [r3, #0]
				Motor_Drive_PWM();			//Drive
 80009cc:	f000 fba0 	bl	8001110 <Motor_Drive_PWM>

			}
			Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <main+0x354>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <main+0x35c>)
 80009d6:	6013      	str	r3, [r2, #0]
  {
 80009d8:	e6bf      	b.n	800075a <main+0x6e>
 80009da:	bf00      	nop
 80009dc:	200003b4 	.word	0x200003b4
 80009e0:	2000036c 	.word	0x2000036c
 80009e4:	200002c4 	.word	0x200002c4
 80009e8:	20000190 	.word	0x20000190
 80009ec:	200003fc 	.word	0x200003fc
 80009f0:	200000c8 	.word	0x200000c8
 80009f4:	200000dc 	.word	0x200000dc
 80009f8:	461c3c00 	.word	0x461c3c00
 80009fc:	461c4000 	.word	0x461c4000
 8000a00:	42700000 	.word	0x42700000
 8000a04:	20000002 	.word	0x20000002
 8000a08:	200000e0 	.word	0x200000e0
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000110 	.word	0x20000110
 8000a14:	200000c0 	.word	0x200000c0
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000100 	.word	0x20000100
 8000a20:	43b40000 	.word	0x43b40000
 8000a24:	20000104 	.word	0x20000104
 8000a28:	20000001 	.word	0x20000001
 8000a2c:	43340000 	.word	0x43340000
 8000a30:	20000168 	.word	0x20000168
 8000a34:	20000134 	.word	0x20000134
 8000a38:	2000016c 	.word	0x2000016c
 8000a3c:	200000da 	.word	0x200000da
 8000a40:	20000108 	.word	0x20000108
 8000a44:	2000015c 	.word	0x2000015c
 8000a48:	2000010c 	.word	0x2000010c
 8000a4c:	200000e4 	.word	0x200000e4
 8000a50:	200000f0 	.word	0x200000f0
 8000a54:	200000fc 	.word	0x200000fc

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b094      	sub	sp, #80	; 0x50
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0320 	add.w	r3, r7, #32
 8000a62:	2230      	movs	r2, #48	; 0x30
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f005 fbc6 	bl	80061f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	60da      	str	r2, [r3, #12]
 8000a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <SystemClock_Config+0xc8>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	2300      	movs	r3, #0
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <SystemClock_Config+0xcc>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a20      	ldr	r2, [pc, #128]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <SystemClock_Config+0xcc>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad8:	f107 0320 	add.w	r3, r7, #32
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 ff0b 	bl	80038f8 <HAL_RCC_OscConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ae8:	f001 fb9c 	bl	8002224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aec:	230f      	movs	r3, #15
 8000aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af0:	2302      	movs	r3, #2
 8000af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	2103      	movs	r1, #3
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 f96d 	bl	8003de8 <HAL_RCC_ClockConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b14:	f001 fb86 	bl	8002224 <Error_Handler>
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3750      	adds	r7, #80	; 0x50
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f002 fd83 	bl	8003670 <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f001 fb58 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000270 	.word	0x20000270
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	000186a0 	.word	0x000186a0

08000b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f005 fb30 	bl	80061f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <MX_TIM1_Init+0xac>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bb4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bf8:	f003 fd08 	bl	800460c <HAL_TIM_Encoder_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c02:	f001 fb0f 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000c14:	f004 fbac 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c1e:	f001 fb01 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000036c 	.word	0x2000036c
 8000c30:	40010000 	.word	0x40010000

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c5a:	2263      	movs	r2, #99	; 0x63
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c78:	4816      	ldr	r0, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c7a:	f003 fab1 	bl	80041e0 <HAL_TIM_Base_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c84:	f001 face 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8e:	f107 0308 	add.w	r3, r7, #8
 8000c92:	4619      	mov	r1, r3
 8000c94:	480f      	ldr	r0, [pc, #60]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000c96:	f003 ffb3 	bl	8004c00 <HAL_TIM_ConfigClockSource>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f001 fac0 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000cb2:	f004 fb5d 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cbc:	f001 fab2 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM2_Init+0xa0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f06f 0201 	mvn.w	r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200003b4 	.word	0x200003b4

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d08:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d0a:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <MX_TIM3_Init+0xe8>)
 8000d0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d0e:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b29      	ldr	r3, [pc, #164]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d28:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2e:	4823      	ldr	r0, [pc, #140]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d30:	f003 fa56 	bl	80041e0 <HAL_TIM_Base_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d3a:	f001 fa73 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d4c:	f003 ff58 	bl	8004c00 <HAL_TIM_ConfigClockSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d56:	f001 fa65 	bl	8002224 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d5a:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d5c:	f003 fb4c 	bl	80043f8 <HAL_TIM_PWM_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d66:	f001 fa5d 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d72:	f107 0320 	add.w	r3, r7, #32
 8000d76:	4619      	mov	r1, r3
 8000d78:	4810      	ldr	r0, [pc, #64]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000d7a:	f004 faf9 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d84:	f001 fa4e 	bl	8002224 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d88:	2360      	movs	r3, #96	; 0x60
 8000d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000da0:	f003 fe70 	bl	8004a84 <HAL_TIM_PWM_ConfigChannel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000daa:	f001 fa3b 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dae:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM3_Init+0xe4>)
 8000db0:	f001 fb50 	bl	8002454 <HAL_TIM_MspPostInit>

}
 8000db4:	bf00      	nop
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	200002c4 	.word	0x200002c4
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0308 	add.w	r3, r7, #8
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de0:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000de2:	4a1e      	ldr	r2, [pc, #120]	; (8000e5c <MX_TIM4_Init+0x98>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e06:	4814      	ldr	r0, [pc, #80]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000e08:	f003 f9ea 	bl	80041e0 <HAL_TIM_Base_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e12:	f001 fa07 	bl	8002224 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000e24:	f003 feec 	bl	8004c00 <HAL_TIM_ConfigClockSource>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e2e:	f001 f9f9 	bl	8002224 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e32:	2300      	movs	r3, #0
 8000e34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <MX_TIM4_Init+0x94>)
 8000e40:	f004 fa96 	bl	8005370 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e4a:	f001 f9eb 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000228 	.word	0x20000228
 8000e5c:	40000800 	.word	0x40000800

08000e60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <MX_USART2_UART_Init+0x50>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART2_UART_Init+0x4c>)
 8000e98:	f004 faec 	bl	8005474 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea2:	f001 f9bf 	bl	8002224 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200003fc 	.word	0x200003fc
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_DMA_Init+0x4c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_DMA_Init+0x4c>)
 8000ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_DMA_Init+0x4c>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	2010      	movs	r0, #16
 8000edc:	f001 fdcd 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee0:	2010      	movs	r0, #16
 8000ee2:	f001 fde6 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2011      	movs	r0, #17
 8000eec:	f001 fdc5 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ef0:	2011      	movs	r0, #17
 8000ef2:	f001 fdde 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800

08000f04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <MX_GPIO_Init+0x138>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a46      	ldr	r2, [pc, #280]	; (800103c <MX_GPIO_Init+0x138>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b44      	ldr	r3, [pc, #272]	; (800103c <MX_GPIO_Init+0x138>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <MX_GPIO_Init+0x138>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a3f      	ldr	r2, [pc, #252]	; (800103c <MX_GPIO_Init+0x138>)
 8000f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <MX_GPIO_Init+0x138>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b39      	ldr	r3, [pc, #228]	; (800103c <MX_GPIO_Init+0x138>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a38      	ldr	r2, [pc, #224]	; (800103c <MX_GPIO_Init+0x138>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b36      	ldr	r3, [pc, #216]	; (800103c <MX_GPIO_Init+0x138>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b32      	ldr	r3, [pc, #200]	; (800103c <MX_GPIO_Init+0x138>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a31      	ldr	r2, [pc, #196]	; (800103c <MX_GPIO_Init+0x138>)
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	; (800103c <MX_GPIO_Init+0x138>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	482c      	ldr	r0, [pc, #176]	; (8001040 <MX_GPIO_Init+0x13c>)
 8000f90:	f002 fb30 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9a:	482a      	ldr	r0, [pc, #168]	; (8001044 <MX_GPIO_Init+0x140>)
 8000f9c:	f002 fb2a 	bl	80035f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <MX_GPIO_Init+0x144>)
 8000fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4825      	ldr	r0, [pc, #148]	; (800104c <MX_GPIO_Init+0x148>)
 8000fb6:	f002 f999 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000fba:	2381      	movs	r3, #129	; 0x81
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481f      	ldr	r0, [pc, #124]	; (800104c <MX_GPIO_Init+0x148>)
 8000fce:	f002 f98d 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <MX_GPIO_Init+0x13c>)
 8000fe6:	f002 f981 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	480f      	ldr	r0, [pc, #60]	; (8001040 <MX_GPIO_Init+0x13c>)
 8001002:	f002 f973 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800100a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	4619      	mov	r1, r3
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <MX_GPIO_Init+0x140>)
 8001020:	f002 f964 	bl	80032ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	2028      	movs	r0, #40	; 0x28
 800102a:	f001 fd26 	bl	8002a7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800102e:	2028      	movs	r0, #40	; 0x28
 8001030:	f001 fd3f 	bl	8002ab2 <HAL_NVIC_EnableIRQ>

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000
 8001044:	40020400 	.word	0x40020400
 8001048:	10210000 	.word	0x10210000
 800104c:	40020800 	.word	0x40020800

08001050 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	ed2d 8b02 	vpush	{d8}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 800105a:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <Encoder_Velocity_Update+0xa8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001062:	f001 f8c5 	bl	80021f0 <micros>
 8001066:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800106a:	4b24      	ldr	r3, [pc, #144]	; (80010fc <Encoder_Velocity_Update+0xac>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001074:	1a84      	subs	r4, r0, r2
 8001076:	eb61 0503 	sbc.w	r5, r1, r3
 800107a:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <Encoder_Velocity_Update+0xb0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8001088:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <Encoder_Velocity_Update+0xb4>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	4293      	cmp	r3, r2
 8001092:	db06      	blt.n	80010a2 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <Encoder_Velocity_Update+0xb8>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	e00b      	b.n	80010ba <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	425b      	negs	r3, r3
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <Encoder_Velocity_Update+0xb4>)
 80010a8:	8812      	ldrh	r2, [r2, #0]
 80010aa:	4293      	cmp	r3, r2
 80010ac:	db05      	blt.n	80010ba <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 80010ae:	4b16      	ldr	r3, [pc, #88]	; (8001108 <Encoder_Velocity_Update+0xb8>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80010ba:	4a11      	ldr	r2, [pc, #68]	; (8001100 <Encoder_Velocity_Update+0xb0>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80010c0:	490e      	ldr	r1, [pc, #56]	; (80010fc <Encoder_Velocity_Update+0xac>)
 80010c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010c6:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	4a0f      	ldr	r2, [pc, #60]	; (800110c <Encoder_Velocity_Update+0xbc>)
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	ee07 3a90 	vmov	s15, r3
 80010d6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010de:	f7ff f943 	bl	8000368 <__aeabi_ul2f>
 80010e2:	ee07 0a10 	vmov	s14, r0
 80010e6:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	ecbd 8b02 	vpop	{d8}
 80010f6:	bdb0      	pop	{r4, r5, r7, pc}
 80010f8:	2000036c 	.word	0x2000036c
 80010fc:	200001a8 	.word	0x200001a8
 8001100:	200001b0 	.word	0x200001b0
 8001104:	20000004 	.word	0x20000004
 8001108:	20000002 	.word	0x20000002
 800110c:	000f4240 	.word	0x000f4240

08001110 <Motor_Drive_PWM>:

#define PWM_CHANNEL TIM_CHANNEL_4			//Set channel for PWM
#define GPIO_PIN_DIRECTION GPIO_PIN_10		//Set pin for direction
void Motor_Drive_PWM()	//Motor drive
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	if (PWM_Out > 10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8001114:	4b1d      	ldr	r3, [pc, #116]	; (800118c <Motor_Drive_PWM+0x7c>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	f242 7210 	movw	r2, #10000	; 0x2710
 800111e:	4293      	cmp	r3, r2
 8001120:	dd04      	ble.n	800112c <Motor_Drive_PWM+0x1c>
	{
		PWM_Out = 10000;		//Run with Velocity_Max_RPM
 8001122:	4b1a      	ldr	r3, [pc, #104]	; (800118c <Motor_Drive_PWM+0x7c>)
 8001124:	f242 7210 	movw	r2, #10000	; 0x2710
 8001128:	801a      	strh	r2, [r3, #0]
 800112a:	e009      	b.n	8001140 <Motor_Drive_PWM+0x30>
	}
	else if (PWM_Out < -10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <Motor_Drive_PWM+0x7c>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	4a17      	ldr	r2, [pc, #92]	; (8001190 <Motor_Drive_PWM+0x80>)
 8001134:	4293      	cmp	r3, r2
 8001136:	da03      	bge.n	8001140 <Motor_Drive_PWM+0x30>
	{
		PWM_Out = -10000;		//Run with Velocity_Max_RPM
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <Motor_Drive_PWM+0x7c>)
 800113a:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 800113e:	801a      	strh	r2, [r3, #0]
	}

	if (PWM_Out < 0)
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <Motor_Drive_PWM+0x7c>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	da0d      	bge.n	8001166 <Motor_Drive_PWM+0x56>
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, -PWM_Out);
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <Motor_Drive_PWM+0x7c>)
 800114c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001150:	425a      	negs	r2, r3
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <Motor_Drive_PWM+0x84>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115e:	480e      	ldr	r0, [pc, #56]	; (8001198 <Motor_Drive_PWM+0x88>)
 8001160:	f002 fa48 	bl	80035f4 <HAL_GPIO_WritePin>
	else if (PWM_Out >= 0)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 8001164:	e010      	b.n	8001188 <Motor_Drive_PWM+0x78>
	else if (PWM_Out >= 0)
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <Motor_Drive_PWM+0x7c>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0b      	blt.n	8001188 <Motor_Drive_PWM+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <Motor_Drive_PWM+0x7c>)
 8001172:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <Motor_Drive_PWM+0x84>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <Motor_Drive_PWM+0x88>)
 8001184:	f002 fa36 	bl	80035f4 <HAL_GPIO_WritePin>
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000fc 	.word	0x200000fc
 8001190:	ffffd8f0 	.word	0xffffd8f0
 8001194:	200002c4 	.word	0x200002c4
 8001198:	40020400 	.word	0x40020400

0800119c <Kalman_Filter>:
void Kalman_Filter()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	ed2d 8b02 	vpush	{d8}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
	Q = powf(Sigma_a, 2);
 80011a6:	4bca      	ldr	r3, [pc, #808]	; (80014d0 <Kalman_Filter+0x334>)
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80011b0:	eeb0 0a67 	vmov.f32	s0, s15
 80011b4:	f005 f8b0 	bl	8006318 <powf>
 80011b8:	eef0 7a40 	vmov.f32	s15, s0
 80011bc:	4bc5      	ldr	r3, [pc, #788]	; (80014d4 <Kalman_Filter+0x338>)
 80011be:	edc3 7a00 	vstr	s15, [r3]
	R = powf(Sigma_w, 2);
 80011c2:	4bc5      	ldr	r3, [pc, #788]	; (80014d8 <Kalman_Filter+0x33c>)
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f005 f8a2 	bl	8006318 <powf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	4bc0      	ldr	r3, [pc, #768]	; (80014dc <Kalman_Filter+0x340>)
 80011da:	edc3 7a00 	vstr	s15, [r3]

	float Position_Kalman_New = Position_Kalman + (Velocity_Kalman*CON_T);
 80011de:	4bc0      	ldr	r3, [pc, #768]	; (80014e0 <Kalman_Filter+0x344>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80014e4 <Kalman_Filter+0x348>
 80011e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011ec:	4bbe      	ldr	r3, [pc, #760]	; (80014e8 <Kalman_Filter+0x34c>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
	float Velocity_Kalman_New = 0 + Velocity_Kalman;
 80011fa:	4bb9      	ldr	r3, [pc, #740]	; (80014e0 <Kalman_Filter+0x344>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80014ec <Kalman_Filter+0x350>
 8001204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001208:	edc7 7a02 	vstr	s15, [r7, #8]
	float ye = Velocity_Now_Rad - Velocity_Kalman_New;
 800120c:	4bb8      	ldr	r3, [pc, #736]	; (80014f0 <Kalman_Filter+0x354>)
 800120e:	ed93 7a00 	vldr	s14, [r3]
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121a:	edc7 7a01 	vstr	s15, [r7, #4]

	p11 = p11 + (CON_T*p21) + (Q*powf(fabs(CON_T),4))/4 + (powf(fabs(CON_T),2)*(p12 + CON_T*p22))/CON_T;
 800121e:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80014e4 <Kalman_Filter+0x348>
 8001222:	4bb4      	ldr	r3, [pc, #720]	; (80014f4 <Kalman_Filter+0x358>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800122c:	4bb2      	ldr	r3, [pc, #712]	; (80014f8 <Kalman_Filter+0x35c>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001236:	eddf 7aab 	vldr	s15, [pc, #684]	; 80014e4 <Kalman_Filter+0x348>
 800123a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	f005 f869 	bl	8006318 <powf>
 8001246:	eeb0 7a40 	vmov.f32	s14, s0
 800124a:	4ba2      	ldr	r3, [pc, #648]	; (80014d4 <Kalman_Filter+0x338>)
 800124c:	edd3 7a00 	vldr	s15, [r3]
 8001250:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001254:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001258:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800125c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001260:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80014e4 <Kalman_Filter+0x348>
 8001264:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f005 f854 	bl	8006318 <powf>
 8001270:	eef0 6a40 	vmov.f32	s13, s0
 8001274:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80014e4 <Kalman_Filter+0x348>
 8001278:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <Kalman_Filter+0x360>)
 800127a:	edd3 7a00 	vldr	s15, [r3]
 800127e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001282:	4b9f      	ldr	r3, [pc, #636]	; (8001500 <Kalman_Filter+0x364>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8001290:	eddf 6a94 	vldr	s13, [pc, #592]	; 80014e4 <Kalman_Filter+0x348>
 8001294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001298:	ee78 7a27 	vadd.f32	s15, s16, s15
 800129c:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <Kalman_Filter+0x35c>)
 800129e:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 + (CON_T*p22) + (Q*CON_T*powf(fabs(CON_T),2))/2;
 80012a2:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80014e4 <Kalman_Filter+0x348>
 80012a6:	4b95      	ldr	r3, [pc, #596]	; (80014fc <Kalman_Filter+0x360>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b0:	4b93      	ldr	r3, [pc, #588]	; (8001500 <Kalman_Filter+0x364>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee37 8a27 	vadd.f32	s16, s14, s15
 80012ba:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <Kalman_Filter+0x338>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80014e4 <Kalman_Filter+0x348>
 80012c4:	ee67 8a87 	vmul.f32	s17, s15, s14
 80012c8:	eddf 7a86 	vldr	s15, [pc, #536]	; 80014e4 <Kalman_Filter+0x348>
 80012cc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	f005 f820 	bl	8006318 <powf>
 80012d8:	eef0 7a40 	vmov.f32	s15, s0
 80012dc:	ee28 7aa7 	vmul.f32	s14, s17, s15
 80012e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012ec:	4b84      	ldr	r3, [pc, #528]	; (8001500 <Kalman_Filter+0x364>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]
	p21 = (2*CON_T*p21 + Q*powf(fabs(CON_T),4) + 2*p22*powf(fabs(CON_T),2))/(2*CON_T);
 80012f2:	eddf 7a7c 	vldr	s15, [pc, #496]	; 80014e4 <Kalman_Filter+0x348>
 80012f6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012fa:	4b7e      	ldr	r3, [pc, #504]	; (80014f4 <Kalman_Filter+0x358>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001304:	eddf 7a77 	vldr	s15, [pc, #476]	; 80014e4 <Kalman_Filter+0x348>
 8001308:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	f005 f802 	bl	8006318 <powf>
 8001314:	eeb0 7a40 	vmov.f32	s14, s0
 8001318:	4b6e      	ldr	r3, [pc, #440]	; (80014d4 <Kalman_Filter+0x338>)
 800131a:	edd3 7a00 	vldr	s15, [r3]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001326:	4b75      	ldr	r3, [pc, #468]	; (80014fc <Kalman_Filter+0x360>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001330:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80014e4 <Kalman_Filter+0x348>
 8001334:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001338:	eeb0 0a67 	vmov.f32	s0, s15
 800133c:	f004 ffec 	bl	8006318 <powf>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
 8001344:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001348:	ee78 6a27 	vadd.f32	s13, s16, s15
 800134c:	eddf 7a65 	vldr	s15, [pc, #404]	; 80014e4 <Kalman_Filter+0x348>
 8001350:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001358:	4b66      	ldr	r3, [pc, #408]	; (80014f4 <Kalman_Filter+0x358>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
	p22 = Q*powf(fabs(CON_T),2) + p22;
 800135e:	eddf 7a61 	vldr	s15, [pc, #388]	; 80014e4 <Kalman_Filter+0x348>
 8001362:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001366:	eeb0 0a67 	vmov.f32	s0, s15
 800136a:	f004 ffd5 	bl	8006318 <powf>
 800136e:	eeb0 7a40 	vmov.f32	s14, s0
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <Kalman_Filter+0x338>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee27 7a27 	vmul.f32	s14, s14, s15
 800137c:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <Kalman_Filter+0x360>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <Kalman_Filter+0x360>)
 8001388:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman_New = Position_Kalman_New + (p12*ye)/(R+p22);
 800138c:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <Kalman_Filter+0x364>)
 800138e:	ed93 7a00 	vldr	s14, [r3]
 8001392:	edd7 7a01 	vldr	s15, [r7, #4]
 8001396:	ee67 6a27 	vmul.f32	s13, s14, s15
 800139a:	4b50      	ldr	r3, [pc, #320]	; (80014dc <Kalman_Filter+0x340>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b56      	ldr	r3, [pc, #344]	; (80014fc <Kalman_Filter+0x360>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b6:	edc7 7a03 	vstr	s15, [r7, #12]
	Velocity_Kalman_New = Velocity_Kalman_New + (p22*ye)/(R+p22);
 80013ba:	4b50      	ldr	r3, [pc, #320]	; (80014fc <Kalman_Filter+0x360>)
 80013bc:	ed93 7a00 	vldr	s14, [r3]
 80013c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <Kalman_Filter+0x340>)
 80013ca:	ed93 7a00 	vldr	s14, [r3]
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <Kalman_Filter+0x360>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80013e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e4:	edc7 7a02 	vstr	s15, [r7, #8]

	p11 = p11 - (p12*p21)/(R+p22);
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <Kalman_Filter+0x35c>)
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <Kalman_Filter+0x364>)
 80013f0:	edd3 6a00 	vldr	s13, [r3]
 80013f4:	4b3f      	ldr	r3, [pc, #252]	; (80014f4 <Kalman_Filter+0x358>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <Kalman_Filter+0x340>)
 8001400:	edd3 6a00 	vldr	s13, [r3]
 8001404:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <Kalman_Filter+0x360>)
 8001406:	edd3 7a00 	vldr	s15, [r3]
 800140a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800140e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <Kalman_Filter+0x35c>)
 8001418:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 - (p12*p22)/(R+p22);
 800141c:	4b38      	ldr	r3, [pc, #224]	; (8001500 <Kalman_Filter+0x364>)
 800141e:	ed93 7a00 	vldr	s14, [r3]
 8001422:	4b37      	ldr	r3, [pc, #220]	; (8001500 <Kalman_Filter+0x364>)
 8001424:	edd3 6a00 	vldr	s13, [r3]
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <Kalman_Filter+0x360>)
 800142a:	edd3 7a00 	vldr	s15, [r3]
 800142e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <Kalman_Filter+0x340>)
 8001434:	edd3 6a00 	vldr	s13, [r3]
 8001438:	4b30      	ldr	r3, [pc, #192]	; (80014fc <Kalman_Filter+0x360>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001442:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <Kalman_Filter+0x364>)
 800144c:	edc3 7a00 	vstr	s15, [r3]
	p21 = -p21*(p22/(R+22)-1);
 8001450:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <Kalman_Filter+0x358>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb1 7a67 	vneg.f32	s14, s15
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <Kalman_Filter+0x360>)
 800145c:	ed93 6a00 	vldr	s12, [r3]
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <Kalman_Filter+0x340>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 800146a:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800146e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001476:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <Kalman_Filter+0x358>)
 8001480:	edc3 7a00 	vstr	s15, [r3]
	p22 = -p22*(p22/(R+22)-1);
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <Kalman_Filter+0x360>)
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	eeb1 7a67 	vneg.f32	s14, s15
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <Kalman_Filter+0x360>)
 8001490:	ed93 6a00 	vldr	s12, [r3]
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <Kalman_Filter+0x340>)
 8001496:	edd3 7a00 	vldr	s15, [r3]
 800149a:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 800149e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014a2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014aa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80014ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <Kalman_Filter+0x360>)
 80014b4:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman = Position_Kalman_New;
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <Kalman_Filter+0x34c>)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6013      	str	r3, [r2, #0]
	Velocity_Kalman = Velocity_Kalman_New;
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <Kalman_Filter+0x344>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	ecbd 8b02 	vpop	{d8}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000018 	.word	0x20000018
 80014d4:	20000160 	.word	0x20000160
 80014d8:	2000001c 	.word	0x2000001c
 80014dc:	20000164 	.word	0x20000164
 80014e0:	2000016c 	.word	0x2000016c
 80014e4:	3a83126f 	.word	0x3a83126f
 80014e8:	20000168 	.word	0x20000168
 80014ec:	00000000 	.word	0x00000000
 80014f0:	20000110 	.word	0x20000110
 80014f4:	20000178 	.word	0x20000178
 80014f8:	20000170 	.word	0x20000170
 80014fc:	2000017c 	.word	0x2000017c
 8001500:	20000174 	.word	0x20000174

08001504 <Velocity_Control>:
void Velocity_Control()  //Velocity Control PID
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

	if(NO_KALMAN)
 8001508:	4b57      	ldr	r3, [pc, #348]	; (8001668 <Velocity_Control+0x164>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <Velocity_Control+0x54>
	{
		Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <Velocity_Control+0x168>)
 8001512:	edd3 7a00 	vldr	s15, [r3]
 8001516:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001670 <Velocity_Control+0x16c>
 800151a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800151e:	4b55      	ldr	r3, [pc, #340]	; (8001674 <Velocity_Control+0x170>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
 8001526:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800152a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800152e:	4b52      	ldr	r3, [pc, #328]	; (8001678 <Velocity_Control+0x174>)
 8001530:	edc3 7a00 	vstr	s15, [r3]
			Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8001534:	4b50      	ldr	r3, [pc, #320]	; (8001678 <Velocity_Control+0x174>)
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800153e:	4b4f      	ldr	r3, [pc, #316]	; (800167c <Velocity_Control+0x178>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001548:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001670 <Velocity_Control+0x16c>
 800154c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001550:	4b4b      	ldr	r3, [pc, #300]	; (8001680 <Velocity_Control+0x17c>)
 8001552:	edc3 7a00 	vstr	s15, [r3]
 8001556:	e014      	b.n	8001582 <Velocity_Control+0x7e>
	}

	else
	{
		Velocity_Now_Rad = Velocity_Kalman;
 8001558:	4b4a      	ldr	r3, [pc, #296]	; (8001684 <Velocity_Control+0x180>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a48      	ldr	r2, [pc, #288]	; (8001680 <Velocity_Control+0x17c>)
 800155e:	6013      	str	r3, [r2, #0]
		Velocity_Now_RPM = Velocity_Now_Rad*60/(2*pi);
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <Velocity_Control+0x17c>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001670 <Velocity_Control+0x16c>
 800156a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800156e:	4b43      	ldr	r3, [pc, #268]	; (800167c <Velocity_Control+0x178>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800157c:	4b3e      	ldr	r3, [pc, #248]	; (8001678 <Velocity_Control+0x174>)
 800157e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8001582:	4b41      	ldr	r3, [pc, #260]	; (8001688 <Velocity_Control+0x184>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <Velocity_Control+0x188>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	dd04      	ble.n	80015a2 <Velocity_Control+0x9e>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Velocity_Control+0x188>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <Velocity_Control+0x184>)
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e014      	b.n	80015cc <Velocity_Control+0xc8>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 80015a2:	4b3a      	ldr	r3, [pc, #232]	; (800168c <Velocity_Control+0x188>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	eeb1 7a67 	vneg.f32	s14, s15
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <Velocity_Control+0x184>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ba:	dd07      	ble.n	80015cc <Velocity_Control+0xc8>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <Velocity_Control+0x188>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eef1 7a67 	vneg.f32	s15, s15
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <Velocity_Control+0x184>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 80015cc:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <Velocity_Control+0x184>)
 80015ce:	ed93 7a00 	vldr	s14, [r3]
 80015d2:	4b29      	ldr	r3, [pc, #164]	; (8001678 <Velocity_Control+0x174>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015dc:	4b2c      	ldr	r3, [pc, #176]	; (8001690 <Velocity_Control+0x18c>)
 80015de:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 80015e2:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <Velocity_Control+0x190>)
 80015e4:	ed93 7a00 	vldr	s14, [r3]
 80015e8:	4b29      	ldr	r3, [pc, #164]	; (8001690 <Velocity_Control+0x18c>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015f2:	4b28      	ldr	r3, [pc, #160]	; (8001694 <Velocity_Control+0x190>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <Velocity_Control+0x18c>)
 80015fa:	ed93 7a00 	vldr	s14, [r3]
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <Velocity_Control+0x194>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <Velocity_Control+0x198>)
 800160a:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 800160e:	4b20      	ldr	r3, [pc, #128]	; (8001690 <Velocity_Control+0x18c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <Velocity_Control+0x194>)
 8001614:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 8001616:	4b22      	ldr	r3, [pc, #136]	; (80016a0 <Velocity_Control+0x19c>)
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <Velocity_Control+0x18c>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <Velocity_Control+0x1a0>)
 8001628:	edd3 6a00 	vldr	s13, [r3]
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <Velocity_Control+0x190>)
 800162e:	edd3 7a00 	vldr	s15, [r3]
 8001632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <Velocity_Control+0x1a4>)
 800163c:	edd3 6a00 	vldr	s13, [r3]
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <Velocity_Control+0x198>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <Velocity_Control+0x1a8>)
 800165a:	801a      	strh	r2, [r3, #0]

}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000000 	.word	0x20000000
 800166c:	200000dc 	.word	0x200000dc
 8001670:	42700000 	.word	0x42700000
 8001674:	20000002 	.word	0x20000002
 8001678:	200000e0 	.word	0x200000e0
 800167c:	20000008 	.word	0x20000008
 8001680:	20000110 	.word	0x20000110
 8001684:	2000016c 	.word	0x2000016c
 8001688:	200000e4 	.word	0x200000e4
 800168c:	20000014 	.word	0x20000014
 8001690:	200000ec 	.word	0x200000ec
 8001694:	200000f0 	.word	0x200000f0
 8001698:	200000f8 	.word	0x200000f8
 800169c:	200000f4 	.word	0x200000f4
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	20000010 	.word	0x20000010
 80016a8:	200000e8 	.word	0x200000e8
 80016ac:	200000fc 	.word	0x200000fc

080016b0 <Distance_Calculation>:
void Distance_Calculation()	//Calculate that distance is short or long
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
	if(NO_KALMAN)
 80016b4:	4b97      	ldr	r3, [pc, #604]	; (8001914 <Distance_Calculation+0x264>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d012      	beq.n	80016e2 <Distance_Calculation+0x32>
	{
		Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution;  //degree
 80016bc:	4b96      	ldr	r3, [pc, #600]	; (8001918 <Distance_Calculation+0x268>)
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800191c <Distance_Calculation+0x26c>
 80016c6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016ca:	4b95      	ldr	r3, [pc, #596]	; (8001920 <Distance_Calculation+0x270>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	4b92      	ldr	r3, [pc, #584]	; (8001924 <Distance_Calculation+0x274>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
 80016e0:	e00e      	b.n	8001700 <Distance_Calculation+0x50>
	}
	else
	{
		Position_Now_Degree = Position_Now_Rad*180/pi;
 80016e2:	4b91      	ldr	r3, [pc, #580]	; (8001928 <Distance_Calculation+0x278>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800192c <Distance_Calculation+0x27c>
 80016ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016f0:	4b8f      	ldr	r3, [pc, #572]	; (8001930 <Distance_Calculation+0x280>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016fa:	4b8a      	ldr	r3, [pc, #552]	; (8001924 <Distance_Calculation+0x274>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 8001700:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <Distance_Calculation+0x284>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b87      	ldr	r3, [pc, #540]	; (8001924 <Distance_Calculation+0x274>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001710:	4b89      	ldr	r3, [pc, #548]	; (8001938 <Distance_Calculation+0x288>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 8001716:	4b88      	ldr	r3, [pc, #544]	; (8001938 <Distance_Calculation+0x288>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	d509      	bpl.n	800173a <Distance_Calculation+0x8a>
	{
		Distance_Degree_Set += 360;
 8001726:	4b84      	ldr	r3, [pc, #528]	; (8001938 <Distance_Calculation+0x288>)
 8001728:	edd3 7a00 	vldr	s15, [r3]
 800172c:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800191c <Distance_Calculation+0x26c>
 8001730:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001734:	4b80      	ldr	r3, [pc, #512]	; (8001938 <Distance_Calculation+0x288>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <Distance_Calculation+0x288>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4b7b      	ldr	r3, [pc, #492]	; (8001930 <Distance_Calculation+0x280>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800174a:	eddf 6a78 	vldr	s13, [pc, #480]	; 800192c <Distance_Calculation+0x27c>
 800174e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <Distance_Calculation+0x28c>)
 8001754:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 8001758:	4b79      	ldr	r3, [pc, #484]	; (8001940 <Distance_Calculation+0x290>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001762:	4b73      	ldr	r3, [pc, #460]	; (8001930 <Distance_Calculation+0x280>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800176c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001944 <Distance_Calculation+0x294>
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	4b74      	ldr	r3, [pc, #464]	; (8001948 <Distance_Calculation+0x298>)
 8001776:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800177a:	4b73      	ldr	r3, [pc, #460]	; (8001948 <Distance_Calculation+0x298>)
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001784:	4b71      	ldr	r3, [pc, #452]	; (800194c <Distance_Calculation+0x29c>)
 8001786:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 800178a:	4b70      	ldr	r3, [pc, #448]	; (800194c <Distance_Calculation+0x29c>)
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001950 <Distance_Calculation+0x2a0>
 8001794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001798:	4b6e      	ldr	r3, [pc, #440]	; (8001954 <Distance_Calculation+0x2a4>)
 800179a:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800179e:	4b6a      	ldr	r3, [pc, #424]	; (8001948 <Distance_Calculation+0x298>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	f004 fdb4 	bl	8006318 <powf>
 80017b0:	eef0 7a40 	vmov.f32	s15, s0
 80017b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017b8:	4b67      	ldr	r3, [pc, #412]	; (8001958 <Distance_Calculation+0x2a8>)
 80017ba:	edc3 7a00 	vstr	s15, [r3]


	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 80017be:	4b66      	ldr	r3, [pc, #408]	; (8001958 <Distance_Calculation+0x2a8>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017c8:	4b5c      	ldr	r3, [pc, #368]	; (800193c <Distance_Calculation+0x28c>)
 80017ca:	edd3 7a00 	vldr	s15, [r3]
 80017ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d53c      	bpl.n	8001852 <Distance_Calculation+0x1a2>
	{
		Distance_Length = 1;
 80017d8:	4b60      	ldr	r3, [pc, #384]	; (800195c <Distance_Calculation+0x2ac>)
 80017da:	2201      	movs	r2, #1
 80017dc:	801a      	strh	r2, [r3, #0]
		Distance_Center = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 80017de:	4b57      	ldr	r3, [pc, #348]	; (800193c <Distance_Calculation+0x28c>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <Distance_Calculation+0x2a8>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <Distance_Calculation+0x2b0>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
		Time_Center = Distance_Center/Velocity_Max_Rad;
 80017f8:	4b59      	ldr	r3, [pc, #356]	; (8001960 <Distance_Calculation+0x2b0>)
 80017fa:	edd3 6a00 	vldr	s13, [r3]
 80017fe:	4b52      	ldr	r3, [pc, #328]	; (8001948 <Distance_Calculation+0x298>)
 8001800:	ed93 7a00 	vldr	s14, [r3]
 8001804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001808:	4b56      	ldr	r3, [pc, #344]	; (8001964 <Distance_Calculation+0x2b4>)
 800180a:	edc3 7a00 	vstr	s15, [r3]
		Time_Center_Micro = Time_Center*1000000;
 800180e:	4b55      	ldr	r3, [pc, #340]	; (8001964 <Distance_Calculation+0x2b4>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001950 <Distance_Calculation+0x2a0>
 8001818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181c:	4b52      	ldr	r3, [pc, #328]	; (8001968 <Distance_Calculation+0x2b8>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend) + (Time_Center);//Time use to reach next station
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <Distance_Calculation+0x29c>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <Distance_Calculation+0x2b4>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001836:	4b4d      	ldr	r3, [pc, #308]	; (800196c <Distance_Calculation+0x2bc>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 800183c:	4b4b      	ldr	r3, [pc, #300]	; (800196c <Distance_Calculation+0x2bc>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001950 <Distance_Calculation+0x2a0>
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184a:	4b49      	ldr	r3, [pc, #292]	; (8001970 <Distance_Calculation+0x2c0>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
 8001850:	e05a      	b.n	8001908 <Distance_Calculation+0x258>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 8001852:	4b41      	ldr	r3, [pc, #260]	; (8001958 <Distance_Calculation+0x2a8>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800185c:	4b37      	ldr	r3, [pc, #220]	; (800193c <Distance_Calculation+0x28c>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	db4d      	blt.n	8001908 <Distance_Calculation+0x258>
	{
		Distance_Length = 0;
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <Distance_Calculation+0x2ac>)
 800186e:	2200      	movs	r2, #0
 8001870:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <Distance_Calculation+0x28c>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800187c:	eeb0 0a67 	vmov.f32	s0, s15
 8001880:	f004 fde2 	bl	8006448 <sqrtf>
 8001884:	eef0 7a40 	vmov.f32	s15, s0
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <Distance_Calculation+0x29c>)
 800188a:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 800188e:	4b2f      	ldr	r3, [pc, #188]	; (800194c <Distance_Calculation+0x29c>)
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001950 <Distance_Calculation+0x2a0>
 8001898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800189c:	4b2d      	ldr	r3, [pc, #180]	; (8001954 <Distance_Calculation+0x2a4>)
 800189e:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <Distance_Calculation+0x29c>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <Distance_Calculation+0x2bc>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 80018b2:	4b2e      	ldr	r3, [pc, #184]	; (800196c <Distance_Calculation+0x2bc>)
 80018b4:	edd3 7a00 	vldr	s15, [r3]
 80018b8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001950 <Distance_Calculation+0x2a0>
 80018bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018c0:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <Distance_Calculation+0x2c0>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <Distance_Calculation+0x28c>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018d4:	eeb0 0a47 	vmov.f32	s0, s14
 80018d8:	f004 fdb6 	bl	8006448 <sqrtf>
 80018dc:	eef0 7a40 	vmov.f32	s15, s0
 80018e0:	4b24      	ldr	r3, [pc, #144]	; (8001974 <Distance_Calculation+0x2c4>)
 80018e2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <Distance_Calculation+0x2c4>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001944 <Distance_Calculation+0x294>
 80018f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <Distance_Calculation+0x280>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <Distance_Calculation+0x2c8>)
 8001904:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 8001908:	4b1c      	ldr	r3, [pc, #112]	; (800197c <Distance_Calculation+0x2cc>)
 800190a:	2201      	movs	r2, #1
 800190c:	801a      	strh	r2, [r3, #0]
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	20000100 	.word	0x20000100
 800191c:	43b40000 	.word	0x43b40000
 8001920:	20000002 	.word	0x20000002
 8001924:	20000104 	.word	0x20000104
 8001928:	20000134 	.word	0x20000134
 800192c:	43340000 	.word	0x43340000
 8001930:	20000008 	.word	0x20000008
 8001934:	20000108 	.word	0x20000108
 8001938:	20000120 	.word	0x20000120
 800193c:	20000124 	.word	0x20000124
 8001940:	20000014 	.word	0x20000014
 8001944:	42700000 	.word	0x42700000
 8001948:	20000114 	.word	0x20000114
 800194c:	20000138 	.word	0x20000138
 8001950:	49742400 	.word	0x49742400
 8001954:	20000150 	.word	0x20000150
 8001958:	20000128 	.word	0x20000128
 800195c:	200000d8 	.word	0x200000d8
 8001960:	2000012c 	.word	0x2000012c
 8001964:	20000140 	.word	0x20000140
 8001968:	20000158 	.word	0x20000158
 800196c:	2000013c 	.word	0x2000013c
 8001970:	20000154 	.word	0x20000154
 8001974:	2000011c 	.word	0x2000011c
 8001978:	20000118 	.word	0x20000118
 800197c:	200000da 	.word	0x200000da

08001980 <Trajectory_Generation>:

	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}
void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	ed2d 8b02 	vpush	{d8}
 8001988:	b096      	sub	sp, #88	; 0x58
 800198a:	af00      	add	r7, sp, #0
	if(NO_KALMAN)
 800198c:	4bb8      	ldr	r3, [pc, #736]	; (8001c70 <Trajectory_Generation+0x2f0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01f      	beq.n	80019d4 <Trajectory_Generation+0x54>
	{
		Position_Read_Encoder = htim1.Instance->CNT;
 8001994:	4bb7      	ldr	r3, [pc, #732]	; (8001c74 <Trajectory_Generation+0x2f4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019a2:	4bb5      	ldr	r3, [pc, #724]	; (8001c78 <Trajectory_Generation+0x2f8>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]
			Position_Now_Rad  = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //radian
 80019a8:	4bb3      	ldr	r3, [pc, #716]	; (8001c78 <Trajectory_Generation+0x2f8>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019b2:	4bb2      	ldr	r3, [pc, #712]	; (8001c7c <Trajectory_Generation+0x2fc>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019bc:	4bb0      	ldr	r3, [pc, #704]	; (8001c80 <Trajectory_Generation+0x300>)
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019cc:	4bad      	ldr	r3, [pc, #692]	; (8001c84 <Trajectory_Generation+0x304>)
 80019ce:	edc3 7a00 	vstr	s15, [r3]
 80019d2:	e003      	b.n	80019dc <Trajectory_Generation+0x5c>

	}
	else
	{
		Position_Now_Rad = Position_Kalman;
 80019d4:	4bac      	ldr	r3, [pc, #688]	; (8001c88 <Trajectory_Generation+0x308>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4baa      	ldr	r3, [pc, #680]	; (8001c84 <Trajectory_Generation+0x304>)
 80019da:	601a      	str	r2, [r3, #0]
	}

	if (Trajectory_Flag == 0)
 80019dc:	4bab      	ldr	r3, [pc, #684]	; (8001c8c <Trajectory_Generation+0x30c>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10d      	bne.n	8001a00 <Trajectory_Generation+0x80>
	{
		Time_Start = micros();
 80019e4:	f000 fc04 	bl	80021f0 <micros>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	49a8      	ldr	r1, [pc, #672]	; (8001c90 <Trajectory_Generation+0x310>)
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Now_Rad;
 80019f2:	4ba4      	ldr	r3, [pc, #656]	; (8001c84 <Trajectory_Generation+0x304>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	4ba7      	ldr	r3, [pc, #668]	; (8001c94 <Trajectory_Generation+0x314>)
 80019f8:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 80019fa:	4aa4      	ldr	r2, [pc, #656]	; (8001c8c <Trajectory_Generation+0x30c>)
 80019fc:	2301      	movs	r3, #1
 80019fe:	8013      	strh	r3, [r2, #0]
	}
	Time_Trajectory_Stamp = micros();
 8001a00:	f000 fbf6 	bl	80021f0 <micros>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	49a3      	ldr	r1, [pc, #652]	; (8001c98 <Trajectory_Generation+0x318>)
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
	Distance_Traveled = Position_Now_Rad-Position_Start;
 8001a0e:	4b9d      	ldr	r3, [pc, #628]	; (8001c84 <Trajectory_Generation+0x304>)
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	4b9f      	ldr	r3, [pc, #636]	; (8001c94 <Trajectory_Generation+0x314>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1e:	4b9f      	ldr	r3, [pc, #636]	; (8001c9c <Trajectory_Generation+0x31c>)
 8001a20:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Length == 1)
 8001a24:	4b9e      	ldr	r3, [pc, #632]	; (8001ca0 <Trajectory_Generation+0x320>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	f040 8149 	bne.w	8001cc0 <Trajectory_Generation+0x340>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001a2e:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <Trajectory_Generation+0x318>)
 8001a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a34:	4b96      	ldr	r3, [pc, #600]	; (8001c90 <Trajectory_Generation+0x310>)
 8001a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3a:	1a84      	subs	r4, r0, r2
 8001a3c:	653c      	str	r4, [r7, #80]	; 0x50
 8001a3e:	eb61 0303 	sbc.w	r3, r1, r3
 8001a42:	657b      	str	r3, [r7, #84]	; 0x54
 8001a44:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a48:	f7fe fc8e 	bl	8000368 <__aeabi_ul2f>
 8001a4c:	ee07 0a10 	vmov	s14, r0
 8001a50:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d825      	bhi.n	8001aac <Trajectory_Generation+0x12c>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001a60:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <Trajectory_Generation+0x318>)
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	4b8a      	ldr	r3, [pc, #552]	; (8001c90 <Trajectory_Generation+0x310>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	1a84      	subs	r4, r0, r2
 8001a6e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001a70:	eb61 0303 	sbc.w	r3, r1, r3
 8001a74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a7a:	f7fe fc75 	bl	8000368 <__aeabi_ul2f>
 8001a7e:	ee06 0a90 	vmov	s13, r0
 8001a82:	4b88      	ldr	r3, [pc, #544]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a8c:	4b86      	ldr	r3, [pc, #536]	; (8001ca8 <Trajectory_Generation+0x328>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a96:	4b85      	ldr	r3, [pc, #532]	; (8001cac <Trajectory_Generation+0x32c>)
 8001a98:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <Trajectory_Generation+0x30c>)
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	801a      	strh	r2, [r3, #0]
			P1 = Distance_Traveled;
 8001aa2:	4b7e      	ldr	r3, [pc, #504]	; (8001c9c <Trajectory_Generation+0x31c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a82      	ldr	r2, [pc, #520]	; (8001cb0 <Trajectory_Generation+0x330>)
 8001aa8:	6013      	str	r3, [r2, #0]
			Trajectory_Flag = 4;
		}
	}


}
 8001aaa:	e1ca      	b.n	8001e42 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Blend_Micro) )
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <Trajectory_Generation+0x318>)
 8001aae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab2:	4b77      	ldr	r3, [pc, #476]	; (8001c90 <Trajectory_Generation+0x310>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	1a84      	subs	r4, r0, r2
 8001aba:	643c      	str	r4, [r7, #64]	; 0x40
 8001abc:	eb61 0303 	sbc.w	r3, r1, r3
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ac2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ac6:	f7fe fc4f 	bl	8000368 <__aeabi_ul2f>
 8001aca:	ee07 0a10 	vmov	s14, r0
 8001ace:	4b75      	ldr	r3, [pc, #468]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	dd2d      	ble.n	8001b3a <Trajectory_Generation+0x1ba>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 8001ade:	4b6e      	ldr	r3, [pc, #440]	; (8001c98 <Trajectory_Generation+0x318>)
 8001ae0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <Trajectory_Generation+0x310>)
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	1a84      	subs	r4, r0, r2
 8001aec:	63bc      	str	r4, [r7, #56]	; 0x38
 8001aee:	eb61 0303 	sbc.w	r3, r1, r3
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001af4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001af8:	f7fe fc36 	bl	8000368 <__aeabi_ul2f>
 8001afc:	ee06 0a90 	vmov	s13, r0
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <Trajectory_Generation+0x334>)
 8001b02:	ed93 7a00 	vldr	s14, [r3]
 8001b06:	4b67      	ldr	r3, [pc, #412]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b18:	d50f      	bpl.n	8001b3a <Trajectory_Generation+0x1ba>
			Velocity_Want_RPM = Velocity_Max_RPM;
 8001b1a:	4b63      	ldr	r3, [pc, #396]	; (8001ca8 <Trajectory_Generation+0x328>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a63      	ldr	r2, [pc, #396]	; (8001cac <Trajectory_Generation+0x32c>)
 8001b20:	6013      	str	r3, [r2, #0]
			P2 = Distance_Traveled-P1;
 8001b22:	4b5e      	ldr	r3, [pc, #376]	; (8001c9c <Trajectory_Generation+0x31c>)
 8001b24:	ed93 7a00 	vldr	s14, [r3]
 8001b28:	4b61      	ldr	r3, [pc, #388]	; (8001cb0 <Trajectory_Generation+0x330>)
 8001b2a:	edd3 7a00 	vldr	s15, [r3]
 8001b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b32:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <Trajectory_Generation+0x338>)
 8001b34:	edc3 7a00 	vstr	s15, [r3]
 8001b38:	e183      	b.n	8001e42 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 8001b3a:	4b57      	ldr	r3, [pc, #348]	; (8001c98 <Trajectory_Generation+0x318>)
 8001b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b40:	4b53      	ldr	r3, [pc, #332]	; (8001c90 <Trajectory_Generation+0x310>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	1a84      	subs	r4, r0, r2
 8001b48:	633c      	str	r4, [r7, #48]	; 0x30
 8001b4a:	eb61 0303 	sbc.w	r3, r1, r3
 8001b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001b50:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b54:	f7fe fc08 	bl	8000368 <__aeabi_ul2f>
 8001b58:	ee06 0a90 	vmov	s13, r0
 8001b5c:	4b55      	ldr	r3, [pc, #340]	; (8001cb4 <Trajectory_Generation+0x334>)
 8001b5e:	ed93 7a00 	vldr	s14, [r3]
 8001b62:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b6c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	db5a      	blt.n	8001c2c <Trajectory_Generation+0x2ac>
				&& (Time_Trajectory_Stamp-Time_Start <= Time_All_Micro) )
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <Trajectory_Generation+0x318>)
 8001b78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b7c:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <Trajectory_Generation+0x310>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	1a84      	subs	r4, r0, r2
 8001b84:	62bc      	str	r4, [r7, #40]	; 0x28
 8001b86:	eb61 0303 	sbc.w	r3, r1, r3
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b90:	f7fe fbea 	bl	8000368 <__aeabi_ul2f>
 8001b94:	ee07 0a10 	vmov	s14, r0
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <Trajectory_Generation+0x334>)
 8001b9a:	edd3 7a00 	vldr	s15, [r3]
 8001b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d841      	bhi.n	8001c2c <Trajectory_Generation+0x2ac>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <Trajectory_Generation+0x328>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	eeb1 8a67 	vneg.f32	s16, s15
 8001bb2:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <Trajectory_Generation+0x318>)
 8001bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <Trajectory_Generation+0x310>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	1a84      	subs	r4, r0, r2
 8001bc0:	623c      	str	r4, [r7, #32]
 8001bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001bcc:	f7fe fbcc 	bl	8000368 <__aeabi_ul2f>
 8001bd0:	ee06 0a90 	vmov	s13, r0
 8001bd4:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <Trajectory_Generation+0x334>)
 8001bd6:	ed93 7a00 	vldr	s14, [r3]
 8001bda:	4b32      	ldr	r3, [pc, #200]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001bdc:	edd3 7a00 	vldr	s15, [r3]
 8001be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <Trajectory_Generation+0x324>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001bfa:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	; (8001cac <Trajectory_Generation+0x32c>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001c04:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <Trajectory_Generation+0x30c>)
 8001c06:	2203      	movs	r2, #3
 8001c08:	801a      	strh	r2, [r3, #0]
			P3 = Distance_Traveled-P2-P1;
 8001c0a:	4b24      	ldr	r3, [pc, #144]	; (8001c9c <Trajectory_Generation+0x31c>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <Trajectory_Generation+0x338>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c1a:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <Trajectory_Generation+0x330>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <Trajectory_Generation+0x33c>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
 8001c2a:	e10a      	b.n	8001e42 <Trajectory_Generation+0x4c2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <Trajectory_Generation+0x318>)
 8001c2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <Trajectory_Generation+0x310>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	1a84      	subs	r4, r0, r2
 8001c3a:	61bc      	str	r4, [r7, #24]
 8001c3c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c46:	f7fe fb8f 	bl	8000368 <__aeabi_ul2f>
 8001c4a:	ee07 0a10 	vmov	s14, r0
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <Trajectory_Generation+0x334>)
 8001c50:	edd3 7a00 	vldr	s15, [r3]
 8001c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5c:	da00      	bge.n	8001c60 <Trajectory_Generation+0x2e0>
}
 8001c5e:	e0f0      	b.n	8001e42 <Trajectory_Generation+0x4c2>
			Velocity_Want_RPM = 0;
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <Trajectory_Generation+0x32c>)
 8001c62:	f04f 0200 	mov.w	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <Trajectory_Generation+0x30c>)
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	801a      	strh	r2, [r3, #0]
}
 8001c6e:	e0e8      	b.n	8001e42 <Trajectory_Generation+0x4c2>
 8001c70:	20000000 	.word	0x20000000
 8001c74:	2000036c 	.word	0x2000036c
 8001c78:	20000100 	.word	0x20000100
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000002 	.word	0x20000002
 8001c84:	20000134 	.word	0x20000134
 8001c88:	20000168 	.word	0x20000168
 8001c8c:	2000015c 	.word	0x2000015c
 8001c90:	20000148 	.word	0x20000148
 8001c94:	20000130 	.word	0x20000130
 8001c98:	200000d0 	.word	0x200000d0
 8001c9c:	2000018c 	.word	0x2000018c
 8001ca0:	200000d8 	.word	0x200000d8
 8001ca4:	20000150 	.word	0x20000150
 8001ca8:	20000014 	.word	0x20000014
 8001cac:	200000e4 	.word	0x200000e4
 8001cb0:	20000180 	.word	0x20000180
 8001cb4:	20000154 	.word	0x20000154
 8001cb8:	20000184 	.word	0x20000184
 8001cbc:	20000188 	.word	0x20000188
	else if (Distance_Length == 0)
 8001cc0:	4b63      	ldr	r3, [pc, #396]	; (8001e50 <Trajectory_Generation+0x4d0>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 80bc 	bne.w	8001e42 <Trajectory_Generation+0x4c2>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001cca:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd6:	1a84      	subs	r4, r0, r2
 8001cd8:	eb61 0503 	sbc.w	r5, r1, r3
 8001cdc:	4620      	mov	r0, r4
 8001cde:	4629      	mov	r1, r5
 8001ce0:	f7fe fb42 	bl	8000368 <__aeabi_ul2f>
 8001ce4:	ee07 0a10 	vmov	s14, r0
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	d821      	bhi.n	8001d3c <Trajectory_Generation+0x3bc>
			Velocity_Want_RPM = Velocity_Achieve_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001cf8:	4b56      	ldr	r3, [pc, #344]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001cfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfe:	4b56      	ldr	r3, [pc, #344]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	1a84      	subs	r4, r0, r2
 8001d06:	613c      	str	r4, [r7, #16]
 8001d08:	eb61 0303 	sbc.w	r3, r1, r3
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d12:	f7fe fb29 	bl	8000368 <__aeabi_ul2f>
 8001d16:	ee06 0a90 	vmov	s13, r0
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d24:	4b4e      	ldr	r3, [pc, #312]	; (8001e60 <Trajectory_Generation+0x4e0>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <Trajectory_Generation+0x4e4>)
 8001d30:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <Trajectory_Generation+0x4e8>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	801a      	strh	r2, [r3, #0]
}
 8001d3a:	e082      	b.n	8001e42 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 8001d3c:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	1a84      	subs	r4, r0, r2
 8001d4a:	60bc      	str	r4, [r7, #8]
 8001d4c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d56:	f7fe fb07 	bl	8000368 <__aeabi_ul2f>
 8001d5a:	ee07 0a10 	vmov	s14, r0
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	db46      	blt.n	8001dfc <Trajectory_Generation+0x47c>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 8001d6e:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d74:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	1a84      	subs	r4, r0, r2
 8001d7c:	603c      	str	r4, [r7, #0]
 8001d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d88:	f7fe faee 	bl	8000368 <__aeabi_ul2f>
 8001d8c:	ee07 0a10 	vmov	s14, r0
 8001d90:	4b32      	ldr	r3, [pc, #200]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001d92:	edd3 7a00 	vldr	s15, [r3]
 8001d96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da2:	d52b      	bpl.n	8001dfc <Trajectory_Generation+0x47c>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 8001da4:	4b2e      	ldr	r3, [pc, #184]	; (8001e60 <Trajectory_Generation+0x4e0>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	eeb1 8a67 	vneg.f32	s16, s15
 8001dae:	4b29      	ldr	r3, [pc, #164]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001db0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	ebb0 0a02 	subs.w	sl, r0, r2
 8001dbe:	eb61 0b03 	sbc.w	fp, r1, r3
 8001dc2:	4650      	mov	r0, sl
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	f7fe facf 	bl	8000368 <__aeabi_ul2f>
 8001dca:	ee07 0a10 	vmov	s14, r0
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001de6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dea:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <Trajectory_Generation+0x4e4>)
 8001df0:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <Trajectory_Generation+0x4e8>)
 8001df6:	2203      	movs	r2, #3
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	e022      	b.n	8001e42 <Trajectory_Generation+0x4c2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <Trajectory_Generation+0x4d4>)
 8001dfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e02:	4b15      	ldr	r3, [pc, #84]	; (8001e58 <Trajectory_Generation+0x4d8>)
 8001e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e08:	ebb0 0802 	subs.w	r8, r0, r2
 8001e0c:	eb61 0903 	sbc.w	r9, r1, r3
 8001e10:	4640      	mov	r0, r8
 8001e12:	4649      	mov	r1, r9
 8001e14:	f7fe faa8 	bl	8000368 <__aeabi_ul2f>
 8001e18:	ee07 0a10 	vmov	s14, r0
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <Trajectory_Generation+0x4dc>)
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	da00      	bge.n	8001e32 <Trajectory_Generation+0x4b2>
}
 8001e30:	e007      	b.n	8001e42 <Trajectory_Generation+0x4c2>
			Velocity_Want_RPM = 0;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <Trajectory_Generation+0x4e4>)
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <Trajectory_Generation+0x4e8>)
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	801a      	strh	r2, [r3, #0]
}
 8001e40:	e7ff      	b.n	8001e42 <Trajectory_Generation+0x4c2>
 8001e42:	bf00      	nop
 8001e44:	3758      	adds	r7, #88	; 0x58
 8001e46:	46bd      	mov	sp, r7
 8001e48:	ecbd 8b02 	vpop	{d8}
 8001e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e50:	200000d8 	.word	0x200000d8
 8001e54:	200000d0 	.word	0x200000d0
 8001e58:	20000148 	.word	0x20000148
 8001e5c:	20000150 	.word	0x20000150
 8001e60:	20000118 	.word	0x20000118
 8001e64:	200000e4 	.word	0x200000e4
 8001e68:	2000015c 	.word	0x2000015c

08001e6c <UARTInit>:
void UARTInit(UARTStucrture *uart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <UARTInit+0x4c>)
 8001e76:	88db      	ldrh	r3, [r3, #6]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f004 f98a 	bl	8006194 <calloc>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461a      	mov	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <UARTInit+0x4c>)
 8001e8a:	889b      	ldrh	r3, [r3, #4]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f004 f980 	bl	8006194 <calloc>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	81da      	strh	r2, [r3, #14]

}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000190 	.word	0x20000190

08001ebc <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6919      	ldr	r1, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	88db      	ldrh	r3, [r3, #6]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f003 fb1c 	bl	800550e <HAL_UART_Receive_DMA>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	88db      	ldrh	r3, [r3, #6]
 8001eea:	461a      	mov	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	1ad3      	subs	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8a9b      	ldrh	r3, [r3, #20]
 8001f16:	461c      	mov	r4, r3
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff ffe0 	bl	8001ede <UARTGetRxHead>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	429c      	cmp	r4, r3
 8001f22:	d013      	beq.n	8001f4c <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	8a92      	ldrh	r2, [r2, #20]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	8a9b      	ldrh	r3, [r3, #20]
 8001f36:	3301      	adds	r3, #1
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	88d2      	ldrh	r2, [r2, #6]
 8001f3c:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f40:	fb02 f201 	mul.w	r2, r2, r1
 8001f44:	1a9b      	subs	r3, r3, r2
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}

08001f58 <UART_Protocol>:
	}
	UARTTxDumpBuffer(uart);

}
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
	static uint8_t Frame = 0;
	static uint16_t N = 0;
	static uint16_t Data = 0;
	static uint16_t Sum = 0;

	switch (State)
 8001f64:	4b88      	ldr	r3, [pc, #544]	; (8002188 <UART_Protocol+0x230>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	f200 8106 	bhi.w	800217a <UART_Protocol+0x222>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <UART_Protocol+0x1c>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08002073 	.word	0x08002073
 8001f7c:	08002081 	.word	0x08002081
 8001f80:	08002151 	.word	0x08002151
	{
	case Start_Mode:
		Mode = dataIn;
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	4b80      	ldr	r3, [pc, #512]	; (800218c <UART_Protocol+0x234>)
 8001f8a:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8001f8c:	4b7f      	ldr	r3, [pc, #508]	; (800218c <UART_Protocol+0x234>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	3b91      	subs	r3, #145	; 0x91
 8001f92:	2b0d      	cmp	r3, #13
 8001f94:	d856      	bhi.n	8002044 <UART_Protocol+0xec>
 8001f96:	a201      	add	r2, pc, #4	; (adr r2, 8001f9c <UART_Protocol+0x44>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fd5 	.word	0x08001fd5
 8001fa0:	08001fdd 	.word	0x08001fdd
 8001fa4:	08001fe5 	.word	0x08001fe5
 8001fa8:	08001fed 	.word	0x08001fed
 8001fac:	08001ff5 	.word	0x08001ff5
 8001fb0:	08001ffd 	.word	0x08001ffd
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	0800200d 	.word	0x0800200d
 8001fbc:	08002015 	.word	0x08002015
 8001fc0:	0800201d 	.word	0x0800201d
 8001fc4:	08002025 	.word	0x08002025
 8001fc8:	0800202d 	.word	0x0800202d
 8001fcc:	08002035 	.word	0x08002035
 8001fd0:	0800203d 	.word	0x0800203d
		{
		case Test_Command:
			Frame = 2;
 8001fd4:	4b6e      	ldr	r3, [pc, #440]	; (8002190 <UART_Protocol+0x238>)
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	701a      	strb	r2, [r3, #0]
			break;
 8001fda:	e033      	b.n	8002044 <UART_Protocol+0xec>
		case Connect_MCU:
			Frame = 1;
 8001fdc:	4b6c      	ldr	r3, [pc, #432]	; (8002190 <UART_Protocol+0x238>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
			break;
 8001fe2:	e02f      	b.n	8002044 <UART_Protocol+0xec>
		case Disconnect_MCU:
			Frame = 1;
 8001fe4:	4b6a      	ldr	r3, [pc, #424]	; (8002190 <UART_Protocol+0x238>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
			break;
 8001fea:	e02b      	b.n	8002044 <UART_Protocol+0xec>
		case Velocity_Set:
			Frame = 2;
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <UART_Protocol+0x238>)
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
			break;
 8001ff2:	e027      	b.n	8002044 <UART_Protocol+0xec>
		case Position_Set:
			Frame = 2;
 8001ff4:	4b66      	ldr	r3, [pc, #408]	; (8002190 <UART_Protocol+0x238>)
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	701a      	strb	r2, [r3, #0]
			break;
 8001ffa:	e023      	b.n	8002044 <UART_Protocol+0xec>
		case Goal_1_Set:
			Frame = 2;
 8001ffc:	4b64      	ldr	r3, [pc, #400]	; (8002190 <UART_Protocol+0x238>)
 8001ffe:	2202      	movs	r2, #2
 8002000:	701a      	strb	r2, [r3, #0]
			break;
 8002002:	e01f      	b.n	8002044 <UART_Protocol+0xec>
		case Goal_N_Set:
			Frame = 3;
 8002004:	4b62      	ldr	r3, [pc, #392]	; (8002190 <UART_Protocol+0x238>)
 8002006:	2203      	movs	r2, #3
 8002008:	701a      	strb	r2, [r3, #0]
			break;
 800200a:	e01b      	b.n	8002044 <UART_Protocol+0xec>
		case Go_to_Goal:
			Frame = 1;
 800200c:	4b60      	ldr	r3, [pc, #384]	; (8002190 <UART_Protocol+0x238>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
			break;
 8002012:	e017      	b.n	8002044 <UART_Protocol+0xec>
		case Station_Request:
			Frame = 1;
 8002014:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <UART_Protocol+0x238>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
			break;
 800201a:	e013      	b.n	8002044 <UART_Protocol+0xec>
		case Position_Request:
			Frame = 1;
 800201c:	4b5c      	ldr	r3, [pc, #368]	; (8002190 <UART_Protocol+0x238>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
			break;
 8002022:	e00f      	b.n	8002044 <UART_Protocol+0xec>
		case Velocity_Request:
			Frame = 1;
 8002024:	4b5a      	ldr	r3, [pc, #360]	; (8002190 <UART_Protocol+0x238>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
			break;
 800202a:	e00b      	b.n	8002044 <UART_Protocol+0xec>
		case Gripper_On:
			Frame = 1;
 800202c:	4b58      	ldr	r3, [pc, #352]	; (8002190 <UART_Protocol+0x238>)
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
			break;
 8002032:	e007      	b.n	8002044 <UART_Protocol+0xec>
		case Gripper_Off:
			Frame = 1;
 8002034:	4b56      	ldr	r3, [pc, #344]	; (8002190 <UART_Protocol+0x238>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
			break;
 800203a:	e003      	b.n	8002044 <UART_Protocol+0xec>
		case Home_Set:
			Frame = 1;
 800203c:	4b54      	ldr	r3, [pc, #336]	; (8002190 <UART_Protocol+0x238>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
			break;
 8002042:	bf00      	nop
		}


		switch (Frame)
 8002044:	4b52      	ldr	r3, [pc, #328]	; (8002190 <UART_Protocol+0x238>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b03      	cmp	r3, #3
 800204a:	d00e      	beq.n	800206a <UART_Protocol+0x112>
 800204c:	2b03      	cmp	r3, #3
 800204e:	dc10      	bgt.n	8002072 <UART_Protocol+0x11a>
 8002050:	2b01      	cmp	r3, #1
 8002052:	d002      	beq.n	800205a <UART_Protocol+0x102>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d004      	beq.n	8002062 <UART_Protocol+0x10a>
 8002058:	e00b      	b.n	8002072 <UART_Protocol+0x11a>
		{
		case 1:
			State = Check_Sum;
 800205a:	4b4b      	ldr	r3, [pc, #300]	; (8002188 <UART_Protocol+0x230>)
 800205c:	2203      	movs	r2, #3
 800205e:	701a      	strb	r2, [r3, #0]
			break;
 8002060:	e007      	b.n	8002072 <UART_Protocol+0x11a>
		case 2:
			State = Data_Frame;
 8002062:	4b49      	ldr	r3, [pc, #292]	; (8002188 <UART_Protocol+0x230>)
 8002064:	2202      	movs	r2, #2
 8002066:	701a      	strb	r2, [r3, #0]
			break;
 8002068:	e003      	b.n	8002072 <UART_Protocol+0x11a>
		case 3:
			State = N_Station;
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <UART_Protocol+0x230>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
			break;
 8002070:	bf00      	nop
		break;
		}
	case N_Station:
		N = dataIn;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	4b47      	ldr	r3, [pc, #284]	; (8002194 <UART_Protocol+0x23c>)
 8002076:	801a      	strh	r2, [r3, #0]
		State = Data_Frame;
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <UART_Protocol+0x230>)
 800207a:	2202      	movs	r2, #2
 800207c:	701a      	strb	r2, [r3, #0]
		break;
 800207e:	e07c      	b.n	800217a <UART_Protocol+0x222>
	case Data_Frame:
		Data = dataIn;
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	4b45      	ldr	r3, [pc, #276]	; (8002198 <UART_Protocol+0x240>)
 8002084:	801a      	strh	r2, [r3, #0]
		switch (Mode)
 8002086:	4b41      	ldr	r3, [pc, #260]	; (800218c <UART_Protocol+0x234>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	3b91      	subs	r3, #145	; 0x91
 800208c:	2b06      	cmp	r3, #6
 800208e:	d871      	bhi.n	8002174 <UART_Protocol+0x21c>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <UART_Protocol+0x140>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020b5 	.word	0x080020b5
 800209c:	08002175 	.word	0x08002175
 80020a0:	08002175 	.word	0x08002175
 80020a4:	080020bd 	.word	0x080020bd
 80020a8:	080020e7 	.word	0x080020e7
 80020ac:	08002113 	.word	0x08002113
 80020b0:	08002133 	.word	0x08002133
		{
		case Test_Command:
			State = Check_Sum;
 80020b4:	4b34      	ldr	r3, [pc, #208]	; (8002188 <UART_Protocol+0x230>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
			break;
 80020ba:	e048      	b.n	800214e <UART_Protocol+0x1f6>
		case Velocity_Set:
			Velocity_Max_RPM = (float)Data*10/255;
 80020bc:	4b36      	ldr	r3, [pc, #216]	; (8002198 <UART_Protocol+0x240>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	eddf 6a32 	vldr	s13, [pc, #200]	; 800219c <UART_Protocol+0x244>
 80020d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020d8:	4b31      	ldr	r3, [pc, #196]	; (80021a0 <UART_Protocol+0x248>)
 80020da:	edc3 7a00 	vstr	s15, [r3]
			State = Check_Sum;
 80020de:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <UART_Protocol+0x230>)
 80020e0:	2203      	movs	r2, #3
 80020e2:	701a      	strb	r2, [r3, #0]
			break;
 80020e4:	e033      	b.n	800214e <UART_Protocol+0x1f6>
		case Position_Set:
			Position_Want_Degree = (float)(Data/10000)*360;
 80020e6:	4b2c      	ldr	r3, [pc, #176]	; (8002198 <UART_Protocol+0x240>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <UART_Protocol+0x24c>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	0b5b      	lsrs	r3, r3, #13
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021a8 <UART_Protocol+0x250>
 8002100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <UART_Protocol+0x254>)
 8002106:	edc3 7a00 	vstr	s15, [r3]
			State = Check_Sum;
 800210a:	4b1f      	ldr	r3, [pc, #124]	; (8002188 <UART_Protocol+0x230>)
 800210c:	2203      	movs	r2, #3
 800210e:	701a      	strb	r2, [r3, #0]
			break;
 8002110:	e01d      	b.n	800214e <UART_Protocol+0x1f6>
		case Goal_1_Set:
			Position_Want_Degree = Station_List[dataIn-1];
 8002112:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002116:	3b01      	subs	r3, #1
 8002118:	4a25      	ldr	r2, [pc, #148]	; (80021b0 <UART_Protocol+0x258>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <UART_Protocol+0x254>)
 8002126:	edc3 7a00 	vstr	s15, [r3]
			State = Check_Sum;
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <UART_Protocol+0x230>)
 800212c:	2203      	movs	r2, #3
 800212e:	701a      	strb	r2, [r3, #0]
			break;
 8002130:	e00d      	b.n	800214e <UART_Protocol+0x1f6>
		case Goal_N_Set:
			N -= 1;
 8002132:	4b18      	ldr	r3, [pc, #96]	; (8002194 <UART_Protocol+0x23c>)
 8002134:	881b      	ldrh	r3, [r3, #0]
 8002136:	3b01      	subs	r3, #1
 8002138:	b29a      	uxth	r2, r3
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <UART_Protocol+0x23c>)
 800213c:	801a      	strh	r2, [r3, #0]
			if (N == 0)
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <UART_Protocol+0x23c>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <UART_Protocol+0x1f4>
			{
				State = Check_Sum;
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <UART_Protocol+0x230>)
 8002148:	2203      	movs	r2, #3
 800214a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800214c:	bf00      	nop
		break;
		}

		break;
 800214e:	e011      	b.n	8002174 <UART_Protocol+0x21c>
	case Check_Sum:
		Sum = dataIn;
 8002150:	887a      	ldrh	r2, [r7, #2]
 8002152:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <UART_Protocol+0x25c>)
 8002154:	801a      	strh	r2, [r3, #0]
		switch (Frame)
 8002156:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <UART_Protocol+0x238>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d006      	beq.n	800216c <UART_Protocol+0x214>
 800215e:	2b03      	cmp	r3, #3
 8002160:	dc0a      	bgt.n	8002178 <UART_Protocol+0x220>
 8002162:	2b01      	cmp	r3, #1
 8002164:	d004      	beq.n	8002170 <UART_Protocol+0x218>
 8002166:	2b02      	cmp	r3, #2
 8002168:	d106      	bne.n	8002178 <UART_Protocol+0x220>
		{
		case 1:
			break;
		case 2:
			break;
 800216a:	e002      	b.n	8002172 <UART_Protocol+0x21a>
		case 3:
			break;
 800216c:	bf00      	nop
 800216e:	e003      	b.n	8002178 <UART_Protocol+0x220>
			break;
 8002170:	bf00      	nop

		break;
		}

		break;
 8002172:	e001      	b.n	8002178 <UART_Protocol+0x220>
		break;
 8002174:	bf00      	nop
 8002176:	e000      	b.n	800217a <UART_Protocol+0x222>
		break;
 8002178:	bf00      	nop

	break;
	}

}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200001b4 	.word	0x200001b4
 800218c:	20000020 	.word	0x20000020
 8002190:	200001b5 	.word	0x200001b5
 8002194:	200001b6 	.word	0x200001b6
 8002198:	200001b8 	.word	0x200001b8
 800219c:	437f0000 	.word	0x437f0000
 80021a0:	20000014 	.word	0x20000014
 80021a4:	d1b71759 	.word	0xd1b71759
 80021a8:	43b40000 	.word	0x43b40000
 80021ac:	20000108 	.word	0x20000108
 80021b0:	08006c04 	.word	0x08006c04
 80021b4:	200001ba 	.word	0x200001ba

080021b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b4b0      	push	{r4, r5, r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a09      	ldr	r2, [pc, #36]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d109      	bne.n	80021dc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f112 34ff 	adds.w	r4, r2, #4294967295
 80021d2:	f143 0500 	adc.w	r5, r3, #0
 80021d6:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80021d8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bcb0      	pop	{r4, r5, r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200003b4 	.word	0x200003b4
 80021ec:	200000b8 	.word	0x200000b8

080021f0 <micros>:
uint64_t micros()
{
 80021f0:	b4b0      	push	{r4, r5, r7}
 80021f2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80021f4:	4b09      	ldr	r3, [pc, #36]	; (800221c <micros+0x2c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f04f 0100 	mov.w	r1, #0
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <micros+0x30>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	1884      	adds	r4, r0, r2
 8002208:	eb41 0503 	adc.w	r5, r1, r3
 800220c:	4622      	mov	r2, r4
 800220e:	462b      	mov	r3, r5
}
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	bcb0      	pop	{r4, r5, r7}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200003b4 	.word	0x200003b4
 8002220:	200000b8 	.word	0x200000b8

08002224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222c:	e7fe      	b.n	800222c <Error_Handler+0x8>
	...

08002230 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_MspInit+0x4c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_MspInit+0x4c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x4c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800226e:	2007      	movs	r0, #7
 8002270:	f000 fbf8 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800

08002280 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	; (8002304 <HAL_I2C_MspInit+0x84>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12c      	bne.n	80022fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a17      	ldr	r2, [pc, #92]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c4:	2312      	movs	r3, #18
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022d0:	2304      	movs	r3, #4
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	480c      	ldr	r0, [pc, #48]	; (800230c <HAL_I2C_MspInit+0x8c>)
 80022dc:	f001 f806 	bl	80032ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	4a07      	ldr	r2, [pc, #28]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ee:	6413      	str	r3, [r2, #64]	; 0x40
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_I2C_MspInit+0x88>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	; 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40005400 	.word	0x40005400
 8002308:	40023800 	.word	0x40023800
 800230c:	40020400 	.word	0x40020400

08002310 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a19      	ldr	r2, [pc, #100]	; (8002394 <HAL_TIM_Encoder_MspInit+0x84>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d12c      	bne.n	800238c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6453      	str	r3, [r2, #68]	; 0x44
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_TIM_Encoder_MspInit+0x88>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 800236a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800236e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800237c:	2301      	movs	r3, #1
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002388:	f000 ffb0 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	; 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40010000 	.word	0x40010000
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000

080023a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d116      	bne.n	80023e0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	4b24      	ldr	r3, [pc, #144]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a23      	ldr	r2, [pc, #140]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2100      	movs	r1, #0
 80023d2:	201c      	movs	r0, #28
 80023d4:	f000 fb51 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023d8:	201c      	movs	r0, #28
 80023da:	f000 fb6a 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023de:	e02e      	b.n	800243e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_TIM_Base_MspInit+0xac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	4a15      	ldr	r2, [pc, #84]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6413      	str	r3, [r2, #64]	; 0x40
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
}
 8002406:	e01a      	b.n	800243e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_TIM_Base_MspInit+0xb0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d115      	bne.n	800243e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a0b      	ldr	r2, [pc, #44]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <HAL_TIM_Base_MspInit+0xa8>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	201e      	movs	r0, #30
 8002434:	f000 fb21 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002438:	201e      	movs	r0, #30
 800243a:	f000 fb3a 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
}
 800243e:	bf00      	nop
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800

08002454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	60da      	str	r2, [r3, #12]
 800246a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_TIM_MspPostInit+0x68>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d11d      	bne.n	80024b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_TIM_MspPostInit+0x6c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002492:	2302      	movs	r3, #2
 8002494:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 030c 	add.w	r3, r7, #12
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_TIM_MspPostInit+0x70>)
 80024ae:	f000 ff1d 	bl	80032ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3720      	adds	r7, #32
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020400 	.word	0x40020400

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a4c      	ldr	r2, [pc, #304]	; (8002618 <HAL_UART_MspInit+0x150>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	f040 8091 	bne.w	800260e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_UART_MspInit+0x154>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f4:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_UART_MspInit+0x154>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fa:	6413      	str	r3, [r2, #64]	; 0x40
 80024fc:	4b47      	ldr	r3, [pc, #284]	; (800261c <HAL_UART_MspInit+0x154>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_UART_MspInit+0x154>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a42      	ldr	r2, [pc, #264]	; (800261c <HAL_UART_MspInit+0x154>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_UART_MspInit+0x154>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002524:	230c      	movs	r3, #12
 8002526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	2303      	movs	r3, #3
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002534:	2307      	movs	r3, #7
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4838      	ldr	r0, [pc, #224]	; (8002620 <HAL_UART_MspInit+0x158>)
 8002540:	f000 fed4 	bl	80032ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002544:	4b37      	ldr	r3, [pc, #220]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002546:	4a38      	ldr	r2, [pc, #224]	; (8002628 <HAL_UART_MspInit+0x160>)
 8002548:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800254a:	4b36      	ldr	r3, [pc, #216]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800254c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002550:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002558:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800255e:	4b31      	ldr	r3, [pc, #196]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002560:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002564:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002566:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256c:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002578:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002586:	4827      	ldr	r0, [pc, #156]	; (8002624 <HAL_UART_MspInit+0x15c>)
 8002588:	f000 faae 	bl	8002ae8 <HAL_DMA_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002592:	f7ff fe47 	bl	8002224 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
 800259c:	4a21      	ldr	r2, [pc, #132]	; (8002624 <HAL_UART_MspInit+0x15c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_UART_MspInit+0x164>)
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_UART_MspInit+0x168>)
 80025a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_UART_MspInit+0x164>)
 80025aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b0:	4b1e      	ldr	r3, [pc, #120]	; (800262c <HAL_UART_MspInit+0x164>)
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_UART_MspInit+0x164>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025bc:	4b1b      	ldr	r3, [pc, #108]	; (800262c <HAL_UART_MspInit+0x164>)
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c4:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_UART_MspInit+0x164>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_UART_MspInit+0x164>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025d0:	4b16      	ldr	r3, [pc, #88]	; (800262c <HAL_UART_MspInit+0x164>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_UART_MspInit+0x164>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <HAL_UART_MspInit+0x164>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025e2:	4812      	ldr	r0, [pc, #72]	; (800262c <HAL_UART_MspInit+0x164>)
 80025e4:	f000 fa80 	bl	8002ae8 <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80025ee:	f7ff fe19 	bl	8002224 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <HAL_UART_MspInit+0x164>)
 80025f6:	635a      	str	r2, [r3, #52]	; 0x34
 80025f8:	4a0c      	ldr	r2, [pc, #48]	; (800262c <HAL_UART_MspInit+0x164>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2026      	movs	r0, #38	; 0x26
 8002604:	f000 fa39 	bl	8002a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002608:	2026      	movs	r0, #38	; 0x26
 800260a:	f000 fa52 	bl	8002ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40004400 	.word	0x40004400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020000 	.word	0x40020000
 8002624:	200001c8 	.word	0x200001c8
 8002628:	40026088 	.word	0x40026088
 800262c:	2000030c 	.word	0x2000030c
 8002630:	400260a0 	.word	0x400260a0

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002680:	f000 f900 	bl	8002884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800268c:	4802      	ldr	r0, [pc, #8]	; (8002698 <DMA1_Stream5_IRQHandler+0x10>)
 800268e:	f000 fbc3 	bl	8002e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200001c8 	.word	0x200001c8

0800269c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026a0:	4802      	ldr	r0, [pc, #8]	; (80026ac <DMA1_Stream6_IRQHandler+0x10>)
 80026a2:	f000 fbb9 	bl	8002e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2000030c 	.word	0x2000030c

080026b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026b4:	4802      	ldr	r0, [pc, #8]	; (80026c0 <TIM2_IRQHandler+0x10>)
 80026b6:	f002 f8dd 	bl	8004874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200003b4 	.word	0x200003b4

080026c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80026c8:	4802      	ldr	r0, [pc, #8]	; (80026d4 <TIM4_IRQHandler+0x10>)
 80026ca:	f002 f8d3 	bl	8004874 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000228 	.word	0x20000228

080026d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026dc:	4802      	ldr	r0, [pc, #8]	; (80026e8 <USART2_IRQHandler+0x10>)
 80026de:	f002 ff47 	bl	8005570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200003fc 	.word	0x200003fc

080026ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80026f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026f4:	f000 ff98 	bl	8003628 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}

080026fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f003 fd3a 	bl	80061a4 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20020000 	.word	0x20020000
 800275c:	00000400 	.word	0x00000400
 8002760:	200001bc 	.word	0x200001bc
 8002764:	20000458 	.word	0x20000458

08002768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002792:	490e      	ldr	r1, [pc, #56]	; (80027cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002798:	e002      	b.n	80027a0 <LoopCopyDataInit>

0800279a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800279c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279e:	3304      	adds	r3, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a4:	d3f9      	bcc.n	800279a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a6:	4a0b      	ldr	r2, [pc, #44]	; (80027d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027a8:	4c0b      	ldr	r4, [pc, #44]	; (80027d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ac:	e001      	b.n	80027b2 <LoopFillZerobss>

080027ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b0:	3204      	adds	r2, #4

080027b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b4:	d3fb      	bcc.n	80027ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027b6:	f7ff ffd7 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ba:	f003 fcf9 	bl	80061b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7fd ff95 	bl	80006ec <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80027d0:	08006c64 	.word	0x08006c64
  ldr r2, =_sbss
 80027d4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80027d8:	20000454 	.word	0x20000454

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	; (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	; (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f92b 	bl	8002a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f808 	bl	8002824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fd0c 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_InitTick+0x54>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_InitTick+0x58>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4619      	mov	r1, r3
 8002836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800283a:	fbb3 f3f1 	udiv	r3, r3, r1
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f943 	bl	8002ace <HAL_SYSTICK_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00e      	b.n	8002870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b0f      	cmp	r3, #15
 8002856:	d80a      	bhi.n	800286e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002858:	2200      	movs	r2, #0
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 f90b 	bl	8002a7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002864:	4a06      	ldr	r2, [pc, #24]	; (8002880 <HAL_InitTick+0x5c>)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	e000      	b.n	8002870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000024 	.word	0x20000024
 800287c:	2000002c 	.word	0x2000002c
 8002880:	20000028 	.word	0x20000028

08002884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_IncTick+0x20>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	461a      	mov	r2, r3
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_IncTick+0x24>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4413      	add	r3, r2
 8002894:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_IncTick+0x24>)
 8002896:	6013      	str	r3, [r2, #0]
}
 8002898:	bf00      	nop
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	2000002c 	.word	0x2000002c
 80028a8:	20000440 	.word	0x20000440

080028ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return uwTick;
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_GetTick+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000440 	.word	0x20000440

080028c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028f6:	4a04      	ldr	r2, [pc, #16]	; (8002908 <__NVIC_SetPriorityGrouping+0x44>)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	60d3      	str	r3, [r2, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002910:	4b04      	ldr	r3, [pc, #16]	; (8002924 <__NVIC_GetPriorityGrouping+0x18>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	f003 0307 	and.w	r3, r3, #7
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002936:	2b00      	cmp	r3, #0
 8002938:	db0b      	blt.n	8002952 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	4907      	ldr	r1, [pc, #28]	; (8002960 <__NVIC_EnableIRQ+0x38>)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	2001      	movs	r0, #1
 800294a:	fa00 f202 	lsl.w	r2, r0, r2
 800294e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	; (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	; (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	; 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a30:	d301      	bcc.n	8002a36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00f      	b.n	8002a56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a36:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <SysTick_Config+0x40>)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3e:	210f      	movs	r1, #15
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	f7ff ff8e 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <SysTick_Config+0x40>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4e:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <SysTick_Config+0x40>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	e000e010 	.word	0xe000e010

08002a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff ff29 	bl	80028c4 <__NVIC_SetPriorityGrouping>
}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	4603      	mov	r3, r0
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a8c:	f7ff ff3e 	bl	800290c <__NVIC_GetPriorityGrouping>
 8002a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68b9      	ldr	r1, [r7, #8]
 8002a96:	6978      	ldr	r0, [r7, #20]
 8002a98:	f7ff ff8e 	bl	80029b8 <NVIC_EncodePriority>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff5d 	bl	8002964 <__NVIC_SetPriority>
}
 8002aaa:	bf00      	nop
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	4603      	mov	r3, r0
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff31 	bl	8002928 <__NVIC_EnableIRQ>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b082      	sub	sp, #8
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff ffa2 	bl	8002a20 <SysTick_Config>
 8002adc:	4603      	mov	r3, r0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af4:	f7ff feda 	bl	80028ac <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e099      	b.n	8002c38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0201 	bic.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b24:	e00f      	b.n	8002b46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b26:	f7ff fec1 	bl	80028ac <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d908      	bls.n	8002b46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2220      	movs	r2, #32
 8002b38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2203      	movs	r2, #3
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e078      	b.n	8002c38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e8      	bne.n	8002b26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4b38      	ldr	r3, [pc, #224]	; (8002c40 <HAL_DMA_Init+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d107      	bne.n	8002bb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f023 0307 	bic.w	r3, r3, #7
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d117      	bne.n	8002c0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00e      	beq.n	8002c0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 fb01 	bl	80031f4 <DMA_CheckFifoParam>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c06:	2301      	movs	r3, #1
 8002c08:	e016      	b.n	8002c38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 fab8 	bl	8003188 <DMA_CalcBaseAndBitshift>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	f010803f 	.word	0xf010803f

08002c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_DMA_Start_IT+0x26>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e040      	b.n	8002cec <HAL_DMA_Start_IT+0xa8>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d12f      	bne.n	8002cde <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 fa4a 	bl	800312c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0216 	orr.w	r2, r2, #22
 8002cb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0208 	orr.w	r2, r2, #8
 8002cca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0201 	orr.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e005      	b.n	8002cea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d00:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d02:	f7ff fdd3 	bl	80028ac <HAL_GetTick>
 8002d06:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d008      	beq.n	8002d26 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e052      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0216 	bic.w	r2, r2, #22
 8002d34:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d44:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <HAL_DMA_Abort+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0208 	bic.w	r2, r2, #8
 8002d64:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d76:	e013      	b.n	8002da0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d78:	f7ff fd98 	bl	80028ac <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d90c      	bls.n	8002da0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2203      	movs	r2, #3
 8002d98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e015      	b.n	8002dcc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1e4      	bne.n	8002d78 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	223f      	movs	r2, #63	; 0x3f
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3710      	adds	r7, #16
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d004      	beq.n	8002df2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00c      	b.n	8002e0c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2205      	movs	r2, #5
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e24:	4b92      	ldr	r3, [pc, #584]	; (8003070 <HAL_DMA_IRQHandler+0x258>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a92      	ldr	r2, [pc, #584]	; (8003074 <HAL_DMA_IRQHandler+0x25c>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0a9b      	lsrs	r3, r3, #10
 8002e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	2208      	movs	r2, #8
 8002e44:	409a      	lsls	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01a      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0204 	bic.w	r2, r2, #4
 8002e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e70:	2208      	movs	r2, #8
 8002e72:	409a      	lsls	r2, r3
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7c:	f043 0201 	orr.w	r2, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb2:	f043 0202 	orr.w	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebe:	2204      	movs	r2, #4
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	2204      	movs	r2, #4
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	f043 0204 	orr.w	r2, r3, #4
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d043      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d03c      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f12:	2210      	movs	r2, #16
 8002f14:	409a      	lsls	r2, r3
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d024      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e01f      	b.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01b      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e016      	b.n	8002f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d107      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0208 	bic.w	r2, r2, #8
 8002f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 808e 	beq.w	80030b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0310 	and.w	r3, r3, #16
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 8086 	beq.w	80030b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	2220      	movs	r2, #32
 8002fb0:	409a      	lsls	r2, r3
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d136      	bne.n	8003030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0216 	bic.w	r2, r2, #22
 8002fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	695a      	ldr	r2, [r3, #20]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x1da>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0208 	bic.w	r2, r2, #8
 8003000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003006:	223f      	movs	r2, #63	; 0x3f
 8003008:	409a      	lsls	r2, r3
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003022:	2b00      	cmp	r3, #0
 8003024:	d07d      	beq.n	8003122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	4798      	blx	r3
        }
        return;
 800302e:	e078      	b.n	8003122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01c      	beq.n	8003078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d108      	bne.n	800305e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003050:	2b00      	cmp	r3, #0
 8003052:	d030      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	4798      	blx	r3
 800305c:	e02b      	b.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003062:	2b00      	cmp	r3, #0
 8003064:	d027      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	4798      	blx	r3
 800306e:	e022      	b.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
 8003070:	20000024 	.word	0x20000024
 8003074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0210 	bic.w	r2, r2, #16
 8003094:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d032      	beq.n	8003124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d022      	beq.n	8003110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2205      	movs	r2, #5
 80030ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0201 	bic.w	r2, r2, #1
 80030e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	3301      	adds	r3, #1
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d307      	bcc.n	80030fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1f2      	bne.n	80030e2 <HAL_DMA_IRQHandler+0x2ca>
 80030fc:	e000      	b.n	8003100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
 8003120:	e000      	b.n	8003124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003122:	bf00      	nop
    }
  }
}
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b40      	cmp	r3, #64	; 0x40
 8003158:	d108      	bne.n	800316c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800316a:	e007      	b.n	800317c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68ba      	ldr	r2, [r7, #8]
 8003172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
}
 800317c:	bf00      	nop
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	3b10      	subs	r3, #16
 8003198:	4a14      	ldr	r2, [pc, #80]	; (80031ec <DMA_CalcBaseAndBitshift+0x64>)
 800319a:	fba2 2303 	umull	r2, r3, r2, r3
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031a2:	4a13      	ldr	r2, [pc, #76]	; (80031f0 <DMA_CalcBaseAndBitshift+0x68>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	d909      	bls.n	80031ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	1d1a      	adds	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	659a      	str	r2, [r3, #88]	; 0x58
 80031c8:	e007      	b.n	80031da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031d2:	f023 0303 	bic.w	r3, r3, #3
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	aaaaaaab 	.word	0xaaaaaaab
 80031f0:	08006c28 	.word	0x08006c28

080031f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11f      	bne.n	800324e <DMA_CheckFifoParam+0x5a>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d856      	bhi.n	80032c2 <DMA_CheckFifoParam+0xce>
 8003214:	a201      	add	r2, pc, #4	; (adr r2, 800321c <DMA_CheckFifoParam+0x28>)
 8003216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321a:	bf00      	nop
 800321c:	0800322d 	.word	0x0800322d
 8003220:	0800323f 	.word	0x0800323f
 8003224:	0800322d 	.word	0x0800322d
 8003228:	080032c3 	.word	0x080032c3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d046      	beq.n	80032c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323c:	e043      	b.n	80032c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003246:	d140      	bne.n	80032ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800324c:	e03d      	b.n	80032ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003256:	d121      	bne.n	800329c <DMA_CheckFifoParam+0xa8>
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b03      	cmp	r3, #3
 800325c:	d837      	bhi.n	80032ce <DMA_CheckFifoParam+0xda>
 800325e:	a201      	add	r2, pc, #4	; (adr r2, 8003264 <DMA_CheckFifoParam+0x70>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003275 	.word	0x08003275
 8003268:	0800327b 	.word	0x0800327b
 800326c:	08003275 	.word	0x08003275
 8003270:	0800328d 	.word	0x0800328d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	73fb      	strb	r3, [r7, #15]
      break;
 8003278:	e030      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d025      	beq.n	80032d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328a:	e022      	b.n	80032d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003294:	d11f      	bne.n	80032d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800329a:	e01c      	b.n	80032d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d903      	bls.n	80032aa <DMA_CheckFifoParam+0xb6>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d003      	beq.n	80032b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032a8:	e018      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
      break;
 80032ae:	e015      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00e      	beq.n	80032da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e00b      	b.n	80032da <DMA_CheckFifoParam+0xe6>
      break;
 80032c2:	bf00      	nop
 80032c4:	e00a      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
 80032c8:	e008      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032ca:	bf00      	nop
 80032cc:	e006      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032ce:	bf00      	nop
 80032d0:	e004      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e002      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;   
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
    }
  } 
  
  return status; 
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e159      	b.n	80035bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003308:	2201      	movs	r2, #1
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4013      	ands	r3, r2
 800331a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	429a      	cmp	r2, r3
 8003322:	f040 8148 	bne.w	80035b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0303 	and.w	r3, r3, #3
 800332e:	2b01      	cmp	r3, #1
 8003330:	d005      	beq.n	800333e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333a:	2b02      	cmp	r3, #2
 800333c:	d130      	bne.n	80033a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003374:	2201      	movs	r2, #1
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 0201 	and.w	r2, r3, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 0303 	and.w	r3, r3, #3
 80033a8:	2b03      	cmp	r3, #3
 80033aa:	d017      	beq.n	80033dc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	2203      	movs	r2, #3
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	43db      	mvns	r3, r3
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 0303 	and.w	r3, r3, #3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d123      	bne.n	8003430 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	08da      	lsrs	r2, r3, #3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3208      	adds	r2, #8
 80033f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	08da      	lsrs	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3208      	adds	r2, #8
 800342a:	69b9      	ldr	r1, [r7, #24]
 800342c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	2203      	movs	r2, #3
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	43db      	mvns	r3, r3
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	4013      	ands	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0203 	and.w	r2, r3, #3
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	69ba      	ldr	r2, [r7, #24]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a2 	beq.w	80035b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a56      	ldr	r2, [pc, #344]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b54      	ldr	r3, [pc, #336]	; (80035d4 <HAL_GPIO_Init+0x2e8>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800348e:	4a52      	ldr	r2, [pc, #328]	; (80035d8 <HAL_GPIO_Init+0x2ec>)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	3302      	adds	r3, #2
 8003496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	220f      	movs	r2, #15
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4013      	ands	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a49      	ldr	r2, [pc, #292]	; (80035dc <HAL_GPIO_Init+0x2f0>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x202>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a48      	ldr	r2, [pc, #288]	; (80035e0 <HAL_GPIO_Init+0x2f4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x1fe>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_GPIO_Init+0x2f8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x1fa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a46      	ldr	r2, [pc, #280]	; (80035e8 <HAL_GPIO_Init+0x2fc>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x1f6>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a45      	ldr	r2, [pc, #276]	; (80035ec <HAL_GPIO_Init+0x300>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x1f2>
 80034da:	2304      	movs	r3, #4
 80034dc:	e008      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034de:	2307      	movs	r3, #7
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034e2:	2303      	movs	r3, #3
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x204>
 80034ee:	2300      	movs	r3, #0
 80034f0:	69fa      	ldr	r2, [r7, #28]
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003500:	4935      	ldr	r1, [pc, #212]	; (80035d8 <HAL_GPIO_Init+0x2ec>)
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	43db      	mvns	r3, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003532:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003538:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d003      	beq.n	800355c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800355c:	4a24      	ldr	r2, [pc, #144]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	43db      	mvns	r3, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4013      	ands	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003586:	4a1a      	ldr	r2, [pc, #104]	; (80035f0 <HAL_GPIO_Init+0x304>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_GPIO_Init+0x304>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b0:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <HAL_GPIO_Init+0x304>)
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	f67f aea2 	bls.w	8003308 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3724      	adds	r7, #36	; 0x24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40013c00 	.word	0x40013c00

080035f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	807b      	strh	r3, [r7, #2]
 8003600:	4613      	mov	r3, r2
 8003602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003604:	787b      	ldrb	r3, [r7, #1]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003610:	e003      	b.n	800361a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	041a      	lsls	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	619a      	str	r2, [r3, #24]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
	...

08003628 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f806 	bl	8003658 <HAL_GPIO_EXTI_Callback>
  }
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40013c00 	.word	0x40013c00

08003658 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e12b      	b.n	80038da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fe fdf2 	bl	8002280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036d4:	f000 fd5c 	bl	8004190 <HAL_RCC_GetPCLK1Freq>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4a81      	ldr	r2, [pc, #516]	; (80038e4 <HAL_I2C_Init+0x274>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d807      	bhi.n	80036f4 <HAL_I2C_Init+0x84>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <HAL_I2C_Init+0x278>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	bf94      	ite	ls
 80036ec:	2301      	movls	r3, #1
 80036ee:	2300      	movhi	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	e006      	b.n	8003702 <HAL_I2C_Init+0x92>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4a7d      	ldr	r2, [pc, #500]	; (80038ec <HAL_I2C_Init+0x27c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e0e7      	b.n	80038da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4a78      	ldr	r2, [pc, #480]	; (80038f0 <HAL_I2C_Init+0x280>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a6a      	ldr	r2, [pc, #424]	; (80038e4 <HAL_I2C_Init+0x274>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d802      	bhi.n	8003744 <HAL_I2C_Init+0xd4>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	3301      	adds	r3, #1
 8003742:	e009      	b.n	8003758 <HAL_I2C_Init+0xe8>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800374a:	fb02 f303 	mul.w	r3, r2, r3
 800374e:	4a69      	ldr	r2, [pc, #420]	; (80038f4 <HAL_I2C_Init+0x284>)
 8003750:	fba2 2303 	umull	r2, r3, r2, r3
 8003754:	099b      	lsrs	r3, r3, #6
 8003756:	3301      	adds	r3, #1
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	430b      	orrs	r3, r1
 800375e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800376a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	495c      	ldr	r1, [pc, #368]	; (80038e4 <HAL_I2C_Init+0x274>)
 8003774:	428b      	cmp	r3, r1
 8003776:	d819      	bhi.n	80037ac <HAL_I2C_Init+0x13c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	1e59      	subs	r1, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fbb1 f3f3 	udiv	r3, r1, r3
 8003786:	1c59      	adds	r1, r3, #1
 8003788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800378c:	400b      	ands	r3, r1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00a      	beq.n	80037a8 <HAL_I2C_Init+0x138>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1e59      	subs	r1, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a6:	e051      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037a8:	2304      	movs	r3, #4
 80037aa:	e04f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_I2C_Init+0x168>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e012      	b.n	80037fe <HAL_I2C_Init+0x18e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x196>
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_I2C_Init+0x1dc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_I2C_Init+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e58      	subs	r0, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	440b      	add	r3, r1
 800381c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	e00f      	b.n	800384c <HAL_I2C_Init+0x1dc>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6911      	ldr	r1, [r2, #16]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	000186a0 	.word	0x000186a0
 80038e8:	001e847f 	.word	0x001e847f
 80038ec:	003d08ff 	.word	0x003d08ff
 80038f0:	431bde83 	.word	0x431bde83
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e264      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003916:	4ba3      	ldr	r3, [pc, #652]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	2b04      	cmp	r3, #4
 8003920:	d00c      	beq.n	800393c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4ba0      	ldr	r3, [pc, #640]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	2b08      	cmp	r3, #8
 800392c:	d112      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392e:	4b9d      	ldr	r3, [pc, #628]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393a:	d10b      	bne.n	8003954 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	4b99      	ldr	r3, [pc, #612]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d05b      	beq.n	8003a00 <HAL_RCC_OscConfig+0x108>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d157      	bne.n	8003a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e23f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395c:	d106      	bne.n	800396c <HAL_RCC_OscConfig+0x74>
 800395e:	4b91      	ldr	r3, [pc, #580]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a90      	ldr	r2, [pc, #576]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	e01d      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x98>
 8003976:	4b8b      	ldr	r3, [pc, #556]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a8a      	ldr	r2, [pc, #552]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800397c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a87      	ldr	r2, [pc, #540]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0xb0>
 8003990:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a83      	ldr	r2, [pc, #524]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	4b81      	ldr	r3, [pc, #516]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a80      	ldr	r2, [pc, #512]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe ff7c 	bl	80028ac <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b8:	f7fe ff78 	bl	80028ac <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b64      	cmp	r3, #100	; 0x64
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e204      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0xc0>
 80039d6:	e014      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7fe ff68 	bl	80028ac <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7fe ff64 	bl	80028ac <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e1f0      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0xe8>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0e:	4b65      	ldr	r3, [pc, #404]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d11c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a26:	4b5f      	ldr	r3, [pc, #380]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d116      	bne.n	8003a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a32:	4b5c      	ldr	r3, [pc, #368]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d001      	beq.n	8003a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e1c4      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4952      	ldr	r1, [pc, #328]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5e:	e03a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a68:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe ff1d 	bl	80028ac <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a76:	f7fe ff19 	bl	80028ac <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e1a5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	4b46      	ldr	r3, [pc, #280]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d0f0      	beq.n	8003a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a94:	4b43      	ldr	r3, [pc, #268]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	00db      	lsls	r3, r3, #3
 8003aa2:	4940      	ldr	r1, [pc, #256]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
 8003aa8:	e015      	b.n	8003ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	; (8003ba8 <HAL_RCC_OscConfig+0x2b0>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fefc 	bl	80028ac <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fef8 	bl	80028ac <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e184      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	4b36      	ldr	r3, [pc, #216]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f0      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d030      	beq.n	8003b44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aea:	4b30      	ldr	r3, [pc, #192]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe fedc 	bl	80028ac <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af8:	f7fe fed8 	bl	80028ac <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e164      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x200>
 8003b16:	e015      	b.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <HAL_RCC_OscConfig+0x2b4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fec5 	bl	80028ac <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b26:	f7fe fec1 	bl	80028ac <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e14d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 80a0 	beq.w	8003c92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b0b      	ldr	r3, [pc, #44]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d121      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <HAL_RCC_OscConfig+0x2b8>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fe87 	bl	80028ac <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e011      	b.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
 8003ba2:	bf00      	nop
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	42470000 	.word	0x42470000
 8003bac:	42470e80 	.word	0x42470e80
 8003bb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fe fe7a 	bl	80028ac <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e106      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc6:	4b85      	ldr	r3, [pc, #532]	; (8003ddc <HAL_RCC_OscConfig+0x4e4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_OscConfig+0x2f0>
 8003bda:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a80      	ldr	r2, [pc, #512]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003be0:	f043 0301 	orr.w	r3, r3, #1
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
 8003be6:	e01c      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d10c      	bne.n	8003c0a <HAL_RCC_OscConfig+0x312>
 8003bf0:	4b7b      	ldr	r3, [pc, #492]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	4a7a      	ldr	r2, [pc, #488]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bf6:	f043 0304 	orr.w	r3, r3, #4
 8003bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfc:	4b78      	ldr	r3, [pc, #480]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a77      	ldr	r2, [pc, #476]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0x32a>
 8003c0a:	4b75      	ldr	r3, [pc, #468]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a74      	ldr	r2, [pc, #464]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	4b72      	ldr	r3, [pc, #456]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1a:	4a71      	ldr	r2, [pc, #452]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d015      	beq.n	8003c56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c2a:	f7fe fe3f 	bl	80028ac <HAL_GetTick>
 8003c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c30:	e00a      	b.n	8003c48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fe fe3b 	bl	80028ac <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e0c5      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c48:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0ee      	beq.n	8003c32 <HAL_RCC_OscConfig+0x33a>
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c56:	f7fe fe29 	bl	80028ac <HAL_GetTick>
 8003c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c5c:	e00a      	b.n	8003c74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5e:	f7fe fe25 	bl	80028ac <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0af      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b5a      	ldr	r3, [pc, #360]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ee      	bne.n	8003c5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b56      	ldr	r3, [pc, #344]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	4a55      	ldr	r2, [pc, #340]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 809b 	beq.w	8003dd2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c9c:	4b50      	ldr	r3, [pc, #320]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d05c      	beq.n	8003d62 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d141      	bne.n	8003d34 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b4c      	ldr	r3, [pc, #304]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fdf9 	bl	80028ac <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cbe:	f7fe fdf5 	bl	80028ac <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e081      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd0:	4b43      	ldr	r3, [pc, #268]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	019b      	lsls	r3, r3, #6
 8003cec:	431a      	orrs	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	085b      	lsrs	r3, r3, #1
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	041b      	lsls	r3, r3, #16
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	4937      	ldr	r1, [pc, #220]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0c:	f7fe fdce 	bl	80028ac <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d14:	f7fe fdca 	bl	80028ac <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e056      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d26:	4b2e      	ldr	r3, [pc, #184]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x41c>
 8003d32:	e04e      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d34:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <HAL_RCC_OscConfig+0x4ec>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fdb7 	bl	80028ac <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d42:	f7fe fdb3 	bl	80028ac <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e03f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x44a>
 8003d60:	e037      	b.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e032      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d6e:	4b1c      	ldr	r3, [pc, #112]	; (8003de0 <HAL_RCC_OscConfig+0x4e8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d028      	beq.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d121      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d11a      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d9e:	4013      	ands	r3, r2
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d111      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40007000 	.word	0x40007000
 8003de0:	40023800 	.word	0x40023800
 8003de4:	42470060 	.word	0x42470060

08003de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cc      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003dfc:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d90c      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0a:	4b65      	ldr	r3, [pc, #404]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0b8      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a58      	ldr	r2, [pc, #352]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e54:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a52      	ldr	r2, [pc, #328]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e60:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	494d      	ldr	r1, [pc, #308]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d044      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d107      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e86:	4b47      	ldr	r3, [pc, #284]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d119      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e07f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea2:	2b03      	cmp	r3, #3
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea6:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e06f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e067      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec6:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f023 0203 	bic.w	r2, r3, #3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	4934      	ldr	r1, [pc, #208]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed8:	f7fe fce8 	bl	80028ac <HAL_GetTick>
 8003edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee0:	f7fe fce4 	bl	80028ac <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04f      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d1eb      	bne.n	8003ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d20c      	bcs.n	8003f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e032      	b.n	8003f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d008      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4916      	ldr	r1, [pc, #88]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f5a:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6e:	f000 f821 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f72:	4602      	mov	r2, r0
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	091b      	lsrs	r3, r3, #4
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	490a      	ldr	r1, [pc, #40]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f80:	5ccb      	ldrb	r3, [r1, r3]
 8003f82:	fa22 f303 	lsr.w	r3, r2, r3
 8003f86:	4a09      	ldr	r2, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c4>)
 8003f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fe fc48 	bl	8002824 <HAL_InitTick>

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023c00 	.word	0x40023c00
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08006c10 	.word	0x08006c10
 8003fac:	20000024 	.word	0x20000024
 8003fb0:	20000028 	.word	0x20000028

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	607b      	str	r3, [r7, #4]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fcc:	4b67      	ldr	r3, [pc, #412]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 030c 	and.w	r3, r3, #12
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	f200 80bd 	bhi.w	8004158 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe6:	e0b7      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003fea:	60bb      	str	r3, [r7, #8]
       break;
 8003fec:	e0b7      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fee:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003ff0:	60bb      	str	r3, [r7, #8]
      break;
 8003ff2:	e0b4      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff4:	4b5d      	ldr	r3, [pc, #372]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d04d      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400a:	4b58      	ldr	r3, [pc, #352]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	099b      	lsrs	r3, r3, #6
 8004010:	461a      	mov	r2, r3
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	f240 10ff 	movw	r0, #511	; 0x1ff
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	ea02 0800 	and.w	r8, r2, r0
 8004022:	ea03 0901 	and.w	r9, r3, r1
 8004026:	4640      	mov	r0, r8
 8004028:	4649      	mov	r1, r9
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	014b      	lsls	r3, r1, #5
 8004034:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004038:	0142      	lsls	r2, r0, #5
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	ebb0 0008 	subs.w	r0, r0, r8
 8004042:	eb61 0109 	sbc.w	r1, r1, r9
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	018b      	lsls	r3, r1, #6
 8004050:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004054:	0182      	lsls	r2, r0, #6
 8004056:	1a12      	subs	r2, r2, r0
 8004058:	eb63 0301 	sbc.w	r3, r3, r1
 800405c:	f04f 0000 	mov.w	r0, #0
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	00d9      	lsls	r1, r3, #3
 8004066:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800406a:	00d0      	lsls	r0, r2, #3
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	eb12 0208 	adds.w	r2, r2, r8
 8004074:	eb43 0309 	adc.w	r3, r3, r9
 8004078:	f04f 0000 	mov.w	r0, #0
 800407c:	f04f 0100 	mov.w	r1, #0
 8004080:	0259      	lsls	r1, r3, #9
 8004082:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004086:	0250      	lsls	r0, r2, #9
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	461a      	mov	r2, r3
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	f7fc f9ac 	bl	80003f4 <__aeabi_uldivmod>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	4613      	mov	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	e04a      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	099b      	lsrs	r3, r3, #6
 80040ac:	461a      	mov	r2, r3
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040b6:	f04f 0100 	mov.w	r1, #0
 80040ba:	ea02 0400 	and.w	r4, r2, r0
 80040be:	ea03 0501 	and.w	r5, r3, r1
 80040c2:	4620      	mov	r0, r4
 80040c4:	4629      	mov	r1, r5
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	014b      	lsls	r3, r1, #5
 80040d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040d4:	0142      	lsls	r2, r0, #5
 80040d6:	4610      	mov	r0, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	1b00      	subs	r0, r0, r4
 80040dc:	eb61 0105 	sbc.w	r1, r1, r5
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	018b      	lsls	r3, r1, #6
 80040ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040ee:	0182      	lsls	r2, r0, #6
 80040f0:	1a12      	subs	r2, r2, r0
 80040f2:	eb63 0301 	sbc.w	r3, r3, r1
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	00d9      	lsls	r1, r3, #3
 8004100:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004104:	00d0      	lsls	r0, r2, #3
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	1912      	adds	r2, r2, r4
 800410c:	eb45 0303 	adc.w	r3, r5, r3
 8004110:	f04f 0000 	mov.w	r0, #0
 8004114:	f04f 0100 	mov.w	r1, #0
 8004118:	0299      	lsls	r1, r3, #10
 800411a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800411e:	0290      	lsls	r0, r2, #10
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4610      	mov	r0, r2
 8004126:	4619      	mov	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	461a      	mov	r2, r3
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	f7fc f960 	bl	80003f4 <__aeabi_uldivmod>
 8004134:	4602      	mov	r2, r0
 8004136:	460b      	mov	r3, r1
 8004138:	4613      	mov	r3, r2
 800413a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	3301      	adds	r3, #1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	60bb      	str	r3, [r7, #8]
      break;
 8004156:	e002      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800415a:	60bb      	str	r3, [r7, #8]
      break;
 800415c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415e:	68bb      	ldr	r3, [r7, #8]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	00f42400 	.word	0x00f42400
 8004174:	007a1200 	.word	0x007a1200

08004178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800417c:	4b03      	ldr	r3, [pc, #12]	; (800418c <HAL_RCC_GetHCLKFreq+0x14>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000024 	.word	0x20000024

08004190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004194:	f7ff fff0 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 8004198:	4602      	mov	r2, r0
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	4903      	ldr	r1, [pc, #12]	; (80041b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a6:	5ccb      	ldrb	r3, [r1, r3]
 80041a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40023800 	.word	0x40023800
 80041b4:	08006c20 	.word	0x08006c20

080041b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041bc:	f7ff ffdc 	bl	8004178 <HAL_RCC_GetHCLKFreq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	0b5b      	lsrs	r3, r3, #13
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	4903      	ldr	r1, [pc, #12]	; (80041dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ce:	5ccb      	ldrb	r3, [r1, r3]
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40023800 	.word	0x40023800
 80041dc:	08006c20 	.word	0x08006c20

080041e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e041      	b.n	8004276 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7fe f8ca 	bl	80023a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3304      	adds	r3, #4
 800421c:	4619      	mov	r1, r3
 800421e:	4610      	mov	r0, r2
 8004220:	f000 fdda 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b01      	cmp	r3, #1
 8004292:	d001      	beq.n	8004298 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e03c      	b.n	8004312 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2202      	movs	r2, #2
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <HAL_TIM_Base_Start+0xa0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d018      	beq.n	80042dc <HAL_TIM_Base_Start+0x5c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b2:	d013      	beq.n	80042dc <HAL_TIM_Base_Start+0x5c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <HAL_TIM_Base_Start+0xa4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_TIM_Base_Start+0x5c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_TIM_Base_Start+0xa8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIM_Base_Start+0x5c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a17      	ldr	r2, [pc, #92]	; (800432c <HAL_TIM_Base_Start+0xac>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_TIM_Base_Start+0x5c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a16      	ldr	r2, [pc, #88]	; (8004330 <HAL_TIM_Base_Start+0xb0>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d111      	bne.n	8004300 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d010      	beq.n	8004310 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fe:	e007      	b.n	8004310 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40014000 	.word	0x40014000

08004334 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d001      	beq.n	800434c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e044      	b.n	80043d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1e      	ldr	r2, [pc, #120]	; (80043e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d018      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004376:	d013      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00e      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a19      	ldr	r2, [pc, #100]	; (80043ec <HAL_TIM_Base_Start_IT+0xb8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d009      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d111      	bne.n	80043c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b06      	cmp	r3, #6
 80043b0:	d010      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c2:	e007      	b.n	80043d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	40000400 	.word	0x40000400
 80043ec:	40000800 	.word	0x40000800
 80043f0:	40000c00 	.word	0x40000c00
 80043f4:	40014000 	.word	0x40014000

080043f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e041      	b.n	800448e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f839 	bl	8004496 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f000 fcce 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d109      	bne.n	80044d0 <HAL_TIM_PWM_Start+0x24>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	bf14      	ite	ne
 80044c8:	2301      	movne	r3, #1
 80044ca:	2300      	moveq	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e022      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d109      	bne.n	80044ea <HAL_TIM_PWM_Start+0x3e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b01      	cmp	r3, #1
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	e015      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d109      	bne.n	8004504 <HAL_TIM_PWM_Start+0x58>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
 8004502:	e008      	b.n	8004516 <HAL_TIM_PWM_Start+0x6a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e068      	b.n	80045f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d104      	bne.n	800452e <HAL_TIM_PWM_Start+0x82>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800452c:	e013      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b04      	cmp	r3, #4
 8004532:	d104      	bne.n	800453e <HAL_TIM_PWM_Start+0x92>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800453c:	e00b      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d104      	bne.n	800454e <HAL_TIM_PWM_Start+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800454c:	e003      	b.n	8004556 <HAL_TIM_PWM_Start+0xaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fee0 	bl	8005324 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a23      	ldr	r2, [pc, #140]	; (80045f8 <HAL_TIM_PWM_Start+0x14c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d107      	bne.n	800457e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a1d      	ldr	r2, [pc, #116]	; (80045f8 <HAL_TIM_PWM_Start+0x14c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_TIM_PWM_Start+0x10e>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004590:	d013      	beq.n	80045ba <HAL_TIM_PWM_Start+0x10e>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_TIM_PWM_Start+0x150>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_TIM_PWM_Start+0x10e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a17      	ldr	r2, [pc, #92]	; (8004600 <HAL_TIM_PWM_Start+0x154>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_TIM_PWM_Start+0x10e>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a16      	ldr	r2, [pc, #88]	; (8004604 <HAL_TIM_PWM_Start+0x158>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_TIM_PWM_Start+0x10e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <HAL_TIM_PWM_Start+0x15c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d111      	bne.n	80045de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b06      	cmp	r3, #6
 80045ca:	d010      	beq.n	80045ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	e007      	b.n	80045ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f042 0201 	orr.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40014000 	.word	0x40014000

0800460c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e097      	b.n	8004750 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fd fe6b 	bl	8002310 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004650:	f023 0307 	bic.w	r3, r3, #7
 8004654:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	4619      	mov	r1, r3
 8004660:	4610      	mov	r0, r2
 8004662:	f000 fbb9 	bl	8004dd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	4313      	orrs	r3, r2
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80046ac:	f023 030c 	bic.w	r3, r3, #12
 80046b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	021b      	lsls	r3, r3, #8
 80046c8:	4313      	orrs	r3, r2
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	031b      	lsls	r3, r3, #12
 80046dc:	4313      	orrs	r3, r2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4313      	orrs	r3, r2
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004768:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004770:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004778:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004780:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d110      	bne.n	80047aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d102      	bne.n	8004794 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800478e:	7b7b      	ldrb	r3, [r7, #13]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d001      	beq.n	8004798 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e069      	b.n	800486c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	e031      	b.n	800480e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d110      	bne.n	80047d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b0:	7bbb      	ldrb	r3, [r7, #14]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d102      	bne.n	80047bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b6:	7b3b      	ldrb	r3, [r7, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d001      	beq.n	80047c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e055      	b.n	800486c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047d0:	e01d      	b.n	800480e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d108      	bne.n	80047ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047d8:	7bbb      	ldrb	r3, [r7, #14]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047de:	7b7b      	ldrb	r3, [r7, #13]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047e4:	7b3b      	ldrb	r3, [r7, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d001      	beq.n	80047ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e03e      	b.n	800486c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2202      	movs	r2, #2
 80047f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2202      	movs	r2, #2
 800480a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_TIM_Encoder_Start+0xc4>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d008      	beq.n	800482c <HAL_TIM_Encoder_Start+0xd4>
 800481a:	e00f      	b.n	800483c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2201      	movs	r2, #1
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f000 fd7d 	bl	8005324 <TIM_CCxChannelCmd>
      break;
 800482a:	e016      	b.n	800485a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2201      	movs	r2, #1
 8004832:	2104      	movs	r1, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fd75 	bl	8005324 <TIM_CCxChannelCmd>
      break;
 800483a:	e00e      	b.n	800485a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2201      	movs	r2, #1
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f000 fd6d 	bl	8005324 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	2104      	movs	r1, #4
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fd66 	bl	8005324 <TIM_CCxChannelCmd>
      break;
 8004858:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	d122      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d11b      	bne.n	80048d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0202 	mvn.w	r2, #2
 80048a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fa70 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa62 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fa73 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b04      	cmp	r3, #4
 80048dc:	d122      	bne.n	8004924 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d11b      	bne.n	8004924 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f06f 0204 	mvn.w	r2, #4
 80048f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa46 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 8004910:	e005      	b.n	800491e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa38 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa49 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b08      	cmp	r3, #8
 8004930:	d122      	bne.n	8004978 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b08      	cmp	r3, #8
 800493e:	d11b      	bne.n	8004978 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f06f 0208 	mvn.w	r2, #8
 8004948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2204      	movs	r2, #4
 800494e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa1c 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 8004964:	e005      	b.n	8004972 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fa0e 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fa1f 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b10      	cmp	r3, #16
 8004984:	d122      	bne.n	80049cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b10      	cmp	r3, #16
 8004992:	d11b      	bne.n	80049cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0210 	mvn.w	r2, #16
 800499c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2208      	movs	r2, #8
 80049a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9f2 	bl	8004d9c <HAL_TIM_IC_CaptureCallback>
 80049b8:	e005      	b.n	80049c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f9e4 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9f5 	bl	8004db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0201 	mvn.w	r2, #1
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fd fbe0 	bl	80021b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 fd1e 	bl	8005460 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f9ba 	bl	8004dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d10e      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b20      	cmp	r3, #32
 8004a6a:	d107      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0220 	mvn.w	r2, #32
 8004a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 fce8 	bl	800544c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e0ac      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b0c      	cmp	r3, #12
 8004aaa:	f200 809f 	bhi.w	8004bec <HAL_TIM_PWM_ConfigChannel+0x168>
 8004aae:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ae9 	.word	0x08004ae9
 8004ab8:	08004bed 	.word	0x08004bed
 8004abc:	08004bed 	.word	0x08004bed
 8004ac0:	08004bed 	.word	0x08004bed
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004bed 	.word	0x08004bed
 8004acc:	08004bed 	.word	0x08004bed
 8004ad0:	08004bed 	.word	0x08004bed
 8004ad4:	08004b6b 	.word	0x08004b6b
 8004ad8:	08004bed 	.word	0x08004bed
 8004adc:	08004bed 	.word	0x08004bed
 8004ae0:	08004bed 	.word	0x08004bed
 8004ae4:	08004bab 	.word	0x08004bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f9f2 	bl	8004ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0208 	orr.w	r2, r2, #8
 8004b02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0204 	bic.w	r2, r2, #4
 8004b12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	6999      	ldr	r1, [r3, #24]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	619a      	str	r2, [r3, #24]
      break;
 8004b26:	e062      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68b9      	ldr	r1, [r7, #8]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 fa38 	bl	8004fa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	021a      	lsls	r2, r3, #8
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	619a      	str	r2, [r3, #24]
      break;
 8004b68:	e041      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 fa83 	bl	800507c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0208 	orr.w	r2, r2, #8
 8004b84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69d9      	ldr	r1, [r3, #28]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	691a      	ldr	r2, [r3, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
      break;
 8004ba8:	e021      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 facd 	bl	8005150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	021a      	lsls	r2, r3, #8
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	61da      	str	r2, [r3, #28]
      break;
 8004bea:	e000      	b.n	8004bee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_ConfigClockSource+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e0b3      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x180>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c50:	d03e      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0xd0>
 8004c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c56:	f200 8087 	bhi.w	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5e:	f000 8085 	beq.w	8004d6c <HAL_TIM_ConfigClockSource+0x16c>
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	d87f      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c68:	2b70      	cmp	r3, #112	; 0x70
 8004c6a:	d01a      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0xa2>
 8004c6c:	2b70      	cmp	r3, #112	; 0x70
 8004c6e:	d87b      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c70:	2b60      	cmp	r3, #96	; 0x60
 8004c72:	d050      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0x116>
 8004c74:	2b60      	cmp	r3, #96	; 0x60
 8004c76:	d877      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c78:	2b50      	cmp	r3, #80	; 0x50
 8004c7a:	d03c      	beq.n	8004cf6 <HAL_TIM_ConfigClockSource+0xf6>
 8004c7c:	2b50      	cmp	r3, #80	; 0x50
 8004c7e:	d873      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c80:	2b40      	cmp	r3, #64	; 0x40
 8004c82:	d058      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x136>
 8004c84:	2b40      	cmp	r3, #64	; 0x40
 8004c86:	d86f      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d064      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x156>
 8004c8c:	2b30      	cmp	r3, #48	; 0x30
 8004c8e:	d86b      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	d060      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x156>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d867      	bhi.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05c      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x156>
 8004c9c:	2b10      	cmp	r3, #16
 8004c9e:	d05a      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ca0:	e062      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6818      	ldr	r0, [r3, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f000 fb17 	bl	80052e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	609a      	str	r2, [r3, #8]
      break;
 8004cce:	e04e      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6899      	ldr	r1, [r3, #8]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f000 fb00 	bl	80052e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf2:	609a      	str	r2, [r3, #8]
      break;
 8004cf4:	e03b      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	6859      	ldr	r1, [r3, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f000 fa74 	bl	80051f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2150      	movs	r1, #80	; 0x50
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 facd 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d14:	e02b      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 fa93 	bl	800524e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2160      	movs	r1, #96	; 0x60
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fabd 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d34:	e01b      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 fa54 	bl	80051f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2140      	movs	r1, #64	; 0x40
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 faad 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d54:	e00b      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f000 faa4 	bl	80052ae <TIM_ITRx_SetConfig>
        break;
 8004d66:	e002      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d68:	bf00      	nop
 8004d6a:	e000      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004d6c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <TIM_Base_SetConfig+0xe4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00f      	beq.n	8004e10 <TIM_Base_SetConfig+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df6:	d00b      	beq.n	8004e10 <TIM_Base_SetConfig+0x38>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a31      	ldr	r2, [pc, #196]	; (8004ec0 <TIM_Base_SetConfig+0xe8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_Base_SetConfig+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a30      	ldr	r2, [pc, #192]	; (8004ec4 <TIM_Base_SetConfig+0xec>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_Base_SetConfig+0x38>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2f      	ldr	r2, [pc, #188]	; (8004ec8 <TIM_Base_SetConfig+0xf0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d108      	bne.n	8004e22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a25      	ldr	r2, [pc, #148]	; (8004ebc <TIM_Base_SetConfig+0xe4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01b      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d017      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <TIM_Base_SetConfig+0xe8>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <TIM_Base_SetConfig+0xec>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <TIM_Base_SetConfig+0xf0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ecc <TIM_Base_SetConfig+0xf4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a1e      	ldr	r2, [pc, #120]	; (8004ed0 <TIM_Base_SetConfig+0xf8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0x8a>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <TIM_Base_SetConfig+0xfc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a08      	ldr	r2, [pc, #32]	; (8004ebc <TIM_Base_SetConfig+0xe4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d103      	bne.n	8004ea8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	615a      	str	r2, [r3, #20]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40014000 	.word	0x40014000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800

08004ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b087      	sub	sp, #28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f023 0302 	bic.w	r3, r3, #2
 8004f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1c      	ldr	r2, [pc, #112]	; (8004fa0 <TIM_OC1_SetConfig+0xc8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10c      	bne.n	8004f4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0308 	bic.w	r3, r3, #8
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <TIM_OC1_SetConfig+0xc8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d111      	bne.n	8004f7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	621a      	str	r2, [r3, #32]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	40010000 	.word	0x40010000

08004fa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0210 	bic.w	r2, r3, #16
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	f023 0320 	bic.w	r3, r3, #32
 8004fee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <TIM_OC2_SetConfig+0xd4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d10d      	bne.n	8005020 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800500a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a15      	ldr	r2, [pc, #84]	; (8005078 <TIM_OC2_SetConfig+0xd4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d113      	bne.n	8005050 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800502e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005036:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40010000 	.word	0x40010000

0800507c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <TIM_OC3_SetConfig+0xd0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a14      	ldr	r2, [pc, #80]	; (800514c <TIM_OC3_SetConfig+0xd0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d113      	bne.n	8005126 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005104:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800510c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	621a      	str	r2, [r3, #32]
}
 8005140:	bf00      	nop
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	40010000 	.word	0x40010000

08005150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800517e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800519a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	031b      	lsls	r3, r3, #12
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a10      	ldr	r2, [pc, #64]	; (80051ec <TIM_OC4_SetConfig+0x9c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d109      	bne.n	80051c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	40010000 	.word	0x40010000

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524e:	b480      	push	{r7}
 8005250:	b087      	sub	sp, #28
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f023 0210 	bic.w	r2, r3, #16
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005278:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800528a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	431a      	orrs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4313      	orrs	r3, r2
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2201      	movs	r2, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a1a      	ldr	r2, [r3, #32]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	43db      	mvns	r3, r3
 8005346:	401a      	ands	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 031f 	and.w	r3, r3, #31
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	fa01 f303 	lsl.w	r3, r1, r3
 800535c:	431a      	orrs	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	621a      	str	r2, [r3, #32]
}
 8005362:	bf00      	nop
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005384:	2302      	movs	r3, #2
 8005386:	e050      	b.n	800542a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d018      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d4:	d013      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a18      	ldr	r2, [pc, #96]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00e      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d009      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d004      	beq.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d10c      	bne.n	8005418 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4313      	orrs	r3, r2
 800540e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40014000 	.word	0x40014000

0800544c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e03f      	b.n	8005506 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fd f814 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2224      	movs	r2, #36	; 0x24
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fca3 	bl	8005e04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695a      	ldr	r2, [r3, #20]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	4613      	mov	r3, r2
 800551a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b20      	cmp	r3, #32
 8005526:	d11d      	bne.n	8005564 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_UART_Receive_DMA+0x26>
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e016      	b.n	8005566 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_UART_Receive_DMA+0x38>
 8005542:	2302      	movs	r3, #2
 8005544:	e00f      	b.n	8005566 <HAL_UART_Receive_DMA+0x58>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	461a      	mov	r2, r3
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 fa98 	bl	8005a90 <UART_Start_Receive_DMA>
 8005560:	4603      	mov	r3, r0
 8005562:	e000      	b.n	8005566 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005564:	2302      	movs	r3, #2
  }
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
	...

08005570 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10d      	bne.n	80055c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d008      	beq.n	80055c2 <HAL_UART_IRQHandler+0x52>
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	f003 0320 	and.w	r3, r3, #32
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fb8b 	bl	8005cd6 <UART_Receive_IT>
      return;
 80055c0:	e17c      	b.n	80058bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80b1 	beq.w	800572c <HAL_UART_IRQHandler+0x1bc>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <HAL_UART_IRQHandler+0x70>
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a6 	beq.w	800572c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <HAL_UART_IRQHandler+0x90>
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f8:	f043 0201 	orr.w	r2, r3, #1
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_UART_IRQHandler+0xb0>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d005      	beq.n	8005620 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f043 0202 	orr.w	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_UART_IRQHandler+0xd0>
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	f043 0204 	orr.w	r2, r3, #4
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00f      	beq.n	800566a <HAL_UART_IRQHandler+0xfa>
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <HAL_UART_IRQHandler+0xee>
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0208 	orr.w	r2, r3, #8
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 811f 	beq.w	80058b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_UART_IRQHandler+0x11e>
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb24 	bl	8005cd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d102      	bne.n	80056b6 <HAL_UART_IRQHandler+0x146>
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d031      	beq.n	800571a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fa64 	bl	8005b84 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c6:	2b40      	cmp	r3, #64	; 0x40
 80056c8:	d123      	bne.n	8005712 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695a      	ldr	r2, [r3, #20]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d013      	beq.n	800570a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	4a77      	ldr	r2, [pc, #476]	; (80058c4 <HAL_UART_IRQHandler+0x354>)
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fd fb70 	bl	8002dd4 <HAL_DMA_Abort_IT>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d016      	beq.n	8005728 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005704:	4610      	mov	r0, r2
 8005706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005708:	e00e      	b.n	8005728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8fa 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	e00a      	b.n	8005728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f8f6 	bl	8005904 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005718:	e006      	b.n	8005728 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8f2 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005726:	e0c4      	b.n	80058b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	bf00      	nop
    return;
 800572a:	e0c2      	b.n	80058b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005730:	2b01      	cmp	r3, #1
 8005732:	f040 80a2 	bne.w	800587a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 809c 	beq.w	800587a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8096 	beq.w	800587a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b40      	cmp	r3, #64	; 0x40
 8005770:	d14f      	bne.n	8005812 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800577c:	8a3b      	ldrh	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8099 	beq.w	80058b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005788:	8a3a      	ldrh	r2, [r7, #16]
 800578a:	429a      	cmp	r2, r3
 800578c:	f080 8093 	bcs.w	80058b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8a3a      	ldrh	r2, [r7, #16]
 8005794:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057a0:	d02b      	beq.n	80057fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68da      	ldr	r2, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0201 	bic.w	r2, r2, #1
 80057c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0210 	bic.w	r2, r2, #16
 80057ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd fa7d 	bl	8002cf4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005802:	b29b      	uxth	r3, r3
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f884 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005810:	e051      	b.n	80058b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581a:	b29b      	uxth	r3, r3
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d047      	beq.n	80058ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800582a:	8a7b      	ldrh	r3, [r7, #18]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d044      	beq.n	80058ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68da      	ldr	r2, [r3, #12]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800583e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695a      	ldr	r2, [r3, #20]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0201 	bic.w	r2, r2, #1
 800584e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0210 	bic.w	r2, r2, #16
 800586c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800586e:	8a7b      	ldrh	r3, [r7, #18]
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f850 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005878:	e01f      	b.n	80058ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x326>
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f9b9 	bl	8005c06 <UART_Transmit_IT>
    return;
 8005894:	e012      	b.n	80058bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_UART_IRQHandler+0x34c>
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d008      	beq.n	80058bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9fb 	bl	8005ca6 <UART_EndTransmit_IT>
    return;
 80058b0:	e004      	b.n	80058bc <HAL_UART_IRQHandler+0x34c>
    return;
 80058b2:	bf00      	nop
 80058b4:	e002      	b.n	80058bc <HAL_UART_IRQHandler+0x34c>
      return;
 80058b6:	bf00      	nop
 80058b8:	e000      	b.n	80058bc <HAL_UART_IRQHandler+0x34c>
      return;
 80058ba:	bf00      	nop
  }
}
 80058bc:	3728      	adds	r7, #40	; 0x28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	08005bdf 	.word	0x08005bdf

080058c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d12a      	bne.n	80059a2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005960:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695a      	ldr	r2, [r3, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0201 	bic.w	r2, r2, #1
 8005970:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005980:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f022 0210 	bic.w	r2, r2, #16
 80059a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d106      	bne.n	80059b8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ae:	4619      	mov	r1, r3
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ffb1 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059b6:	e002      	b.n	80059be <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff8f 	bl	80058dc <HAL_UART_RxCpltCallback>
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d108      	bne.n	80059ee <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4619      	mov	r1, r3
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff ff96 	bl	8005918 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80059ec:	e002      	b.n	80059f4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f7ff ff7e 	bl	80058f0 <HAL_UART_RxHalfCpltCallback>
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b80      	cmp	r3, #128	; 0x80
 8005a1a:	bf0c      	ite	eq
 8005a1c:	2301      	moveq	r3, #1
 8005a1e:	2300      	movne	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b21      	cmp	r3, #33	; 0x21
 8005a2e:	d108      	bne.n	8005a42 <UART_DMAError+0x46>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a3c:	68b8      	ldr	r0, [r7, #8]
 8005a3e:	f000 f88b 	bl	8005b58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b40      	cmp	r3, #64	; 0x40
 8005a4e:	bf0c      	ite	eq
 8005a50:	2301      	moveq	r3, #1
 8005a52:	2300      	movne	r3, #0
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b22      	cmp	r3, #34	; 0x22
 8005a62:	d108      	bne.n	8005a76 <UART_DMAError+0x7a>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a70:	68b8      	ldr	r0, [r7, #8]
 8005a72:	f000 f887 	bl	8005b84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f043 0210 	orr.w	r2, r3, #16
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a82:	68b8      	ldr	r0, [r7, #8]
 8005a84:	f7ff ff3e 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2222      	movs	r2, #34	; 0x22
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	4a23      	ldr	r2, [pc, #140]	; (8005b4c <UART_Start_Receive_DMA+0xbc>)
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <UART_Start_Receive_DMA+0xc0>)
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	4a21      	ldr	r2, [pc, #132]	; (8005b54 <UART_Start_Receive_DMA+0xc4>)
 8005ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f7fd f8a8 	bl	8002c44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005af4:	2300      	movs	r3, #0
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68da      	ldr	r2, [r3, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b20:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0201 	orr.w	r2, r2, #1
 8005b30:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	695a      	ldr	r2, [r3, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b40:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08005931 	.word	0x08005931
 8005b50:	080059c7 	.word	0x080059c7
 8005b54:	080059fd 	.word	0x080059fd

08005b58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b6e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0201 	bic.w	r2, r2, #1
 8005baa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d107      	bne.n	8005bc4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
 8005bc2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bd2:	bf00      	nop
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff fe83 	bl	8005904 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bfe:	bf00      	nop
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b21      	cmp	r3, #33	; 0x21
 8005c18:	d13e      	bne.n	8005c98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c22:	d114      	bne.n	8005c4e <UART_Transmit_IT+0x48>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d110      	bne.n	8005c4e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	1c9a      	adds	r2, r3, #2
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	621a      	str	r2, [r3, #32]
 8005c4c:	e008      	b.n	8005c60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6211      	str	r1, [r2, #32]
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10f      	bne.n	8005c94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	e000      	b.n	8005c9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c98:	2302      	movs	r3, #2
  }
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fdfe 	bl	80058c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b22      	cmp	r3, #34	; 0x22
 8005ce8:	f040 8087 	bne.w	8005dfa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf4:	d117      	bne.n	8005d26 <UART_Receive_IT+0x50>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	1c9a      	adds	r2, r3, #2
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	629a      	str	r2, [r3, #40]	; 0x28
 8005d24:	e026      	b.n	8005d74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d38:	d007      	beq.n	8005d4a <UART_Receive_IT+0x74>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <UART_Receive_IT+0x82>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d106      	bne.n	8005d58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	e008      	b.n	8005d6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	4619      	mov	r1, r3
 8005d82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d136      	bne.n	8005df6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0220 	bic.w	r2, r2, #32
 8005d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10e      	bne.n	8005de6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0210 	bic.w	r2, r2, #16
 8005dd6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fd9a 	bl	8005918 <HAL_UARTEx_RxEventCallback>
 8005de4:	e002      	b.n	8005dec <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fd78 	bl	80058dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e002      	b.n	8005dfc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	e000      	b.n	8005dfc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005dfa:	2302      	movs	r3, #2
  }
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e08:	b09f      	sub	sp, #124	; 0x7c
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	68d9      	ldr	r1, [r3, #12]
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	ea40 0301 	orr.w	r3, r0, r1
 8005e24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e48:	f021 010c 	bic.w	r1, r1, #12
 8005e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e52:	430b      	orrs	r3, r1
 8005e54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e62:	6999      	ldr	r1, [r3, #24]
 8005e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	ea40 0301 	orr.w	r3, r0, r1
 8005e6c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4bc5      	ldr	r3, [pc, #788]	; (8006188 <UART_SetConfig+0x384>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d004      	beq.n	8005e82 <UART_SetConfig+0x7e>
 8005e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	4bc3      	ldr	r3, [pc, #780]	; (800618c <UART_SetConfig+0x388>)
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d103      	bne.n	8005e8a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e82:	f7fe f999 	bl	80041b8 <HAL_RCC_GetPCLK2Freq>
 8005e86:	6778      	str	r0, [r7, #116]	; 0x74
 8005e88:	e002      	b.n	8005e90 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e8a:	f7fe f981 	bl	8004190 <HAL_RCC_GetPCLK1Freq>
 8005e8e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e92:	69db      	ldr	r3, [r3, #28]
 8005e94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e98:	f040 80b6 	bne.w	8006008 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	f04f 0500 	mov.w	r5, #0
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	6439      	str	r1, [r7, #64]	; 0x40
 8005eac:	415b      	adcs	r3, r3
 8005eae:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eb4:	1912      	adds	r2, r2, r4
 8005eb6:	eb45 0303 	adc.w	r3, r5, r3
 8005eba:	f04f 0000 	mov.w	r0, #0
 8005ebe:	f04f 0100 	mov.w	r1, #0
 8005ec2:	00d9      	lsls	r1, r3, #3
 8005ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec8:	00d0      	lsls	r0, r2, #3
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	1911      	adds	r1, r2, r4
 8005ed0:	6639      	str	r1, [r7, #96]	; 0x60
 8005ed2:	416b      	adcs	r3, r5
 8005ed4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	461a      	mov	r2, r3
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	1891      	adds	r1, r2, r2
 8005ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ee4:	415b      	adcs	r3, r3
 8005ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ee8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005eec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ef0:	f7fa fa80 	bl	80003f4 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4ba5      	ldr	r3, [pc, #660]	; (8006190 <UART_SetConfig+0x38c>)
 8005efa:	fba3 2302 	umull	r2, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	011e      	lsls	r6, r3, #4
 8005f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f04:	461c      	mov	r4, r3
 8005f06:	f04f 0500 	mov.w	r5, #0
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	462b      	mov	r3, r5
 8005f0e:	1891      	adds	r1, r2, r2
 8005f10:	6339      	str	r1, [r7, #48]	; 0x30
 8005f12:	415b      	adcs	r3, r3
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f1a:	1912      	adds	r2, r2, r4
 8005f1c:	eb45 0303 	adc.w	r3, r5, r3
 8005f20:	f04f 0000 	mov.w	r0, #0
 8005f24:	f04f 0100 	mov.w	r1, #0
 8005f28:	00d9      	lsls	r1, r3, #3
 8005f2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f2e:	00d0      	lsls	r0, r2, #3
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	1911      	adds	r1, r2, r4
 8005f36:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f38:	416b      	adcs	r3, r5
 8005f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	461a      	mov	r2, r3
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	62b9      	str	r1, [r7, #40]	; 0x28
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f52:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005f56:	f7fa fa4d 	bl	80003f4 <__aeabi_uldivmod>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4b8c      	ldr	r3, [pc, #560]	; (8006190 <UART_SetConfig+0x38c>)
 8005f60:	fba3 1302 	umull	r1, r3, r3, r2
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	2164      	movs	r1, #100	; 0x64
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	00db      	lsls	r3, r3, #3
 8005f70:	3332      	adds	r3, #50	; 0x32
 8005f72:	4a87      	ldr	r2, [pc, #540]	; (8006190 <UART_SetConfig+0x38c>)
 8005f74:	fba2 2303 	umull	r2, r3, r2, r3
 8005f78:	095b      	lsrs	r3, r3, #5
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f80:	441e      	add	r6, r3
 8005f82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f84:	4618      	mov	r0, r3
 8005f86:	f04f 0100 	mov.w	r1, #0
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	1894      	adds	r4, r2, r2
 8005f90:	623c      	str	r4, [r7, #32]
 8005f92:	415b      	adcs	r3, r3
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f9a:	1812      	adds	r2, r2, r0
 8005f9c:	eb41 0303 	adc.w	r3, r1, r3
 8005fa0:	f04f 0400 	mov.w	r4, #0
 8005fa4:	f04f 0500 	mov.w	r5, #0
 8005fa8:	00dd      	lsls	r5, r3, #3
 8005faa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fae:	00d4      	lsls	r4, r2, #3
 8005fb0:	4622      	mov	r2, r4
 8005fb2:	462b      	mov	r3, r5
 8005fb4:	1814      	adds	r4, r2, r0
 8005fb6:	653c      	str	r4, [r7, #80]	; 0x50
 8005fb8:	414b      	adcs	r3, r1
 8005fba:	657b      	str	r3, [r7, #84]	; 0x54
 8005fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	1891      	adds	r1, r2, r2
 8005fc8:	61b9      	str	r1, [r7, #24]
 8005fca:	415b      	adcs	r3, r3
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005fd6:	f7fa fa0d 	bl	80003f4 <__aeabi_uldivmod>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4b6c      	ldr	r3, [pc, #432]	; (8006190 <UART_SetConfig+0x38c>)
 8005fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	2164      	movs	r1, #100	; 0x64
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	3332      	adds	r3, #50	; 0x32
 8005ff2:	4a67      	ldr	r2, [pc, #412]	; (8006190 <UART_SetConfig+0x38c>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	f003 0207 	and.w	r2, r3, #7
 8005ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4432      	add	r2, r6
 8006004:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006006:	e0b9      	b.n	800617c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006008:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600a:	461c      	mov	r4, r3
 800600c:	f04f 0500 	mov.w	r5, #0
 8006010:	4622      	mov	r2, r4
 8006012:	462b      	mov	r3, r5
 8006014:	1891      	adds	r1, r2, r2
 8006016:	6139      	str	r1, [r7, #16]
 8006018:	415b      	adcs	r3, r3
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006020:	1912      	adds	r2, r2, r4
 8006022:	eb45 0303 	adc.w	r3, r5, r3
 8006026:	f04f 0000 	mov.w	r0, #0
 800602a:	f04f 0100 	mov.w	r1, #0
 800602e:	00d9      	lsls	r1, r3, #3
 8006030:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006034:	00d0      	lsls	r0, r2, #3
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	eb12 0804 	adds.w	r8, r2, r4
 800603e:	eb43 0905 	adc.w	r9, r3, r5
 8006042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4618      	mov	r0, r3
 8006048:	f04f 0100 	mov.w	r1, #0
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	008b      	lsls	r3, r1, #2
 8006056:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800605a:	0082      	lsls	r2, r0, #2
 800605c:	4640      	mov	r0, r8
 800605e:	4649      	mov	r1, r9
 8006060:	f7fa f9c8 	bl	80003f4 <__aeabi_uldivmod>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b49      	ldr	r3, [pc, #292]	; (8006190 <UART_SetConfig+0x38c>)
 800606a:	fba3 2302 	umull	r2, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	011e      	lsls	r6, r3, #4
 8006072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006074:	4618      	mov	r0, r3
 8006076:	f04f 0100 	mov.w	r1, #0
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	1894      	adds	r4, r2, r2
 8006080:	60bc      	str	r4, [r7, #8]
 8006082:	415b      	adcs	r3, r3
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800608a:	1812      	adds	r2, r2, r0
 800608c:	eb41 0303 	adc.w	r3, r1, r3
 8006090:	f04f 0400 	mov.w	r4, #0
 8006094:	f04f 0500 	mov.w	r5, #0
 8006098:	00dd      	lsls	r5, r3, #3
 800609a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800609e:	00d4      	lsls	r4, r2, #3
 80060a0:	4622      	mov	r2, r4
 80060a2:	462b      	mov	r3, r5
 80060a4:	1814      	adds	r4, r2, r0
 80060a6:	64bc      	str	r4, [r7, #72]	; 0x48
 80060a8:	414b      	adcs	r3, r1
 80060aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f04f 0100 	mov.w	r1, #0
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	008b      	lsls	r3, r1, #2
 80060c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060c4:	0082      	lsls	r2, r0, #2
 80060c6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80060ca:	f7fa f993 	bl	80003f4 <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4b2f      	ldr	r3, [pc, #188]	; (8006190 <UART_SetConfig+0x38c>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	2164      	movs	r1, #100	; 0x64
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	3332      	adds	r3, #50	; 0x32
 80060e6:	4a2a      	ldr	r2, [pc, #168]	; (8006190 <UART_SetConfig+0x38c>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060f2:	441e      	add	r6, r3
 80060f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060f6:	4618      	mov	r0, r3
 80060f8:	f04f 0100 	mov.w	r1, #0
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	1894      	adds	r4, r2, r2
 8006102:	603c      	str	r4, [r7, #0]
 8006104:	415b      	adcs	r3, r3
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610c:	1812      	adds	r2, r2, r0
 800610e:	eb41 0303 	adc.w	r3, r1, r3
 8006112:	f04f 0400 	mov.w	r4, #0
 8006116:	f04f 0500 	mov.w	r5, #0
 800611a:	00dd      	lsls	r5, r3, #3
 800611c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006120:	00d4      	lsls	r4, r2, #3
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	eb12 0a00 	adds.w	sl, r2, r0
 800612a:	eb43 0b01 	adc.w	fp, r3, r1
 800612e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	f04f 0100 	mov.w	r1, #0
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	008b      	lsls	r3, r1, #2
 8006142:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006146:	0082      	lsls	r2, r0, #2
 8006148:	4650      	mov	r0, sl
 800614a:	4659      	mov	r1, fp
 800614c:	f7fa f952 	bl	80003f4 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4b0e      	ldr	r3, [pc, #56]	; (8006190 <UART_SetConfig+0x38c>)
 8006156:	fba3 1302 	umull	r1, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2164      	movs	r1, #100	; 0x64
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	3332      	adds	r3, #50	; 0x32
 8006168:	4a09      	ldr	r2, [pc, #36]	; (8006190 <UART_SetConfig+0x38c>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4432      	add	r2, r6
 800617a:	609a      	str	r2, [r3, #8]
}
 800617c:	bf00      	nop
 800617e:	377c      	adds	r7, #124	; 0x7c
 8006180:	46bd      	mov	sp, r7
 8006182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006186:	bf00      	nop
 8006188:	40011000 	.word	0x40011000
 800618c:	40011400 	.word	0x40011400
 8006190:	51eb851f 	.word	0x51eb851f

08006194 <calloc>:
 8006194:	4b02      	ldr	r3, [pc, #8]	; (80061a0 <calloc+0xc>)
 8006196:	460a      	mov	r2, r1
 8006198:	4601      	mov	r1, r0
 800619a:	6818      	ldr	r0, [r3, #0]
 800619c:	f000 b834 	b.w	8006208 <_calloc_r>
 80061a0:	20000030 	.word	0x20000030

080061a4 <__errno>:
 80061a4:	4b01      	ldr	r3, [pc, #4]	; (80061ac <__errno+0x8>)
 80061a6:	6818      	ldr	r0, [r3, #0]
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000030 	.word	0x20000030

080061b0 <__libc_init_array>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	4d0d      	ldr	r5, [pc, #52]	; (80061e8 <__libc_init_array+0x38>)
 80061b4:	4c0d      	ldr	r4, [pc, #52]	; (80061ec <__libc_init_array+0x3c>)
 80061b6:	1b64      	subs	r4, r4, r5
 80061b8:	10a4      	asrs	r4, r4, #2
 80061ba:	2600      	movs	r6, #0
 80061bc:	42a6      	cmp	r6, r4
 80061be:	d109      	bne.n	80061d4 <__libc_init_array+0x24>
 80061c0:	4d0b      	ldr	r5, [pc, #44]	; (80061f0 <__libc_init_array+0x40>)
 80061c2:	4c0c      	ldr	r4, [pc, #48]	; (80061f4 <__libc_init_array+0x44>)
 80061c4:	f000 fd12 	bl	8006bec <_init>
 80061c8:	1b64      	subs	r4, r4, r5
 80061ca:	10a4      	asrs	r4, r4, #2
 80061cc:	2600      	movs	r6, #0
 80061ce:	42a6      	cmp	r6, r4
 80061d0:	d105      	bne.n	80061de <__libc_init_array+0x2e>
 80061d2:	bd70      	pop	{r4, r5, r6, pc}
 80061d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d8:	4798      	blx	r3
 80061da:	3601      	adds	r6, #1
 80061dc:	e7ee      	b.n	80061bc <__libc_init_array+0xc>
 80061de:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e2:	4798      	blx	r3
 80061e4:	3601      	adds	r6, #1
 80061e6:	e7f2      	b.n	80061ce <__libc_init_array+0x1e>
 80061e8:	08006c5c 	.word	0x08006c5c
 80061ec:	08006c5c 	.word	0x08006c5c
 80061f0:	08006c5c 	.word	0x08006c5c
 80061f4:	08006c60 	.word	0x08006c60

080061f8 <memset>:
 80061f8:	4402      	add	r2, r0
 80061fa:	4603      	mov	r3, r0
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	f803 1b01 	strb.w	r1, [r3], #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <_calloc_r>:
 8006208:	b513      	push	{r0, r1, r4, lr}
 800620a:	434a      	muls	r2, r1
 800620c:	4611      	mov	r1, r2
 800620e:	9201      	str	r2, [sp, #4]
 8006210:	f000 f80a 	bl	8006228 <_malloc_r>
 8006214:	4604      	mov	r4, r0
 8006216:	b118      	cbz	r0, 8006220 <_calloc_r+0x18>
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	2100      	movs	r1, #0
 800621c:	f7ff ffec 	bl	80061f8 <memset>
 8006220:	4620      	mov	r0, r4
 8006222:	b002      	add	sp, #8
 8006224:	bd10      	pop	{r4, pc}
	...

08006228 <_malloc_r>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	1ccd      	adds	r5, r1, #3
 800622c:	f025 0503 	bic.w	r5, r5, #3
 8006230:	3508      	adds	r5, #8
 8006232:	2d0c      	cmp	r5, #12
 8006234:	bf38      	it	cc
 8006236:	250c      	movcc	r5, #12
 8006238:	2d00      	cmp	r5, #0
 800623a:	4606      	mov	r6, r0
 800623c:	db01      	blt.n	8006242 <_malloc_r+0x1a>
 800623e:	42a9      	cmp	r1, r5
 8006240:	d903      	bls.n	800624a <_malloc_r+0x22>
 8006242:	230c      	movs	r3, #12
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	2000      	movs	r0, #0
 8006248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624a:	f000 f857 	bl	80062fc <__malloc_lock>
 800624e:	4921      	ldr	r1, [pc, #132]	; (80062d4 <_malloc_r+0xac>)
 8006250:	680a      	ldr	r2, [r1, #0]
 8006252:	4614      	mov	r4, r2
 8006254:	b99c      	cbnz	r4, 800627e <_malloc_r+0x56>
 8006256:	4f20      	ldr	r7, [pc, #128]	; (80062d8 <_malloc_r+0xb0>)
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	b923      	cbnz	r3, 8006266 <_malloc_r+0x3e>
 800625c:	4621      	mov	r1, r4
 800625e:	4630      	mov	r0, r6
 8006260:	f000 f83c 	bl	80062dc <_sbrk_r>
 8006264:	6038      	str	r0, [r7, #0]
 8006266:	4629      	mov	r1, r5
 8006268:	4630      	mov	r0, r6
 800626a:	f000 f837 	bl	80062dc <_sbrk_r>
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	d123      	bne.n	80062ba <_malloc_r+0x92>
 8006272:	230c      	movs	r3, #12
 8006274:	6033      	str	r3, [r6, #0]
 8006276:	4630      	mov	r0, r6
 8006278:	f000 f846 	bl	8006308 <__malloc_unlock>
 800627c:	e7e3      	b.n	8006246 <_malloc_r+0x1e>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	1b5b      	subs	r3, r3, r5
 8006282:	d417      	bmi.n	80062b4 <_malloc_r+0x8c>
 8006284:	2b0b      	cmp	r3, #11
 8006286:	d903      	bls.n	8006290 <_malloc_r+0x68>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	441c      	add	r4, r3
 800628c:	6025      	str	r5, [r4, #0]
 800628e:	e004      	b.n	800629a <_malloc_r+0x72>
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	42a2      	cmp	r2, r4
 8006294:	bf0c      	ite	eq
 8006296:	600b      	streq	r3, [r1, #0]
 8006298:	6053      	strne	r3, [r2, #4]
 800629a:	4630      	mov	r0, r6
 800629c:	f000 f834 	bl	8006308 <__malloc_unlock>
 80062a0:	f104 000b 	add.w	r0, r4, #11
 80062a4:	1d23      	adds	r3, r4, #4
 80062a6:	f020 0007 	bic.w	r0, r0, #7
 80062aa:	1ac2      	subs	r2, r0, r3
 80062ac:	d0cc      	beq.n	8006248 <_malloc_r+0x20>
 80062ae:	1a1b      	subs	r3, r3, r0
 80062b0:	50a3      	str	r3, [r4, r2]
 80062b2:	e7c9      	b.n	8006248 <_malloc_r+0x20>
 80062b4:	4622      	mov	r2, r4
 80062b6:	6864      	ldr	r4, [r4, #4]
 80062b8:	e7cc      	b.n	8006254 <_malloc_r+0x2c>
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d0e3      	beq.n	800628c <_malloc_r+0x64>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 f808 	bl	80062dc <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d1dd      	bne.n	800628c <_malloc_r+0x64>
 80062d0:	e7cf      	b.n	8006272 <_malloc_r+0x4a>
 80062d2:	bf00      	nop
 80062d4:	200001c0 	.word	0x200001c0
 80062d8:	200001c4 	.word	0x200001c4

080062dc <_sbrk_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4d06      	ldr	r5, [pc, #24]	; (80062f8 <_sbrk_r+0x1c>)
 80062e0:	2300      	movs	r3, #0
 80062e2:	4604      	mov	r4, r0
 80062e4:	4608      	mov	r0, r1
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	f7fc fa08 	bl	80026fc <_sbrk>
 80062ec:	1c43      	adds	r3, r0, #1
 80062ee:	d102      	bne.n	80062f6 <_sbrk_r+0x1a>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	b103      	cbz	r3, 80062f6 <_sbrk_r+0x1a>
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	bd38      	pop	{r3, r4, r5, pc}
 80062f8:	20000444 	.word	0x20000444

080062fc <__malloc_lock>:
 80062fc:	4801      	ldr	r0, [pc, #4]	; (8006304 <__malloc_lock+0x8>)
 80062fe:	f000 b809 	b.w	8006314 <__retarget_lock_acquire_recursive>
 8006302:	bf00      	nop
 8006304:	2000044c 	.word	0x2000044c

08006308 <__malloc_unlock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_unlock+0x8>)
 800630a:	f000 b804 	b.w	8006316 <__retarget_lock_release_recursive>
 800630e:	bf00      	nop
 8006310:	2000044c 	.word	0x2000044c

08006314 <__retarget_lock_acquire_recursive>:
 8006314:	4770      	bx	lr

08006316 <__retarget_lock_release_recursive>:
 8006316:	4770      	bx	lr

08006318 <powf>:
 8006318:	b508      	push	{r3, lr}
 800631a:	ed2d 8b04 	vpush	{d8-d9}
 800631e:	eeb0 9a40 	vmov.f32	s18, s0
 8006322:	eef0 8a60 	vmov.f32	s17, s1
 8006326:	f000 f8b5 	bl	8006494 <__ieee754_powf>
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <powf+0x120>)
 800632c:	f993 3000 	ldrsb.w	r3, [r3]
 8006330:	3301      	adds	r3, #1
 8006332:	eeb0 8a40 	vmov.f32	s16, s0
 8006336:	d012      	beq.n	800635e <powf+0x46>
 8006338:	eef4 8a68 	vcmp.f32	s17, s17
 800633c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006340:	d60d      	bvs.n	800635e <powf+0x46>
 8006342:	eeb4 9a49 	vcmp.f32	s18, s18
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	d70d      	bvc.n	8006368 <powf+0x50>
 800634c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006354:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006358:	bf08      	it	eq
 800635a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800635e:	eeb0 0a48 	vmov.f32	s0, s16
 8006362:	ecbd 8b04 	vpop	{d8-d9}
 8006366:	bd08      	pop	{r3, pc}
 8006368:	eddf 9a34 	vldr	s19, [pc, #208]	; 800643c <powf+0x124>
 800636c:	eeb4 9a69 	vcmp.f32	s18, s19
 8006370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006374:	d116      	bne.n	80063a4 <powf+0x8c>
 8006376:	eef4 8a69 	vcmp.f32	s17, s19
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	d057      	beq.n	8006430 <powf+0x118>
 8006380:	eeb0 0a68 	vmov.f32	s0, s17
 8006384:	f000 fb50 	bl	8006a28 <finitef>
 8006388:	2800      	cmp	r0, #0
 800638a:	d0e8      	beq.n	800635e <powf+0x46>
 800638c:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006394:	d5e3      	bpl.n	800635e <powf+0x46>
 8006396:	f7ff ff05 	bl	80061a4 <__errno>
 800639a:	2321      	movs	r3, #33	; 0x21
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8006440 <powf+0x128>
 80063a2:	e7dc      	b.n	800635e <powf+0x46>
 80063a4:	f000 fb40 	bl	8006a28 <finitef>
 80063a8:	bb50      	cbnz	r0, 8006400 <powf+0xe8>
 80063aa:	eeb0 0a49 	vmov.f32	s0, s18
 80063ae:	f000 fb3b 	bl	8006a28 <finitef>
 80063b2:	b328      	cbz	r0, 8006400 <powf+0xe8>
 80063b4:	eeb0 0a68 	vmov.f32	s0, s17
 80063b8:	f000 fb36 	bl	8006a28 <finitef>
 80063bc:	b300      	cbz	r0, 8006400 <powf+0xe8>
 80063be:	eeb4 8a48 	vcmp.f32	s16, s16
 80063c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c6:	d706      	bvc.n	80063d6 <powf+0xbe>
 80063c8:	f7ff feec 	bl	80061a4 <__errno>
 80063cc:	2321      	movs	r3, #33	; 0x21
 80063ce:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	e7c3      	b.n	800635e <powf+0x46>
 80063d6:	f7ff fee5 	bl	80061a4 <__errno>
 80063da:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80063de:	2322      	movs	r3, #34	; 0x22
 80063e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e4:	6003      	str	r3, [r0, #0]
 80063e6:	d508      	bpl.n	80063fa <powf+0xe2>
 80063e8:	eeb0 0a68 	vmov.f32	s0, s17
 80063ec:	f000 fb30 	bl	8006a50 <rintf>
 80063f0:	eeb4 0a68 	vcmp.f32	s0, s17
 80063f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f8:	d1d1      	bne.n	800639e <powf+0x86>
 80063fa:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8006444 <powf+0x12c>
 80063fe:	e7ae      	b.n	800635e <powf+0x46>
 8006400:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006408:	d1a9      	bne.n	800635e <powf+0x46>
 800640a:	eeb0 0a49 	vmov.f32	s0, s18
 800640e:	f000 fb0b 	bl	8006a28 <finitef>
 8006412:	2800      	cmp	r0, #0
 8006414:	d0a3      	beq.n	800635e <powf+0x46>
 8006416:	eeb0 0a68 	vmov.f32	s0, s17
 800641a:	f000 fb05 	bl	8006a28 <finitef>
 800641e:	2800      	cmp	r0, #0
 8006420:	d09d      	beq.n	800635e <powf+0x46>
 8006422:	f7ff febf 	bl	80061a4 <__errno>
 8006426:	2322      	movs	r3, #34	; 0x22
 8006428:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800643c <powf+0x124>
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	e796      	b.n	800635e <powf+0x46>
 8006430:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006434:	e793      	b.n	800635e <powf+0x46>
 8006436:	bf00      	nop
 8006438:	20000094 	.word	0x20000094
 800643c:	00000000 	.word	0x00000000
 8006440:	ff800000 	.word	0xff800000
 8006444:	7f800000 	.word	0x7f800000

08006448 <sqrtf>:
 8006448:	b508      	push	{r3, lr}
 800644a:	ed2d 8b02 	vpush	{d8}
 800644e:	eeb0 8a40 	vmov.f32	s16, s0
 8006452:	f000 fadf 	bl	8006a14 <__ieee754_sqrtf>
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <sqrtf+0x44>)
 8006458:	f993 3000 	ldrsb.w	r3, [r3]
 800645c:	3301      	adds	r3, #1
 800645e:	d011      	beq.n	8006484 <sqrtf+0x3c>
 8006460:	eeb4 8a48 	vcmp.f32	s16, s16
 8006464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006468:	d60c      	bvs.n	8006484 <sqrtf+0x3c>
 800646a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006490 <sqrtf+0x48>
 800646e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	d505      	bpl.n	8006484 <sqrtf+0x3c>
 8006478:	f7ff fe94 	bl	80061a4 <__errno>
 800647c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006480:	2321      	movs	r3, #33	; 0x21
 8006482:	6003      	str	r3, [r0, #0]
 8006484:	ecbd 8b02 	vpop	{d8}
 8006488:	bd08      	pop	{r3, pc}
 800648a:	bf00      	nop
 800648c:	20000094 	.word	0x20000094
 8006490:	00000000 	.word	0x00000000

08006494 <__ieee754_powf>:
 8006494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006498:	ee10 5a90 	vmov	r5, s1
 800649c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80064a0:	ed2d 8b02 	vpush	{d8}
 80064a4:	eeb0 8a40 	vmov.f32	s16, s0
 80064a8:	eef0 8a60 	vmov.f32	s17, s1
 80064ac:	f000 8291 	beq.w	80069d2 <__ieee754_powf+0x53e>
 80064b0:	ee10 8a10 	vmov	r8, s0
 80064b4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80064b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80064bc:	dc06      	bgt.n	80064cc <__ieee754_powf+0x38>
 80064be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80064c2:	dd0a      	ble.n	80064da <__ieee754_powf+0x46>
 80064c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80064c8:	f000 8283 	beq.w	80069d2 <__ieee754_powf+0x53e>
 80064cc:	ecbd 8b02 	vpop	{d8}
 80064d0:	48d8      	ldr	r0, [pc, #864]	; (8006834 <__ieee754_powf+0x3a0>)
 80064d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	f000 bab5 	b.w	8006a44 <nanf>
 80064da:	f1b8 0f00 	cmp.w	r8, #0
 80064de:	da1f      	bge.n	8006520 <__ieee754_powf+0x8c>
 80064e0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80064e4:	da2e      	bge.n	8006544 <__ieee754_powf+0xb0>
 80064e6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80064ea:	f2c0 827b 	blt.w	80069e4 <__ieee754_powf+0x550>
 80064ee:	15fb      	asrs	r3, r7, #23
 80064f0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80064f4:	fa47 f603 	asr.w	r6, r7, r3
 80064f8:	fa06 f303 	lsl.w	r3, r6, r3
 80064fc:	42bb      	cmp	r3, r7
 80064fe:	f040 8271 	bne.w	80069e4 <__ieee754_powf+0x550>
 8006502:	f006 0601 	and.w	r6, r6, #1
 8006506:	f1c6 0602 	rsb	r6, r6, #2
 800650a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800650e:	d120      	bne.n	8006552 <__ieee754_powf+0xbe>
 8006510:	2d00      	cmp	r5, #0
 8006512:	f280 8264 	bge.w	80069de <__ieee754_powf+0x54a>
 8006516:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800651a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800651e:	e00d      	b.n	800653c <__ieee754_powf+0xa8>
 8006520:	2600      	movs	r6, #0
 8006522:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006526:	d1f0      	bne.n	800650a <__ieee754_powf+0x76>
 8006528:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800652c:	f000 8251 	beq.w	80069d2 <__ieee754_powf+0x53e>
 8006530:	dd0a      	ble.n	8006548 <__ieee754_powf+0xb4>
 8006532:	2d00      	cmp	r5, #0
 8006534:	f280 8250 	bge.w	80069d8 <__ieee754_powf+0x544>
 8006538:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006838 <__ieee754_powf+0x3a4>
 800653c:	ecbd 8b02 	vpop	{d8}
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	2602      	movs	r6, #2
 8006546:	e7ec      	b.n	8006522 <__ieee754_powf+0x8e>
 8006548:	2d00      	cmp	r5, #0
 800654a:	daf5      	bge.n	8006538 <__ieee754_powf+0xa4>
 800654c:	eeb1 0a68 	vneg.f32	s0, s17
 8006550:	e7f4      	b.n	800653c <__ieee754_powf+0xa8>
 8006552:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006556:	d102      	bne.n	800655e <__ieee754_powf+0xca>
 8006558:	ee28 0a08 	vmul.f32	s0, s16, s16
 800655c:	e7ee      	b.n	800653c <__ieee754_powf+0xa8>
 800655e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006562:	eeb0 0a48 	vmov.f32	s0, s16
 8006566:	d108      	bne.n	800657a <__ieee754_powf+0xe6>
 8006568:	f1b8 0f00 	cmp.w	r8, #0
 800656c:	db05      	blt.n	800657a <__ieee754_powf+0xe6>
 800656e:	ecbd 8b02 	vpop	{d8}
 8006572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006576:	f000 ba4d 	b.w	8006a14 <__ieee754_sqrtf>
 800657a:	f000 fa4e 	bl	8006a1a <fabsf>
 800657e:	b124      	cbz	r4, 800658a <__ieee754_powf+0xf6>
 8006580:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006584:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006588:	d117      	bne.n	80065ba <__ieee754_powf+0x126>
 800658a:	2d00      	cmp	r5, #0
 800658c:	bfbc      	itt	lt
 800658e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006592:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006596:	f1b8 0f00 	cmp.w	r8, #0
 800659a:	dacf      	bge.n	800653c <__ieee754_powf+0xa8>
 800659c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80065a0:	ea54 0306 	orrs.w	r3, r4, r6
 80065a4:	d104      	bne.n	80065b0 <__ieee754_powf+0x11c>
 80065a6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80065aa:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80065ae:	e7c5      	b.n	800653c <__ieee754_powf+0xa8>
 80065b0:	2e01      	cmp	r6, #1
 80065b2:	d1c3      	bne.n	800653c <__ieee754_powf+0xa8>
 80065b4:	eeb1 0a40 	vneg.f32	s0, s0
 80065b8:	e7c0      	b.n	800653c <__ieee754_powf+0xa8>
 80065ba:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80065be:	3801      	subs	r0, #1
 80065c0:	ea56 0300 	orrs.w	r3, r6, r0
 80065c4:	d104      	bne.n	80065d0 <__ieee754_powf+0x13c>
 80065c6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80065ca:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80065ce:	e7b5      	b.n	800653c <__ieee754_powf+0xa8>
 80065d0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80065d4:	dd6b      	ble.n	80066ae <__ieee754_powf+0x21a>
 80065d6:	4b99      	ldr	r3, [pc, #612]	; (800683c <__ieee754_powf+0x3a8>)
 80065d8:	429c      	cmp	r4, r3
 80065da:	dc06      	bgt.n	80065ea <__ieee754_powf+0x156>
 80065dc:	2d00      	cmp	r5, #0
 80065de:	daab      	bge.n	8006538 <__ieee754_powf+0xa4>
 80065e0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8006840 <__ieee754_powf+0x3ac>
 80065e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80065e8:	e7a8      	b.n	800653c <__ieee754_powf+0xa8>
 80065ea:	4b96      	ldr	r3, [pc, #600]	; (8006844 <__ieee754_powf+0x3b0>)
 80065ec:	429c      	cmp	r4, r3
 80065ee:	dd02      	ble.n	80065f6 <__ieee754_powf+0x162>
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	dcf5      	bgt.n	80065e0 <__ieee754_powf+0x14c>
 80065f4:	e7a0      	b.n	8006538 <__ieee754_powf+0xa4>
 80065f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80065fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80065fe:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006848 <__ieee754_powf+0x3b4>
 8006602:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006606:	eee0 6a67 	vfms.f32	s13, s0, s15
 800660a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800660e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006612:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800661a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800684c <__ieee754_powf+0x3b8>
 800661e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006622:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006850 <__ieee754_powf+0x3bc>
 8006626:	eee0 7a07 	vfma.f32	s15, s0, s14
 800662a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006854 <__ieee754_powf+0x3c0>
 800662e:	eef0 6a67 	vmov.f32	s13, s15
 8006632:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006636:	ee16 3a90 	vmov	r3, s13
 800663a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800663e:	f023 030f 	bic.w	r3, r3, #15
 8006642:	ee00 3a90 	vmov	s1, r3
 8006646:	eee0 0a47 	vfms.f32	s1, s0, s14
 800664a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800664e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006652:	f025 050f 	bic.w	r5, r5, #15
 8006656:	ee07 5a10 	vmov	s14, r5
 800665a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800665e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eee7 0a27 	vfma.f32	s1, s14, s15
 800666a:	3e01      	subs	r6, #1
 800666c:	ea56 0200 	orrs.w	r2, r6, r0
 8006670:	ee07 5a10 	vmov	s14, r5
 8006674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006678:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800667c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006680:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006684:	ee17 4a10 	vmov	r4, s14
 8006688:	bf08      	it	eq
 800668a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800668e:	2c00      	cmp	r4, #0
 8006690:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006694:	f340 8184 	ble.w	80069a0 <__ieee754_powf+0x50c>
 8006698:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800669c:	f340 80fc 	ble.w	8006898 <__ieee754_powf+0x404>
 80066a0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006840 <__ieee754_powf+0x3ac>
 80066a4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80066a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80066ac:	e746      	b.n	800653c <__ieee754_powf+0xa8>
 80066ae:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80066b2:	bf01      	itttt	eq
 80066b4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8006858 <__ieee754_powf+0x3c4>
 80066b8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80066bc:	f06f 0217 	mvneq.w	r2, #23
 80066c0:	ee17 4a90 	vmoveq	r4, s15
 80066c4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80066c8:	bf18      	it	ne
 80066ca:	2200      	movne	r2, #0
 80066cc:	3b7f      	subs	r3, #127	; 0x7f
 80066ce:	4413      	add	r3, r2
 80066d0:	4a62      	ldr	r2, [pc, #392]	; (800685c <__ieee754_powf+0x3c8>)
 80066d2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80066d6:	4294      	cmp	r4, r2
 80066d8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80066dc:	dd06      	ble.n	80066ec <__ieee754_powf+0x258>
 80066de:	4a60      	ldr	r2, [pc, #384]	; (8006860 <__ieee754_powf+0x3cc>)
 80066e0:	4294      	cmp	r4, r2
 80066e2:	f340 80a4 	ble.w	800682e <__ieee754_powf+0x39a>
 80066e6:	3301      	adds	r3, #1
 80066e8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80066ec:	2400      	movs	r4, #0
 80066ee:	4a5d      	ldr	r2, [pc, #372]	; (8006864 <__ieee754_powf+0x3d0>)
 80066f0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80066f4:	ee07 1a90 	vmov	s15, r1
 80066f8:	ed92 7a00 	vldr	s14, [r2]
 80066fc:	4a5a      	ldr	r2, [pc, #360]	; (8006868 <__ieee754_powf+0x3d4>)
 80066fe:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006702:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006706:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800670a:	1049      	asrs	r1, r1, #1
 800670c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006710:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006714:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006718:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800671c:	ee06 1a10 	vmov	s12, r1
 8006720:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006724:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006728:	ee14 7a90 	vmov	r7, s9
 800672c:	4017      	ands	r7, r2
 800672e:	ee05 7a90 	vmov	s11, r7
 8006732:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800673a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800686c <__ieee754_powf+0x3d8>
 800673e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006742:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006746:	ee25 6a26 	vmul.f32	s12, s10, s13
 800674a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006870 <__ieee754_powf+0x3dc>
 800674e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006752:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006874 <__ieee754_powf+0x3e0>
 8006756:	eee7 6a27 	vfma.f32	s13, s14, s15
 800675a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006848 <__ieee754_powf+0x3b4>
 800675e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006762:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006878 <__ieee754_powf+0x3e4>
 8006766:	eee7 6a27 	vfma.f32	s13, s14, s15
 800676a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800687c <__ieee754_powf+0x3e8>
 800676e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006772:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006776:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800677a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800677e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006782:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006786:	eef0 7a45 	vmov.f32	s15, s10
 800678a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800678e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006792:	ee17 1a90 	vmov	r1, s15
 8006796:	4011      	ands	r1, r2
 8006798:	ee07 1a90 	vmov	s15, r1
 800679c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80067a0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80067a4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80067a8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80067ac:	eea6 7a27 	vfma.f32	s14, s12, s15
 80067b0:	eeb0 6a47 	vmov.f32	s12, s14
 80067b4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80067b8:	ee16 1a10 	vmov	r1, s12
 80067bc:	4011      	ands	r1, r2
 80067be:	ee06 1a90 	vmov	s13, r1
 80067c2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80067c6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006880 <__ieee754_powf+0x3ec>
 80067ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006884 <__ieee754_powf+0x3f0>
 80067ce:	ee37 7a66 	vsub.f32	s14, s14, s13
 80067d2:	ee06 1a10 	vmov	s12, r1
 80067d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067da:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006888 <__ieee754_powf+0x3f4>
 80067de:	492b      	ldr	r1, [pc, #172]	; (800688c <__ieee754_powf+0x3f8>)
 80067e0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80067e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80067e8:	edd1 7a00 	vldr	s15, [r1]
 80067ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80067f0:	ee07 3a90 	vmov	s15, r3
 80067f4:	4b26      	ldr	r3, [pc, #152]	; (8006890 <__ieee754_powf+0x3fc>)
 80067f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80067fa:	eef0 7a47 	vmov.f32	s15, s14
 80067fe:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006806:	edd4 0a00 	vldr	s1, [r4]
 800680a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800680e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006812:	ee17 3a90 	vmov	r3, s15
 8006816:	4013      	ands	r3, r2
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006820:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006824:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006828:	ee77 7a66 	vsub.f32	s15, s14, s13
 800682c:	e70f      	b.n	800664e <__ieee754_powf+0x1ba>
 800682e:	2401      	movs	r4, #1
 8006830:	e75d      	b.n	80066ee <__ieee754_powf+0x25a>
 8006832:	bf00      	nop
 8006834:	08006c30 	.word	0x08006c30
 8006838:	00000000 	.word	0x00000000
 800683c:	3f7ffff7 	.word	0x3f7ffff7
 8006840:	7149f2ca 	.word	0x7149f2ca
 8006844:	3f800007 	.word	0x3f800007
 8006848:	3eaaaaab 	.word	0x3eaaaaab
 800684c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006850:	36eca570 	.word	0x36eca570
 8006854:	3fb8aa00 	.word	0x3fb8aa00
 8006858:	4b800000 	.word	0x4b800000
 800685c:	001cc471 	.word	0x001cc471
 8006860:	005db3d6 	.word	0x005db3d6
 8006864:	08006c34 	.word	0x08006c34
 8006868:	fffff000 	.word	0xfffff000
 800686c:	3e6c3255 	.word	0x3e6c3255
 8006870:	3e53f142 	.word	0x3e53f142
 8006874:	3e8ba305 	.word	0x3e8ba305
 8006878:	3edb6db7 	.word	0x3edb6db7
 800687c:	3f19999a 	.word	0x3f19999a
 8006880:	3f76384f 	.word	0x3f76384f
 8006884:	3f763800 	.word	0x3f763800
 8006888:	369dc3a0 	.word	0x369dc3a0
 800688c:	08006c44 	.word	0x08006c44
 8006890:	08006c3c 	.word	0x08006c3c
 8006894:	3338aa3c 	.word	0x3338aa3c
 8006898:	f040 8092 	bne.w	80069c0 <__ieee754_powf+0x52c>
 800689c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006894 <__ieee754_powf+0x400>
 80068a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068a4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80068a8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80068ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068b0:	f73f aef6 	bgt.w	80066a0 <__ieee754_powf+0x20c>
 80068b4:	15db      	asrs	r3, r3, #23
 80068b6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80068ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068be:	4103      	asrs	r3, r0
 80068c0:	4423      	add	r3, r4
 80068c2:	4949      	ldr	r1, [pc, #292]	; (80069e8 <__ieee754_powf+0x554>)
 80068c4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80068c8:	3a7f      	subs	r2, #127	; 0x7f
 80068ca:	4111      	asrs	r1, r2
 80068cc:	ea23 0101 	bic.w	r1, r3, r1
 80068d0:	ee07 1a10 	vmov	s14, r1
 80068d4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80068d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80068dc:	f1c2 0217 	rsb	r2, r2, #23
 80068e0:	4110      	asrs	r0, r2
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068e8:	bfb8      	it	lt
 80068ea:	4240      	neglt	r0, r0
 80068ec:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80068f0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80069ec <__ieee754_powf+0x558>
 80068f4:	ee17 3a10 	vmov	r3, s14
 80068f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068fc:	f023 030f 	bic.w	r3, r3, #15
 8006900:	ee07 3a10 	vmov	s14, r3
 8006904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006908:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800690c:	eddf 7a38 	vldr	s15, [pc, #224]	; 80069f0 <__ieee754_powf+0x55c>
 8006910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006914:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006918:	eddf 6a36 	vldr	s13, [pc, #216]	; 80069f4 <__ieee754_powf+0x560>
 800691c:	eeb0 0a67 	vmov.f32	s0, s15
 8006920:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006924:	eeb0 6a40 	vmov.f32	s12, s0
 8006928:	eea7 6a66 	vfms.f32	s12, s14, s13
 800692c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006930:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006934:	eddf 6a30 	vldr	s13, [pc, #192]	; 80069f8 <__ieee754_powf+0x564>
 8006938:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80069fc <__ieee754_powf+0x568>
 800693c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006940:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006a00 <__ieee754_powf+0x56c>
 8006944:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006948:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006a04 <__ieee754_powf+0x570>
 800694c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006950:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006a08 <__ieee754_powf+0x574>
 8006954:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006958:	eeb0 6a40 	vmov.f32	s12, s0
 800695c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006960:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006964:	eeb0 7a46 	vmov.f32	s14, s12
 8006968:	ee77 6a66 	vsub.f32	s13, s14, s13
 800696c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006970:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006974:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800697c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006980:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006984:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006988:	ee10 3a10 	vmov	r3, s0
 800698c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006994:	da1a      	bge.n	80069cc <__ieee754_powf+0x538>
 8006996:	f000 f8b7 	bl	8006b08 <scalbnf>
 800699a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800699e:	e5cd      	b.n	800653c <__ieee754_powf+0xa8>
 80069a0:	4a1a      	ldr	r2, [pc, #104]	; (8006a0c <__ieee754_powf+0x578>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	dd02      	ble.n	80069ac <__ieee754_powf+0x518>
 80069a6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006a10 <__ieee754_powf+0x57c>
 80069aa:	e67b      	b.n	80066a4 <__ieee754_powf+0x210>
 80069ac:	d108      	bne.n	80069c0 <__ieee754_powf+0x52c>
 80069ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80069b2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80069b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ba:	f6ff af7b 	blt.w	80068b4 <__ieee754_powf+0x420>
 80069be:	e7f2      	b.n	80069a6 <__ieee754_powf+0x512>
 80069c0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80069c4:	f73f af76 	bgt.w	80068b4 <__ieee754_powf+0x420>
 80069c8:	2000      	movs	r0, #0
 80069ca:	e78f      	b.n	80068ec <__ieee754_powf+0x458>
 80069cc:	ee00 3a10 	vmov	s0, r3
 80069d0:	e7e3      	b.n	800699a <__ieee754_powf+0x506>
 80069d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80069d6:	e5b1      	b.n	800653c <__ieee754_powf+0xa8>
 80069d8:	eeb0 0a68 	vmov.f32	s0, s17
 80069dc:	e5ae      	b.n	800653c <__ieee754_powf+0xa8>
 80069de:	eeb0 0a48 	vmov.f32	s0, s16
 80069e2:	e5ab      	b.n	800653c <__ieee754_powf+0xa8>
 80069e4:	2600      	movs	r6, #0
 80069e6:	e590      	b.n	800650a <__ieee754_powf+0x76>
 80069e8:	007fffff 	.word	0x007fffff
 80069ec:	3f317218 	.word	0x3f317218
 80069f0:	35bfbe8c 	.word	0x35bfbe8c
 80069f4:	3f317200 	.word	0x3f317200
 80069f8:	3331bb4c 	.word	0x3331bb4c
 80069fc:	b5ddea0e 	.word	0xb5ddea0e
 8006a00:	388ab355 	.word	0x388ab355
 8006a04:	bb360b61 	.word	0xbb360b61
 8006a08:	3e2aaaab 	.word	0x3e2aaaab
 8006a0c:	43160000 	.word	0x43160000
 8006a10:	0da24260 	.word	0x0da24260

08006a14 <__ieee754_sqrtf>:
 8006a14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006a18:	4770      	bx	lr

08006a1a <fabsf>:
 8006a1a:	ee10 3a10 	vmov	r3, s0
 8006a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a22:	ee00 3a10 	vmov	s0, r3
 8006a26:	4770      	bx	lr

08006a28 <finitef>:
 8006a28:	b082      	sub	sp, #8
 8006a2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006a2e:	9801      	ldr	r0, [sp, #4]
 8006a30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006a34:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006a38:	bfac      	ite	ge
 8006a3a:	2000      	movge	r0, #0
 8006a3c:	2001      	movlt	r0, #1
 8006a3e:	b002      	add	sp, #8
 8006a40:	4770      	bx	lr
	...

08006a44 <nanf>:
 8006a44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a4c <nanf+0x8>
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	7fc00000 	.word	0x7fc00000

08006a50 <rintf>:
 8006a50:	ee10 2a10 	vmov	r2, s0
 8006a54:	b513      	push	{r0, r1, r4, lr}
 8006a56:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006a5a:	397f      	subs	r1, #127	; 0x7f
 8006a5c:	2916      	cmp	r1, #22
 8006a5e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006a62:	dc47      	bgt.n	8006af4 <rintf+0xa4>
 8006a64:	b32b      	cbz	r3, 8006ab2 <rintf+0x62>
 8006a66:	2900      	cmp	r1, #0
 8006a68:	ee10 3a10 	vmov	r3, s0
 8006a6c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8006a70:	da21      	bge.n	8006ab6 <rintf+0x66>
 8006a72:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8006a76:	425b      	negs	r3, r3
 8006a78:	4921      	ldr	r1, [pc, #132]	; (8006b00 <rintf+0xb0>)
 8006a7a:	0a5b      	lsrs	r3, r3, #9
 8006a7c:	0d12      	lsrs	r2, r2, #20
 8006a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a82:	0512      	lsls	r2, r2, #20
 8006a84:	4313      	orrs	r3, r2
 8006a86:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	edd1 6a00 	vldr	s13, [r1]
 8006a92:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006a96:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006a9a:	eddd 7a01 	vldr	s15, [sp, #4]
 8006a9e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006aa2:	ee17 3a90 	vmov	r3, s15
 8006aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aaa:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006aae:	ee00 3a10 	vmov	s0, r3
 8006ab2:	b002      	add	sp, #8
 8006ab4:	bd10      	pop	{r4, pc}
 8006ab6:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <rintf+0xb4>)
 8006ab8:	410a      	asrs	r2, r1
 8006aba:	4213      	tst	r3, r2
 8006abc:	d0f9      	beq.n	8006ab2 <rintf+0x62>
 8006abe:	0854      	lsrs	r4, r2, #1
 8006ac0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006ac4:	d006      	beq.n	8006ad4 <rintf+0x84>
 8006ac6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006aca:	ea23 0304 	bic.w	r3, r3, r4
 8006ace:	fa42 f101 	asr.w	r1, r2, r1
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <rintf+0xb0>)
 8006ad6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006ada:	ed90 7a00 	vldr	s14, [r0]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ae6:	edcd 7a01 	vstr	s15, [sp, #4]
 8006aea:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006aee:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006af2:	e7de      	b.n	8006ab2 <rintf+0x62>
 8006af4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006af8:	d3db      	bcc.n	8006ab2 <rintf+0x62>
 8006afa:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006afe:	e7d8      	b.n	8006ab2 <rintf+0x62>
 8006b00:	08006c4c 	.word	0x08006c4c
 8006b04:	007fffff 	.word	0x007fffff

08006b08 <scalbnf>:
 8006b08:	ee10 3a10 	vmov	r3, s0
 8006b0c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006b10:	d025      	beq.n	8006b5e <scalbnf+0x56>
 8006b12:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006b16:	d302      	bcc.n	8006b1e <scalbnf+0x16>
 8006b18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b1c:	4770      	bx	lr
 8006b1e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006b22:	d122      	bne.n	8006b6a <scalbnf+0x62>
 8006b24:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <scalbnf+0xc8>)
 8006b26:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006bd4 <scalbnf+0xcc>
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006b30:	db16      	blt.n	8006b60 <scalbnf+0x58>
 8006b32:	ee10 3a10 	vmov	r3, s0
 8006b36:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b3a:	3a19      	subs	r2, #25
 8006b3c:	4402      	add	r2, r0
 8006b3e:	2afe      	cmp	r2, #254	; 0xfe
 8006b40:	dd15      	ble.n	8006b6e <scalbnf+0x66>
 8006b42:	ee10 3a10 	vmov	r3, s0
 8006b46:	eddf 7a24 	vldr	s15, [pc, #144]	; 8006bd8 <scalbnf+0xd0>
 8006b4a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006bdc <scalbnf+0xd4>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	eeb0 7a67 	vmov.f32	s14, s15
 8006b54:	bfb8      	it	lt
 8006b56:	eef0 7a66 	vmovlt.f32	s15, s13
 8006b5a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006b5e:	4770      	bx	lr
 8006b60:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006be0 <scalbnf+0xd8>
 8006b64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006b68:	4770      	bx	lr
 8006b6a:	0dd2      	lsrs	r2, r2, #23
 8006b6c:	e7e6      	b.n	8006b3c <scalbnf+0x34>
 8006b6e:	2a00      	cmp	r2, #0
 8006b70:	dd06      	ble.n	8006b80 <scalbnf+0x78>
 8006b72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b76:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006b7a:	ee00 3a10 	vmov	s0, r3
 8006b7e:	4770      	bx	lr
 8006b80:	f112 0f16 	cmn.w	r2, #22
 8006b84:	da1a      	bge.n	8006bbc <scalbnf+0xb4>
 8006b86:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b8a:	4298      	cmp	r0, r3
 8006b8c:	ee10 3a10 	vmov	r3, s0
 8006b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b94:	dd0a      	ble.n	8006bac <scalbnf+0xa4>
 8006b96:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8006bd8 <scalbnf+0xd0>
 8006b9a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006bdc <scalbnf+0xd4>
 8006b9e:	eef0 7a40 	vmov.f32	s15, s0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	bf18      	it	ne
 8006ba6:	eeb0 0a47 	vmovne.f32	s0, s14
 8006baa:	e7db      	b.n	8006b64 <scalbnf+0x5c>
 8006bac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006be0 <scalbnf+0xd8>
 8006bb0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006be4 <scalbnf+0xdc>
 8006bb4:	eef0 7a40 	vmov.f32	s15, s0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	e7f3      	b.n	8006ba4 <scalbnf+0x9c>
 8006bbc:	3219      	adds	r2, #25
 8006bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006bc2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006bc6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8006be8 <scalbnf+0xe0>
 8006bca:	ee07 3a10 	vmov	s14, r3
 8006bce:	e7c4      	b.n	8006b5a <scalbnf+0x52>
 8006bd0:	ffff3cb0 	.word	0xffff3cb0
 8006bd4:	4c000000 	.word	0x4c000000
 8006bd8:	7149f2ca 	.word	0x7149f2ca
 8006bdc:	f149f2ca 	.word	0xf149f2ca
 8006be0:	0da24260 	.word	0x0da24260
 8006be4:	8da24260 	.word	0x8da24260
 8006be8:	33000000 	.word	0x33000000

08006bec <_init>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	bf00      	nop
 8006bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf2:	bc08      	pop	{r3}
 8006bf4:	469e      	mov	lr, r3
 8006bf6:	4770      	bx	lr

08006bf8 <_fini>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	bf00      	nop
 8006bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bfe:	bc08      	pop	{r3}
 8006c00:	469e      	mov	lr, r3
 8006c02:	4770      	bx	lr
