
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008698  08008698  00018698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008720  08008720  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008728  08008728  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08008730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  200000a0  080087cc  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080087cc  0002048c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d0b  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204e  00000000  00000000  00030dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00033dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f28  00000000  00000000  00034cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001150c  00000000  00000000  0004bc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b10  00000000  00000000  0005d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eec3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  000eec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800867c 	.word	0x0800867c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	0800867c 	.word	0x0800867c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b98c 	b.w	800109c <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f824 	bl	8000dd8 <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__aeabi_d2ulz>:
 8000d9c:	b5d0      	push	{r4, r6, r7, lr}
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <__aeabi_d2ulz+0x34>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	4606      	mov	r6, r0
 8000da4:	460f      	mov	r7, r1
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	f000 f979 	bl	80010a0 <__aeabi_d2uiz>
 8000dae:	4604      	mov	r4, r0
 8000db0:	f7ff fb54 	bl	800045c <__aeabi_ui2d>
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <__aeabi_d2ulz+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	f7ff fbca 	bl	8000550 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	4639      	mov	r1, r7
 8000dc4:	f7ff fa0c 	bl	80001e0 <__aeabi_dsub>
 8000dc8:	f000 f96a 	bl	80010a0 <__aeabi_d2uiz>
 8000dcc:	4621      	mov	r1, r4
 8000dce:	bdd0      	pop	{r4, r6, r7, pc}
 8000dd0:	3df00000 	.word	0x3df00000
 8000dd4:	41f00000 	.word	0x41f00000

08000dd8 <__udivmoddi4>:
 8000dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ddc:	9d08      	ldr	r5, [sp, #32]
 8000dde:	4604      	mov	r4, r0
 8000de0:	468c      	mov	ip, r1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8083 	bne.w	8000eee <__udivmoddi4+0x116>
 8000de8:	428a      	cmp	r2, r1
 8000dea:	4617      	mov	r7, r2
 8000dec:	d947      	bls.n	8000e7e <__udivmoddi4+0xa6>
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	b142      	cbz	r2, 8000e06 <__udivmoddi4+0x2e>
 8000df4:	f1c2 0020 	rsb	r0, r2, #32
 8000df8:	fa24 f000 	lsr.w	r0, r4, r0
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	4097      	lsls	r7, r2
 8000e00:	ea40 0c01 	orr.w	ip, r0, r1
 8000e04:	4094      	lsls	r4, r2
 8000e06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e0a:	0c23      	lsrs	r3, r4, #16
 8000e0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000e10:	fa1f fe87 	uxth.w	lr, r7
 8000e14:	fb08 c116 	mls	r1, r8, r6, ip
 8000e18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000e20:	4299      	cmp	r1, r3
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x60>
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e2a:	f080 8119 	bcs.w	8001060 <__udivmoddi4+0x288>
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	f240 8116 	bls.w	8001060 <__udivmoddi4+0x288>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	443b      	add	r3, r7
 8000e38:	1a5b      	subs	r3, r3, r1
 8000e3a:	b2a4      	uxth	r4, r4
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3310 	mls	r3, r8, r0, r3
 8000e44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d909      	bls.n	8000e64 <__udivmoddi4+0x8c>
 8000e50:	193c      	adds	r4, r7, r4
 8000e52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e56:	f080 8105 	bcs.w	8001064 <__udivmoddi4+0x28c>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	f240 8102 	bls.w	8001064 <__udivmoddi4+0x28c>
 8000e60:	3802      	subs	r0, #2
 8000e62:	443c      	add	r4, r7
 8000e64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e68:	eba4 040e 	sub.w	r4, r4, lr
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	b11d      	cbz	r5, 8000e78 <__udivmoddi4+0xa0>
 8000e70:	40d4      	lsrs	r4, r2
 8000e72:	2300      	movs	r3, #0
 8000e74:	e9c5 4300 	strd	r4, r3, [r5]
 8000e78:	4631      	mov	r1, r6
 8000e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7e:	b902      	cbnz	r2, 8000e82 <__udivmoddi4+0xaa>
 8000e80:	deff      	udf	#255	; 0xff
 8000e82:	fab2 f282 	clz	r2, r2
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d150      	bne.n	8000f2c <__udivmoddi4+0x154>
 8000e8a:	1bcb      	subs	r3, r1, r7
 8000e8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e90:	fa1f f887 	uxth.w	r8, r7
 8000e94:	2601      	movs	r6, #1
 8000e96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e9a:	0c21      	lsrs	r1, r4, #16
 8000e9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ea0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	d907      	bls.n	8000ebc <__udivmoddi4+0xe4>
 8000eac:	1879      	adds	r1, r7, r1
 8000eae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0xe2>
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	f200 80e9 	bhi.w	800108c <__udivmoddi4+0x2b4>
 8000eba:	4684      	mov	ip, r0
 8000ebc:	1ac9      	subs	r1, r1, r3
 8000ebe:	b2a3      	uxth	r3, r4
 8000ec0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ec4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ec8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ecc:	fb08 f800 	mul.w	r8, r8, r0
 8000ed0:	45a0      	cmp	r8, r4
 8000ed2:	d907      	bls.n	8000ee4 <__udivmoddi4+0x10c>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0x10a>
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	f200 80d9 	bhi.w	8001094 <__udivmoddi4+0x2bc>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	eba4 0408 	sub.w	r4, r4, r8
 8000ee8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eec:	e7bf      	b.n	8000e6e <__udivmoddi4+0x96>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d909      	bls.n	8000f06 <__udivmoddi4+0x12e>
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	f000 80b1 	beq.w	800105a <__udivmoddi4+0x282>
 8000ef8:	2600      	movs	r6, #0
 8000efa:	e9c5 0100 	strd	r0, r1, [r5]
 8000efe:	4630      	mov	r0, r6
 8000f00:	4631      	mov	r1, r6
 8000f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f06:	fab3 f683 	clz	r6, r3
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d14a      	bne.n	8000fa4 <__udivmoddi4+0x1cc>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	d302      	bcc.n	8000f18 <__udivmoddi4+0x140>
 8000f12:	4282      	cmp	r2, r0
 8000f14:	f200 80b8 	bhi.w	8001088 <__udivmoddi4+0x2b0>
 8000f18:	1a84      	subs	r4, r0, r2
 8000f1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000f1e:	2001      	movs	r0, #1
 8000f20:	468c      	mov	ip, r1
 8000f22:	2d00      	cmp	r5, #0
 8000f24:	d0a8      	beq.n	8000e78 <__udivmoddi4+0xa0>
 8000f26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f2a:	e7a5      	b.n	8000e78 <__udivmoddi4+0xa0>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f603 	lsr.w	r6, r0, r3
 8000f34:	4097      	lsls	r7, r2
 8000f36:	fa01 f002 	lsl.w	r0, r1, r2
 8000f3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f3e:	40d9      	lsrs	r1, r3
 8000f40:	4330      	orrs	r0, r6
 8000f42:	0c03      	lsrs	r3, r0, #16
 8000f44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f48:	fa1f f887 	uxth.w	r8, r7
 8000f4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f54:	fb06 f108 	mul.w	r1, r6, r8
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x19c>
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f66:	f080 808d 	bcs.w	8001084 <__udivmoddi4+0x2ac>
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	f240 808a 	bls.w	8001084 <__udivmoddi4+0x2ac>
 8000f70:	3e02      	subs	r6, #2
 8000f72:	443b      	add	r3, r7
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b281      	uxth	r1, r0
 8000f78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb00 f308 	mul.w	r3, r0, r8
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d907      	bls.n	8000f9c <__udivmoddi4+0x1c4>
 8000f8c:	1879      	adds	r1, r7, r1
 8000f8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f92:	d273      	bcs.n	800107c <__udivmoddi4+0x2a4>
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d971      	bls.n	800107c <__udivmoddi4+0x2a4>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4439      	add	r1, r7
 8000f9c:	1acb      	subs	r3, r1, r3
 8000f9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fa2:	e778      	b.n	8000e96 <__udivmoddi4+0xbe>
 8000fa4:	f1c6 0c20 	rsb	ip, r6, #32
 8000fa8:	fa03 f406 	lsl.w	r4, r3, r6
 8000fac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fb0:	431c      	orrs	r4, r3
 8000fb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000fba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fc2:	431f      	orrs	r7, r3
 8000fc4:	0c3b      	lsrs	r3, r7, #16
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fa1f f884 	uxth.w	r8, r4
 8000fce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000fda:	458a      	cmp	sl, r1
 8000fdc:	fa02 f206 	lsl.w	r2, r2, r6
 8000fe0:	fa00 f306 	lsl.w	r3, r0, r6
 8000fe4:	d908      	bls.n	8000ff8 <__udivmoddi4+0x220>
 8000fe6:	1861      	adds	r1, r4, r1
 8000fe8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fec:	d248      	bcs.n	8001080 <__udivmoddi4+0x2a8>
 8000fee:	458a      	cmp	sl, r1
 8000ff0:	d946      	bls.n	8001080 <__udivmoddi4+0x2a8>
 8000ff2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ff6:	4421      	add	r1, r4
 8000ff8:	eba1 010a 	sub.w	r1, r1, sl
 8000ffc:	b2bf      	uxth	r7, r7
 8000ffe:	fbb1 f0fe 	udiv	r0, r1, lr
 8001002:	fb0e 1110 	mls	r1, lr, r0, r1
 8001006:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800100a:	fb00 f808 	mul.w	r8, r0, r8
 800100e:	45b8      	cmp	r8, r7
 8001010:	d907      	bls.n	8001022 <__udivmoddi4+0x24a>
 8001012:	19e7      	adds	r7, r4, r7
 8001014:	f100 31ff 	add.w	r1, r0, #4294967295
 8001018:	d22e      	bcs.n	8001078 <__udivmoddi4+0x2a0>
 800101a:	45b8      	cmp	r8, r7
 800101c:	d92c      	bls.n	8001078 <__udivmoddi4+0x2a0>
 800101e:	3802      	subs	r0, #2
 8001020:	4427      	add	r7, r4
 8001022:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001026:	eba7 0708 	sub.w	r7, r7, r8
 800102a:	fba0 8902 	umull	r8, r9, r0, r2
 800102e:	454f      	cmp	r7, r9
 8001030:	46c6      	mov	lr, r8
 8001032:	4649      	mov	r1, r9
 8001034:	d31a      	bcc.n	800106c <__udivmoddi4+0x294>
 8001036:	d017      	beq.n	8001068 <__udivmoddi4+0x290>
 8001038:	b15d      	cbz	r5, 8001052 <__udivmoddi4+0x27a>
 800103a:	ebb3 020e 	subs.w	r2, r3, lr
 800103e:	eb67 0701 	sbc.w	r7, r7, r1
 8001042:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001046:	40f2      	lsrs	r2, r6
 8001048:	ea4c 0202 	orr.w	r2, ip, r2
 800104c:	40f7      	lsrs	r7, r6
 800104e:	e9c5 2700 	strd	r2, r7, [r5]
 8001052:	2600      	movs	r6, #0
 8001054:	4631      	mov	r1, r6
 8001056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105a:	462e      	mov	r6, r5
 800105c:	4628      	mov	r0, r5
 800105e:	e70b      	b.n	8000e78 <__udivmoddi4+0xa0>
 8001060:	4606      	mov	r6, r0
 8001062:	e6e9      	b.n	8000e38 <__udivmoddi4+0x60>
 8001064:	4618      	mov	r0, r3
 8001066:	e6fd      	b.n	8000e64 <__udivmoddi4+0x8c>
 8001068:	4543      	cmp	r3, r8
 800106a:	d2e5      	bcs.n	8001038 <__udivmoddi4+0x260>
 800106c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001070:	eb69 0104 	sbc.w	r1, r9, r4
 8001074:	3801      	subs	r0, #1
 8001076:	e7df      	b.n	8001038 <__udivmoddi4+0x260>
 8001078:	4608      	mov	r0, r1
 800107a:	e7d2      	b.n	8001022 <__udivmoddi4+0x24a>
 800107c:	4660      	mov	r0, ip
 800107e:	e78d      	b.n	8000f9c <__udivmoddi4+0x1c4>
 8001080:	4681      	mov	r9, r0
 8001082:	e7b9      	b.n	8000ff8 <__udivmoddi4+0x220>
 8001084:	4666      	mov	r6, ip
 8001086:	e775      	b.n	8000f74 <__udivmoddi4+0x19c>
 8001088:	4630      	mov	r0, r6
 800108a:	e74a      	b.n	8000f22 <__udivmoddi4+0x14a>
 800108c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001090:	4439      	add	r1, r7
 8001092:	e713      	b.n	8000ebc <__udivmoddi4+0xe4>
 8001094:	3802      	subs	r0, #2
 8001096:	443c      	add	r4, r7
 8001098:	e724      	b.n	8000ee4 <__udivmoddi4+0x10c>
 800109a:	bf00      	nop

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <__aeabi_d2uiz>:
 80010a0:	004a      	lsls	r2, r1, #1
 80010a2:	d211      	bcs.n	80010c8 <__aeabi_d2uiz+0x28>
 80010a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80010a8:	d211      	bcs.n	80010ce <__aeabi_d2uiz+0x2e>
 80010aa:	d50d      	bpl.n	80010c8 <__aeabi_d2uiz+0x28>
 80010ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80010b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80010b4:	d40e      	bmi.n	80010d4 <__aeabi_d2uiz+0x34>
 80010b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80010ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80010c2:	fa23 f002 	lsr.w	r0, r3, r2
 80010c6:	4770      	bx	lr
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4770      	bx	lr
 80010ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80010d2:	d102      	bne.n	80010da <__aeabi_d2uiz+0x3a>
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010e4:	ed2d 8b02 	vpush	{d8}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f002 f850 	bl	8003190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 fec2 	bl	8001e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f001 f918 	bl	8002328 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f8:	f001 f8ee 	bl	80022d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010fc:	f001 f8c0 	bl	8002280 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001100:	f000 ff50 	bl	8001fa4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001104:	f000 fff8 	bl	80020f8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001108:	f000 ffa4 	bl	8002054 <MX_TIM2_Init>
  MX_I2C1_Init();
 800110c:	f000 ff1c 	bl	8001f48 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001110:	f001 f868 	bl	80021e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8001114:	488c      	ldr	r0, [pc, #560]	; (8001348 <main+0x268>)
 8001116:	f003 fde5 	bl	8004ce4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 800111a:	213c      	movs	r1, #60	; 0x3c
 800111c:	488b      	ldr	r0, [pc, #556]	; (800134c <main+0x26c>)
 800111e:	f003 fff3 	bl	8005108 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 8001122:	488b      	ldr	r0, [pc, #556]	; (8001350 <main+0x270>)
 8001124:	f003 fd84 	bl	8004c30 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8001128:	210c      	movs	r1, #12
 800112a:	4889      	ldr	r0, [pc, #548]	; (8001350 <main+0x270>)
 800112c:	f003 fe96 	bl	8004e5c <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 8001130:	4b88      	ldr	r3, [pc, #544]	; (8001354 <main+0x274>)
 8001132:	4a89      	ldr	r2, [pc, #548]	; (8001358 <main+0x278>)
 8001134:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8001136:	4b87      	ldr	r3, [pc, #540]	; (8001354 <main+0x274>)
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 800113c:	4b85      	ldr	r3, [pc, #532]	; (8001354 <main+0x274>)
 800113e:	22ff      	movs	r2, #255	; 0xff
 8001140:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 8001142:	4884      	ldr	r0, [pc, #528]	; (8001354 <main+0x274>)
 8001144:	f001 f9f6 	bl	8002534 <UARTInit>
  UARTResetStart(&UART2);
 8001148:	4882      	ldr	r0, [pc, #520]	; (8001354 <main+0x274>)
 800114a:	f001 fa1b 	bl	8002584 <UARTResetStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	int16_t inputChar = UARTReadChar(&UART2);
 800114e:	4881      	ldr	r0, [pc, #516]	; (8001354 <main+0x274>)
 8001150:	f001 fa3c 	bl	80025cc <UARTReadChar>
 8001154:	4603      	mov	r3, r0
 8001156:	80fb      	strh	r3, [r7, #6]
	  	if (inputChar != -1)
 8001158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d00b      	beq.n	800117a <main+0x9a>
	  	{
	  		UART_Protocol(&UART2, inputChar);
 8001162:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001166:	4619      	mov	r1, r3
 8001168:	487a      	ldr	r0, [pc, #488]	; (8001354 <main+0x274>)
 800116a:	f001 faf1 	bl	8002750 <UART_Protocol>
			len+=1;
 800116e:	4b7b      	ldr	r3, [pc, #492]	; (800135c <main+0x27c>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b79      	ldr	r3, [pc, #484]	; (800135c <main+0x27c>)
 8001178:	701a      	strb	r2, [r3, #0]

	  	}

	  if (micros() - Time_Velocity_Stamp >= 100)
 800117a:	f001 fd11 	bl	8002ba0 <micros>
 800117e:	4b78      	ldr	r3, [pc, #480]	; (8001360 <main+0x280>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	1a84      	subs	r4, r0, r2
 8001186:	eb61 0503 	sbc.w	r5, r1, r3
 800118a:	2d00      	cmp	r5, #0
 800118c:	bf08      	it	eq
 800118e:	2c64      	cmpeq	r4, #100	; 0x64
 8001190:	d35c      	bcc.n	800124c <main+0x16c>
	  {
		  Time_Velocity_Stamp = micros();
 8001192:	f001 fd05 	bl	8002ba0 <micros>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4971      	ldr	r1, [pc, #452]	; (8001360 <main+0x280>)
 800119c:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000; //pulse per sec
 80011a0:	4b70      	ldr	r3, [pc, #448]	; (8001364 <main+0x284>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001368 <main+0x288>
 80011aa:	ee27 8a87 	vmul.f32	s16, s15, s14
 80011ae:	f001 f961 	bl	8002474 <Encoder_Velocity_Update>
 80011b2:	eef0 7a40 	vmov.f32	s15, s0
 80011b6:	ee38 7a27 	vadd.f32	s14, s16, s15
 80011ba:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800136c <main+0x28c>
 80011be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c2:	4b68      	ldr	r3, [pc, #416]	; (8001364 <main+0x284>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 80011c8:	4b66      	ldr	r3, [pc, #408]	; (8001364 <main+0x284>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001370 <main+0x290>
 80011d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80011d6:	4b67      	ldr	r3, [pc, #412]	; (8001374 <main+0x294>)
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e6:	4b64      	ldr	r3, [pc, #400]	; (8001378 <main+0x298>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 80011ec:	4b62      	ldr	r3, [pc, #392]	; (8001378 <main+0x298>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011f6:	4b61      	ldr	r3, [pc, #388]	; (800137c <main+0x29c>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8001370 <main+0x290>
 8001204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001208:	4b5d      	ldr	r3, [pc, #372]	; (8001380 <main+0x2a0>)
 800120a:	edc3 7a00 	vstr	s15, [r3]

		  //read position
		  Position_Read_Encoder = htim1.Instance->CNT;
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <main+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	4b59      	ldr	r3, [pc, #356]	; (8001384 <main+0x2a4>)
 800121e:	edc3 7a00 	vstr	s15, [r3]
		  Position_Now_Rad = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //rad
 8001222:	4b58      	ldr	r3, [pc, #352]	; (8001384 <main+0x2a4>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800122c:	4b53      	ldr	r3, [pc, #332]	; (800137c <main+0x29c>)
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001236:	4b4f      	ldr	r3, [pc, #316]	; (8001374 <main+0x294>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	ee07 3a90 	vmov	s15, r3
 800123e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <main+0x2a8>)
 8001248:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 800124c:	f001 fca8 	bl	8002ba0 <micros>
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <main+0x2ac>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	ebb0 0802 	subs.w	r8, r0, r2
 800125a:	eb61 0903 	sbc.w	r9, r1, r3
 800125e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	454b      	cmp	r3, r9
 8001268:	bf08      	it	eq
 800126a:	4542      	cmpeq	r2, r8
 800126c:	f4bf af6f 	bcs.w	800114e <main+0x6e>
	  {

			Time_Sampling_Stamp = micros();
 8001270:	f001 fc96 	bl	8002ba0 <micros>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4944      	ldr	r1, [pc, #272]	; (800138c <main+0x2ac>)
 800127a:	e9c1 2300 	strd	r2, r3, [r1]

			if (initial == 1 && angle_rad_stop - angle_rad_start != 0)
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <main+0x2b0>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b01      	cmp	r3, #1
 8001284:	f040 8172 	bne.w	800156c <main+0x48c>
 8001288:	4b42      	ldr	r3, [pc, #264]	; (8001394 <main+0x2b4>)
 800128a:	ed93 7a00 	vldr	s14, [r3]
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <main+0x2b8>)
 8001290:	edd3 7a00 	vldr	s15, [r3]
 8001294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001298:	eef5 7a40 	vcmp.f32	s15, #0.0
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	f000 8164 	beq.w	800156c <main+0x48c>
			{
				//calculate tau
				//short if condition
				tau_max = 15/8*(angle_rad_stop - angle_rad_start)/omega_max >= sqrtf(((10*pow(3+sqrt(3),1))-(5*powf(3+sqrtf(3),2))+(5/9*powf(3+sqrtf(3),3)))*(angle_rad_stop-angle_rad_start)/alpha_max) ? 15/8*(angle_rad_stop - angle_rad_start)/omega_max : sqrtf(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5/9*powf(3+sqrtf(3),3)))*(angle_rad_stop-angle_rad_start)/alpha_max);
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <main+0x2b4>)
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <main+0x2b8>)
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012b4:	4b39      	ldr	r3, [pc, #228]	; (800139c <main+0x2bc>)
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <main+0x2b4>)
 80012c0:	ed93 7a00 	vldr	s14, [r3]
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <main+0x2b8>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ce:	ee17 0a90 	vmov	r0, s15
 80012d2:	f7ff f8e5 	bl	80004a0 <__aeabi_f2d>
 80012d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001340 <main+0x260>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f938 	bl	8000550 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4692      	mov	sl, r2
 80012e6:	469b      	mov	fp, r3
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <main+0x2c0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f8d7 	bl	80004a0 <__aeabi_f2d>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4650      	mov	r0, sl
 80012f8:	4659      	mov	r1, fp
 80012fa:	f7ff fa53 	bl	80007a4 <__aeabi_ddiv>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fbd3 	bl	8000ab0 <__aeabi_d2f>
 800130a:	4603      	mov	r3, r0
 800130c:	ee00 3a10 	vmov	s0, r3
 8001310:	f005 fedc 	bl	80070cc <sqrtf>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
 8001318:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800131c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001320:	db40      	blt.n	80013a4 <main+0x2c4>
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <main+0x2b4>)
 8001324:	ed93 7a00 	vldr	s14, [r3]
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <main+0x2b8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <main+0x2bc>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133c:	e049      	b.n	80013d2 <main+0x2f2>
 800133e:	bf00      	nop
 8001340:	6bb23406 	.word	0x6bb23406
 8001344:	c0502906 	.word	0xc0502906
 8001348:	200003e8 	.word	0x200003e8
 800134c:	2000039c 	.word	0x2000039c
 8001350:	200002f0 	.word	0x200002f0
 8001354:	200001b0 	.word	0x200001b0
 8001358:	20000430 	.word	0x20000430
 800135c:	20000474 	.word	0x20000474
 8001360:	200000d0 	.word	0x200000d0
 8001364:	200000d8 	.word	0x200000d8
 8001368:	461c3c00 	.word	0x461c3c00
 800136c:	461c4000 	.word	0x461c4000
 8001370:	42700000 	.word	0x42700000
 8001374:	20000000 	.word	0x20000000
 8001378:	200000dc 	.word	0x200000dc
 800137c:	20000004 	.word	0x20000004
 8001380:	200000e8 	.word	0x200000e8
 8001384:	200000e4 	.word	0x200000e4
 8001388:	200000ec 	.word	0x200000ec
 800138c:	200000c8 	.word	0x200000c8
 8001390:	20000018 	.word	0x20000018
 8001394:	200000fc 	.word	0x200000fc
 8001398:	200000f8 	.word	0x200000f8
 800139c:	20000010 	.word	0x20000010
 80013a0:	20000014 	.word	0x20000014
 80013a4:	4ba0      	ldr	r3, [pc, #640]	; (8001628 <main+0x548>)
 80013a6:	ed93 7a00 	vldr	s14, [r3]
 80013aa:	4ba0      	ldr	r3, [pc, #640]	; (800162c <main+0x54c>)
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001630 <main+0x550>
 80013b8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013bc:	4b9d      	ldr	r3, [pc, #628]	; (8001634 <main+0x554>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013c6:	eeb0 0a66 	vmov.f32	s0, s13
 80013ca:	f005 fe7f 	bl	80070cc <sqrtf>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <main+0x558>)
 80013d4:	edc3 7a00 	vstr	s15, [r3]
				//calculate coeffient
				c_0 = angle_rad_start;
 80013d8:	4b94      	ldr	r3, [pc, #592]	; (800162c <main+0x54c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a97      	ldr	r2, [pc, #604]	; (800163c <main+0x55c>)
 80013de:	6013      	str	r3, [r2, #0]
				c_1 = 0;
 80013e0:	4b97      	ldr	r3, [pc, #604]	; (8001640 <main+0x560>)
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
				c_2 = 0;
 80013e8:	4b96      	ldr	r3, [pc, #600]	; (8001644 <main+0x564>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
				c_3 = 10*((angle_rad_stop - angle_rad_start)/(pow(tau_max,3)));
 80013f0:	4b8d      	ldr	r3, [pc, #564]	; (8001628 <main+0x548>)
 80013f2:	ed93 7a00 	vldr	s14, [r3]
 80013f6:	4b8d      	ldr	r3, [pc, #564]	; (800162c <main+0x54c>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001400:	ee17 0a90 	vmov	r0, s15
 8001404:	f7ff f84c 	bl	80004a0 <__aeabi_f2d>
 8001408:	4682      	mov	sl, r0
 800140a:	468b      	mov	fp, r1
 800140c:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <main+0x558>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f845 	bl	80004a0 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	ed9f 1b7b 	vldr	d1, [pc, #492]	; 8001608 <main+0x528>
 800141e:	ec43 2b10 	vmov	d0, r2, r3
 8001422:	f005 fd0d 	bl	8006e40 <pow>
 8001426:	ec53 2b10 	vmov	r2, r3, d0
 800142a:	4650      	mov	r0, sl
 800142c:	4659      	mov	r1, fp
 800142e:	f7ff f9b9 	bl	80007a4 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <main+0x568>)
 8001440:	f7ff f886 	bl	8000550 <__aeabi_dmul>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4610      	mov	r0, r2
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fb30 	bl	8000ab0 <__aeabi_d2f>
 8001450:	4603      	mov	r3, r0
 8001452:	4a7e      	ldr	r2, [pc, #504]	; (800164c <main+0x56c>)
 8001454:	6013      	str	r3, [r2, #0]
				c_4 = 15*((angle_rad_start - angle_rad_stop)/(pow(tau_max,4)));
 8001456:	4b75      	ldr	r3, [pc, #468]	; (800162c <main+0x54c>)
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	4b72      	ldr	r3, [pc, #456]	; (8001628 <main+0x548>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	ee17 0a90 	vmov	r0, s15
 800146a:	f7ff f819 	bl	80004a0 <__aeabi_f2d>
 800146e:	4682      	mov	sl, r0
 8001470:	468b      	mov	fp, r1
 8001472:	4b71      	ldr	r3, [pc, #452]	; (8001638 <main+0x558>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f812 	bl	80004a0 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8001610 <main+0x530>
 8001484:	ec43 2b10 	vmov	d0, r2, r3
 8001488:	f005 fcda 	bl	8006e40 <pow>
 800148c:	ec53 2b10 	vmov	r2, r3, d0
 8001490:	4650      	mov	r0, sl
 8001492:	4659      	mov	r1, fp
 8001494:	f7ff f986 	bl	80007a4 <__aeabi_ddiv>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <main+0x570>)
 80014a6:	f7ff f853 	bl	8000550 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	f7ff fafd 	bl	8000ab0 <__aeabi_d2f>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a66      	ldr	r2, [pc, #408]	; (8001654 <main+0x574>)
 80014ba:	6013      	str	r3, [r2, #0]
				c_5 = 6*((angle_rad_stop - angle_rad_start)/(pow(tau_max,5)));
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <main+0x548>)
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <main+0x54c>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7fe ffe6 	bl	80004a0 <__aeabi_f2d>
 80014d4:	4682      	mov	sl, r0
 80014d6:	468b      	mov	fp, r1
 80014d8:	4b57      	ldr	r3, [pc, #348]	; (8001638 <main+0x558>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ffdf 	bl	80004a0 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001618 <main+0x538>
 80014ea:	ec43 2b10 	vmov	d0, r2, r3
 80014ee:	f005 fca7 	bl	8006e40 <pow>
 80014f2:	ec53 2b10 	vmov	r2, r3, d0
 80014f6:	4650      	mov	r0, sl
 80014f8:	4659      	mov	r1, fp
 80014fa:	f7ff f953 	bl	80007a4 <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	4b53      	ldr	r3, [pc, #332]	; (8001658 <main+0x578>)
 800150c:	f7ff f820 	bl	8000550 <__aeabi_dmul>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff faca 	bl	8000ab0 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	4a4f      	ldr	r2, [pc, #316]	; (800165c <main+0x57c>)
 8001520:	6013      	str	r3, [r2, #0]
				//save initial time
				//change microsec to second
				time_initial = micros()/1000000.0;
 8001522:	f001 fb3d 	bl	8002ba0 <micros>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7fe ffd9 	bl	80004e4 <__aeabi_ul2d>
 8001532:	a33b      	add	r3, pc, #236	; (adr r3, 8001620 <main+0x540>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f934 	bl	80007a4 <__aeabi_ddiv>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fc2a 	bl	8000d9c <__aeabi_d2ulz>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4944      	ldr	r1, [pc, #272]	; (8001660 <main+0x580>)
 800154e:	e9c1 2300 	strd	r2, r3, [r1]
				initial = 0;
 8001552:	4b44      	ldr	r3, [pc, #272]	; (8001664 <main+0x584>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]

				//initial parameter in kalman filter
				theta_estimate = desired_position;
 8001558:	4b43      	ldr	r3, [pc, #268]	; (8001668 <main+0x588>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a43      	ldr	r2, [pc, #268]	; (800166c <main+0x58c>)
 800155e:	6013      	str	r3, [r2, #0]
				omega_estimate = 0;
 8001560:	4b43      	ldr	r3, [pc, #268]	; (8001670 <main+0x590>)
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f000 bc7e 	b.w	8001e68 <main+0xd88>

			}
			else if (initial == 0 &&  angle_rad_stop - angle_rad_start != 0)
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <main+0x584>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	f47f adec 	bne.w	800114e <main+0x6e>
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <main+0x548>)
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	4b2b      	ldr	r3, [pc, #172]	; (800162c <main+0x54c>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	eef5 7a40 	vcmp.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	f43f adde 	beq.w	800114e <main+0x6e>
			{
				//at the final point
				//tau = (micros()/1000000.0)-time_initial ; in second unit
				if ((micros()/1000000.0)-time_initial >= tau_max)
 8001592:	f001 fb05 	bl	8002ba0 <micros>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7fe ffa1 	bl	80004e4 <__aeabi_ul2d>
 80015a2:	a31f      	add	r3, pc, #124	; (adr r3, 8001620 <main+0x540>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7ff f8fc 	bl	80007a4 <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4692      	mov	sl, r2
 80015b2:	469b      	mov	fp, r3
 80015b4:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <main+0x580>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7fe ff91 	bl	80004e4 <__aeabi_ul2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4650      	mov	r0, sl
 80015c8:	4659      	mov	r1, fp
 80015ca:	f7fe fe09 	bl	80001e0 <__aeabi_dsub>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4692      	mov	sl, r2
 80015d4:	469b      	mov	fp, r3
 80015d6:	4b18      	ldr	r3, [pc, #96]	; (8001638 <main+0x558>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff60 	bl	80004a0 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4650      	mov	r0, sl
 80015e6:	4659      	mov	r1, fp
 80015e8:	f7ff fa38 	bl	8000a5c <__aeabi_dcmpge>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d040      	beq.n	8001674 <main+0x594>
				{
					initial = 1;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <main+0x584>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
					angle_rad_start = angle_rad_stop;
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <main+0x548>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <main+0x54c>)
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	e5a5      	b.n	800114e <main+0x6e>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	00000000 	.word	0x00000000
 800160c:	40080000 	.word	0x40080000
 8001610:	00000000 	.word	0x00000000
 8001614:	40100000 	.word	0x40100000
 8001618:	00000000 	.word	0x00000000
 800161c:	40140000 	.word	0x40140000
 8001620:	00000000 	.word	0x00000000
 8001624:	412e8480 	.word	0x412e8480
 8001628:	200000fc 	.word	0x200000fc
 800162c:	200000f8 	.word	0x200000f8
 8001630:	c2814833 	.word	0xc2814833
 8001634:	20000014 	.word	0x20000014
 8001638:	20000100 	.word	0x20000100
 800163c:	20000110 	.word	0x20000110
 8001640:	20000114 	.word	0x20000114
 8001644:	20000118 	.word	0x20000118
 8001648:	40240000 	.word	0x40240000
 800164c:	2000011c 	.word	0x2000011c
 8001650:	402e0000 	.word	0x402e0000
 8001654:	20000120 	.word	0x20000120
 8001658:	40180000 	.word	0x40180000
 800165c:	20000124 	.word	0x20000124
 8001660:	20000108 	.word	0x20000108
 8001664:	20000018 	.word	0x20000018
 8001668:	20000130 	.word	0x20000130
 800166c:	20000180 	.word	0x20000180
 8001670:	20000184 	.word	0x20000184
				}
				else //on going to final point
				{
					//tau = real time - initial time (duration in second unit)
					tau = micros()/1000000.0 - time_initial;
 8001674:	f001 fa94 	bl	8002ba0 <micros>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7fe ff30 	bl	80004e4 <__aeabi_ul2d>
 8001684:	f20f 4308 	addw	r3, pc, #1032	; 0x408
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7ff f88a 	bl	80007a4 <__aeabi_ddiv>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4692      	mov	sl, r2
 8001696:	469b      	mov	fp, r3
 8001698:	4bdf      	ldr	r3, [pc, #892]	; (8001a18 <main+0x938>)
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7fe ff1f 	bl	80004e4 <__aeabi_ul2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4650      	mov	r0, sl
 80016ac:	4659      	mov	r1, fp
 80016ae:	f7fe fd97 	bl	80001e0 <__aeabi_dsub>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4610      	mov	r0, r2
 80016b8:	4619      	mov	r1, r3
 80016ba:	f7ff fb6f 	bl	8000d9c <__aeabi_d2ulz>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	49d6      	ldr	r1, [pc, #856]	; (8001a1c <main+0x93c>)
 80016c4:	e9c1 2300 	strd	r2, r3, [r1]
					desired_position = c_0*powf(tau,0) + c_1*powf(tau,1) + c_2*powf(tau,2) + c_3*powf(tau,3) + c_4*powf(tau,4) + c_5*powf(tau,5);
 80016c8:	4bd4      	ldr	r3, [pc, #848]	; (8001a1c <main+0x93c>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f7ff fb05 	bl	8000ce0 <__aeabi_ul2f>
 80016d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016da:	4bd1      	ldr	r3, [pc, #836]	; (8001a20 <main+0x940>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80016e4:	4bcd      	ldr	r3, [pc, #820]	; (8001a1c <main+0x93c>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff faf7 	bl	8000ce0 <__aeabi_ul2f>
 80016f2:	ee07 0a10 	vmov	s14, r0
 80016f6:	4bcb      	ldr	r3, [pc, #812]	; (8001a24 <main+0x944>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001704:	4bc5      	ldr	r3, [pc, #788]	; (8001a1c <main+0x93c>)
 8001706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff fae7 	bl	8000ce0 <__aeabi_ul2f>
 8001712:	4603      	mov	r3, r0
 8001714:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001718:	ee00 3a10 	vmov	s0, r3
 800171c:	f005 fc3e 	bl	8006f9c <powf>
 8001720:	eeb0 7a40 	vmov.f32	s14, s0
 8001724:	4bc0      	ldr	r3, [pc, #768]	; (8001a28 <main+0x948>)
 8001726:	edd3 7a00 	vldr	s15, [r3]
 800172a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001732:	4bba      	ldr	r3, [pc, #744]	; (8001a1c <main+0x93c>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fad0 	bl	8000ce0 <__aeabi_ul2f>
 8001740:	4603      	mov	r3, r0
 8001742:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001746:	ee00 3a10 	vmov	s0, r3
 800174a:	f005 fc27 	bl	8006f9c <powf>
 800174e:	eeb0 7a40 	vmov.f32	s14, s0
 8001752:	4bb6      	ldr	r3, [pc, #728]	; (8001a2c <main+0x94c>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001760:	4bae      	ldr	r3, [pc, #696]	; (8001a1c <main+0x93c>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff fab9 	bl	8000ce0 <__aeabi_ul2f>
 800176e:	4603      	mov	r3, r0
 8001770:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001774:	ee00 3a10 	vmov	s0, r3
 8001778:	f005 fc10 	bl	8006f9c <powf>
 800177c:	eeb0 7a40 	vmov.f32	s14, s0
 8001780:	4bab      	ldr	r3, [pc, #684]	; (8001a30 <main+0x950>)
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	ee38 8a27 	vadd.f32	s16, s16, s15
 800178e:	4ba3      	ldr	r3, [pc, #652]	; (8001a1c <main+0x93c>)
 8001790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff faa2 	bl	8000ce0 <__aeabi_ul2f>
 800179c:	4603      	mov	r3, r0
 800179e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80017a2:	ee00 3a10 	vmov	s0, r3
 80017a6:	f005 fbf9 	bl	8006f9c <powf>
 80017aa:	eeb0 7a40 	vmov.f32	s14, s0
 80017ae:	4ba1      	ldr	r3, [pc, #644]	; (8001a34 <main+0x954>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017bc:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <main+0x958>)
 80017be:	edc3 7a00 	vstr	s15, [r3]
					//predict state
					//x_predict = A*x_estimate
					//x_predict = [theta_predict; omega_predict]
					//A = [1 dt; 0 1]
					//x_estimate = [theta_estimate; omega_estimate]
					theta_predict = theta_estimate + omega_estimate*CON_T;
 80017c2:	4b9e      	ldr	r3, [pc, #632]	; (8001a3c <main+0x95c>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8001a40 <main+0x960>
 80017cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017d0:	4b9c      	ldr	r3, [pc, #624]	; (8001a44 <main+0x964>)
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017da:	4b9b      	ldr	r3, [pc, #620]	; (8001a48 <main+0x968>)
 80017dc:	edc3 7a00 	vstr	s15, [r3]
					omega_predict = omega_estimate;
 80017e0:	4b96      	ldr	r3, [pc, #600]	; (8001a3c <main+0x95c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a99      	ldr	r2, [pc, #612]	; (8001a4c <main+0x96c>)
 80017e6:	6013      	str	r3, [r2, #0]
					//p_predict = A*p_estimate*transpose(A) + G*Q*transpose(G)
					//p_predict = [p_predict11 p_predict12 ; p_predict21 p_predict22]
					//p_estimate = [p_estimate11 p_estimate12 ; p_estimate21 p_estimate22] -> initial [1 0; 0 1]
					//G = [0.5*dt^2 ; dt]
					//Q = Sigma_a^2
					Q = powf(Sigma_a,2);
 80017e8:	4b99      	ldr	r3, [pc, #612]	; (8001a50 <main+0x970>)
 80017ea:	edd3 7a00 	vldr	s15, [r3]
 80017ee:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017f2:	eeb0 0a67 	vmov.f32	s0, s15
 80017f6:	f005 fbd1 	bl	8006f9c <powf>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
 80017fe:	4b95      	ldr	r3, [pc, #596]	; (8001a54 <main+0x974>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
					p_predict11 = p_estimate11 + (p_estimate12 + p_estimate21)*CON_T + p_estimate22*powf(CON_T,2)+powf(CON_T,4)*Q/4.0;
 8001804:	4b94      	ldr	r3, [pc, #592]	; (8001a58 <main+0x978>)
 8001806:	ed93 7a00 	vldr	s14, [r3]
 800180a:	4b94      	ldr	r3, [pc, #592]	; (8001a5c <main+0x97c>)
 800180c:	edd3 7a00 	vldr	s15, [r3]
 8001810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001814:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8001a40 <main+0x960>
 8001818:	ee27 7a87 	vmul.f32	s14, s15, s14
 800181c:	4b90      	ldr	r3, [pc, #576]	; (8001a60 <main+0x980>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001826:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001a40 <main+0x960>
 800182a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	f005 fbb3 	bl	8006f9c <powf>
 8001836:	eeb0 7a40 	vmov.f32	s14, s0
 800183a:	4b8a      	ldr	r3, [pc, #552]	; (8001a64 <main+0x984>)
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001848:	ee17 0a90 	vmov	r0, s15
 800184c:	f7fe fe28 	bl	80004a0 <__aeabi_f2d>
 8001850:	4682      	mov	sl, r0
 8001852:	468b      	mov	fp, r1
 8001854:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8001a40 <main+0x960>
 8001858:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800185c:	eeb0 0a67 	vmov.f32	s0, s15
 8001860:	f005 fb9c 	bl	8006f9c <powf>
 8001864:	eeb0 7a40 	vmov.f32	s14, s0
 8001868:	4b7a      	ldr	r3, [pc, #488]	; (8001a54 <main+0x974>)
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001872:	ee17 0a90 	vmov	r0, s15
 8001876:	f7fe fe13 	bl	80004a0 <__aeabi_f2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <main+0x988>)
 8001880:	f7fe ff90 	bl	80007a4 <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4650      	mov	r0, sl
 800188a:	4659      	mov	r1, fp
 800188c:	f7fe fcaa 	bl	80001e4 <__adddf3>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f90a 	bl	8000ab0 <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	4a73      	ldr	r2, [pc, #460]	; (8001a6c <main+0x98c>)
 80018a0:	6013      	str	r3, [r2, #0]
					p_predict12 = p_estimate12 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 80018a2:	4b70      	ldr	r3, [pc, #448]	; (8001a64 <main+0x984>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001a40 <main+0x960>
 80018ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b0:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <main+0x978>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ba:	ee17 0a90 	vmov	r0, s15
 80018be:	f7fe fdef 	bl	80004a0 <__aeabi_f2d>
 80018c2:	4682      	mov	sl, r0
 80018c4:	468b      	mov	fp, r1
 80018c6:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8001a40 <main+0x960>
 80018ca:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	f005 fb63 	bl	8006f9c <powf>
 80018d6:	eeb0 7a40 	vmov.f32	s14, s0
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <main+0x974>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e4:	ee17 0a90 	vmov	r0, s15
 80018e8:	f7fe fdda 	bl	80004a0 <__aeabi_f2d>
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f4:	f7fe ff56 	bl	80007a4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4650      	mov	r0, sl
 80018fe:	4659      	mov	r1, fp
 8001900:	f7fe fc70 	bl	80001e4 <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f8d0 	bl	8000ab0 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4a57      	ldr	r2, [pc, #348]	; (8001a70 <main+0x990>)
 8001914:	6013      	str	r3, [r2, #0]
					p_predict21 = p_estimate21 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <main+0x984>)
 8001918:	edd3 7a00 	vldr	s15, [r3]
 800191c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001a40 <main+0x960>
 8001920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001924:	4b4d      	ldr	r3, [pc, #308]	; (8001a5c <main+0x97c>)
 8001926:	edd3 7a00 	vldr	s15, [r3]
 800192a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192e:	ee17 0a90 	vmov	r0, s15
 8001932:	f7fe fdb5 	bl	80004a0 <__aeabi_f2d>
 8001936:	4682      	mov	sl, r0
 8001938:	468b      	mov	fp, r1
 800193a:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001a40 <main+0x960>
 800193e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	f005 fb29 	bl	8006f9c <powf>
 800194a:	eeb0 7a40 	vmov.f32	s14, s0
 800194e:	4b41      	ldr	r3, [pc, #260]	; (8001a54 <main+0x974>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001958:	ee17 0a90 	vmov	r0, s15
 800195c:	f7fe fda0 	bl	80004a0 <__aeabi_f2d>
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001968:	f7fe ff1c 	bl	80007a4 <__aeabi_ddiv>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4650      	mov	r0, sl
 8001972:	4659      	mov	r1, fp
 8001974:	f7fe fc36 	bl	80001e4 <__adddf3>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	f7ff f896 	bl	8000ab0 <__aeabi_d2f>
 8001984:	4603      	mov	r3, r0
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <main+0x994>)
 8001988:	6013      	str	r3, [r2, #0]
					p_predict22 = p_estimate22 + powf(CON_T,2)*Q;
 800198a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8001a40 <main+0x960>
 800198e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001992:	eeb0 0a67 	vmov.f32	s0, s15
 8001996:	f005 fb01 	bl	8006f9c <powf>
 800199a:	eeb0 7a40 	vmov.f32	s14, s0
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <main+0x974>)
 80019a0:	edd3 7a00 	vldr	s15, [r3]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <main+0x984>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <main+0x998>)
 80019b4:	edc3 7a00 	vstr	s15, [r3]
					//update
					//z_predict = z - C*x_predict
					//z_predict = theta_error
					//z = sensor_theta_input
					//C = [1 0]
					z_predict = Position_Now_Rad - theta_predict;
 80019b8:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <main+0x99c>)
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	4b22      	ldr	r3, [pc, #136]	; (8001a48 <main+0x968>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <main+0x9a0>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]

					//S = C*p_predict*transpose(C) + R
					//R = Sigma_w^2
					R = powf(Sigma_w,2);
 80019ce:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <main+0x9a4>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019d8:	eeb0 0a67 	vmov.f32	s0, s15
 80019dc:	f005 fade 	bl	8006f9c <powf>
 80019e0:	eef0 7a40 	vmov.f32	s15, s0
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <main+0x9a8>)
 80019e6:	edc3 7a00 	vstr	s15, [r3]
					s = p_predict11 + R;
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <main+0x98c>)
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <main+0x9a8>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <main+0x9ac>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]

					//K = p_predict*transpose(C)*inv(S)
					//K = [k11;k21]
					k11 = p_predict11/s;
 8001a00:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <main+0x98c>)
 8001a02:	edd3 6a00 	vldr	s13, [r3]
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <main+0x9ac>)
 8001a08:	ed93 7a00 	vldr	s14, [r3]
 8001a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a10:	e042      	b.n	8001a98 <main+0x9b8>
 8001a12:	bf00      	nop
 8001a14:	f3af 8000 	nop.w
 8001a18:	20000108 	.word	0x20000108
 8001a1c:	20000128 	.word	0x20000128
 8001a20:	20000110 	.word	0x20000110
 8001a24:	20000114 	.word	0x20000114
 8001a28:	20000118 	.word	0x20000118
 8001a2c:	2000011c 	.word	0x2000011c
 8001a30:	20000120 	.word	0x20000120
 8001a34:	20000124 	.word	0x20000124
 8001a38:	20000130 	.word	0x20000130
 8001a3c:	20000184 	.word	0x20000184
 8001a40:	3a83126f 	.word	0x3a83126f
 8001a44:	20000180 	.word	0x20000180
 8001a48:	20000178 	.word	0x20000178
 8001a4c:	2000017c 	.word	0x2000017c
 8001a50:	20000008 	.word	0x20000008
 8001a54:	200000f0 	.word	0x200000f0
 8001a58:	20000198 	.word	0x20000198
 8001a5c:	2000019c 	.word	0x2000019c
 8001a60:	2000001c 	.word	0x2000001c
 8001a64:	20000020 	.word	0x20000020
 8001a68:	40100000 	.word	0x40100000
 8001a6c:	20000188 	.word	0x20000188
 8001a70:	2000018c 	.word	0x2000018c
 8001a74:	20000190 	.word	0x20000190
 8001a78:	20000194 	.word	0x20000194
 8001a7c:	200000ec 	.word	0x200000ec
 8001a80:	200001a0 	.word	0x200001a0
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	200000f4 	.word	0x200000f4
 8001a8c:	200001a4 	.word	0x200001a4
 8001a90:	00000000 	.word	0x00000000
 8001a94:	412e8480 	.word	0x412e8480
 8001a98:	4bbe      	ldr	r3, [pc, #760]	; (8001d94 <main+0xcb4>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]
					k21 = p_predict21/s;
 8001a9e:	4bbe      	ldr	r3, [pc, #760]	; (8001d98 <main+0xcb8>)
 8001aa0:	edd3 6a00 	vldr	s13, [r3]
 8001aa4:	4bbd      	ldr	r3, [pc, #756]	; (8001d9c <main+0xcbc>)
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aae:	4bbc      	ldr	r3, [pc, #752]	; (8001da0 <main+0xcc0>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]

					//x_estimate = x_predict + K*z_predict
					theta_estimate = theta_predict + k11*z_predict;
 8001ab4:	4bb7      	ldr	r3, [pc, #732]	; (8001d94 <main+0xcb4>)
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	4bba      	ldr	r3, [pc, #744]	; (8001da4 <main+0xcc4>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac4:	4bb8      	ldr	r3, [pc, #736]	; (8001da8 <main+0xcc8>)
 8001ac6:	edd3 7a00 	vldr	s15, [r3]
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	4bb7      	ldr	r3, [pc, #732]	; (8001dac <main+0xccc>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
					omega_estimate = omega_predict + k21*z_predict;
 8001ad4:	4bb2      	ldr	r3, [pc, #712]	; (8001da0 <main+0xcc0>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4bb2      	ldr	r3, [pc, #712]	; (8001da4 <main+0xcc4>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae4:	4bb2      	ldr	r3, [pc, #712]	; (8001db0 <main+0xcd0>)
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	4bb1      	ldr	r3, [pc, #708]	; (8001db4 <main+0xcd4>)
 8001af0:	edc3 7a00 	vstr	s15, [r3]

					//p_estimate = (I - K*C)*p_predict
					//I = [1 0; 0 1]
					p_estimate11 = k11*R;
 8001af4:	4ba7      	ldr	r3, [pc, #668]	; (8001d94 <main+0xcb4>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	4baf      	ldr	r3, [pc, #700]	; (8001db8 <main+0xcd8>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	4bad      	ldr	r3, [pc, #692]	; (8001dbc <main+0xcdc>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]
					p_estimate12 = p_predict12*R/s;
 8001b0a:	4bad      	ldr	r3, [pc, #692]	; (8001dc0 <main+0xce0>)
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	4ba9      	ldr	r3, [pc, #676]	; (8001db8 <main+0xcd8>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b1a:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <main+0xcbc>)
 8001b1c:	ed93 7a00 	vldr	s14, [r3]
 8001b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b24:	4ba7      	ldr	r3, [pc, #668]	; (8001dc4 <main+0xce4>)
 8001b26:	edc3 7a00 	vstr	s15, [r3]
					p_estimate21 = -k21*p_predict11 + p_predict21;
 8001b2a:	4b9d      	ldr	r3, [pc, #628]	; (8001da0 <main+0xcc0>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	eeb1 7a67 	vneg.f32	s14, s15
 8001b34:	4ba4      	ldr	r3, [pc, #656]	; (8001dc8 <main+0xce8>)
 8001b36:	edd3 7a00 	vldr	s15, [r3]
 8001b3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b3e:	4b96      	ldr	r3, [pc, #600]	; (8001d98 <main+0xcb8>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b48:	4ba0      	ldr	r3, [pc, #640]	; (8001dcc <main+0xcec>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
					p_estimate22 = p_predict22 - k21*p_predict12;
 8001b4e:	4ba0      	ldr	r3, [pc, #640]	; (8001dd0 <main+0xcf0>)
 8001b50:	ed93 7a00 	vldr	s14, [r3]
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <main+0xcc0>)
 8001b56:	edd3 6a00 	vldr	s13, [r3]
 8001b5a:	4b99      	ldr	r3, [pc, #612]	; (8001dc0 <main+0xce0>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b68:	4b9a      	ldr	r3, [pc, #616]	; (8001dd4 <main+0xcf4>)
 8001b6a:	edc3 7a00 	vstr	s15, [r3]

					//use estimate theta
					Position_Now_Rad = theta_estimate;
 8001b6e:	4b8f      	ldr	r3, [pc, #572]	; (8001dac <main+0xccc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a99      	ldr	r2, [pc, #612]	; (8001dd8 <main+0xcf8>)
 8001b74:	6013      	str	r3, [r2, #0]

					//position control
					error_position = desired_position - Position_Now_Rad;
 8001b76:	4b99      	ldr	r3, [pc, #612]	; (8001ddc <main+0xcfc>)
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	4b96      	ldr	r3, [pc, #600]	; (8001dd8 <main+0xcf8>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <main+0xd00>)
 8001b88:	edc3 7a00 	vstr	s15, [r3]
					error_position_diff = (error_position - error_position_prev)*1000.0;
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <main+0xd00>)
 8001b8e:	ed93 7a00 	vldr	s14, [r3]
 8001b92:	4b94      	ldr	r3, [pc, #592]	; (8001de4 <main+0xd04>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9c:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001de8 <main+0xd08>
 8001ba0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ba4:	4b91      	ldr	r3, [pc, #580]	; (8001dec <main+0xd0c>)
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
					error_position_int = error_position_int + error_position/1000.0;
 8001baa:	4b91      	ldr	r3, [pc, #580]	; (8001df0 <main+0xd10>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fc76 	bl	80004a0 <__aeabi_f2d>
 8001bb4:	4682      	mov	sl, r0
 8001bb6:	468b      	mov	fp, r1
 8001bb8:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <main+0xd00>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc6f 	bl	80004a0 <__aeabi_f2d>
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <main+0xd14>)
 8001bc8:	f7fe fdec 	bl	80007a4 <__aeabi_ddiv>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4650      	mov	r0, sl
 8001bd2:	4659      	mov	r1, fp
 8001bd4:	f7fe fb06 	bl	80001e4 <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe ff66 	bl	8000ab0 <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a82      	ldr	r2, [pc, #520]	; (8001df0 <main+0xd10>)
 8001be8:	6013      	str	r3, [r2, #0]
					desired_velocity = position_kp*error_position + position_ki*error_position_int + position_kd*error_position_diff + position_bias;
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <main+0xd18>)
 8001bec:	ed93 7a00 	vldr	s14, [r3]
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	; (8001de0 <main+0xd00>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfa:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <main+0xd1c>)
 8001bfc:	edd3 6a00 	vldr	s13, [r3]
 8001c00:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <main+0xd10>)
 8001c02:	edd3 7a00 	vldr	s15, [r3]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0e:	4b7c      	ldr	r3, [pc, #496]	; (8001e00 <main+0xd20>)
 8001c10:	edd3 6a00 	vldr	s13, [r3]
 8001c14:	4b75      	ldr	r3, [pc, #468]	; (8001dec <main+0xd0c>)
 8001c16:	edd3 7a00 	vldr	s15, [r3]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <main+0xd24>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	4b76      	ldr	r3, [pc, #472]	; (8001e08 <main+0xd28>)
 8001c2e:	edc3 7a00 	vstr	s15, [r3]
					error_position_prev = error_position;
 8001c32:	4b6b      	ldr	r3, [pc, #428]	; (8001de0 <main+0xd00>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6b      	ldr	r2, [pc, #428]	; (8001de4 <main+0xd04>)
 8001c38:	6013      	str	r3, [r2, #0]

					//limitter velocity
					if (desired_velocity > 1)
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <main+0xd28>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	dd04      	ble.n	8001c58 <main+0xb78>
					{
						desired_velocity = 1;
 8001c4e:	4b6e      	ldr	r3, [pc, #440]	; (8001e08 <main+0xd28>)
 8001c50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e00c      	b.n	8001c72 <main+0xb92>
					}
					else if (desired_velocity < -1)
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <main+0xd28>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d502      	bpl.n	8001c72 <main+0xb92>
					{
						desired_velocity = -1;
 8001c6c:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <main+0xd28>)
 8001c6e:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <main+0xd2c>)
 8001c70:	601a      	str	r2, [r3, #0]
					}

					//velocity control
					error_velocity = desired_velocity - Velocity_Now_Rad;
 8001c72:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <main+0xd28>)
 8001c74:	ed93 7a00 	vldr	s14, [r3]
 8001c78:	4b65      	ldr	r3, [pc, #404]	; (8001e10 <main+0xd30>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c82:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <main+0xd34>)
 8001c84:	edc3 7a00 	vstr	s15, [r3]
					error_velocity_diff = (error_velocity - error_velocity_prev)*1000.0;
 8001c88:	4b62      	ldr	r3, [pc, #392]	; (8001e14 <main+0xd34>)
 8001c8a:	ed93 7a00 	vldr	s14, [r3]
 8001c8e:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <main+0xd38>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c98:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001de8 <main+0xd08>
 8001c9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca0:	4b5e      	ldr	r3, [pc, #376]	; (8001e1c <main+0xd3c>)
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
					error_velocity_int = error_velocity_int + error_velocity/1000.0;
 8001ca6:	4b5e      	ldr	r3, [pc, #376]	; (8001e20 <main+0xd40>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbf8 	bl	80004a0 <__aeabi_f2d>
 8001cb0:	4682      	mov	sl, r0
 8001cb2:	468b      	mov	fp, r1
 8001cb4:	4b57      	ldr	r3, [pc, #348]	; (8001e14 <main+0xd34>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7fe fbf1 	bl	80004a0 <__aeabi_f2d>
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b4c      	ldr	r3, [pc, #304]	; (8001df4 <main+0xd14>)
 8001cc4:	f7fe fd6e 	bl	80007a4 <__aeabi_ddiv>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4650      	mov	r0, sl
 8001cce:	4659      	mov	r1, fp
 8001cd0:	f7fe fa88 	bl	80001e4 <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4610      	mov	r0, r2
 8001cda:	4619      	mov	r1, r3
 8001cdc:	f7fe fee8 	bl	8000ab0 <__aeabi_d2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <main+0xd40>)
 8001ce4:	6013      	str	r3, [r2, #0]
					PWM_Out = velocity_kp*error_velocity + velocity_ki*error_velocity_int + velocity_kd*error_velocity_diff + velocity_bias;
 8001ce6:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <main+0xd44>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <main+0xd34>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <main+0xd48>)
 8001cf8:	edd3 6a00 	vldr	s13, [r3]
 8001cfc:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <main+0xd40>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d0a:	4b48      	ldr	r3, [pc, #288]	; (8001e2c <main+0xd4c>)
 8001d0c:	edd3 6a00 	vldr	s13, [r3]
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <main+0xd3c>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <main+0xd50>)
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <main+0xd54>)
 8001d34:	801a      	strh	r2, [r3, #0]
					error_velocity_prev = error_velocity;
 8001d36:	4b37      	ldr	r3, [pc, #220]	; (8001e14 <main+0xd34>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a37      	ldr	r2, [pc, #220]	; (8001e18 <main+0xd38>)
 8001d3c:	6013      	str	r3, [r2, #0]

					//limitter pwm
					if (PWM_Out > 10000)
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <main+0xd54>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	dd04      	ble.n	8001d56 <main+0xc76>
					{
						PWM_Out = 10000;
 8001d4c:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <main+0xd54>)
 8001d4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	e009      	b.n	8001d6a <main+0xc8a>
					}
					else if (PWM_Out < -10000)
 8001d56:	4b37      	ldr	r3, [pc, #220]	; (8001e34 <main+0xd54>)
 8001d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5c:	4a36      	ldr	r2, [pc, #216]	; (8001e38 <main+0xd58>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	da03      	bge.n	8001d6a <main+0xc8a>
					{
						PWM_Out = -10000;
 8001d62:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <main+0xd54>)
 8001d64:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8001d68:	801a      	strh	r2, [r3, #0]
					}

					//control motor direction
					if (PWM_Out < 0)
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <main+0xd54>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	da67      	bge.n	8001e44 <main+0xd64>
					{
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, -PWM_Out);
 8001d74:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <main+0xd54>)
 8001d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <main+0xd5c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d88:	482d      	ldr	r0, [pc, #180]	; (8001e40 <main+0xd60>)
 8001d8a:	f002 f90b 	bl	8003fa4 <HAL_GPIO_WritePin>
 8001d8e:	f7ff b9de 	b.w	800114e <main+0x6e>
 8001d92:	bf00      	nop
 8001d94:	200001a8 	.word	0x200001a8
 8001d98:	20000190 	.word	0x20000190
 8001d9c:	200001a4 	.word	0x200001a4
 8001da0:	200001ac 	.word	0x200001ac
 8001da4:	200001a0 	.word	0x200001a0
 8001da8:	20000178 	.word	0x20000178
 8001dac:	20000180 	.word	0x20000180
 8001db0:	2000017c 	.word	0x2000017c
 8001db4:	20000184 	.word	0x20000184
 8001db8:	200000f4 	.word	0x200000f4
 8001dbc:	2000001c 	.word	0x2000001c
 8001dc0:	2000018c 	.word	0x2000018c
 8001dc4:	20000198 	.word	0x20000198
 8001dc8:	20000188 	.word	0x20000188
 8001dcc:	2000019c 	.word	0x2000019c
 8001dd0:	20000194 	.word	0x20000194
 8001dd4:	20000020 	.word	0x20000020
 8001dd8:	200000ec 	.word	0x200000ec
 8001ddc:	20000130 	.word	0x20000130
 8001de0:	20000134 	.word	0x20000134
 8001de4:	20000140 	.word	0x20000140
 8001de8:	447a0000 	.word	0x447a0000
 8001dec:	20000138 	.word	0x20000138
 8001df0:	2000013c 	.word	0x2000013c
 8001df4:	408f4000 	.word	0x408f4000
 8001df8:	20000144 	.word	0x20000144
 8001dfc:	20000148 	.word	0x20000148
 8001e00:	2000014c 	.word	0x2000014c
 8001e04:	20000150 	.word	0x20000150
 8001e08:	20000154 	.word	0x20000154
 8001e0c:	bf800000 	.word	0xbf800000
 8001e10:	200000e8 	.word	0x200000e8
 8001e14:	20000158 	.word	0x20000158
 8001e18:	20000164 	.word	0x20000164
 8001e1c:	2000015c 	.word	0x2000015c
 8001e20:	20000160 	.word	0x20000160
 8001e24:	20000168 	.word	0x20000168
 8001e28:	2000016c 	.word	0x2000016c
 8001e2c:	20000170 	.word	0x20000170
 8001e30:	20000174 	.word	0x20000174
 8001e34:	200000e0 	.word	0x200000e0
 8001e38:	ffffd8f0 	.word	0xffffd8f0
 8001e3c:	200002f0 	.word	0x200002f0
 8001e40:	40020400 	.word	0x40020400
					}
					else if (PWM_Out >= 0)
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <main+0xd8c>)
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f6ff a97f 	blt.w	800114e <main+0x6e>
					{
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <main+0xd8c>)
 8001e52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <main+0xd90>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e62:	4804      	ldr	r0, [pc, #16]	; (8001e74 <main+0xd94>)
 8001e64:	f002 f89e 	bl	8003fa4 <HAL_GPIO_WritePin>
  {
 8001e68:	f7ff b971 	b.w	800114e <main+0x6e>
 8001e6c:	200000e0 	.word	0x200000e0
 8001e70:	200002f0 	.word	0x200002f0
 8001e74:	40020400 	.word	0x40020400

08001e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b094      	sub	sp, #80	; 0x50
 8001e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2230      	movs	r2, #48	; 0x30
 8001e84:	2100      	movs	r1, #0
 8001e86:	4618      	mov	r0, r3
 8001e88:	f004 ff4a 	bl	8006d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <SystemClock_Config+0xc8>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a26      	ldr	r2, [pc, #152]	; (8001f40 <SystemClock_Config+0xc8>)
 8001ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8001eac:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <SystemClock_Config+0xc8>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	2300      	movs	r3, #0
 8001eba:	607b      	str	r3, [r7, #4]
 8001ebc:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <SystemClock_Config+0xcc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a20      	ldr	r2, [pc, #128]	; (8001f44 <SystemClock_Config+0xcc>)
 8001ec2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <SystemClock_Config+0xcc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001edc:	2310      	movs	r3, #16
 8001ede:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee8:	2308      	movs	r3, #8
 8001eea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef4:	2304      	movs	r3, #4
 8001ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef8:	f107 0320 	add.w	r3, r7, #32
 8001efc:	4618      	mov	r0, r3
 8001efe:	f002 f9d3 	bl	80042a8 <HAL_RCC_OscConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f08:	f000 fe64 	bl	8002bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f10:	2302      	movs	r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	2103      	movs	r1, #3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f002 fc35 	bl	8004798 <HAL_RCC_ClockConfig>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001f34:	f000 fe4e 	bl	8002bd4 <Error_Handler>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3750      	adds	r7, #80	; 0x50
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000

08001f48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f4e:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <MX_I2C1_Init+0x54>)
 8001f50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f54:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_I2C1_Init+0x58>)
 8001f56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f58:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f6a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7e:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f84:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_I2C1_Init+0x50>)
 8001f86:	f002 f84b 	bl	8004020 <HAL_I2C_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f90:	f000 fe20 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000298 	.word	0x20000298
 8001f9c:	40005400 	.word	0x40005400
 8001fa0:	000186a0 	.word	0x000186a0

08001fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08c      	sub	sp, #48	; 0x30
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	2224      	movs	r2, #36	; 0x24
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f004 feb4 	bl	8006d20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc0:	4b22      	ldr	r3, [pc, #136]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fc2:	4a23      	ldr	r2, [pc, #140]	; (8002050 <MX_TIM1_Init+0xac>)
 8001fc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fd4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b1c      	ldr	r3, [pc, #112]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe0:	4b1a      	ldr	r3, [pc, #104]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	4b19      	ldr	r3, [pc, #100]	; (800204c <MX_TIM1_Init+0xa8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fec:	2303      	movs	r3, #3
 8001fee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002000:	2300      	movs	r3, #0
 8002002:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002004:	2301      	movs	r3, #1
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	4619      	mov	r1, r3
 8002016:	480d      	ldr	r0, [pc, #52]	; (800204c <MX_TIM1_Init+0xa8>)
 8002018:	f002 ffd0 	bl	8004fbc <HAL_TIM_Encoder_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002022:	f000 fdd7 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800202e:	1d3b      	adds	r3, r7, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	; (800204c <MX_TIM1_Init+0xa8>)
 8002034:	f003 fe74 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800203e:	f000 fdc9 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3730      	adds	r7, #48	; 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000039c 	.word	0x2000039c
 8002050:	40010000 	.word	0x40010000

08002054 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002068:	463b      	mov	r3, r7
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002070:	4b20      	ldr	r3, [pc, #128]	; (80020f4 <MX_TIM2_Init+0xa0>)
 8002072:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002076:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_TIM2_Init+0xa0>)
 800207a:	2263      	movs	r2, #99	; 0x63
 800207c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <MX_TIM2_Init+0xa0>)
 8002080:	2200      	movs	r2, #0
 8002082:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <MX_TIM2_Init+0xa0>)
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <MX_TIM2_Init+0xa0>)
 800208e:	2200      	movs	r2, #0
 8002090:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_TIM2_Init+0xa0>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002098:	4816      	ldr	r0, [pc, #88]	; (80020f4 <MX_TIM2_Init+0xa0>)
 800209a:	f002 fd79 	bl	8004b90 <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020a4:	f000 fd96 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020ae:	f107 0308 	add.w	r3, r7, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	480f      	ldr	r0, [pc, #60]	; (80020f4 <MX_TIM2_Init+0xa0>)
 80020b6:	f003 fa7b 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020c0:	f000 fd88 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c4:	2300      	movs	r3, #0
 80020c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020cc:	463b      	mov	r3, r7
 80020ce:	4619      	mov	r1, r3
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <MX_TIM2_Init+0xa0>)
 80020d2:	f003 fe25 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020dc:	f000 fd7a 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <MX_TIM2_Init+0xa0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0201 	mvn.w	r2, #1
 80020e8:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200003e8 	.word	0x200003e8

080020f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	f107 0320 	add.w	r3, r7, #32
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
 8002124:	615a      	str	r2, [r3, #20]
 8002126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002128:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <MX_TIM3_Init+0xe4>)
 800212a:	4a2d      	ldr	r2, [pc, #180]	; (80021e0 <MX_TIM3_Init+0xe8>)
 800212c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <MX_TIM3_Init+0xe4>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002134:	4b29      	ldr	r3, [pc, #164]	; (80021dc <MX_TIM3_Init+0xe4>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <MX_TIM3_Init+0xe4>)
 800213c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002140:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <MX_TIM3_Init+0xe4>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002148:	4b24      	ldr	r3, [pc, #144]	; (80021dc <MX_TIM3_Init+0xe4>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800214e:	4823      	ldr	r0, [pc, #140]	; (80021dc <MX_TIM3_Init+0xe4>)
 8002150:	f002 fd1e 	bl	8004b90 <HAL_TIM_Base_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800215a:	f000 fd3b 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800215e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002164:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002168:	4619      	mov	r1, r3
 800216a:	481c      	ldr	r0, [pc, #112]	; (80021dc <MX_TIM3_Init+0xe4>)
 800216c:	f003 fa20 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002176:	f000 fd2d 	bl	8002bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800217a:	4818      	ldr	r0, [pc, #96]	; (80021dc <MX_TIM3_Init+0xe4>)
 800217c:	f002 fe14 	bl	8004da8 <HAL_TIM_PWM_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002186:	f000 fd25 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002192:	f107 0320 	add.w	r3, r7, #32
 8002196:	4619      	mov	r1, r3
 8002198:	4810      	ldr	r0, [pc, #64]	; (80021dc <MX_TIM3_Init+0xe4>)
 800219a:	f003 fdc1 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80021a4:	f000 fd16 	bl	8002bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a8:	2360      	movs	r3, #96	; 0x60
 80021aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	220c      	movs	r2, #12
 80021bc:	4619      	mov	r1, r3
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <MX_TIM3_Init+0xe4>)
 80021c0:	f003 f938 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80021ca:	f000 fd03 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021ce:	4803      	ldr	r0, [pc, #12]	; (80021dc <MX_TIM3_Init+0xe4>)
 80021d0:	f000 fe18 	bl	8002e04 <HAL_TIM_MspPostInit>

}
 80021d4:	bf00      	nop
 80021d6:	3738      	adds	r7, #56	; 0x38
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	200002f0 	.word	0x200002f0
 80021e0:	40000400 	.word	0x40000400

080021e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ea:	f107 0308 	add.w	r3, r7, #8
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	463b      	mov	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_TIM4_Init+0x94>)
 8002202:	4a1e      	ldr	r2, [pc, #120]	; (800227c <MX_TIM4_Init+0x98>)
 8002204:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_TIM4_Init+0x94>)
 8002208:	2200      	movs	r2, #0
 800220a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_TIM4_Init+0x94>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <MX_TIM4_Init+0x94>)
 8002214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002218:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_TIM4_Init+0x94>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <MX_TIM4_Init+0x94>)
 8002222:	2200      	movs	r2, #0
 8002224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002226:	4814      	ldr	r0, [pc, #80]	; (8002278 <MX_TIM4_Init+0x94>)
 8002228:	f002 fcb2 	bl	8004b90 <HAL_TIM_Base_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002232:	f000 fccf 	bl	8002bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	4619      	mov	r1, r3
 8002242:	480d      	ldr	r0, [pc, #52]	; (8002278 <MX_TIM4_Init+0x94>)
 8002244:	f003 f9b4 	bl	80055b0 <HAL_TIM_ConfigClockSource>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800224e:	f000 fcc1 	bl	8002bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800225a:	463b      	mov	r3, r7
 800225c:	4619      	mov	r1, r3
 800225e:	4806      	ldr	r0, [pc, #24]	; (8002278 <MX_TIM4_Init+0x94>)
 8002260:	f003 fd5e 	bl	8005d20 <HAL_TIMEx_MasterConfigSynchronization>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800226a:	f000 fcb3 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000250 	.word	0x20000250
 800227c:	40000800 	.word	0x40000800

08002280 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <MX_USART2_UART_Init+0x54>)
 8002288:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 800228c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002290:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 8002294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002298:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 80022a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ba:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_USART2_UART_Init+0x50>)
 80022bc:	f003 fdb2 	bl	8005e24 <HAL_UART_Init>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80022c6:	f000 fc85 	bl	8002bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000430 	.word	0x20000430
 80022d4:	40004400 	.word	0x40004400

080022d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <MX_DMA_Init+0x4c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <MX_DMA_Init+0x4c>)
 80022e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <MX_DMA_Init+0x4c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2010      	movs	r0, #16
 8002300:	f001 f893 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002304:	2010      	movs	r0, #16
 8002306:	f001 f8ac 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	2011      	movs	r0, #17
 8002310:	f001 f88b 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002314:	2011      	movs	r0, #17
 8002316:	f001 f8a4 	bl	8003462 <HAL_NVIC_EnableIRQ>

}
 800231a:	bf00      	nop
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800

08002328 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232e:	f107 0314 	add.w	r3, r7, #20
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
 800233c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <MX_GPIO_Init+0x138>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <MX_GPIO_Init+0x138>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <MX_GPIO_Init+0x138>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b40      	ldr	r3, [pc, #256]	; (8002460 <MX_GPIO_Init+0x138>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <MX_GPIO_Init+0x138>)
 8002364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <MX_GPIO_Init+0x138>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <MX_GPIO_Init+0x138>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a38      	ldr	r2, [pc, #224]	; (8002460 <MX_GPIO_Init+0x138>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b36      	ldr	r3, [pc, #216]	; (8002460 <MX_GPIO_Init+0x138>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	607b      	str	r3, [r7, #4]
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <MX_GPIO_Init+0x138>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a31      	ldr	r2, [pc, #196]	; (8002460 <MX_GPIO_Init+0x138>)
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <MX_GPIO_Init+0x138>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	2120      	movs	r1, #32
 80023b2:	482c      	ldr	r0, [pc, #176]	; (8002464 <MX_GPIO_Init+0x13c>)
 80023b4:	f001 fdf6 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023be:	482a      	ldr	r0, [pc, #168]	; (8002468 <MX_GPIO_Init+0x140>)
 80023c0:	f001 fdf0 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <MX_GPIO_Init+0x144>)
 80023cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	4825      	ldr	r0, [pc, #148]	; (8002470 <MX_GPIO_Init+0x148>)
 80023da:	f001 fc5f 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 80023de:	2381      	movs	r3, #129	; 0x81
 80023e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	481f      	ldr	r0, [pc, #124]	; (8002470 <MX_GPIO_Init+0x148>)
 80023f2:	f001 fc53 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	4816      	ldr	r0, [pc, #88]	; (8002464 <MX_GPIO_Init+0x13c>)
 800240a:	f001 fc47 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800240e:	2320      	movs	r3, #32
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241a:	2300      	movs	r3, #0
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480f      	ldr	r0, [pc, #60]	; (8002464 <MX_GPIO_Init+0x13c>)
 8002426:	f001 fc39 	bl	8003c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	4809      	ldr	r0, [pc, #36]	; (8002468 <MX_GPIO_Init+0x140>)
 8002444:	f001 fc2a 	bl	8003c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	2028      	movs	r0, #40	; 0x28
 800244e:	f000 ffec 	bl	800342a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002452:	2028      	movs	r0, #40	; 0x28
 8002454:	f001 f805 	bl	8003462 <HAL_NVIC_EnableIRQ>

}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000
 8002468:	40020400 	.word	0x40020400
 800246c:	10210000 	.word	0x10210000
 8002470:	40020800 	.word	0x40020800

08002474 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8002474:	b5b0      	push	{r4, r5, r7, lr}
 8002476:	ed2d 8b02 	vpush	{d8}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT; //pulse
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <Encoder_Velocity_Update+0xa8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8002486:	f000 fb8b 	bl	8002ba0 <micros>
 800248a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <Encoder_Velocity_Update+0xac>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002498:	1a84      	subs	r4, r0, r2
 800249a:	eb61 0503 	sbc.w	r5, r1, r3
 800249e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80024a2:	4b20      	ldr	r3, [pc, #128]	; (8002524 <Encoder_Velocity_Update+0xb0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 80024ac:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <Encoder_Velocity_Update+0xb4>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	db06      	blt.n	80024c6 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <Encoder_Velocity_Update+0xb8>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e00b      	b.n	80024de <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	425b      	negs	r3, r3
 80024ca:	4a17      	ldr	r2, [pc, #92]	; (8002528 <Encoder_Velocity_Update+0xb4>)
 80024cc:	8812      	ldrh	r2, [r2, #0]
 80024ce:	4293      	cmp	r3, r2
 80024d0:	db05      	blt.n	80024de <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 80024d2:	4b16      	ldr	r3, [pc, #88]	; (800252c <Encoder_Velocity_Update+0xb8>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	461a      	mov	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80024de:	4a11      	ldr	r2, [pc, #68]	; (8002524 <Encoder_Velocity_Update+0xb0>)
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <Encoder_Velocity_Update+0xac>)
 80024e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024ea:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <Encoder_Velocity_Update+0xbc>)
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80024fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002502:	f7fe fbed 	bl	8000ce0 <__aeabi_ul2f>
 8002506:	ee07 0a10 	vmov	s14, r0
 800250a:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	ecbd 8b02 	vpop	{d8}
 800251a:	bdb0      	pop	{r4, r5, r7, pc}
 800251c:	2000039c 	.word	0x2000039c
 8002520:	200001d0 	.word	0x200001d0
 8002524:	200001d8 	.word	0x200001d8
 8002528:	20000002 	.word	0x20000002
 800252c:	20000000 	.word	0x20000000
 8002530:	000f4240 	.word	0x000f4240

08002534 <UARTInit>:
	}


}
void UARTInit(UARTStucrture *uart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 800253c:	4b10      	ldr	r3, [pc, #64]	; (8002580 <UARTInit+0x4c>)
 800253e:	88db      	ldrh	r3, [r3, #6]
 8002540:	4619      	mov	r1, r3
 8002542:	2001      	movs	r0, #1
 8002544:	f004 fbac 	bl	8006ca0 <calloc>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <UARTInit+0x4c>)
 8002552:	889b      	ldrh	r3, [r3, #4]
 8002554:	4619      	mov	r1, r3
 8002556:	2001      	movs	r0, #1
 8002558:	f004 fba2 	bl	8006ca0 <calloc>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	81da      	strh	r2, [r3, #14]

}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001b0 	.word	0x200001b0

08002584 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6919      	ldr	r1, [r3, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	88db      	ldrh	r3, [r3, #6]
 8002598:	461a      	mov	r2, r3
 800259a:	f003 fcfd 	bl	8005f98 <HAL_UART_Receive_DMA>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	88db      	ldrh	r3, [r3, #6]
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	1ad3      	subs	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80025d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d8:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8a9b      	ldrh	r3, [r3, #20]
 80025de:	461c      	mov	r4, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ffe0 	bl	80025a6 <UARTGetRxHead>
 80025e6:	4603      	mov	r3, r0
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d013      	beq.n	8002614 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	8a92      	ldrh	r2, [r2, #20]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8a9b      	ldrh	r3, [r3, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	88d2      	ldrh	r2, [r2, #6]
 8002604:	fb93 f1f2 	sdiv	r1, r3, r2
 8002608:	fb02 f201 	mul.w	r2, r2, r1
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8002614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}

08002620 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b20      	cmp	r3, #32
 8002634:	d13d      	bne.n	80026b2 <UARTTxDumpBuffer+0x92>
 8002636:	4b21      	ldr	r3, [pc, #132]	; (80026bc <UARTTxDumpBuffer+0x9c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d139      	bne.n	80026b2 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800263e:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <UARTTxDumpBuffer+0x9c>)
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	89da      	ldrh	r2, [r3, #14]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	899b      	ldrh	r3, [r3, #12]
 800264c:	429a      	cmp	r2, r3
 800264e:	d02d      	beq.n	80026ac <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	89da      	ldrh	r2, [r3, #14]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002658:	429a      	cmp	r2, r3
 800265a:	d906      	bls.n	800266a <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	89da      	ldrh	r2, [r3, #14]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	b29b      	uxth	r3, r3
 8002668:	e005      	b.n	8002676 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	889a      	ldrh	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	8992      	ldrh	r2, [r2, #12]
 8002684:	4413      	add	r3, r2
 8002686:	89fa      	ldrh	r2, [r7, #14]
 8002688:	4619      	mov	r1, r3
 800268a:	f003 fc19 	bl	8005ec0 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	899b      	ldrh	r3, [r3, #12]
 8002692:	461a      	mov	r2, r3
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	4413      	add	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	8892      	ldrh	r2, [r2, #4]
 800269c:	fb93 f1f2 	sdiv	r1, r3, r2
 80026a0:	fb02 f201 	mul.w	r2, r2, r1
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <UARTTxDumpBuffer+0x9c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
	}
}
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200001dc 	.word	0x200001dc

080026c0 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	889b      	ldrh	r3, [r3, #4]
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	bf28      	it	cs
 80026d8:	4613      	movcs	r3, r2
 80026da:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80026dc:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	889b      	ldrh	r3, [r3, #4]
 80026e2:	4619      	mov	r1, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	89db      	ldrh	r3, [r3, #14]
 80026e8:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80026ea:	4293      	cmp	r3, r2
 80026ec:	bfa8      	it	ge
 80026ee:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80026f0:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	89d2      	ldrh	r2, [r2, #14]
 80026fa:	4413      	add	r3, r2
 80026fc:	8aba      	ldrh	r2, [r7, #20]
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f004 faff 	bl	8006d04 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	89db      	ldrh	r3, [r3, #14]
 800270a:	461a      	mov	r2, r3
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	4413      	add	r3, r2
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	8892      	ldrh	r2, [r2, #4]
 8002714:	fb93 f1f2 	sdiv	r1, r3, r2
 8002718:	fb02 f201 	mul.w	r2, r2, r1
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002724:	8afa      	ldrh	r2, [r7, #22]
 8002726:	8abb      	ldrh	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	d00a      	beq.n	8002742 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6898      	ldr	r0, [r3, #8]
 8002730:	8abb      	ldrh	r3, [r7, #20]
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002736:	8afa      	ldrh	r2, [r7, #22]
 8002738:	8abb      	ldrh	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800273c:	461a      	mov	r2, r3
 800273e:	f004 fae1 	bl	8006d04 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff ff6c 	bl	8002620 <UARTTxDumpBuffer>

}
 8002748:	bf00      	nop
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	807b      	strh	r3, [r7, #2]

	switch (State)
 800275c:	4baa      	ldr	r3, [pc, #680]	; (8002a08 <UART_Protocol+0x2b8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b03      	cmp	r3, #3
 8002762:	f200 817a 	bhi.w	8002a5a <UART_Protocol+0x30a>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <UART_Protocol+0x1c>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	0800277d 	.word	0x0800277d
 8002770:	080028c3 	.word	0x080028c3
 8002774:	080028d3 	.word	0x080028d3
 8002778:	08002947 	.word	0x08002947
	{
	case Start_Mode:
		Mode = dataIn;
 800277c:	887b      	ldrh	r3, [r7, #2]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4ba2      	ldr	r3, [pc, #648]	; (8002a0c <UART_Protocol+0x2bc>)
 8002782:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8002784:	4ba1      	ldr	r3, [pc, #644]	; (8002a0c <UART_Protocol+0x2bc>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	3b91      	subs	r3, #145	; 0x91
 800278a:	2b0d      	cmp	r3, #13
 800278c:	f200 8082 	bhi.w	8002894 <UART_Protocol+0x144>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <UART_Protocol+0x48>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027d1 	.word	0x080027d1
 800279c:	080027df 	.word	0x080027df
 80027a0:	080027ed 	.word	0x080027ed
 80027a4:	080027fb 	.word	0x080027fb
 80027a8:	08002809 	.word	0x08002809
 80027ac:	08002817 	.word	0x08002817
 80027b0:	08002825 	.word	0x08002825
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002841 	.word	0x08002841
 80027bc:	0800284f 	.word	0x0800284f
 80027c0:	0800285d 	.word	0x0800285d
 80027c4:	0800286b 	.word	0x0800286b
 80027c8:	08002879 	.word	0x08002879
 80027cc:	08002887 	.word	0x08002887
		{
		case Test_Command:
			Frame = 2;
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <UART_Protocol+0x2c0>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 80027d6:	4b8c      	ldr	r3, [pc, #560]	; (8002a08 <UART_Protocol+0x2b8>)
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]
			break;
 80027dc:	e070      	b.n	80028c0 <UART_Protocol+0x170>
		case Connect_MCU:
			Frame = 1;
 80027de:	4b8c      	ldr	r3, [pc, #560]	; (8002a10 <UART_Protocol+0x2c0>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80027e4:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <UART_Protocol+0x2b8>)
 80027e6:	2203      	movs	r2, #3
 80027e8:	701a      	strb	r2, [r3, #0]
			break;
 80027ea:	e069      	b.n	80028c0 <UART_Protocol+0x170>
		case Disconnect_MCU:
			Frame = 1;
 80027ec:	4b88      	ldr	r3, [pc, #544]	; (8002a10 <UART_Protocol+0x2c0>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80027f2:	4b85      	ldr	r3, [pc, #532]	; (8002a08 <UART_Protocol+0x2b8>)
 80027f4:	2203      	movs	r2, #3
 80027f6:	701a      	strb	r2, [r3, #0]
			break;
 80027f8:	e062      	b.n	80028c0 <UART_Protocol+0x170>
		case Velocity_Set:
			Frame = 2;
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <UART_Protocol+0x2c0>)
 80027fc:	2202      	movs	r2, #2
 80027fe:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002800:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <UART_Protocol+0x2b8>)
 8002802:	2202      	movs	r2, #2
 8002804:	701a      	strb	r2, [r3, #0]
			break;
 8002806:	e05b      	b.n	80028c0 <UART_Protocol+0x170>
		case Position_Set:
			Frame = 2;
 8002808:	4b81      	ldr	r3, [pc, #516]	; (8002a10 <UART_Protocol+0x2c0>)
 800280a:	2202      	movs	r2, #2
 800280c:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 800280e:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <UART_Protocol+0x2b8>)
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
			break;
 8002814:	e054      	b.n	80028c0 <UART_Protocol+0x170>
		case Goal_1_Set:
			Frame = 2;
 8002816:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <UART_Protocol+0x2c0>)
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 800281c:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <UART_Protocol+0x2b8>)
 800281e:	2202      	movs	r2, #2
 8002820:	701a      	strb	r2, [r3, #0]
			break;
 8002822:	e04d      	b.n	80028c0 <UART_Protocol+0x170>
		case Goal_N_Set:
			Frame = 3;
 8002824:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <UART_Protocol+0x2c0>)
 8002826:	2203      	movs	r2, #3
 8002828:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 800282a:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <UART_Protocol+0x2b8>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
			break;
 8002830:	e046      	b.n	80028c0 <UART_Protocol+0x170>
		case Go_to_Goal:
			Frame = 1;
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <UART_Protocol+0x2c0>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002838:	4b73      	ldr	r3, [pc, #460]	; (8002a08 <UART_Protocol+0x2b8>)
 800283a:	2203      	movs	r2, #3
 800283c:	701a      	strb	r2, [r3, #0]
			break;
 800283e:	e03f      	b.n	80028c0 <UART_Protocol+0x170>
		case Station_Request:
			Frame = 1;
 8002840:	4b73      	ldr	r3, [pc, #460]	; (8002a10 <UART_Protocol+0x2c0>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002846:	4b70      	ldr	r3, [pc, #448]	; (8002a08 <UART_Protocol+0x2b8>)
 8002848:	2203      	movs	r2, #3
 800284a:	701a      	strb	r2, [r3, #0]
			break;
 800284c:	e038      	b.n	80028c0 <UART_Protocol+0x170>
		case Position_Request:
			Frame = 1;
 800284e:	4b70      	ldr	r3, [pc, #448]	; (8002a10 <UART_Protocol+0x2c0>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002854:	4b6c      	ldr	r3, [pc, #432]	; (8002a08 <UART_Protocol+0x2b8>)
 8002856:	2203      	movs	r2, #3
 8002858:	701a      	strb	r2, [r3, #0]
			break;
 800285a:	e031      	b.n	80028c0 <UART_Protocol+0x170>
		case Velocity_Request:
			Frame = 1;
 800285c:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <UART_Protocol+0x2c0>)
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002862:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <UART_Protocol+0x2b8>)
 8002864:	2203      	movs	r2, #3
 8002866:	701a      	strb	r2, [r3, #0]
			break;
 8002868:	e02a      	b.n	80028c0 <UART_Protocol+0x170>
		case Gripper_On:
			Frame = 1;
 800286a:	4b69      	ldr	r3, [pc, #420]	; (8002a10 <UART_Protocol+0x2c0>)
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002870:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <UART_Protocol+0x2b8>)
 8002872:	2203      	movs	r2, #3
 8002874:	701a      	strb	r2, [r3, #0]
			break;
 8002876:	e023      	b.n	80028c0 <UART_Protocol+0x170>
		case Gripper_Off:
			Frame = 1;
 8002878:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <UART_Protocol+0x2c0>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800287e:	4b62      	ldr	r3, [pc, #392]	; (8002a08 <UART_Protocol+0x2b8>)
 8002880:	2203      	movs	r2, #3
 8002882:	701a      	strb	r2, [r3, #0]
			break;
 8002884:	e01c      	b.n	80028c0 <UART_Protocol+0x170>
		case Home_Set:
			Frame = 1;
 8002886:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <UART_Protocol+0x2c0>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800288c:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <UART_Protocol+0x2b8>)
 800288e:	2203      	movs	r2, #3
 8002890:	701a      	strb	r2, [r3, #0]
			break;
 8002892:	e015      	b.n	80028c0 <UART_Protocol+0x170>
		default:
			State = Start_Mode;
 8002894:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <UART_Protocol+0x2b8>)
 8002896:	2200      	movs	r2, #0
 8002898:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 800289a:	4b5c      	ldr	r3, [pc, #368]	; (8002a0c <UART_Protocol+0x2bc>)
 800289c:	2290      	movs	r2, #144	; 0x90
 800289e:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 80028a0:	4b5b      	ldr	r3, [pc, #364]	; (8002a10 <UART_Protocol+0x2c0>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
			Data = 0;
 80028a6:	4b5b      	ldr	r3, [pc, #364]	; (8002a14 <UART_Protocol+0x2c4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 80028ac:	4b5a      	ldr	r3, [pc, #360]	; (8002a18 <UART_Protocol+0x2c8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
			N = 0;
 80028b2:	4b5a      	ldr	r3, [pc, #360]	; (8002a1c <UART_Protocol+0x2cc>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
			len = 0;
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <UART_Protocol+0x2d0>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
			break;
 80028be:	bf00      	nop
		break;
		}
		break;
 80028c0:	e0cb      	b.n	8002a5a <UART_Protocol+0x30a>
	case N_Station:
		N = dataIn;
 80028c2:	887b      	ldrh	r3, [r7, #2]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b55      	ldr	r3, [pc, #340]	; (8002a1c <UART_Protocol+0x2cc>)
 80028c8:	701a      	strb	r2, [r3, #0]
		State = Data_Frame;
 80028ca:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <UART_Protocol+0x2b8>)
 80028cc:	2202      	movs	r2, #2
 80028ce:	701a      	strb	r2, [r3, #0]
		break;
 80028d0:	e0c3      	b.n	8002a5a <UART_Protocol+0x30a>
	case Data_Frame:
		Data = dataIn;
 80028d2:	887b      	ldrh	r3, [r7, #2]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b4f      	ldr	r3, [pc, #316]	; (8002a14 <UART_Protocol+0x2c4>)
 80028d8:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 80028da:	4b4c      	ldr	r3, [pc, #304]	; (8002a0c <UART_Protocol+0x2bc>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	3b91      	subs	r3, #145	; 0x91
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	f200 80b9 	bhi.w	8002a58 <UART_Protocol+0x308>
 80028e6:	a201      	add	r2, pc, #4	; (adr r2, 80028ec <UART_Protocol+0x19c>)
 80028e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ec:	08002909 	.word	0x08002909
 80028f0:	08002a59 	.word	0x08002a59
 80028f4:	08002a59 	.word	0x08002a59
 80028f8:	08002911 	.word	0x08002911
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002921 	.word	0x08002921
 8002904:	08002929 	.word	0x08002929
		{
		case Test_Command:
			State = Check_Sum;
 8002908:	4b3f      	ldr	r3, [pc, #252]	; (8002a08 <UART_Protocol+0x2b8>)
 800290a:	2203      	movs	r2, #3
 800290c:	701a      	strb	r2, [r3, #0]
			break;
 800290e:	e019      	b.n	8002944 <UART_Protocol+0x1f4>
		case Velocity_Set:
			State = Check_Sum;
 8002910:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <UART_Protocol+0x2b8>)
 8002912:	2203      	movs	r2, #3
 8002914:	701a      	strb	r2, [r3, #0]
			break;
 8002916:	e015      	b.n	8002944 <UART_Protocol+0x1f4>
		case Position_Set:
			State = Check_Sum;
 8002918:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <UART_Protocol+0x2b8>)
 800291a:	2203      	movs	r2, #3
 800291c:	701a      	strb	r2, [r3, #0]
			break;
 800291e:	e011      	b.n	8002944 <UART_Protocol+0x1f4>
		case Goal_1_Set:
			State = Check_Sum;
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <UART_Protocol+0x2b8>)
 8002922:	2203      	movs	r2, #3
 8002924:	701a      	strb	r2, [r3, #0]
			break;
 8002926:	e00d      	b.n	8002944 <UART_Protocol+0x1f4>
		case Goal_N_Set:
			N -= 1;
 8002928:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <UART_Protocol+0x2cc>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	b2da      	uxtb	r2, r3
 8002930:	4b3a      	ldr	r3, [pc, #232]	; (8002a1c <UART_Protocol+0x2cc>)
 8002932:	701a      	strb	r2, [r3, #0]
			if (N == 0)
 8002934:	4b39      	ldr	r3, [pc, #228]	; (8002a1c <UART_Protocol+0x2cc>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d102      	bne.n	8002942 <UART_Protocol+0x1f2>
			{
				State = Check_Sum;
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <UART_Protocol+0x2b8>)
 800293e:	2203      	movs	r2, #3
 8002940:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002942:	bf00      	nop
		break;
		}

		break;
 8002944:	e088      	b.n	8002a58 <UART_Protocol+0x308>
	case Check_Sum:
		Sum = dataIn;
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <UART_Protocol+0x2c8>)
 800294c:	701a      	strb	r2, [r3, #0]
		switch (Frame)
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <UART_Protocol+0x2c0>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d04c      	beq.n	80029f0 <UART_Protocol+0x2a0>
 8002956:	2b03      	cmp	r3, #3
 8002958:	dc7a      	bgt.n	8002a50 <UART_Protocol+0x300>
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <UART_Protocol+0x214>
 800295e:	2b02      	cmp	r3, #2
 8002960:	d021      	beq.n	80029a6 <UART_Protocol+0x256>
 8002962:	e075      	b.n	8002a50 <UART_Protocol+0x300>
		{
		case 1:
			if (Sum == (uint8_t)~Mode)
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <UART_Protocol+0x2bc>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	43db      	mvns	r3, r3
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b2a      	ldr	r3, [pc, #168]	; (8002a18 <UART_Protocol+0x2c8>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d102      	bne.n	800297a <UART_Protocol+0x22a>
			{
				UART_Do_Command();
 8002974:	f000 f884 	bl	8002a80 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8002978:	e06a      	b.n	8002a50 <UART_Protocol+0x300>
				State = Start_Mode;
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <UART_Protocol+0x2b8>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8002980:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <UART_Protocol+0x2bc>)
 8002982:	2290      	movs	r2, #144	; 0x90
 8002984:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8002986:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <UART_Protocol+0x2c0>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
				Data = 0;
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <UART_Protocol+0x2c4>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <UART_Protocol+0x2c8>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
				N = 0;
 8002998:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <UART_Protocol+0x2cc>)
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
				len = 0;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <UART_Protocol+0x2d0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
			break;
 80029a4:	e054      	b.n	8002a50 <UART_Protocol+0x300>
		case 2:
			if (Sum == (uint8_t)~(Mode+Data))
 80029a6:	4b19      	ldr	r3, [pc, #100]	; (8002a0c <UART_Protocol+0x2bc>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b1a      	ldr	r3, [pc, #104]	; (8002a14 <UART_Protocol+0x2c4>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	43db      	mvns	r3, r3
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <UART_Protocol+0x2c8>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d102      	bne.n	80029c4 <UART_Protocol+0x274>
			{
				UART_Do_Command();
 80029be:	f000 f85f 	bl	8002a80 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 80029c2:	e045      	b.n	8002a50 <UART_Protocol+0x300>
				State = Start_Mode;
 80029c4:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <UART_Protocol+0x2b8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 80029ca:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <UART_Protocol+0x2bc>)
 80029cc:	2290      	movs	r2, #144	; 0x90
 80029ce:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <UART_Protocol+0x2c0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
				Data = 0;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <UART_Protocol+0x2c4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <UART_Protocol+0x2c8>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
				N = 0;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <UART_Protocol+0x2cc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
				len = 0;
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <UART_Protocol+0x2d0>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
			break;
 80029ee:	e02f      	b.n	8002a50 <UART_Protocol+0x300>
		case 3:

			if (Sum == (uint8_t)~(Mode))
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <UART_Protocol+0x2bc>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	43db      	mvns	r3, r3
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	4b07      	ldr	r3, [pc, #28]	; (8002a18 <UART_Protocol+0x2c8>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d111      	bne.n	8002a24 <UART_Protocol+0x2d4>
			{
				UART_Do_Command();
 8002a00:	f000 f83e 	bl	8002a80 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8002a04:	e023      	b.n	8002a4e <UART_Protocol+0x2fe>
 8002a06:	bf00      	nop
 8002a08:	200001c8 	.word	0x200001c8
 8002a0c:	20000024 	.word	0x20000024
 8002a10:	200002ec 	.word	0x200002ec
 8002a14:	20000398 	.word	0x20000398
 8002a18:	200003e4 	.word	0x200003e4
 8002a1c:	200001ec 	.word	0x200001ec
 8002a20:	20000474 	.word	0x20000474
				State = Start_Mode;
 8002a24:	4b0f      	ldr	r3, [pc, #60]	; (8002a64 <UART_Protocol+0x314>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8002a2a:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <UART_Protocol+0x318>)
 8002a2c:	2290      	movs	r2, #144	; 0x90
 8002a2e:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8002a30:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <UART_Protocol+0x31c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <UART_Protocol+0x320>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <UART_Protocol+0x324>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
				N = 0;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <UART_Protocol+0x328>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
				len = 0;
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <UART_Protocol+0x32c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	701a      	strb	r2, [r3, #0]
			break;
 8002a4e:	bf00      	nop
		break;
		}

		State = Start_Mode;
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <UART_Protocol+0x314>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
		break;
 8002a56:	e000      	b.n	8002a5a <UART_Protocol+0x30a>
		break;
 8002a58:	bf00      	nop

	break;
	}

}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	200001c8 	.word	0x200001c8
 8002a68:	20000024 	.word	0x20000024
 8002a6c:	200002ec 	.word	0x200002ec
 8002a70:	20000398 	.word	0x20000398
 8002a74:	200003e4 	.word	0x200003e4
 8002a78:	200001ec 	.word	0x200001ec
 8002a7c:	20000474 	.word	0x20000474

08002a80 <UART_Do_Command>:
void UART_Do_Command()
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
	if (Frame == 1)
 8002a86:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <UART_Do_Command+0xcc>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d113      	bne.n	8002ab6 <UART_Do_Command+0x36>
	{
		uint8_t Test[] = {0, 0};
 8002a8e:	2300      	movs	r3, #0
 8002a90:	80bb      	strh	r3, [r7, #4]
		Test[0] = Mode;
 8002a92:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <UART_Do_Command+0xd0>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	713b      	strb	r3, [r7, #4]
		Test[1] = Sum;
 8002a98:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <UART_Do_Command+0xd4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	717b      	strb	r3, [r7, #5]
		UARTTxWrite(&UART2, Test, len);
 8002a9e:	4b2e      	ldr	r3, [pc, #184]	; (8002b58 <UART_Do_Command+0xd8>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	482c      	ldr	r0, [pc, #176]	; (8002b5c <UART_Do_Command+0xdc>)
 8002aaa:	f7ff fe09 	bl	80026c0 <UARTTxWrite>
		len = 0;
 8002aae:	4b2a      	ldr	r3, [pc, #168]	; (8002b58 <UART_Do_Command+0xd8>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
 8002ab4:	e01f      	b.n	8002af6 <UART_Do_Command+0x76>
	}
	else if (Frame == 2)
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <UART_Do_Command+0xcc>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d11b      	bne.n	8002af6 <UART_Do_Command+0x76>
	{
		uint8_t Test[] = {0, 0, 0};
 8002abe:	4a28      	ldr	r2, [pc, #160]	; (8002b60 <UART_Do_Command+0xe0>)
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	8019      	strh	r1, [r3, #0]
 8002ac8:	3302      	adds	r3, #2
 8002aca:	0c12      	lsrs	r2, r2, #16
 8002acc:	701a      	strb	r2, [r3, #0]
		Test[0] = Mode;
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <UART_Do_Command+0xd0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	703b      	strb	r3, [r7, #0]
		Test[1] = Data;
 8002ad4:	4b23      	ldr	r3, [pc, #140]	; (8002b64 <UART_Do_Command+0xe4>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	707b      	strb	r3, [r7, #1]
		Test[2] = Sum;
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <UART_Do_Command+0xd4>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	70bb      	strb	r3, [r7, #2]
		UARTTxWrite(&UART2, Test, len);
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <UART_Do_Command+0xd8>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	463b      	mov	r3, r7
 8002ae8:	4619      	mov	r1, r3
 8002aea:	481c      	ldr	r0, [pc, #112]	; (8002b5c <UART_Do_Command+0xdc>)
 8002aec:	f7ff fde8 	bl	80026c0 <UARTTxWrite>
		len = 0;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <UART_Do_Command+0xd8>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
	{


	}

	switch (Mode)
 8002af6:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <UART_Do_Command+0xd0>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	3b91      	subs	r3, #145	; 0x91
 8002afc:	2b0d      	cmp	r3, #13
 8002afe:	d820      	bhi.n	8002b42 <UART_Do_Command+0xc2>
 8002b00:	a201      	add	r2, pc, #4	; (adr r2, 8002b08 <UART_Do_Command+0x88>)
 8002b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b06:	bf00      	nop
 8002b08:	08002b41 	.word	0x08002b41
 8002b0c:	08002b41 	.word	0x08002b41
 8002b10:	08002b41 	.word	0x08002b41
 8002b14:	08002b41 	.word	0x08002b41
 8002b18:	08002b41 	.word	0x08002b41
 8002b1c:	08002b41 	.word	0x08002b41
 8002b20:	08002b41 	.word	0x08002b41
 8002b24:	08002b41 	.word	0x08002b41
 8002b28:	08002b41 	.word	0x08002b41
 8002b2c:	08002b41 	.word	0x08002b41
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b41 	.word	0x08002b41
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002b41 	.word	0x08002b41
	{
	case Test_Command:
		break;
 8002b40:	bf00      	nop
	}




}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	200002ec 	.word	0x200002ec
 8002b50:	20000024 	.word	0x20000024
 8002b54:	200003e4 	.word	0x200003e4
 8002b58:	20000474 	.word	0x20000474
 8002b5c:	200001b0 	.word	0x200001b0
 8002b60:	08008698 	.word	0x08008698
 8002b64:	20000398 	.word	0x20000398

08002b68 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b68:	b4b0      	push	{r4, r5, r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d109      	bne.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002b78:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7e:	f112 34ff 	adds.w	r4, r2, #4294967295
 8002b82:	f143 0500 	adc.w	r5, r3, #0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b88:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bcb0      	pop	{r4, r5, r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200003e8 	.word	0x200003e8
 8002b9c:	200000c0 	.word	0x200000c0

08002ba0 <micros>:
uint64_t micros()
{
 8002ba0:	b4b0      	push	{r4, r5, r7}
 8002ba2:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <micros+0x2c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	4618      	mov	r0, r3
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	4b07      	ldr	r3, [pc, #28]	; (8002bd0 <micros+0x30>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	1884      	adds	r4, r0, r2
 8002bb8:	eb41 0503 	adc.w	r5, r1, r3
 8002bbc:	4622      	mov	r2, r4
 8002bbe:	462b      	mov	r3, r5
}
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bcb0      	pop	{r4, r5, r7}
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200003e8 	.word	0x200003e8
 8002bd0:	200000c0 	.word	0x200000c0

08002bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd8:	b672      	cpsid	i
}
 8002bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <Error_Handler+0x8>
	...

08002be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c1e:	2007      	movs	r0, #7
 8002c20:	f000 fbf8 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <HAL_I2C_MspInit+0x84>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d12c      	bne.n	8002cac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c5c:	f043 0302 	orr.w	r3, r3, #2
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c74:	2312      	movs	r3, #18
 8002c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c80:	2304      	movs	r3, #4
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4619      	mov	r1, r3
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <HAL_I2C_MspInit+0x8c>)
 8002c8c:	f001 f806 	bl	8003c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002c9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_I2C_MspInit+0x88>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cac:	bf00      	nop
 8002cae:	3728      	adds	r7, #40	; 0x28
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40005400 	.word	0x40005400
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020400 	.word	0x40020400

08002cc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_TIM_Encoder_MspInit+0x84>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d12c      	bne.n	8002d3c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <HAL_TIM_Encoder_MspInit+0x88>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8002d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	2302      	movs	r3, #2
 8002d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	4619      	mov	r1, r3
 8002d36:	4805      	ldr	r0, [pc, #20]	; (8002d4c <HAL_TIM_Encoder_MspInit+0x8c>)
 8002d38:	f000 ffb0 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d3c:	bf00      	nop
 8002d3e:	3728      	adds	r7, #40	; 0x28
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40010000 	.word	0x40010000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	40020000 	.word	0x40020000

08002d50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d116      	bne.n	8002d90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6413      	str	r3, [r2, #64]	; 0x40
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2100      	movs	r1, #0
 8002d82:	201c      	movs	r0, #28
 8002d84:	f000 fb51 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d88:	201c      	movs	r0, #28
 8002d8a:	f000 fb6a 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d8e:	e02e      	b.n	8002dee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a19      	ldr	r2, [pc, #100]	; (8002dfc <HAL_TIM_Base_MspInit+0xac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d10e      	bne.n	8002db8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a15      	ldr	r2, [pc, #84]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
}
 8002db6:	e01a      	b.n	8002dee <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <HAL_TIM_Base_MspInit+0xb0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d115      	bne.n	8002dee <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_TIM_Base_MspInit+0xa8>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0304 	and.w	r3, r3, #4
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	201e      	movs	r0, #30
 8002de4:	f000 fb21 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002de8:	201e      	movs	r0, #30
 8002dea:	f000 fb3a 	bl	8003462 <HAL_NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800

08002e04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_TIM_MspPostInit+0x68>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d11d      	bne.n	8002e62 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	6313      	str	r3, [r2, #48]	; 0x30
 8002e36:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_TIM_MspPostInit+0x6c>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e42:	2302      	movs	r3, #2
 8002e44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <HAL_TIM_MspPostInit+0x70>)
 8002e5e:	f000 ff1d 	bl	8003c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40020400 	.word	0x40020400

08002e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e80:	f107 0314 	add.w	r3, r7, #20
 8002e84:	2200      	movs	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	605a      	str	r2, [r3, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	60da      	str	r2, [r3, #12]
 8002e8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a4c      	ldr	r2, [pc, #304]	; (8002fc8 <HAL_UART_MspInit+0x150>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f040 8091 	bne.w	8002fbe <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a49      	ldr	r2, [pc, #292]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a42      	ldr	r2, [pc, #264]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec8:	4b40      	ldr	r3, [pc, #256]	; (8002fcc <HAL_UART_MspInit+0x154>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ee4:	2307      	movs	r3, #7
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee8:	f107 0314 	add.w	r3, r7, #20
 8002eec:	4619      	mov	r1, r3
 8002eee:	4838      	ldr	r0, [pc, #224]	; (8002fd0 <HAL_UART_MspInit+0x158>)
 8002ef0:	f000 fed4 	bl	8003c9c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002ef4:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002ef6:	4a38      	ldr	r2, [pc, #224]	; (8002fd8 <HAL_UART_MspInit+0x160>)
 8002ef8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002efc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f00:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f08:	4b32      	ldr	r3, [pc, #200]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0e:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f14:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f16:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002f22:	4b2c      	ldr	r3, [pc, #176]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f28:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f30:	4b28      	ldr	r3, [pc, #160]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f36:	4827      	ldr	r0, [pc, #156]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f38:	f000 faae 	bl	8003498 <HAL_DMA_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002f42:	f7ff fe47 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a22      	ldr	r2, [pc, #136]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4c:	4a21      	ldr	r2, [pc, #132]	; (8002fd4 <HAL_UART_MspInit+0x15c>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002f52:	4b22      	ldr	r3, [pc, #136]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f54:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_UART_MspInit+0x168>)
 8002f56:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002f58:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f5e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f72:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002f80:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002f92:	4812      	ldr	r0, [pc, #72]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002f94:	f000 fa80 	bl	8003498 <HAL_DMA_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002f9e:	f7ff fe19 	bl	8002bd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a0d      	ldr	r2, [pc, #52]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <HAL_UART_MspInit+0x164>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	2026      	movs	r0, #38	; 0x26
 8002fb4:	f000 fa39 	bl	800342a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002fb8:	2026      	movs	r0, #38	; 0x26
 8002fba:	f000 fa52 	bl	8003462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002fbe:	bf00      	nop
 8002fc0:	3728      	adds	r7, #40	; 0x28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40004400 	.word	0x40004400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	200001f0 	.word	0x200001f0
 8002fd8:	40026088 	.word	0x40026088
 8002fdc:	20000338 	.word	0x20000338
 8002fe0:	400260a0 	.word	0x400260a0

08002fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fe8:	e7fe      	b.n	8002fe8 <NMI_Handler+0x4>

08002fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fee:	e7fe      	b.n	8002fee <HardFault_Handler+0x4>

08002ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff4:	e7fe      	b.n	8002ff4 <MemManage_Handler+0x4>

08002ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <UsageFault_Handler+0x4>

08003002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003030:	f000 f900 	bl	8003234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <DMA1_Stream5_IRQHandler+0x10>)
 800303e:	f000 fbc3 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200001f0 	.word	0x200001f0

0800304c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003050:	4802      	ldr	r0, [pc, #8]	; (800305c <DMA1_Stream6_IRQHandler+0x10>)
 8003052:	f000 fbb9 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000338 	.word	0x20000338

08003060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003064:	4802      	ldr	r0, [pc, #8]	; (8003070 <TIM2_IRQHandler+0x10>)
 8003066:	f002 f8dd 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200003e8 	.word	0x200003e8

08003074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <TIM4_IRQHandler+0x10>)
 800307a:	f002 f8d3 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000250 	.word	0x20000250

08003088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800308c:	4802      	ldr	r0, [pc, #8]	; (8003098 <USART2_IRQHandler+0x10>)
 800308e:	f002 ffb3 	bl	8005ff8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000430 	.word	0x20000430

0800309c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030a4:	f000 ff98 	bl	8003fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}

080030ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <_sbrk+0x5c>)
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <_sbrk+0x60>)
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c0:	4b13      	ldr	r3, [pc, #76]	; (8003110 <_sbrk+0x64>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <_sbrk+0x64>)
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <_sbrk+0x68>)
 80030cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ce:	4b10      	ldr	r3, [pc, #64]	; (8003110 <_sbrk+0x64>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d207      	bcs.n	80030ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030dc:	f003 fde8 	bl	8006cb0 <__errno>
 80030e0:	4603      	mov	r3, r0
 80030e2:	220c      	movs	r2, #12
 80030e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030e6:	f04f 33ff 	mov.w	r3, #4294967295
 80030ea:	e009      	b.n	8003100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ec:	4b08      	ldr	r3, [pc, #32]	; (8003110 <_sbrk+0x64>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030f2:	4b07      	ldr	r3, [pc, #28]	; (8003110 <_sbrk+0x64>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <_sbrk+0x64>)
 80030fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030fe:	68fb      	ldr	r3, [r7, #12]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	20020000 	.word	0x20020000
 800310c:	00000400 	.word	0x00000400
 8003110:	200001e0 	.word	0x200001e0
 8003114:	20000490 	.word	0x20000490

08003118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SystemInit+0x20>)
 800311e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <SystemInit+0x20>)
 8003124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800313c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003174 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003140:	480d      	ldr	r0, [pc, #52]	; (8003178 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003142:	490e      	ldr	r1, [pc, #56]	; (800317c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003144:	4a0e      	ldr	r2, [pc, #56]	; (8003180 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003148:	e002      	b.n	8003150 <LoopCopyDataInit>

0800314a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800314a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800314e:	3304      	adds	r3, #4

08003150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003154:	d3f9      	bcc.n	800314a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003156:	4a0b      	ldr	r2, [pc, #44]	; (8003184 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003158:	4c0b      	ldr	r4, [pc, #44]	; (8003188 <LoopFillZerobss+0x26>)
  movs r3, #0
 800315a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800315c:	e001      	b.n	8003162 <LoopFillZerobss>

0800315e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800315e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003160:	3204      	adds	r2, #4

08003162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003164:	d3fb      	bcc.n	800315e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003166:	f7ff ffd7 	bl	8003118 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800316a:	f003 fda7 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800316e:	f7fd ffb7 	bl	80010e0 <main>
  bx  lr    
 8003172:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800317c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8003180:	08008730 	.word	0x08008730
  ldr r2, =_sbss
 8003184:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003188:	2000048c 	.word	0x2000048c

0800318c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800318c:	e7fe      	b.n	800318c <ADC_IRQHandler>
	...

08003190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003194:	4b0e      	ldr	r3, [pc, #56]	; (80031d0 <HAL_Init+0x40>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0d      	ldr	r2, [pc, #52]	; (80031d0 <HAL_Init+0x40>)
 800319a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800319e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a0:	4b0b      	ldr	r3, [pc, #44]	; (80031d0 <HAL_Init+0x40>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <HAL_Init+0x40>)
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <HAL_Init+0x40>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a07      	ldr	r2, [pc, #28]	; (80031d0 <HAL_Init+0x40>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031b8:	2003      	movs	r0, #3
 80031ba:	f000 f92b 	bl	8003414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031be:	2000      	movs	r0, #0
 80031c0:	f000 f808 	bl	80031d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031c4:	f7ff fd0c 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023c00 	.word	0x40023c00

080031d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_InitTick+0x54>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_InitTick+0x58>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	4619      	mov	r1, r3
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f943 	bl	800347e <HAL_SYSTICK_Config>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e00e      	b.n	8003220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b0f      	cmp	r3, #15
 8003206:	d80a      	bhi.n	800321e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003208:	2200      	movs	r2, #0
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f000 f90b 	bl	800342a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003214:	4a06      	ldr	r2, [pc, #24]	; (8003230 <HAL_InitTick+0x5c>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20000028 	.word	0x20000028
 800322c:	20000030 	.word	0x20000030
 8003230:	2000002c 	.word	0x2000002c

08003234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_IncTick+0x20>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x24>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4413      	add	r3, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <HAL_IncTick+0x24>)
 8003246:	6013      	str	r3, [r2, #0]
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000030 	.word	0x20000030
 8003258:	20000478 	.word	0x20000478

0800325c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return uwTick;
 8003260:	4b03      	ldr	r3, [pc, #12]	; (8003270 <HAL_GetTick+0x14>)
 8003262:	681b      	ldr	r3, [r3, #0]
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	20000478 	.word	0x20000478

08003274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003290:	4013      	ands	r3, r2
 8003292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800329c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <__NVIC_SetPriorityGrouping+0x44>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60d3      	str	r3, [r2, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <__NVIC_GetPriorityGrouping+0x18>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	f003 0307 	and.w	r3, r3, #7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000ed00 	.word	0xe000ed00

080032d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	4603      	mov	r3, r0
 80032e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db0b      	blt.n	8003302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4907      	ldr	r1, [pc, #28]	; (8003310 <__NVIC_EnableIRQ+0x38>)
 80032f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2001      	movs	r0, #1
 80032fa:	fa00 f202 	lsl.w	r2, r0, r2
 80032fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000e100 	.word	0xe000e100

08003314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	6039      	str	r1, [r7, #0]
 800331e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003324:	2b00      	cmp	r3, #0
 8003326:	db0a      	blt.n	800333e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	490c      	ldr	r1, [pc, #48]	; (8003360 <__NVIC_SetPriority+0x4c>)
 800332e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	440b      	add	r3, r1
 8003338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800333c:	e00a      	b.n	8003354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4908      	ldr	r1, [pc, #32]	; (8003364 <__NVIC_SetPriority+0x50>)
 8003344:	79fb      	ldrb	r3, [r7, #7]
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	3b04      	subs	r3, #4
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	440b      	add	r3, r1
 8003352:	761a      	strb	r2, [r3, #24]
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	e000e100 	.word	0xe000e100
 8003364:	e000ed00 	.word	0xe000ed00

08003368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003368:	b480      	push	{r7}
 800336a:	b089      	sub	sp, #36	; 0x24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	f1c3 0307 	rsb	r3, r3, #7
 8003382:	2b04      	cmp	r3, #4
 8003384:	bf28      	it	cs
 8003386:	2304      	movcs	r3, #4
 8003388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	3304      	adds	r3, #4
 800338e:	2b06      	cmp	r3, #6
 8003390:	d902      	bls.n	8003398 <NVIC_EncodePriority+0x30>
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3b03      	subs	r3, #3
 8003396:	e000      	b.n	800339a <NVIC_EncodePriority+0x32>
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	43da      	mvns	r2, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	401a      	ands	r2, r3
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b0:	f04f 31ff 	mov.w	r1, #4294967295
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ba:	43d9      	mvns	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c0:	4313      	orrs	r3, r2
         );
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3724      	adds	r7, #36	; 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033e0:	d301      	bcc.n	80033e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00f      	b.n	8003406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033e6:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <SysTick_Config+0x40>)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033ee:	210f      	movs	r1, #15
 80033f0:	f04f 30ff 	mov.w	r0, #4294967295
 80033f4:	f7ff ff8e 	bl	8003314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <SysTick_Config+0x40>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <SysTick_Config+0x40>)
 8003400:	2207      	movs	r2, #7
 8003402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	e000e010 	.word	0xe000e010

08003414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff29 	bl	8003274 <__NVIC_SetPriorityGrouping>
}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	4603      	mov	r3, r0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800343c:	f7ff ff3e 	bl	80032bc <__NVIC_GetPriorityGrouping>
 8003440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68b9      	ldr	r1, [r7, #8]
 8003446:	6978      	ldr	r0, [r7, #20]
 8003448:	f7ff ff8e 	bl	8003368 <NVIC_EncodePriority>
 800344c:	4602      	mov	r2, r0
 800344e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003452:	4611      	mov	r1, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff5d 	bl	8003314 <__NVIC_SetPriority>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff31 	bl	80032d8 <__NVIC_EnableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ffa2 	bl	80033d0 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff feda 	bl	800325c <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e099      	b.n	80035e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d4:	e00f      	b.n	80034f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d6:	f7ff fec1 	bl	800325c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d908      	bls.n	80034f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e078      	b.n	80035e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e8      	bne.n	80034d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_DMA_Init+0x158>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b04      	cmp	r3, #4
 800354e:	d107      	bne.n	8003560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4313      	orrs	r3, r2
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b04      	cmp	r3, #4
 8003588:	d117      	bne.n	80035ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb01 	bl	8003ba4 <DMA_CheckFifoParam>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035b6:	2301      	movs	r3, #1
 80035b8:	e016      	b.n	80035e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fab8 	bl	8003b38 <DMA_CalcBaseAndBitshift>
 80035c8:	4603      	mov	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	f010803f 	.word	0xf010803f

080035f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_DMA_Start_IT+0x26>
 8003616:	2302      	movs	r3, #2
 8003618:	e040      	b.n	800369c <HAL_DMA_Start_IT+0xa8>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d12f      	bne.n	800368e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa4a 	bl	8003adc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0216 	orr.w	r2, r2, #22
 8003662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0208 	orr.w	r2, r2, #8
 800367a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e005      	b.n	800369a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7ff fdd3 	bl	800325c <HAL_GetTick>
 80036b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d008      	beq.n	80036d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e052      	b.n	800377c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0216 	bic.w	r2, r2, #22
 80036e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_DMA_Abort+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	e013      	b.n	8003750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003728:	f7ff fd98 	bl	800325c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b05      	cmp	r3, #5
 8003734:	d90c      	bls.n	8003750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e015      	b.n	800377c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e4      	bne.n	8003728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	223f      	movs	r2, #63	; 0x3f
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d004      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00c      	b.n	80037bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2205      	movs	r2, #5
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037d4:	4b92      	ldr	r3, [pc, #584]	; (8003a20 <HAL_DMA_IRQHandler+0x258>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a92      	ldr	r2, [pc, #584]	; (8003a24 <HAL_DMA_IRQHandler+0x25c>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	2208      	movs	r2, #8
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01a      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2208      	movs	r2, #8
 8003822:	409a      	lsls	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	2204      	movs	r2, #4
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	2204      	movs	r2, #4
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2210      	movs	r2, #16
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d043      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2210      	movs	r2, #16
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e01f      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
 8003908:	e016      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	2220      	movs	r2, #32
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 808e 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8086 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	2220      	movs	r2, #32
 8003960:	409a      	lsls	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b05      	cmp	r3, #5
 8003970:	d136      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0216 	bic.w	r2, r2, #22
 8003980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x1da>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0208 	bic.w	r2, r2, #8
 80039b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	223f      	movs	r2, #63	; 0x3f
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d07d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
        }
        return;
 80039de:	e078      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d030      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e02b      	b.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
 8003a1e:	e022      	b.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
 8003a20:	20000028 	.word	0x20000028
 8003a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0210 	bic.w	r2, r2, #16
 8003a44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d307      	bcc.n	8003aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f2      	bne.n	8003a92 <HAL_DMA_IRQHandler+0x2ca>
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003aae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
 8003ad0:	e000      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ad2:	bf00      	nop
    }
  }
}
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop

08003adc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003af8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d108      	bne.n	8003b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b1a:	e007      	b.n	8003b2c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	60da      	str	r2, [r3, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	3b10      	subs	r3, #16
 8003b48:	4a14      	ldr	r2, [pc, #80]	; (8003b9c <DMA_CalcBaseAndBitshift+0x64>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <DMA_CalcBaseAndBitshift+0x68>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b03      	cmp	r3, #3
 8003b64:	d909      	bls.n	8003b7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b6e:	f023 0303 	bic.w	r3, r3, #3
 8003b72:	1d1a      	adds	r2, r3, #4
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	; 0x58
 8003b78:	e007      	b.n	8003b8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	aaaaaaab 	.word	0xaaaaaaab
 8003ba0:	080086b4 	.word	0x080086b4

08003ba4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d11f      	bne.n	8003bfe <DMA_CheckFifoParam+0x5a>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d856      	bhi.n	8003c72 <DMA_CheckFifoParam+0xce>
 8003bc4:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <DMA_CheckFifoParam+0x28>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bef 	.word	0x08003bef
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08003c73 	.word	0x08003c73
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d046      	beq.n	8003c76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bec:	e043      	b.n	8003c76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bf6:	d140      	bne.n	8003c7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bfc:	e03d      	b.n	8003c7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c06:	d121      	bne.n	8003c4c <DMA_CheckFifoParam+0xa8>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d837      	bhi.n	8003c7e <DMA_CheckFifoParam+0xda>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <DMA_CheckFifoParam+0x70>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c2b 	.word	0x08003c2b
 8003c1c:	08003c25 	.word	0x08003c25
 8003c20:	08003c3d 	.word	0x08003c3d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e030      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d025      	beq.n	8003c82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c3a:	e022      	b.n	8003c82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c4a:	e01c      	b.n	8003c86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d903      	bls.n	8003c5a <DMA_CheckFifoParam+0xb6>
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d003      	beq.n	8003c60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c58:	e018      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c5e:	e015      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c70:	e00b      	b.n	8003c8a <DMA_CheckFifoParam+0xe6>
      break;
 8003c72:	bf00      	nop
 8003c74:	e00a      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c76:	bf00      	nop
 8003c78:	e008      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e006      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e004      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop

08003c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b089      	sub	sp, #36	; 0x24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e159      	b.n	8003f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cb8:	2201      	movs	r2, #1
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	697a      	ldr	r2, [r7, #20]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8148 	bne.w	8003f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 0303 	and.w	r3, r3, #3
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d005      	beq.n	8003cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d130      	bne.n	8003d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d24:	2201      	movs	r2, #1
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 0201 	and.w	r2, r3, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f003 0303 	and.w	r3, r3, #3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d017      	beq.n	8003d8c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d123      	bne.n	8003de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	08da      	lsrs	r2, r3, #3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3208      	adds	r2, #8
 8003da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	220f      	movs	r2, #15
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	08da      	lsrs	r2, r3, #3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3208      	adds	r2, #8
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	2203      	movs	r2, #3
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	43db      	mvns	r3, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4013      	ands	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0203 	and.w	r2, r3, #3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a2 	beq.w	8003f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	4b57      	ldr	r3, [pc, #348]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e30:	6453      	str	r3, [r2, #68]	; 0x44
 8003e32:	4b54      	ldr	r3, [pc, #336]	; (8003f84 <HAL_GPIO_Init+0x2e8>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e3e:	4a52      	ldr	r2, [pc, #328]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	3302      	adds	r3, #2
 8003e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	220f      	movs	r2, #15
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a49      	ldr	r2, [pc, #292]	; (8003f8c <HAL_GPIO_Init+0x2f0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0x202>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a48      	ldr	r2, [pc, #288]	; (8003f90 <HAL_GPIO_Init+0x2f4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x1fe>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a47      	ldr	r2, [pc, #284]	; (8003f94 <HAL_GPIO_Init+0x2f8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x1fa>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a46      	ldr	r2, [pc, #280]	; (8003f98 <HAL_GPIO_Init+0x2fc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x1f6>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a45      	ldr	r2, [pc, #276]	; (8003f9c <HAL_GPIO_Init+0x300>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x1f2>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x204>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb0:	4935      	ldr	r1, [pc, #212]	; (8003f88 <HAL_GPIO_Init+0x2ec>)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ee2:	4a2f      	ldr	r2, [pc, #188]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ee8:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f60:	4a0f      	ldr	r2, [pc, #60]	; (8003fa0 <HAL_GPIO_Init+0x304>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	f67f aea2 	bls.w	8003cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3724      	adds	r7, #36	; 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40020000 	.word	0x40020000
 8003f90:	40020400 	.word	0x40020400
 8003f94:	40020800 	.word	0x40020800
 8003f98:	40020c00 	.word	0x40020c00
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40013c00 	.word	0x40013c00

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fc0:	e003      	b.n	8003fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fc2:	887b      	ldrh	r3, [r7, #2]
 8003fc4:	041a      	lsls	r2, r3, #16
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	619a      	str	r2, [r3, #24]
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fe2:	4b08      	ldr	r3, [pc, #32]	; (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fee:	4a05      	ldr	r2, [pc, #20]	; (8004004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f806 	bl	8004008 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	40013c00 	.word	0x40013c00

08004008 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e12b      	b.n	800428a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fe fdf2 	bl	8002c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2224      	movs	r2, #36	; 0x24
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004084:	f000 fd5c 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 8004088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	4a81      	ldr	r2, [pc, #516]	; (8004294 <HAL_I2C_Init+0x274>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d807      	bhi.n	80040a4 <HAL_I2C_Init+0x84>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4a80      	ldr	r2, [pc, #512]	; (8004298 <HAL_I2C_Init+0x278>)
 8004098:	4293      	cmp	r3, r2
 800409a:	bf94      	ite	ls
 800409c:	2301      	movls	r3, #1
 800409e:	2300      	movhi	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e006      	b.n	80040b2 <HAL_I2C_Init+0x92>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a7d      	ldr	r2, [pc, #500]	; (800429c <HAL_I2C_Init+0x27c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	bf94      	ite	ls
 80040ac:	2301      	movls	r3, #1
 80040ae:	2300      	movhi	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0e7      	b.n	800428a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a78      	ldr	r2, [pc, #480]	; (80042a0 <HAL_I2C_Init+0x280>)
 80040be:	fba2 2303 	umull	r2, r3, r2, r3
 80040c2:	0c9b      	lsrs	r3, r3, #18
 80040c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a6a      	ldr	r2, [pc, #424]	; (8004294 <HAL_I2C_Init+0x274>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d802      	bhi.n	80040f4 <HAL_I2C_Init+0xd4>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3301      	adds	r3, #1
 80040f2:	e009      	b.n	8004108 <HAL_I2C_Init+0xe8>
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	4a69      	ldr	r2, [pc, #420]	; (80042a4 <HAL_I2C_Init+0x284>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	099b      	lsrs	r3, r3, #6
 8004106:	3301      	adds	r3, #1
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	430b      	orrs	r3, r1
 800410e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800411a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	495c      	ldr	r1, [pc, #368]	; (8004294 <HAL_I2C_Init+0x274>)
 8004124:	428b      	cmp	r3, r1
 8004126:	d819      	bhi.n	800415c <HAL_I2C_Init+0x13c>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e59      	subs	r1, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	fbb1 f3f3 	udiv	r3, r1, r3
 8004136:	1c59      	adds	r1, r3, #1
 8004138:	f640 73fc 	movw	r3, #4092	; 0xffc
 800413c:	400b      	ands	r3, r1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_I2C_Init+0x138>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1e59      	subs	r1, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004150:	3301      	adds	r3, #1
 8004152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004156:	e051      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 8004158:	2304      	movs	r3, #4
 800415a:	e04f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d111      	bne.n	8004188 <HAL_I2C_Init+0x168>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	440b      	add	r3, r1
 8004172:	fbb0 f3f3 	udiv	r3, r0, r3
 8004176:	3301      	adds	r3, #1
 8004178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e012      	b.n	80041ae <HAL_I2C_Init+0x18e>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	1e58      	subs	r0, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	0099      	lsls	r1, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	fbb0 f3f3 	udiv	r3, r0, r3
 800419e:	3301      	adds	r3, #1
 80041a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	bf0c      	ite	eq
 80041a8:	2301      	moveq	r3, #1
 80041aa:	2300      	movne	r3, #0
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_I2C_Init+0x196>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e022      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10e      	bne.n	80041dc <HAL_I2C_Init+0x1bc>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1e58      	subs	r0, r3, #1
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6859      	ldr	r1, [r3, #4]
 80041c6:	460b      	mov	r3, r1
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	440b      	add	r3, r1
 80041cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	e00f      	b.n	80041fc <HAL_I2C_Init+0x1dc>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	1e58      	subs	r0, r3, #1
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6859      	ldr	r1, [r3, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	0099      	lsls	r1, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f2:	3301      	adds	r3, #1
 80041f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	6809      	ldr	r1, [r1, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69da      	ldr	r2, [r3, #28]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800422a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6911      	ldr	r1, [r2, #16]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68d2      	ldr	r2, [r2, #12]
 8004236:	4311      	orrs	r1, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	430b      	orrs	r3, r1
 800423e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	695a      	ldr	r2, [r3, #20]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	000186a0 	.word	0x000186a0
 8004298:	001e847f 	.word	0x001e847f
 800429c:	003d08ff 	.word	0x003d08ff
 80042a0:	431bde83 	.word	0x431bde83
 80042a4:	10624dd3 	.word	0x10624dd3

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e264      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042c6:	4ba3      	ldr	r3, [pc, #652]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d00c      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4ba0      	ldr	r3, [pc, #640]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d112      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042de:	4b9d      	ldr	r3, [pc, #628]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b99      	ldr	r3, [pc, #612]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e23f      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b91      	ldr	r3, [pc, #580]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a90      	ldr	r2, [pc, #576]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b8b      	ldr	r3, [pc, #556]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a8a      	ldr	r2, [pc, #552]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a87      	ldr	r2, [pc, #540]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a83      	ldr	r2, [pc, #524]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a80      	ldr	r2, [pc, #512]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7fe ff7c 	bl	800325c <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004368:	f7fe ff78 	bl	800325c <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e204      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b76      	ldr	r3, [pc, #472]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe ff68 	bl	800325c <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004390:	f7fe ff64 	bl	800325c <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1f0      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043be:	4b65      	ldr	r3, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ca:	4b62      	ldr	r3, [pc, #392]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b5f      	ldr	r3, [pc, #380]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b5c      	ldr	r3, [pc, #368]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c4      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4952      	ldr	r1, [pc, #328]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_RCC_OscConfig+0x2b0>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441e:	f7fe ff1d 	bl	800325c <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe ff19 	bl	800325c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a5      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4940      	ldr	r1, [pc, #256]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCC_OscConfig+0x2b0>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fe fefc 	bl	800325c <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe fef8 	bl	800325c <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e184      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d030      	beq.n	80044f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d016      	beq.n	80044c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <HAL_RCC_OscConfig+0x2b4>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a0:	f7fe fedc 	bl	800325c <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fe fed8 	bl	800325c <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e164      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b26      	ldr	r3, [pc, #152]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
 80044c6:	e015      	b.n	80044f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <HAL_RCC_OscConfig+0x2b4>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ce:	f7fe fec5 	bl	800325c <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fe fec1 	bl	800325c <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e14d      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e8:	4b1a      	ldr	r3, [pc, #104]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 80044ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f0      	bne.n	80044d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80a0 	beq.w	8004642 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004502:	2300      	movs	r3, #0
 8004504:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004506:	4b13      	ldr	r3, [pc, #76]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10f      	bne.n	8004532 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	4a0e      	ldr	r2, [pc, #56]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004520:	6413      	str	r3, [r2, #64]	; 0x40
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004532:	4b0b      	ldr	r3, [pc, #44]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	2b00      	cmp	r3, #0
 800453c:	d121      	bne.n	8004582 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453e:	4b08      	ldr	r3, [pc, #32]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_OscConfig+0x2b8>)
 8004544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454a:	f7fe fe87 	bl	800325c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004550:	e011      	b.n	8004576 <HAL_RCC_OscConfig+0x2ce>
 8004552:	bf00      	nop
 8004554:	40023800 	.word	0x40023800
 8004558:	42470000 	.word	0x42470000
 800455c:	42470e80 	.word	0x42470e80
 8004560:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004564:	f7fe fe7a 	bl	800325c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e106      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b85      	ldr	r3, [pc, #532]	; (800478c <HAL_RCC_OscConfig+0x4e4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x2f0>
 800458a:	4b81      	ldr	r3, [pc, #516]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	4a80      	ldr	r2, [pc, #512]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6713      	str	r3, [r2, #112]	; 0x70
 8004596:	e01c      	b.n	80045d2 <HAL_RCC_OscConfig+0x32a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	d10c      	bne.n	80045ba <HAL_RCC_OscConfig+0x312>
 80045a0:	4b7b      	ldr	r3, [pc, #492]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a4:	4a7a      	ldr	r2, [pc, #488]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045a6:	f043 0304 	orr.w	r3, r3, #4
 80045aa:	6713      	str	r3, [r2, #112]	; 0x70
 80045ac:	4b78      	ldr	r3, [pc, #480]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	4a77      	ldr	r2, [pc, #476]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	f043 0301 	orr.w	r3, r3, #1
 80045b6:	6713      	str	r3, [r2, #112]	; 0x70
 80045b8:	e00b      	b.n	80045d2 <HAL_RCC_OscConfig+0x32a>
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	4a74      	ldr	r2, [pc, #464]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	; 0x70
 80045c6:	4b72      	ldr	r3, [pc, #456]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ca:	4a71      	ldr	r2, [pc, #452]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d015      	beq.n	8004606 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045da:	f7fe fe3f 	bl	800325c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	e00a      	b.n	80045f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e2:	f7fe fe3b 	bl	800325c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e0c5      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f8:	4b65      	ldr	r3, [pc, #404]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0ee      	beq.n	80045e2 <HAL_RCC_OscConfig+0x33a>
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004606:	f7fe fe29 	bl	800325c <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800460e:	f7fe fe25 	bl	800325c <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	4293      	cmp	r3, r2
 800461e:	d901      	bls.n	8004624 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e0af      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004624:	4b5a      	ldr	r3, [pc, #360]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1ee      	bne.n	800460e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004630:	7dfb      	ldrb	r3, [r7, #23]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d105      	bne.n	8004642 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004636:	4b56      	ldr	r3, [pc, #344]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	4a55      	ldr	r2, [pc, #340]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800463c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004640:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	f000 809b 	beq.w	8004782 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800464c:	4b50      	ldr	r3, [pc, #320]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d05c      	beq.n	8004712 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d141      	bne.n	80046e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004666:	f7fe fdf9 	bl	800325c <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800466e:	f7fe fdf5 	bl	800325c <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e081      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69da      	ldr	r2, [r3, #28]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	019b      	lsls	r3, r3, #6
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	3b01      	subs	r3, #1
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	4937      	ldr	r1, [pc, #220]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b6:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046bc:	f7fe fdce 	bl	800325c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fdca 	bl	800325c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e056      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x41c>
 80046e2:	e04e      	b.n	8004782 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x4ec>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fe fdb7 	bl	800325c <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f2:	f7fe fdb3 	bl	800325c <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e03f      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x44a>
 8004710:	e037      	b.n	8004782 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e032      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <HAL_RCC_OscConfig+0x4e8>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d028      	beq.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004736:	429a      	cmp	r2, r3
 8004738:	d121      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d11a      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800474e:	4013      	ands	r3, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004754:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004756:	4293      	cmp	r3, r2
 8004758:	d111      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800476a:	429a      	cmp	r2, r3
 800476c:	d107      	bne.n	800477e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800477a:	429a      	cmp	r2, r3
 800477c:	d001      	beq.n	8004782 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	40007000 	.word	0x40007000
 8004790:	40023800 	.word	0x40023800
 8004794:	42470060 	.word	0x42470060

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fe fce8 	bl	800325c <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fe fce4 	bl	800325c <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	; 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	; (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f821 	bl	8004964 <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	; (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fe fc48 	bl	80031d4 <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	0800869c 	.word	0x0800869c
 800495c:	20000028 	.word	0x20000028
 8004960:	2000002c 	.word	0x2000002c

08004964 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004968:	b084      	sub	sp, #16
 800496a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	607b      	str	r3, [r7, #4]
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	2300      	movs	r3, #0
 8004976:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800497c:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 030c 	and.w	r3, r3, #12
 8004984:	2b08      	cmp	r3, #8
 8004986:	d00d      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0x40>
 8004988:	2b08      	cmp	r3, #8
 800498a:	f200 80bd 	bhi.w	8004b08 <HAL_RCC_GetSysClockFreq+0x1a4>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_RCC_GetSysClockFreq+0x34>
 8004992:	2b04      	cmp	r3, #4
 8004994:	d003      	beq.n	800499e <HAL_RCC_GetSysClockFreq+0x3a>
 8004996:	e0b7      	b.n	8004b08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800499a:	60bb      	str	r3, [r7, #8]
       break;
 800499c:	e0b7      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499e:	4b61      	ldr	r3, [pc, #388]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80049a0:	60bb      	str	r3, [r7, #8]
      break;
 80049a2:	e0b4      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a4:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d04d      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049ba:	4b58      	ldr	r3, [pc, #352]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	099b      	lsrs	r3, r3, #6
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ca:	f04f 0100 	mov.w	r1, #0
 80049ce:	ea02 0800 	and.w	r8, r2, r0
 80049d2:	ea03 0901 	and.w	r9, r3, r1
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	014b      	lsls	r3, r1, #5
 80049e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049e8:	0142      	lsls	r2, r0, #5
 80049ea:	4610      	mov	r0, r2
 80049ec:	4619      	mov	r1, r3
 80049ee:	ebb0 0008 	subs.w	r0, r0, r8
 80049f2:	eb61 0109 	sbc.w	r1, r1, r9
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	018b      	lsls	r3, r1, #6
 8004a00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a04:	0182      	lsls	r2, r0, #6
 8004a06:	1a12      	subs	r2, r2, r0
 8004a08:	eb63 0301 	sbc.w	r3, r3, r1
 8004a0c:	f04f 0000 	mov.w	r0, #0
 8004a10:	f04f 0100 	mov.w	r1, #0
 8004a14:	00d9      	lsls	r1, r3, #3
 8004a16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a1a:	00d0      	lsls	r0, r2, #3
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	eb12 0208 	adds.w	r2, r2, r8
 8004a24:	eb43 0309 	adc.w	r3, r3, r9
 8004a28:	f04f 0000 	mov.w	r0, #0
 8004a2c:	f04f 0100 	mov.w	r1, #0
 8004a30:	0259      	lsls	r1, r3, #9
 8004a32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004a36:	0250      	lsls	r0, r2, #9
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	461a      	mov	r2, r3
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	f7fc f990 	bl	8000d6c <__aeabi_uldivmod>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4613      	mov	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e04a      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	099b      	lsrs	r3, r3, #6
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	ea02 0400 	and.w	r4, r2, r0
 8004a6e:	ea03 0501 	and.w	r5, r3, r1
 8004a72:	4620      	mov	r0, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	f04f 0300 	mov.w	r3, #0
 8004a7e:	014b      	lsls	r3, r1, #5
 8004a80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a84:	0142      	lsls	r2, r0, #5
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	1b00      	subs	r0, r0, r4
 8004a8c:	eb61 0105 	sbc.w	r1, r1, r5
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	018b      	lsls	r3, r1, #6
 8004a9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a9e:	0182      	lsls	r2, r0, #6
 8004aa0:	1a12      	subs	r2, r2, r0
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	f04f 0000 	mov.w	r0, #0
 8004aaa:	f04f 0100 	mov.w	r1, #0
 8004aae:	00d9      	lsls	r1, r3, #3
 8004ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ab4:	00d0      	lsls	r0, r2, #3
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	1912      	adds	r2, r2, r4
 8004abc:	eb45 0303 	adc.w	r3, r5, r3
 8004ac0:	f04f 0000 	mov.w	r0, #0
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	0299      	lsls	r1, r3, #10
 8004aca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ace:	0290      	lsls	r0, r2, #10
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	f7fc f944 	bl	8000d6c <__aeabi_uldivmod>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	4613      	mov	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	3301      	adds	r3, #1
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	60bb      	str	r3, [r7, #8]
      break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004b0a:	60bb      	str	r3, [r7, #8]
      break;
 8004b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	00f42400 	.word	0x00f42400
 8004b24:	007a1200 	.word	0x007a1200

08004b28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b2c:	4b03      	ldr	r3, [pc, #12]	; (8004b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000028 	.word	0x20000028

08004b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b44:	f7ff fff0 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	0a9b      	lsrs	r3, r3, #10
 8004b50:	f003 0307 	and.w	r3, r3, #7
 8004b54:	4903      	ldr	r1, [pc, #12]	; (8004b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b56:	5ccb      	ldrb	r3, [r1, r3]
 8004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40023800 	.word	0x40023800
 8004b64:	080086ac 	.word	0x080086ac

08004b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b6c:	f7ff ffdc 	bl	8004b28 <HAL_RCC_GetHCLKFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	0b5b      	lsrs	r3, r3, #13
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	4903      	ldr	r1, [pc, #12]	; (8004b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	080086ac 	.word	0x080086ac

08004b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e041      	b.n	8004c26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fe f8ca 	bl	8002d50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f000 fdda 	bl	8005788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d001      	beq.n	8004c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e03c      	b.n	8004cc2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_TIM_Base_Start+0xa0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d018      	beq.n	8004c8c <HAL_TIM_Base_Start+0x5c>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d013      	beq.n	8004c8c <HAL_TIM_Base_Start+0x5c>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1a      	ldr	r2, [pc, #104]	; (8004cd4 <HAL_TIM_Base_Start+0xa4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00e      	beq.n	8004c8c <HAL_TIM_Base_Start+0x5c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a19      	ldr	r2, [pc, #100]	; (8004cd8 <HAL_TIM_Base_Start+0xa8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d009      	beq.n	8004c8c <HAL_TIM_Base_Start+0x5c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_TIM_Base_Start+0xac>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d004      	beq.n	8004c8c <HAL_TIM_Base_Start+0x5c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	; (8004ce0 <HAL_TIM_Base_Start+0xb0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d111      	bne.n	8004cb0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b06      	cmp	r3, #6
 8004c9c:	d010      	beq.n	8004cc0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f042 0201 	orr.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	e007      	b.n	8004cc0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40014000 	.word	0x40014000

08004ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e044      	b.n	8004d86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2202      	movs	r2, #2
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d018      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x6c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d26:	d013      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x6c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d00e      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x6c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	; (8004d9c <HAL_TIM_Base_Start_IT+0xb8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x6c>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a17      	ldr	r2, [pc, #92]	; (8004da0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_TIM_Base_Start_IT+0x6c>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a16      	ldr	r2, [pc, #88]	; (8004da4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d111      	bne.n	8004d74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b06      	cmp	r3, #6
 8004d60:	d010      	beq.n	8004d84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d72:	e007      	b.n	8004d84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0201 	orr.w	r2, r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3714      	adds	r7, #20
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40014000 	.word	0x40014000

08004da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e041      	b.n	8004e3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f839 	bl	8004e46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	3304      	adds	r3, #4
 8004de4:	4619      	mov	r1, r3
 8004de6:	4610      	mov	r0, r2
 8004de8:	f000 fcce 	bl	8005788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d109      	bne.n	8004e80 <HAL_TIM_PWM_Start+0x24>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	bf14      	ite	ne
 8004e78:	2301      	movne	r3, #1
 8004e7a:	2300      	moveq	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	e022      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x6a>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d109      	bne.n	8004e9a <HAL_TIM_PWM_Start+0x3e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	bf14      	ite	ne
 8004e92:	2301      	movne	r3, #1
 8004e94:	2300      	moveq	r3, #0
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	e015      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x6a>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d109      	bne.n	8004eb4 <HAL_TIM_PWM_Start+0x58>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	bf14      	ite	ne
 8004eac:	2301      	movne	r3, #1
 8004eae:	2300      	moveq	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e008      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x6a>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	bf14      	ite	ne
 8004ec0:	2301      	movne	r3, #1
 8004ec2:	2300      	moveq	r3, #0
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e068      	b.n	8004fa0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0x82>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	e013      	b.n	8004f06 <HAL_TIM_PWM_Start+0xaa>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0x92>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_PWM_Start+0xaa>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d104      	bne.n	8004efe <HAL_TIM_PWM_Start+0xa2>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004efc:	e003      	b.n	8004f06 <HAL_TIM_PWM_Start+0xaa>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fee0 	bl	8005cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <HAL_TIM_PWM_Start+0x14c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d107      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <HAL_TIM_PWM_Start+0x14c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d018      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x10e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d013      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x10e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a19      	ldr	r2, [pc, #100]	; (8004fac <HAL_TIM_PWM_Start+0x150>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00e      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x10e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a17      	ldr	r2, [pc, #92]	; (8004fb0 <HAL_TIM_PWM_Start+0x154>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d009      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x10e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a16      	ldr	r2, [pc, #88]	; (8004fb4 <HAL_TIM_PWM_Start+0x158>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d004      	beq.n	8004f6a <HAL_TIM_PWM_Start+0x10e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a14      	ldr	r2, [pc, #80]	; (8004fb8 <HAL_TIM_PWM_Start+0x15c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d111      	bne.n	8004f8e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2b06      	cmp	r3, #6
 8004f7a:	d010      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f8c:	e007      	b.n	8004f9e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	40000400 	.word	0x40000400
 8004fb0:	40000800 	.word	0x40000800
 8004fb4:	40000c00 	.word	0x40000c00
 8004fb8:	40014000 	.word	0x40014000

08004fbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e097      	b.n	8005100 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fd fe6b 	bl	8002cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005000:	f023 0307 	bic.w	r3, r3, #7
 8005004:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	3304      	adds	r3, #4
 800500e:	4619      	mov	r1, r3
 8005010:	4610      	mov	r0, r2
 8005012:	f000 fbb9 	bl	8005788 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	4313      	orrs	r3, r2
 8005036:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503e:	f023 0303 	bic.w	r3, r3, #3
 8005042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4313      	orrs	r3, r2
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800505c:	f023 030c 	bic.w	r3, r3, #12
 8005060:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68da      	ldr	r2, [r3, #12]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	4313      	orrs	r3, r2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	011a      	lsls	r2, r3, #4
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	031b      	lsls	r3, r3, #12
 800508c:	4313      	orrs	r3, r2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	685a      	ldr	r2, [r3, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	4313      	orrs	r3, r2
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005118:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005120:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005128:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005130:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d102      	bne.n	8005144 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800513e:	7b7b      	ldrb	r3, [r7, #13]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d001      	beq.n	8005148 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e069      	b.n	800521c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005158:	e031      	b.n	80051be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d110      	bne.n	8005182 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d102      	bne.n	800516c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005166:	7b3b      	ldrb	r3, [r7, #12]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d001      	beq.n	8005170 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e055      	b.n	800521c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005180:	e01d      	b.n	80051be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d108      	bne.n	800519a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005188:	7bbb      	ldrb	r3, [r7, #14]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d105      	bne.n	800519a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800518e:	7b7b      	ldrb	r3, [r7, #13]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d102      	bne.n	800519a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005194:	7b3b      	ldrb	r3, [r7, #12]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d001      	beq.n	800519e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e03e      	b.n	800521c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d003      	beq.n	80051cc <HAL_TIM_Encoder_Start+0xc4>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d008      	beq.n	80051dc <HAL_TIM_Encoder_Start+0xd4>
 80051ca:	e00f      	b.n	80051ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2201      	movs	r2, #1
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fd7d 	bl	8005cd4 <TIM_CCxChannelCmd>
      break;
 80051da:	e016      	b.n	800520a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2201      	movs	r2, #1
 80051e2:	2104      	movs	r1, #4
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fd75 	bl	8005cd4 <TIM_CCxChannelCmd>
      break;
 80051ea:	e00e      	b.n	800520a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2201      	movs	r2, #1
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fd6d 	bl	8005cd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	2104      	movs	r1, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fd66 	bl	8005cd4 <TIM_CCxChannelCmd>
      break;
 8005208:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d122      	bne.n	8005280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d11b      	bne.n	8005280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0202 	mvn.w	r2, #2
 8005250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa70 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa62 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fa73 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d122      	bne.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b04      	cmp	r3, #4
 800529a:	d11b      	bne.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0204 	mvn.w	r2, #4
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa46 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa38 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fa49 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f003 0308 	and.w	r3, r3, #8
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d122      	bne.n	8005328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0308 	and.w	r3, r3, #8
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d11b      	bne.n	8005328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f06f 0208 	mvn.w	r2, #8
 80052f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2204      	movs	r2, #4
 80052fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fa1c 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 8005314:	e005      	b.n	8005322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa0e 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fa1f 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b10      	cmp	r3, #16
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b10      	cmp	r3, #16
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0210 	mvn.w	r2, #16
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2208      	movs	r2, #8
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9f2 	bl	800574c <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f9e4 	bl	8005738 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f9f5 	bl	8005760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b01      	cmp	r3, #1
 8005388:	d10e      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b01      	cmp	r3, #1
 8005396:	d107      	bne.n	80053a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0201 	mvn.w	r2, #1
 80053a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7fd fbe0 	bl	8002b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d10e      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c0:	2b80      	cmp	r3, #128	; 0x80
 80053c2:	d107      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fd1e 	bl	8005e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d10e      	bne.n	8005400 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d107      	bne.n	8005400 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f9ba 	bl	8005774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b20      	cmp	r3, #32
 800540c:	d10e      	bne.n	800542c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	d107      	bne.n	800542c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0220 	mvn.w	r2, #32
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fce8 	bl	8005dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e0ac      	b.n	80055a8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b0c      	cmp	r3, #12
 800545a:	f200 809f 	bhi.w	800559c <HAL_TIM_PWM_ConfigChannel+0x168>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005499 	.word	0x08005499
 8005468:	0800559d 	.word	0x0800559d
 800546c:	0800559d 	.word	0x0800559d
 8005470:	0800559d 	.word	0x0800559d
 8005474:	080054d9 	.word	0x080054d9
 8005478:	0800559d 	.word	0x0800559d
 800547c:	0800559d 	.word	0x0800559d
 8005480:	0800559d 	.word	0x0800559d
 8005484:	0800551b 	.word	0x0800551b
 8005488:	0800559d 	.word	0x0800559d
 800548c:	0800559d 	.word	0x0800559d
 8005490:	0800559d 	.word	0x0800559d
 8005494:	0800555b 	.word	0x0800555b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f9f2 	bl	8005888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0208 	orr.w	r2, r2, #8
 80054b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0204 	bic.w	r2, r2, #4
 80054c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6999      	ldr	r1, [r3, #24]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	619a      	str	r2, [r3, #24]
      break;
 80054d6:	e062      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 fa38 	bl	8005954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6999      	ldr	r1, [r3, #24]
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	021a      	lsls	r2, r3, #8
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
      break;
 8005518:	e041      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68b9      	ldr	r1, [r7, #8]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fa83 	bl	8005a2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0208 	orr.w	r2, r2, #8
 8005534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0204 	bic.w	r2, r2, #4
 8005544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69d9      	ldr	r1, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	61da      	str	r2, [r3, #28]
      break;
 8005558:	e021      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68b9      	ldr	r1, [r7, #8]
 8005560:	4618      	mov	r0, r3
 8005562:	f000 facd 	bl	8005b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005574:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69da      	ldr	r2, [r3, #28]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005584:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69d9      	ldr	r1, [r3, #28]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	021a      	lsls	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	61da      	str	r2, [r3, #28]
      break;
 800559a:	e000      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800559c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_TIM_ConfigClockSource+0x18>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e0b3      	b.n	8005730 <HAL_TIM_ConfigClockSource+0x180>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005600:	d03e      	beq.n	8005680 <HAL_TIM_ConfigClockSource+0xd0>
 8005602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005606:	f200 8087 	bhi.w	8005718 <HAL_TIM_ConfigClockSource+0x168>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800560e:	f000 8085 	beq.w	800571c <HAL_TIM_ConfigClockSource+0x16c>
 8005612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005616:	d87f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005618:	2b70      	cmp	r3, #112	; 0x70
 800561a:	d01a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0xa2>
 800561c:	2b70      	cmp	r3, #112	; 0x70
 800561e:	d87b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d050      	beq.n	80056c6 <HAL_TIM_ConfigClockSource+0x116>
 8005624:	2b60      	cmp	r3, #96	; 0x60
 8005626:	d877      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005628:	2b50      	cmp	r3, #80	; 0x50
 800562a:	d03c      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xf6>
 800562c:	2b50      	cmp	r3, #80	; 0x50
 800562e:	d873      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d058      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0x136>
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d86f      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d064      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x156>
 800563c:	2b30      	cmp	r3, #48	; 0x30
 800563e:	d86b      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d060      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x156>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d867      	bhi.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05c      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x156>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d05a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005650:	e062      	b.n	8005718 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6899      	ldr	r1, [r3, #8]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f000 fb17 	bl	8005c94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005674:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	609a      	str	r2, [r3, #8]
      break;
 800567e:	e04e      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6899      	ldr	r1, [r3, #8]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f000 fb00 	bl	8005c94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056a2:	609a      	str	r2, [r3, #8]
      break;
 80056a4:	e03b      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6859      	ldr	r1, [r3, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f000 fa74 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2150      	movs	r1, #80	; 0x50
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 facd 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80056c4:	e02b      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6859      	ldr	r1, [r3, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	461a      	mov	r2, r3
 80056d4:	f000 fa93 	bl	8005bfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2160      	movs	r1, #96	; 0x60
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fabd 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80056e4:	e01b      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6859      	ldr	r1, [r3, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f000 fa54 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2140      	movs	r1, #64	; 0x40
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 faad 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005704:	e00b      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4619      	mov	r1, r3
 8005710:	4610      	mov	r0, r2
 8005712:	f000 faa4 	bl	8005c5e <TIM_ITRx_SetConfig>
        break;
 8005716:	e002      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005718:	bf00      	nop
 800571a:	e000      	b.n	800571e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800571c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a34      	ldr	r2, [pc, #208]	; (800586c <TIM_Base_SetConfig+0xe4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x38>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x38>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a31      	ldr	r2, [pc, #196]	; (8005870 <TIM_Base_SetConfig+0xe8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x38>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a30      	ldr	r2, [pc, #192]	; (8005874 <TIM_Base_SetConfig+0xec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x38>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <TIM_Base_SetConfig+0xf0>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a25      	ldr	r2, [pc, #148]	; (800586c <TIM_Base_SetConfig+0xe4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01b      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e0:	d017      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a22      	ldr	r2, [pc, #136]	; (8005870 <TIM_Base_SetConfig+0xe8>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a21      	ldr	r2, [pc, #132]	; (8005874 <TIM_Base_SetConfig+0xec>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a20      	ldr	r2, [pc, #128]	; (8005878 <TIM_Base_SetConfig+0xf0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1f      	ldr	r2, [pc, #124]	; (800587c <TIM_Base_SetConfig+0xf4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a1e      	ldr	r2, [pc, #120]	; (8005880 <TIM_Base_SetConfig+0xf8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0x8a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a1d      	ldr	r2, [pc, #116]	; (8005884 <TIM_Base_SetConfig+0xfc>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a08      	ldr	r2, [pc, #32]	; (800586c <TIM_Base_SetConfig+0xe4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40010000 	.word	0x40010000
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40014000 	.word	0x40014000
 8005880:	40014400 	.word	0x40014400
 8005884:	40014800 	.word	0x40014800

08005888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f023 0302 	bic.w	r3, r3, #2
 80058d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a1c      	ldr	r2, [pc, #112]	; (8005950 <TIM_OC1_SetConfig+0xc8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10c      	bne.n	80058fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0308 	bic.w	r3, r3, #8
 80058ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f023 0304 	bic.w	r3, r3, #4
 80058fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <TIM_OC1_SetConfig+0xc8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d111      	bne.n	800592a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	693a      	ldr	r2, [r7, #16]
 800591c:	4313      	orrs	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	621a      	str	r2, [r3, #32]
}
 8005944:	bf00      	nop
 8005946:	371c      	adds	r7, #28
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40010000 	.word	0x40010000

08005954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	f023 0210 	bic.w	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800598a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	021b      	lsls	r3, r3, #8
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4313      	orrs	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f023 0320 	bic.w	r3, r3, #32
 800599e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a1e      	ldr	r2, [pc, #120]	; (8005a28 <TIM_OC2_SetConfig+0xd4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d10d      	bne.n	80059d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a15      	ldr	r2, [pc, #84]	; (8005a28 <TIM_OC2_SetConfig+0xd4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d113      	bne.n	8005a00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	621a      	str	r2, [r3, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	40010000 	.word	0x40010000

08005a2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b087      	sub	sp, #28
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	; (8005afc <TIM_OC3_SetConfig+0xd0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d10d      	bne.n	8005aa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	021b      	lsls	r3, r3, #8
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a14      	ldr	r2, [pc, #80]	; (8005afc <TIM_OC3_SetConfig+0xd0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d113      	bne.n	8005ad6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	011b      	lsls	r3, r3, #4
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	621a      	str	r2, [r3, #32]
}
 8005af0:	bf00      	nop
 8005af2:	371c      	adds	r7, #28
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	40010000 	.word	0x40010000

08005b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	031b      	lsls	r3, r3, #12
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TIM_OC4_SetConfig+0x9c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d109      	bne.n	8005b74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	019b      	lsls	r3, r3, #6
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40010000 	.word	0x40010000

08005ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 030a 	bic.w	r3, r3, #10
 8005bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0210 	bic.w	r2, r3, #16
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	f003 031f 	and.w	r3, r3, #31
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1a      	ldr	r2, [r3, #32]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	43db      	mvns	r3, r3
 8005cf6:	401a      	ands	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1a      	ldr	r2, [r3, #32]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 031f 	and.w	r3, r3, #31
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e050      	b.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d84:	d013      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10c      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40014000 	.word	0x40014000

08005dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e03f      	b.n	8005eb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fd f814 	bl	8002e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	; 0x24
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fd51 	bl	8006910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3708      	adds	r7, #8
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
	...

08005ec0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d153      	bne.n	8005f82 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_UART_Transmit_DMA+0x26>
 8005ee0:	88fb      	ldrh	r3, [r7, #6]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e04c      	b.n	8005f84 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Transmit_DMA+0x38>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e045      	b.n	8005f84 <HAL_UART_Transmit_DMA+0xc4>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2221      	movs	r2, #33	; 0x21
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f24:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <HAL_UART_Transmit_DMA+0xcc>)
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <HAL_UART_Transmit_DMA+0xd0>)
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f34:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <HAL_UART_Transmit_DMA+0xd4>)
 8005f36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005f40:	f107 0308 	add.w	r3, r7, #8
 8005f44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	6819      	ldr	r1, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3304      	adds	r3, #4
 8005f54:	461a      	mov	r2, r3
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f7fd fb4c 	bl	80035f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f7c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e000      	b.n	8005f84 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005f82:	2302      	movs	r3, #2
  }
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	080063cd 	.word	0x080063cd
 8005f90:	0800641f 	.word	0x0800641f
 8005f94:	08006507 	.word	0x08006507

08005f98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d11d      	bne.n	8005fee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_Receive_DMA+0x26>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e016      	b.n	8005ff0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Receive_DMA+0x38>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e00f      	b.n	8005ff0 <HAL_UART_Receive_DMA+0x58>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	68b9      	ldr	r1, [r7, #8]
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f000 fad9 	bl	800659c <UART_Start_Receive_DMA>
 8005fea:	4603      	mov	r3, r0
 8005fec:	e000      	b.n	8005ff0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fee:	2302      	movs	r3, #2
  }
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800601c:	2300      	movs	r3, #0
 800601e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10d      	bne.n	800604a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d008      	beq.n	800604a <HAL_UART_IRQHandler+0x52>
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b00      	cmp	r3, #0
 8006040:	d003      	beq.n	800604a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fbcd 	bl	80067e2 <UART_Receive_IT>
      return;
 8006048:	e17c      	b.n	8006344 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80b1 	beq.w	80061b4 <HAL_UART_IRQHandler+0x1bc>
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d105      	bne.n	8006068 <HAL_UART_IRQHandler+0x70>
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 80a6 	beq.w	80061b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <HAL_UART_IRQHandler+0x90>
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d005      	beq.n	8006088 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	f043 0201 	orr.w	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	f003 0304 	and.w	r3, r3, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_UART_IRQHandler+0xb0>
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	f043 0202 	orr.w	r2, r3, #2
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_UART_IRQHandler+0xd0>
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f043 0204 	orr.w	r2, r3, #4
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <HAL_UART_IRQHandler+0xfa>
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f003 0320 	and.w	r3, r3, #32
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d104      	bne.n	80060e6 <HAL_UART_IRQHandler+0xee>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d005      	beq.n	80060f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0208 	orr.w	r2, r3, #8
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 811f 	beq.w	800633a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d007      	beq.n	8006116 <HAL_UART_IRQHandler+0x11e>
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb66 	bl	80067e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d102      	bne.n	800613e <HAL_UART_IRQHandler+0x146>
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d031      	beq.n	80061a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 faa6 	bl	8006690 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d123      	bne.n	800619a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695a      	ldr	r2, [r3, #20]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006160:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d013      	beq.n	8006192 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	4a77      	ldr	r2, [pc, #476]	; (800634c <HAL_UART_IRQHandler+0x354>)
 8006170:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	4618      	mov	r0, r3
 8006178:	f7fd fb04 	bl	8003784 <HAL_DMA_Abort_IT>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800618c:	4610      	mov	r0, r2
 800618e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006190:	e00e      	b.n	80061b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f904 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006198:	e00a      	b.n	80061b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f900 	bl	80063a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a0:	e006      	b.n	80061b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8fc 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061ae:	e0c4      	b.n	800633a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b0:	bf00      	nop
    return;
 80061b2:	e0c2      	b.n	800633a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	f040 80a2 	bne.w	8006302 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	f003 0310 	and.w	r3, r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 809c 	beq.w	8006302 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8096 	beq.w	8006302 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
 80061ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b40      	cmp	r3, #64	; 0x40
 80061f8:	d14f      	bne.n	800629a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006204:	8a3b      	ldrh	r3, [r7, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8099 	beq.w	800633e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006210:	8a3a      	ldrh	r2, [r7, #16]
 8006212:	429a      	cmp	r2, r3
 8006214:	f080 8093 	bcs.w	800633e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	8a3a      	ldrh	r2, [r7, #16]
 800621c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006228:	d02b      	beq.n	8006282 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006238:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	695a      	ldr	r2, [r3, #20]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006258:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2220      	movs	r2, #32
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0210 	bic.w	r2, r2, #16
 8006276:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	4618      	mov	r0, r3
 800627e:	f7fd fa11 	bl	80036a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800628a:	b29b      	uxth	r3, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f88e 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006298:	e051      	b.n	800633e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d047      	beq.n	8006342 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80062b2:	8a7b      	ldrh	r3, [r7, #18]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d044      	beq.n	8006342 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062c6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0201 	bic.w	r2, r2, #1
 80062d6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0210 	bic.w	r2, r2, #16
 80062f4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062f6:	8a7b      	ldrh	r3, [r7, #18]
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f85a 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006300:	e01f      	b.n	8006342 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_UART_IRQHandler+0x326>
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f9fb 	bl	8006712 <UART_Transmit_IT>
    return;
 800631c:	e012      	b.n	8006344 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00d      	beq.n	8006344 <HAL_UART_IRQHandler+0x34c>
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fa3d 	bl	80067b2 <UART_EndTransmit_IT>
    return;
 8006338:	e004      	b.n	8006344 <HAL_UART_IRQHandler+0x34c>
    return;
 800633a:	bf00      	nop
 800633c:	e002      	b.n	8006344 <HAL_UART_IRQHandler+0x34c>
      return;
 800633e:	bf00      	nop
 8006340:	e000      	b.n	8006344 <HAL_UART_IRQHandler+0x34c>
      return;
 8006342:	bf00      	nop
  }
}
 8006344:	3728      	adds	r7, #40	; 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	080066eb 	.word	0x080066eb

08006350 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d113      	bne.n	8006410 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800640c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800640e:	e002      	b.n	8006416 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f7ff ff9d 	bl	8006350 <HAL_UART_TxCpltCallback>
}
 8006416:	bf00      	nop
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff ff99 	bl	8006364 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006432:	bf00      	nop
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006452:	2b00      	cmp	r3, #0
 8006454:	d12a      	bne.n	80064ac <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800646a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695a      	ldr	r2, [r3, #20]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0201 	bic.w	r2, r2, #1
 800647a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695a      	ldr	r2, [r3, #20]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800648a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006498:	2b01      	cmp	r3, #1
 800649a:	d107      	bne.n	80064ac <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0210 	bic.w	r2, r2, #16
 80064aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d106      	bne.n	80064c2 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064b8:	4619      	mov	r1, r3
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f7ff ff7a 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064c0:	e002      	b.n	80064c8 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f7ff ff58 	bl	8006378 <HAL_UART_RxCpltCallback>
}
 80064c8:	bf00      	nop
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d108      	bne.n	80064f8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064ea:	085b      	lsrs	r3, r3, #1
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	4619      	mov	r1, r3
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff ff5f 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064f6:	e002      	b.n	80064fe <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f7ff ff47 	bl	800638c <HAL_UART_RxHalfCpltCallback>
}
 80064fe:	bf00      	nop
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006516:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b80      	cmp	r3, #128	; 0x80
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b21      	cmp	r3, #33	; 0x21
 8006538:	d108      	bne.n	800654c <UART_DMAError+0x46>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006546:	68b8      	ldr	r0, [r7, #8]
 8006548:	f000 f88c 	bl	8006664 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	bf0c      	ite	eq
 800655a:	2301      	moveq	r3, #1
 800655c:	2300      	movne	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b22      	cmp	r3, #34	; 0x22
 800656c:	d108      	bne.n	8006580 <UART_DMAError+0x7a>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d005      	beq.n	8006580 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2200      	movs	r2, #0
 8006578:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800657a:	68b8      	ldr	r0, [r7, #8]
 800657c:	f000 f888 	bl	8006690 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006584:	f043 0210 	orr.w	r2, r3, #16
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800658c:	68b8      	ldr	r0, [r7, #8]
 800658e:	f7ff ff07 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	4613      	mov	r3, r2
 80065a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	88fa      	ldrh	r2, [r7, #6]
 80065b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2222      	movs	r2, #34	; 0x22
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	4a23      	ldr	r2, [pc, #140]	; (8006658 <UART_Start_Receive_DMA+0xbc>)
 80065ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	4a22      	ldr	r2, [pc, #136]	; (800665c <UART_Start_Receive_DMA+0xc0>)
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	4a21      	ldr	r2, [pc, #132]	; (8006660 <UART_Start_Receive_DMA+0xc4>)
 80065da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e0:	2200      	movs	r2, #0
 80065e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80065e4:	f107 0308 	add.w	r3, r7, #8
 80065e8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	88fb      	ldrh	r3, [r7, #6]
 80065fc:	f7fc fffa 	bl	80035f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006600:	2300      	movs	r3, #0
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800662c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0201 	orr.w	r2, r2, #1
 800663c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	695a      	ldr	r2, [r3, #20]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800664c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	0800643b 	.word	0x0800643b
 800665c:	080064d1 	.word	0x080064d1
 8006660:	08006507 	.word	0x08006507

08006664 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800667a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0201 	bic.w	r2, r2, #1
 80066b6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0210 	bic.w	r2, r2, #16
 80066ce:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f7ff fe4b 	bl	80063a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b21      	cmp	r3, #33	; 0x21
 8006724:	d13e      	bne.n	80067a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672e:	d114      	bne.n	800675a <UART_Transmit_IT+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d110      	bne.n	800675a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800674c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	621a      	str	r2, [r3, #32]
 8006758:	e008      	b.n	800676c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6211      	str	r1, [r2, #32]
 8006764:	781a      	ldrb	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29b      	uxth	r3, r3
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4619      	mov	r1, r3
 800677a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10f      	bne.n	80067a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800678e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067a0:	2300      	movs	r3, #0
 80067a2:	e000      	b.n	80067a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067a4:	2302      	movs	r3, #2
  }
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f7ff fdbc 	bl	8006350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	2b22      	cmp	r3, #34	; 0x22
 80067f4:	f040 8087 	bne.w	8006906 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006800:	d117      	bne.n	8006832 <UART_Receive_IT+0x50>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d113      	bne.n	8006832 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006812:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006820:	b29a      	uxth	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	629a      	str	r2, [r3, #40]	; 0x28
 8006830:	e026      	b.n	8006880 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006844:	d007      	beq.n	8006856 <UART_Receive_IT+0x74>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d10a      	bne.n	8006864 <UART_Receive_IT+0x82>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	b2da      	uxtb	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e008      	b.n	8006876 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	b2db      	uxtb	r3, r3
 800686c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29b      	uxth	r3, r3
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	4619      	mov	r1, r3
 800688e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006890:	2b00      	cmp	r3, #0
 8006892:	d136      	bne.n	8006902 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68da      	ldr	r2, [r3, #12]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0220 	bic.w	r2, r2, #32
 80068a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68da      	ldr	r2, [r3, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d10e      	bne.n	80068f2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0210 	bic.w	r2, r2, #16
 80068e2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd62 	bl	80063b4 <HAL_UARTEx_RxEventCallback>
 80068f0:	e002      	b.n	80068f8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fd40 	bl	8006378 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e002      	b.n	8006908 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006902:	2300      	movs	r3, #0
 8006904:	e000      	b.n	8006908 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006906:	2302      	movs	r3, #2
  }
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	b09f      	sub	sp, #124	; 0x7c
 8006916:	af00      	add	r7, sp, #0
 8006918:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800691a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006926:	68d9      	ldr	r1, [r3, #12]
 8006928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	ea40 0301 	orr.w	r3, r0, r1
 8006930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	431a      	orrs	r2, r3
 800693c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	431a      	orrs	r2, r3
 8006942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	4313      	orrs	r3, r2
 8006948:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800694a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006954:	f021 010c 	bic.w	r1, r1, #12
 8006958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800695e:	430b      	orrs	r3, r1
 8006960:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800696e:	6999      	ldr	r1, [r3, #24]
 8006970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	ea40 0301 	orr.w	r3, r0, r1
 8006978:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800697a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4bc5      	ldr	r3, [pc, #788]	; (8006c94 <UART_SetConfig+0x384>)
 8006980:	429a      	cmp	r2, r3
 8006982:	d004      	beq.n	800698e <UART_SetConfig+0x7e>
 8006984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4bc3      	ldr	r3, [pc, #780]	; (8006c98 <UART_SetConfig+0x388>)
 800698a:	429a      	cmp	r2, r3
 800698c:	d103      	bne.n	8006996 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800698e:	f7fe f8eb 	bl	8004b68 <HAL_RCC_GetPCLK2Freq>
 8006992:	6778      	str	r0, [r7, #116]	; 0x74
 8006994:	e002      	b.n	800699c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006996:	f7fe f8d3 	bl	8004b40 <HAL_RCC_GetPCLK1Freq>
 800699a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a4:	f040 80b6 	bne.w	8006b14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069aa:	461c      	mov	r4, r3
 80069ac:	f04f 0500 	mov.w	r5, #0
 80069b0:	4622      	mov	r2, r4
 80069b2:	462b      	mov	r3, r5
 80069b4:	1891      	adds	r1, r2, r2
 80069b6:	6439      	str	r1, [r7, #64]	; 0x40
 80069b8:	415b      	adcs	r3, r3
 80069ba:	647b      	str	r3, [r7, #68]	; 0x44
 80069bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069c0:	1912      	adds	r2, r2, r4
 80069c2:	eb45 0303 	adc.w	r3, r5, r3
 80069c6:	f04f 0000 	mov.w	r0, #0
 80069ca:	f04f 0100 	mov.w	r1, #0
 80069ce:	00d9      	lsls	r1, r3, #3
 80069d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069d4:	00d0      	lsls	r0, r2, #3
 80069d6:	4602      	mov	r2, r0
 80069d8:	460b      	mov	r3, r1
 80069da:	1911      	adds	r1, r2, r4
 80069dc:	6639      	str	r1, [r7, #96]	; 0x60
 80069de:	416b      	adcs	r3, r5
 80069e0:	667b      	str	r3, [r7, #100]	; 0x64
 80069e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	1891      	adds	r1, r2, r2
 80069ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80069f0:	415b      	adcs	r3, r3
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80069fc:	f7fa f9b6 	bl	8000d6c <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4ba5      	ldr	r3, [pc, #660]	; (8006c9c <UART_SetConfig+0x38c>)
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	011e      	lsls	r6, r3, #4
 8006a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a10:	461c      	mov	r4, r3
 8006a12:	f04f 0500 	mov.w	r5, #0
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	1891      	adds	r1, r2, r2
 8006a1c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a1e:	415b      	adcs	r3, r3
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a26:	1912      	adds	r2, r2, r4
 8006a28:	eb45 0303 	adc.w	r3, r5, r3
 8006a2c:	f04f 0000 	mov.w	r0, #0
 8006a30:	f04f 0100 	mov.w	r1, #0
 8006a34:	00d9      	lsls	r1, r3, #3
 8006a36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a3a:	00d0      	lsls	r0, r2, #3
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	1911      	adds	r1, r2, r4
 8006a42:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a44:	416b      	adcs	r3, r5
 8006a46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	1891      	adds	r1, r2, r2
 8006a54:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a56:	415b      	adcs	r3, r3
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006a62:	f7fa f983 	bl	8000d6c <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4b8c      	ldr	r3, [pc, #560]	; (8006c9c <UART_SetConfig+0x38c>)
 8006a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	2164      	movs	r1, #100	; 0x64
 8006a74:	fb01 f303 	mul.w	r3, r1, r3
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	3332      	adds	r3, #50	; 0x32
 8006a7e:	4a87      	ldr	r2, [pc, #540]	; (8006c9c <UART_SetConfig+0x38c>)
 8006a80:	fba2 2303 	umull	r2, r3, r2, r3
 8006a84:	095b      	lsrs	r3, r3, #5
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a8c:	441e      	add	r6, r3
 8006a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a90:	4618      	mov	r0, r3
 8006a92:	f04f 0100 	mov.w	r1, #0
 8006a96:	4602      	mov	r2, r0
 8006a98:	460b      	mov	r3, r1
 8006a9a:	1894      	adds	r4, r2, r2
 8006a9c:	623c      	str	r4, [r7, #32]
 8006a9e:	415b      	adcs	r3, r3
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aa6:	1812      	adds	r2, r2, r0
 8006aa8:	eb41 0303 	adc.w	r3, r1, r3
 8006aac:	f04f 0400 	mov.w	r4, #0
 8006ab0:	f04f 0500 	mov.w	r5, #0
 8006ab4:	00dd      	lsls	r5, r3, #3
 8006ab6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006aba:	00d4      	lsls	r4, r2, #3
 8006abc:	4622      	mov	r2, r4
 8006abe:	462b      	mov	r3, r5
 8006ac0:	1814      	adds	r4, r2, r0
 8006ac2:	653c      	str	r4, [r7, #80]	; 0x50
 8006ac4:	414b      	adcs	r3, r1
 8006ac6:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	461a      	mov	r2, r3
 8006ace:	f04f 0300 	mov.w	r3, #0
 8006ad2:	1891      	adds	r1, r2, r2
 8006ad4:	61b9      	str	r1, [r7, #24]
 8006ad6:	415b      	adcs	r3, r3
 8006ad8:	61fb      	str	r3, [r7, #28]
 8006ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ade:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006ae2:	f7fa f943 	bl	8000d6c <__aeabi_uldivmod>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	460b      	mov	r3, r1
 8006aea:	4b6c      	ldr	r3, [pc, #432]	; (8006c9c <UART_SetConfig+0x38c>)
 8006aec:	fba3 1302 	umull	r1, r3, r3, r2
 8006af0:	095b      	lsrs	r3, r3, #5
 8006af2:	2164      	movs	r1, #100	; 0x64
 8006af4:	fb01 f303 	mul.w	r3, r1, r3
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	3332      	adds	r3, #50	; 0x32
 8006afe:	4a67      	ldr	r2, [pc, #412]	; (8006c9c <UART_SetConfig+0x38c>)
 8006b00:	fba2 2303 	umull	r2, r3, r2, r3
 8006b04:	095b      	lsrs	r3, r3, #5
 8006b06:	f003 0207 	and.w	r2, r3, #7
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4432      	add	r2, r6
 8006b10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b12:	e0b9      	b.n	8006c88 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b16:	461c      	mov	r4, r3
 8006b18:	f04f 0500 	mov.w	r5, #0
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	462b      	mov	r3, r5
 8006b20:	1891      	adds	r1, r2, r2
 8006b22:	6139      	str	r1, [r7, #16]
 8006b24:	415b      	adcs	r3, r3
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b2c:	1912      	adds	r2, r2, r4
 8006b2e:	eb45 0303 	adc.w	r3, r5, r3
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	f04f 0100 	mov.w	r1, #0
 8006b3a:	00d9      	lsls	r1, r3, #3
 8006b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b40:	00d0      	lsls	r0, r2, #3
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	eb12 0804 	adds.w	r8, r2, r4
 8006b4a:	eb43 0905 	adc.w	r9, r3, r5
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f04f 0100 	mov.w	r1, #0
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	f04f 0300 	mov.w	r3, #0
 8006b60:	008b      	lsls	r3, r1, #2
 8006b62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b66:	0082      	lsls	r2, r0, #2
 8006b68:	4640      	mov	r0, r8
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	f7fa f8fe 	bl	8000d6c <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4b49      	ldr	r3, [pc, #292]	; (8006c9c <UART_SetConfig+0x38c>)
 8006b76:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	011e      	lsls	r6, r3, #4
 8006b7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b80:	4618      	mov	r0, r3
 8006b82:	f04f 0100 	mov.w	r1, #0
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	1894      	adds	r4, r2, r2
 8006b8c:	60bc      	str	r4, [r7, #8]
 8006b8e:	415b      	adcs	r3, r3
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b96:	1812      	adds	r2, r2, r0
 8006b98:	eb41 0303 	adc.w	r3, r1, r3
 8006b9c:	f04f 0400 	mov.w	r4, #0
 8006ba0:	f04f 0500 	mov.w	r5, #0
 8006ba4:	00dd      	lsls	r5, r3, #3
 8006ba6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006baa:	00d4      	lsls	r4, r2, #3
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	1814      	adds	r4, r2, r0
 8006bb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8006bb4:	414b      	adcs	r3, r1
 8006bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f04f 0100 	mov.w	r1, #0
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	008b      	lsls	r3, r1, #2
 8006bcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006bd0:	0082      	lsls	r2, r0, #2
 8006bd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bd6:	f7fa f8c9 	bl	8000d6c <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <UART_SetConfig+0x38c>)
 8006be0:	fba3 1302 	umull	r1, r3, r3, r2
 8006be4:	095b      	lsrs	r3, r3, #5
 8006be6:	2164      	movs	r1, #100	; 0x64
 8006be8:	fb01 f303 	mul.w	r3, r1, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	011b      	lsls	r3, r3, #4
 8006bf0:	3332      	adds	r3, #50	; 0x32
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <UART_SetConfig+0x38c>)
 8006bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bfe:	441e      	add	r6, r3
 8006c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c02:	4618      	mov	r0, r3
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	1894      	adds	r4, r2, r2
 8006c0e:	603c      	str	r4, [r7, #0]
 8006c10:	415b      	adcs	r3, r3
 8006c12:	607b      	str	r3, [r7, #4]
 8006c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c18:	1812      	adds	r2, r2, r0
 8006c1a:	eb41 0303 	adc.w	r3, r1, r3
 8006c1e:	f04f 0400 	mov.w	r4, #0
 8006c22:	f04f 0500 	mov.w	r5, #0
 8006c26:	00dd      	lsls	r5, r3, #3
 8006c28:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c2c:	00d4      	lsls	r4, r2, #3
 8006c2e:	4622      	mov	r2, r4
 8006c30:	462b      	mov	r3, r5
 8006c32:	eb12 0a00 	adds.w	sl, r2, r0
 8006c36:	eb43 0b01 	adc.w	fp, r3, r1
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f04f 0100 	mov.w	r1, #0
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	008b      	lsls	r3, r1, #2
 8006c4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c52:	0082      	lsls	r2, r0, #2
 8006c54:	4650      	mov	r0, sl
 8006c56:	4659      	mov	r1, fp
 8006c58:	f7fa f888 	bl	8000d6c <__aeabi_uldivmod>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4b0e      	ldr	r3, [pc, #56]	; (8006c9c <UART_SetConfig+0x38c>)
 8006c62:	fba3 1302 	umull	r1, r3, r3, r2
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2164      	movs	r1, #100	; 0x64
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	011b      	lsls	r3, r3, #4
 8006c72:	3332      	adds	r3, #50	; 0x32
 8006c74:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <UART_SetConfig+0x38c>)
 8006c76:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	f003 020f 	and.w	r2, r3, #15
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4432      	add	r2, r6
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	377c      	adds	r7, #124	; 0x7c
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c92:	bf00      	nop
 8006c94:	40011000 	.word	0x40011000
 8006c98:	40011400 	.word	0x40011400
 8006c9c:	51eb851f 	.word	0x51eb851f

08006ca0 <calloc>:
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <calloc+0xc>)
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	f000 b842 	b.w	8006d30 <_calloc_r>
 8006cac:	20000034 	.word	0x20000034

08006cb0 <__errno>:
 8006cb0:	4b01      	ldr	r3, [pc, #4]	; (8006cb8 <__errno+0x8>)
 8006cb2:	6818      	ldr	r0, [r3, #0]
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20000034 	.word	0x20000034

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f001 fcd4 	bl	800867c <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08008728 	.word	0x08008728
 8006cf8:	08008728 	.word	0x08008728
 8006cfc:	08008728 	.word	0x08008728
 8006d00:	0800872c 	.word	0x0800872c

08006d04 <memcpy>:
 8006d04:	440a      	add	r2, r1
 8006d06:	4291      	cmp	r1, r2
 8006d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d0c:	d100      	bne.n	8006d10 <memcpy+0xc>
 8006d0e:	4770      	bx	lr
 8006d10:	b510      	push	{r4, lr}
 8006d12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1a:	4291      	cmp	r1, r2
 8006d1c:	d1f9      	bne.n	8006d12 <memcpy+0xe>
 8006d1e:	bd10      	pop	{r4, pc}

08006d20 <memset>:
 8006d20:	4402      	add	r2, r0
 8006d22:	4603      	mov	r3, r0
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d100      	bne.n	8006d2a <memset+0xa>
 8006d28:	4770      	bx	lr
 8006d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006d2e:	e7f9      	b.n	8006d24 <memset+0x4>

08006d30 <_calloc_r>:
 8006d30:	b513      	push	{r0, r1, r4, lr}
 8006d32:	434a      	muls	r2, r1
 8006d34:	4611      	mov	r1, r2
 8006d36:	9201      	str	r2, [sp, #4]
 8006d38:	f000 f80a 	bl	8006d50 <_malloc_r>
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	b118      	cbz	r0, 8006d48 <_calloc_r+0x18>
 8006d40:	9a01      	ldr	r2, [sp, #4]
 8006d42:	2100      	movs	r1, #0
 8006d44:	f7ff ffec 	bl	8006d20 <memset>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	b002      	add	sp, #8
 8006d4c:	bd10      	pop	{r4, pc}
	...

08006d50 <_malloc_r>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	1ccd      	adds	r5, r1, #3
 8006d54:	f025 0503 	bic.w	r5, r5, #3
 8006d58:	3508      	adds	r5, #8
 8006d5a:	2d0c      	cmp	r5, #12
 8006d5c:	bf38      	it	cc
 8006d5e:	250c      	movcc	r5, #12
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	4606      	mov	r6, r0
 8006d64:	db01      	blt.n	8006d6a <_malloc_r+0x1a>
 8006d66:	42a9      	cmp	r1, r5
 8006d68:	d903      	bls.n	8006d72 <_malloc_r+0x22>
 8006d6a:	230c      	movs	r3, #12
 8006d6c:	6033      	str	r3, [r6, #0]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d72:	f000 f857 	bl	8006e24 <__malloc_lock>
 8006d76:	4921      	ldr	r1, [pc, #132]	; (8006dfc <_malloc_r+0xac>)
 8006d78:	680a      	ldr	r2, [r1, #0]
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	b99c      	cbnz	r4, 8006da6 <_malloc_r+0x56>
 8006d7e:	4f20      	ldr	r7, [pc, #128]	; (8006e00 <_malloc_r+0xb0>)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	b923      	cbnz	r3, 8006d8e <_malloc_r+0x3e>
 8006d84:	4621      	mov	r1, r4
 8006d86:	4630      	mov	r0, r6
 8006d88:	f000 f83c 	bl	8006e04 <_sbrk_r>
 8006d8c:	6038      	str	r0, [r7, #0]
 8006d8e:	4629      	mov	r1, r5
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 f837 	bl	8006e04 <_sbrk_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	d123      	bne.n	8006de2 <_malloc_r+0x92>
 8006d9a:	230c      	movs	r3, #12
 8006d9c:	6033      	str	r3, [r6, #0]
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f000 f846 	bl	8006e30 <__malloc_unlock>
 8006da4:	e7e3      	b.n	8006d6e <_malloc_r+0x1e>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	1b5b      	subs	r3, r3, r5
 8006daa:	d417      	bmi.n	8006ddc <_malloc_r+0x8c>
 8006dac:	2b0b      	cmp	r3, #11
 8006dae:	d903      	bls.n	8006db8 <_malloc_r+0x68>
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	441c      	add	r4, r3
 8006db4:	6025      	str	r5, [r4, #0]
 8006db6:	e004      	b.n	8006dc2 <_malloc_r+0x72>
 8006db8:	6863      	ldr	r3, [r4, #4]
 8006dba:	42a2      	cmp	r2, r4
 8006dbc:	bf0c      	ite	eq
 8006dbe:	600b      	streq	r3, [r1, #0]
 8006dc0:	6053      	strne	r3, [r2, #4]
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f000 f834 	bl	8006e30 <__malloc_unlock>
 8006dc8:	f104 000b 	add.w	r0, r4, #11
 8006dcc:	1d23      	adds	r3, r4, #4
 8006dce:	f020 0007 	bic.w	r0, r0, #7
 8006dd2:	1ac2      	subs	r2, r0, r3
 8006dd4:	d0cc      	beq.n	8006d70 <_malloc_r+0x20>
 8006dd6:	1a1b      	subs	r3, r3, r0
 8006dd8:	50a3      	str	r3, [r4, r2]
 8006dda:	e7c9      	b.n	8006d70 <_malloc_r+0x20>
 8006ddc:	4622      	mov	r2, r4
 8006dde:	6864      	ldr	r4, [r4, #4]
 8006de0:	e7cc      	b.n	8006d7c <_malloc_r+0x2c>
 8006de2:	1cc4      	adds	r4, r0, #3
 8006de4:	f024 0403 	bic.w	r4, r4, #3
 8006de8:	42a0      	cmp	r0, r4
 8006dea:	d0e3      	beq.n	8006db4 <_malloc_r+0x64>
 8006dec:	1a21      	subs	r1, r4, r0
 8006dee:	4630      	mov	r0, r6
 8006df0:	f000 f808 	bl	8006e04 <_sbrk_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	d1dd      	bne.n	8006db4 <_malloc_r+0x64>
 8006df8:	e7cf      	b.n	8006d9a <_malloc_r+0x4a>
 8006dfa:	bf00      	nop
 8006dfc:	200001e4 	.word	0x200001e4
 8006e00:	200001e8 	.word	0x200001e8

08006e04 <_sbrk_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d06      	ldr	r5, [pc, #24]	; (8006e20 <_sbrk_r+0x1c>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7fc f94c 	bl	80030ac <_sbrk>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d102      	bne.n	8006e1e <_sbrk_r+0x1a>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	b103      	cbz	r3, 8006e1e <_sbrk_r+0x1a>
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}
 8006e20:	2000047c 	.word	0x2000047c

08006e24 <__malloc_lock>:
 8006e24:	4801      	ldr	r0, [pc, #4]	; (8006e2c <__malloc_lock+0x8>)
 8006e26:	f000 b809 	b.w	8006e3c <__retarget_lock_acquire_recursive>
 8006e2a:	bf00      	nop
 8006e2c:	20000484 	.word	0x20000484

08006e30 <__malloc_unlock>:
 8006e30:	4801      	ldr	r0, [pc, #4]	; (8006e38 <__malloc_unlock+0x8>)
 8006e32:	f000 b804 	b.w	8006e3e <__retarget_lock_release_recursive>
 8006e36:	bf00      	nop
 8006e38:	20000484 	.word	0x20000484

08006e3c <__retarget_lock_acquire_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <__retarget_lock_release_recursive>:
 8006e3e:	4770      	bx	lr

08006e40 <pow>:
 8006e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e44:	ec59 8b10 	vmov	r8, r9, d0
 8006e48:	ec57 6b11 	vmov	r6, r7, d1
 8006e4c:	f000 f964 	bl	8007118 <__ieee754_pow>
 8006e50:	4b4e      	ldr	r3, [pc, #312]	; (8006f8c <pow+0x14c>)
 8006e52:	f993 3000 	ldrsb.w	r3, [r3]
 8006e56:	3301      	adds	r3, #1
 8006e58:	ec55 4b10 	vmov	r4, r5, d0
 8006e5c:	d015      	beq.n	8006e8a <pow+0x4a>
 8006e5e:	4632      	mov	r2, r6
 8006e60:	463b      	mov	r3, r7
 8006e62:	4630      	mov	r0, r6
 8006e64:	4639      	mov	r1, r7
 8006e66:	f7f9 fe0d 	bl	8000a84 <__aeabi_dcmpun>
 8006e6a:	b970      	cbnz	r0, 8006e8a <pow+0x4a>
 8006e6c:	4642      	mov	r2, r8
 8006e6e:	464b      	mov	r3, r9
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 fe06 	bl	8000a84 <__aeabi_dcmpun>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	b148      	cbz	r0, 8006e92 <pow+0x52>
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4639      	mov	r1, r7
 8006e82:	f7f9 fdcd 	bl	8000a20 <__aeabi_dcmpeq>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d17d      	bne.n	8006f86 <pow+0x146>
 8006e8a:	ec45 4b10 	vmov	d0, r4, r5
 8006e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e92:	4640      	mov	r0, r8
 8006e94:	4649      	mov	r1, r9
 8006e96:	f7f9 fdc3 	bl	8000a20 <__aeabi_dcmpeq>
 8006e9a:	b1e0      	cbz	r0, 8006ed6 <pow+0x96>
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 fdbc 	bl	8000a20 <__aeabi_dcmpeq>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d16c      	bne.n	8006f86 <pow+0x146>
 8006eac:	ec47 6b10 	vmov	d0, r6, r7
 8006eb0:	f001 f9d4 	bl	800825c <finite>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0e8      	beq.n	8006e8a <pow+0x4a>
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2300      	movs	r3, #0
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	4639      	mov	r1, r7
 8006ec0:	f7f9 fdb8 	bl	8000a34 <__aeabi_dcmplt>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d0e0      	beq.n	8006e8a <pow+0x4a>
 8006ec8:	f7ff fef2 	bl	8006cb0 <__errno>
 8006ecc:	2321      	movs	r3, #33	; 0x21
 8006ece:	6003      	str	r3, [r0, #0]
 8006ed0:	2400      	movs	r4, #0
 8006ed2:	4d2f      	ldr	r5, [pc, #188]	; (8006f90 <pow+0x150>)
 8006ed4:	e7d9      	b.n	8006e8a <pow+0x4a>
 8006ed6:	ec45 4b10 	vmov	d0, r4, r5
 8006eda:	f001 f9bf 	bl	800825c <finite>
 8006ede:	bbb8      	cbnz	r0, 8006f50 <pow+0x110>
 8006ee0:	ec49 8b10 	vmov	d0, r8, r9
 8006ee4:	f001 f9ba 	bl	800825c <finite>
 8006ee8:	b390      	cbz	r0, 8006f50 <pow+0x110>
 8006eea:	ec47 6b10 	vmov	d0, r6, r7
 8006eee:	f001 f9b5 	bl	800825c <finite>
 8006ef2:	b368      	cbz	r0, 8006f50 <pow+0x110>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	4620      	mov	r0, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	f7f9 fdc2 	bl	8000a84 <__aeabi_dcmpun>
 8006f00:	b160      	cbz	r0, 8006f1c <pow+0xdc>
 8006f02:	f7ff fed5 	bl	8006cb0 <__errno>
 8006f06:	2321      	movs	r3, #33	; 0x21
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	4610      	mov	r0, r2
 8006f10:	4619      	mov	r1, r3
 8006f12:	f7f9 fc47 	bl	80007a4 <__aeabi_ddiv>
 8006f16:	4604      	mov	r4, r0
 8006f18:	460d      	mov	r5, r1
 8006f1a:	e7b6      	b.n	8006e8a <pow+0x4a>
 8006f1c:	f7ff fec8 	bl	8006cb0 <__errno>
 8006f20:	2322      	movs	r3, #34	; 0x22
 8006f22:	6003      	str	r3, [r0, #0]
 8006f24:	2200      	movs	r2, #0
 8006f26:	2300      	movs	r3, #0
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4649      	mov	r1, r9
 8006f2c:	f7f9 fd82 	bl	8000a34 <__aeabi_dcmplt>
 8006f30:	2400      	movs	r4, #0
 8006f32:	b158      	cbz	r0, 8006f4c <pow+0x10c>
 8006f34:	ec47 6b10 	vmov	d0, r6, r7
 8006f38:	f001 f9a6 	bl	8008288 <rint>
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	ec51 0b10 	vmov	r0, r1, d0
 8006f42:	463b      	mov	r3, r7
 8006f44:	f7f9 fd6c 	bl	8000a20 <__aeabi_dcmpeq>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d0c2      	beq.n	8006ed2 <pow+0x92>
 8006f4c:	4d11      	ldr	r5, [pc, #68]	; (8006f94 <pow+0x154>)
 8006f4e:	e79c      	b.n	8006e8a <pow+0x4a>
 8006f50:	2200      	movs	r2, #0
 8006f52:	2300      	movs	r3, #0
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 fd62 	bl	8000a20 <__aeabi_dcmpeq>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d094      	beq.n	8006e8a <pow+0x4a>
 8006f60:	ec49 8b10 	vmov	d0, r8, r9
 8006f64:	f001 f97a 	bl	800825c <finite>
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d08e      	beq.n	8006e8a <pow+0x4a>
 8006f6c:	ec47 6b10 	vmov	d0, r6, r7
 8006f70:	f001 f974 	bl	800825c <finite>
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d088      	beq.n	8006e8a <pow+0x4a>
 8006f78:	f7ff fe9a 	bl	8006cb0 <__errno>
 8006f7c:	2322      	movs	r3, #34	; 0x22
 8006f7e:	6003      	str	r3, [r0, #0]
 8006f80:	2400      	movs	r4, #0
 8006f82:	2500      	movs	r5, #0
 8006f84:	e781      	b.n	8006e8a <pow+0x4a>
 8006f86:	4d04      	ldr	r5, [pc, #16]	; (8006f98 <pow+0x158>)
 8006f88:	2400      	movs	r4, #0
 8006f8a:	e77e      	b.n	8006e8a <pow+0x4a>
 8006f8c:	20000098 	.word	0x20000098
 8006f90:	fff00000 	.word	0xfff00000
 8006f94:	7ff00000 	.word	0x7ff00000
 8006f98:	3ff00000 	.word	0x3ff00000

08006f9c <powf>:
 8006f9c:	b508      	push	{r3, lr}
 8006f9e:	ed2d 8b04 	vpush	{d8-d9}
 8006fa2:	eeb0 9a40 	vmov.f32	s18, s0
 8006fa6:	eef0 8a60 	vmov.f32	s17, s1
 8006faa:	f000 fe8b 	bl	8007cc4 <__ieee754_powf>
 8006fae:	4b43      	ldr	r3, [pc, #268]	; (80070bc <powf+0x120>)
 8006fb0:	f993 3000 	ldrsb.w	r3, [r3]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	eeb0 8a40 	vmov.f32	s16, s0
 8006fba:	d012      	beq.n	8006fe2 <powf+0x46>
 8006fbc:	eef4 8a68 	vcmp.f32	s17, s17
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	d60d      	bvs.n	8006fe2 <powf+0x46>
 8006fc6:	eeb4 9a49 	vcmp.f32	s18, s18
 8006fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fce:	d70d      	bvc.n	8006fec <powf+0x50>
 8006fd0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006fdc:	bf08      	it	eq
 8006fde:	eeb0 8a67 	vmoveq.f32	s16, s15
 8006fe2:	eeb0 0a48 	vmov.f32	s0, s16
 8006fe6:	ecbd 8b04 	vpop	{d8-d9}
 8006fea:	bd08      	pop	{r3, pc}
 8006fec:	eddf 9a34 	vldr	s19, [pc, #208]	; 80070c0 <powf+0x124>
 8006ff0:	eeb4 9a69 	vcmp.f32	s18, s19
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	d116      	bne.n	8007028 <powf+0x8c>
 8006ffa:	eef4 8a69 	vcmp.f32	s17, s19
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d057      	beq.n	80070b4 <powf+0x118>
 8007004:	eeb0 0a68 	vmov.f32	s0, s17
 8007008:	f001 fa57 	bl	80084ba <finitef>
 800700c:	2800      	cmp	r0, #0
 800700e:	d0e8      	beq.n	8006fe2 <powf+0x46>
 8007010:	eef4 8ae9 	vcmpe.f32	s17, s19
 8007014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007018:	d5e3      	bpl.n	8006fe2 <powf+0x46>
 800701a:	f7ff fe49 	bl	8006cb0 <__errno>
 800701e:	2321      	movs	r3, #33	; 0x21
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80070c4 <powf+0x128>
 8007026:	e7dc      	b.n	8006fe2 <powf+0x46>
 8007028:	f001 fa47 	bl	80084ba <finitef>
 800702c:	bb50      	cbnz	r0, 8007084 <powf+0xe8>
 800702e:	eeb0 0a49 	vmov.f32	s0, s18
 8007032:	f001 fa42 	bl	80084ba <finitef>
 8007036:	b328      	cbz	r0, 8007084 <powf+0xe8>
 8007038:	eeb0 0a68 	vmov.f32	s0, s17
 800703c:	f001 fa3d 	bl	80084ba <finitef>
 8007040:	b300      	cbz	r0, 8007084 <powf+0xe8>
 8007042:	eeb4 8a48 	vcmp.f32	s16, s16
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	d706      	bvc.n	800705a <powf+0xbe>
 800704c:	f7ff fe30 	bl	8006cb0 <__errno>
 8007050:	2321      	movs	r3, #33	; 0x21
 8007052:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8007056:	6003      	str	r3, [r0, #0]
 8007058:	e7c3      	b.n	8006fe2 <powf+0x46>
 800705a:	f7ff fe29 	bl	8006cb0 <__errno>
 800705e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8007062:	2322      	movs	r3, #34	; 0x22
 8007064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007068:	6003      	str	r3, [r0, #0]
 800706a:	d508      	bpl.n	800707e <powf+0xe2>
 800706c:	eeb0 0a68 	vmov.f32	s0, s17
 8007070:	f001 fa36 	bl	80084e0 <rintf>
 8007074:	eeb4 0a68 	vcmp.f32	s0, s17
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	d1d1      	bne.n	8007022 <powf+0x86>
 800707e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80070c8 <powf+0x12c>
 8007082:	e7ae      	b.n	8006fe2 <powf+0x46>
 8007084:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708c:	d1a9      	bne.n	8006fe2 <powf+0x46>
 800708e:	eeb0 0a49 	vmov.f32	s0, s18
 8007092:	f001 fa12 	bl	80084ba <finitef>
 8007096:	2800      	cmp	r0, #0
 8007098:	d0a3      	beq.n	8006fe2 <powf+0x46>
 800709a:	eeb0 0a68 	vmov.f32	s0, s17
 800709e:	f001 fa0c 	bl	80084ba <finitef>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d09d      	beq.n	8006fe2 <powf+0x46>
 80070a6:	f7ff fe03 	bl	8006cb0 <__errno>
 80070aa:	2322      	movs	r3, #34	; 0x22
 80070ac:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80070c0 <powf+0x124>
 80070b0:	6003      	str	r3, [r0, #0]
 80070b2:	e796      	b.n	8006fe2 <powf+0x46>
 80070b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80070b8:	e793      	b.n	8006fe2 <powf+0x46>
 80070ba:	bf00      	nop
 80070bc:	20000098 	.word	0x20000098
 80070c0:	00000000 	.word	0x00000000
 80070c4:	ff800000 	.word	0xff800000
 80070c8:	7f800000 	.word	0x7f800000

080070cc <sqrtf>:
 80070cc:	b508      	push	{r3, lr}
 80070ce:	ed2d 8b02 	vpush	{d8}
 80070d2:	eeb0 8a40 	vmov.f32	s16, s0
 80070d6:	f001 f8b5 	bl	8008244 <__ieee754_sqrtf>
 80070da:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <sqrtf+0x44>)
 80070dc:	f993 3000 	ldrsb.w	r3, [r3]
 80070e0:	3301      	adds	r3, #1
 80070e2:	d011      	beq.n	8007108 <sqrtf+0x3c>
 80070e4:	eeb4 8a48 	vcmp.f32	s16, s16
 80070e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ec:	d60c      	bvs.n	8007108 <sqrtf+0x3c>
 80070ee:	eddf 8a09 	vldr	s17, [pc, #36]	; 8007114 <sqrtf+0x48>
 80070f2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	d505      	bpl.n	8007108 <sqrtf+0x3c>
 80070fc:	f7ff fdd8 	bl	8006cb0 <__errno>
 8007100:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007104:	2321      	movs	r3, #33	; 0x21
 8007106:	6003      	str	r3, [r0, #0]
 8007108:	ecbd 8b02 	vpop	{d8}
 800710c:	bd08      	pop	{r3, pc}
 800710e:	bf00      	nop
 8007110:	20000098 	.word	0x20000098
 8007114:	00000000 	.word	0x00000000

08007118 <__ieee754_pow>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b06 	vpush	{d8-d10}
 8007120:	b08d      	sub	sp, #52	; 0x34
 8007122:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007126:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800712a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800712e:	ea56 0100 	orrs.w	r1, r6, r0
 8007132:	ec53 2b10 	vmov	r2, r3, d0
 8007136:	f000 84d1 	beq.w	8007adc <__ieee754_pow+0x9c4>
 800713a:	497f      	ldr	r1, [pc, #508]	; (8007338 <__ieee754_pow+0x220>)
 800713c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8007140:	428c      	cmp	r4, r1
 8007142:	ee10 8a10 	vmov	r8, s0
 8007146:	4699      	mov	r9, r3
 8007148:	dc09      	bgt.n	800715e <__ieee754_pow+0x46>
 800714a:	d103      	bne.n	8007154 <__ieee754_pow+0x3c>
 800714c:	b97a      	cbnz	r2, 800716e <__ieee754_pow+0x56>
 800714e:	42a6      	cmp	r6, r4
 8007150:	dd02      	ble.n	8007158 <__ieee754_pow+0x40>
 8007152:	e00c      	b.n	800716e <__ieee754_pow+0x56>
 8007154:	428e      	cmp	r6, r1
 8007156:	dc02      	bgt.n	800715e <__ieee754_pow+0x46>
 8007158:	428e      	cmp	r6, r1
 800715a:	d110      	bne.n	800717e <__ieee754_pow+0x66>
 800715c:	b178      	cbz	r0, 800717e <__ieee754_pow+0x66>
 800715e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007162:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007166:	ea54 0308 	orrs.w	r3, r4, r8
 800716a:	f000 84b7 	beq.w	8007adc <__ieee754_pow+0x9c4>
 800716e:	4873      	ldr	r0, [pc, #460]	; (800733c <__ieee754_pow+0x224>)
 8007170:	b00d      	add	sp, #52	; 0x34
 8007172:	ecbd 8b06 	vpop	{d8-d10}
 8007176:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	f001 b87d 	b.w	8008278 <nan>
 800717e:	f1b9 0f00 	cmp.w	r9, #0
 8007182:	da36      	bge.n	80071f2 <__ieee754_pow+0xda>
 8007184:	496e      	ldr	r1, [pc, #440]	; (8007340 <__ieee754_pow+0x228>)
 8007186:	428e      	cmp	r6, r1
 8007188:	dc51      	bgt.n	800722e <__ieee754_pow+0x116>
 800718a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800718e:	428e      	cmp	r6, r1
 8007190:	f340 84af 	ble.w	8007af2 <__ieee754_pow+0x9da>
 8007194:	1531      	asrs	r1, r6, #20
 8007196:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800719a:	2914      	cmp	r1, #20
 800719c:	dd0f      	ble.n	80071be <__ieee754_pow+0xa6>
 800719e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80071a2:	fa20 fc01 	lsr.w	ip, r0, r1
 80071a6:	fa0c f101 	lsl.w	r1, ip, r1
 80071aa:	4281      	cmp	r1, r0
 80071ac:	f040 84a1 	bne.w	8007af2 <__ieee754_pow+0x9da>
 80071b0:	f00c 0c01 	and.w	ip, ip, #1
 80071b4:	f1cc 0102 	rsb	r1, ip, #2
 80071b8:	9100      	str	r1, [sp, #0]
 80071ba:	b180      	cbz	r0, 80071de <__ieee754_pow+0xc6>
 80071bc:	e059      	b.n	8007272 <__ieee754_pow+0x15a>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d155      	bne.n	800726e <__ieee754_pow+0x156>
 80071c2:	f1c1 0114 	rsb	r1, r1, #20
 80071c6:	fa46 fc01 	asr.w	ip, r6, r1
 80071ca:	fa0c f101 	lsl.w	r1, ip, r1
 80071ce:	42b1      	cmp	r1, r6
 80071d0:	f040 848c 	bne.w	8007aec <__ieee754_pow+0x9d4>
 80071d4:	f00c 0c01 	and.w	ip, ip, #1
 80071d8:	f1cc 0102 	rsb	r1, ip, #2
 80071dc:	9100      	str	r1, [sp, #0]
 80071de:	4959      	ldr	r1, [pc, #356]	; (8007344 <__ieee754_pow+0x22c>)
 80071e0:	428e      	cmp	r6, r1
 80071e2:	d12d      	bne.n	8007240 <__ieee754_pow+0x128>
 80071e4:	2f00      	cmp	r7, #0
 80071e6:	da79      	bge.n	80072dc <__ieee754_pow+0x1c4>
 80071e8:	4956      	ldr	r1, [pc, #344]	; (8007344 <__ieee754_pow+0x22c>)
 80071ea:	2000      	movs	r0, #0
 80071ec:	f7f9 fada 	bl	80007a4 <__aeabi_ddiv>
 80071f0:	e016      	b.n	8007220 <__ieee754_pow+0x108>
 80071f2:	2100      	movs	r1, #0
 80071f4:	9100      	str	r1, [sp, #0]
 80071f6:	2800      	cmp	r0, #0
 80071f8:	d13b      	bne.n	8007272 <__ieee754_pow+0x15a>
 80071fa:	494f      	ldr	r1, [pc, #316]	; (8007338 <__ieee754_pow+0x220>)
 80071fc:	428e      	cmp	r6, r1
 80071fe:	d1ee      	bne.n	80071de <__ieee754_pow+0xc6>
 8007200:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007204:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007208:	ea53 0308 	orrs.w	r3, r3, r8
 800720c:	f000 8466 	beq.w	8007adc <__ieee754_pow+0x9c4>
 8007210:	4b4d      	ldr	r3, [pc, #308]	; (8007348 <__ieee754_pow+0x230>)
 8007212:	429c      	cmp	r4, r3
 8007214:	dd0d      	ble.n	8007232 <__ieee754_pow+0x11a>
 8007216:	2f00      	cmp	r7, #0
 8007218:	f280 8464 	bge.w	8007ae4 <__ieee754_pow+0x9cc>
 800721c:	2000      	movs	r0, #0
 800721e:	2100      	movs	r1, #0
 8007220:	ec41 0b10 	vmov	d0, r0, r1
 8007224:	b00d      	add	sp, #52	; 0x34
 8007226:	ecbd 8b06 	vpop	{d8-d10}
 800722a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722e:	2102      	movs	r1, #2
 8007230:	e7e0      	b.n	80071f4 <__ieee754_pow+0xdc>
 8007232:	2f00      	cmp	r7, #0
 8007234:	daf2      	bge.n	800721c <__ieee754_pow+0x104>
 8007236:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 800723a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800723e:	e7ef      	b.n	8007220 <__ieee754_pow+0x108>
 8007240:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8007244:	d104      	bne.n	8007250 <__ieee754_pow+0x138>
 8007246:	4610      	mov	r0, r2
 8007248:	4619      	mov	r1, r3
 800724a:	f7f9 f981 	bl	8000550 <__aeabi_dmul>
 800724e:	e7e7      	b.n	8007220 <__ieee754_pow+0x108>
 8007250:	493e      	ldr	r1, [pc, #248]	; (800734c <__ieee754_pow+0x234>)
 8007252:	428f      	cmp	r7, r1
 8007254:	d10d      	bne.n	8007272 <__ieee754_pow+0x15a>
 8007256:	f1b9 0f00 	cmp.w	r9, #0
 800725a:	db0a      	blt.n	8007272 <__ieee754_pow+0x15a>
 800725c:	ec43 2b10 	vmov	d0, r2, r3
 8007260:	b00d      	add	sp, #52	; 0x34
 8007262:	ecbd 8b06 	vpop	{d8-d10}
 8007266:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	f000 bc77 	b.w	8007b5c <__ieee754_sqrt>
 800726e:	2100      	movs	r1, #0
 8007270:	9100      	str	r1, [sp, #0]
 8007272:	ec43 2b10 	vmov	d0, r2, r3
 8007276:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800727a:	f000 ffe6 	bl	800824a <fabs>
 800727e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007282:	ec51 0b10 	vmov	r0, r1, d0
 8007286:	f1b8 0f00 	cmp.w	r8, #0
 800728a:	d12a      	bne.n	80072e2 <__ieee754_pow+0x1ca>
 800728c:	b12c      	cbz	r4, 800729a <__ieee754_pow+0x182>
 800728e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8007344 <__ieee754_pow+0x22c>
 8007292:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007296:	45e6      	cmp	lr, ip
 8007298:	d123      	bne.n	80072e2 <__ieee754_pow+0x1ca>
 800729a:	2f00      	cmp	r7, #0
 800729c:	da05      	bge.n	80072aa <__ieee754_pow+0x192>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	2000      	movs	r0, #0
 80072a4:	4927      	ldr	r1, [pc, #156]	; (8007344 <__ieee754_pow+0x22c>)
 80072a6:	f7f9 fa7d 	bl	80007a4 <__aeabi_ddiv>
 80072aa:	f1b9 0f00 	cmp.w	r9, #0
 80072ae:	dab7      	bge.n	8007220 <__ieee754_pow+0x108>
 80072b0:	9b00      	ldr	r3, [sp, #0]
 80072b2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80072b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80072ba:	4323      	orrs	r3, r4
 80072bc:	d108      	bne.n	80072d0 <__ieee754_pow+0x1b8>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4610      	mov	r0, r2
 80072c4:	4619      	mov	r1, r3
 80072c6:	f7f8 ff8b 	bl	80001e0 <__aeabi_dsub>
 80072ca:	4602      	mov	r2, r0
 80072cc:	460b      	mov	r3, r1
 80072ce:	e78d      	b.n	80071ec <__ieee754_pow+0xd4>
 80072d0:	9b00      	ldr	r3, [sp, #0]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d1a4      	bne.n	8007220 <__ieee754_pow+0x108>
 80072d6:	4602      	mov	r2, r0
 80072d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072dc:	4610      	mov	r0, r2
 80072de:	4619      	mov	r1, r3
 80072e0:	e79e      	b.n	8007220 <__ieee754_pow+0x108>
 80072e2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80072e6:	f10c 35ff 	add.w	r5, ip, #4294967295
 80072ea:	950a      	str	r5, [sp, #40]	; 0x28
 80072ec:	9d00      	ldr	r5, [sp, #0]
 80072ee:	46ac      	mov	ip, r5
 80072f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80072f2:	ea5c 0505 	orrs.w	r5, ip, r5
 80072f6:	d0e4      	beq.n	80072c2 <__ieee754_pow+0x1aa>
 80072f8:	4b15      	ldr	r3, [pc, #84]	; (8007350 <__ieee754_pow+0x238>)
 80072fa:	429e      	cmp	r6, r3
 80072fc:	f340 80fc 	ble.w	80074f8 <__ieee754_pow+0x3e0>
 8007300:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007304:	429e      	cmp	r6, r3
 8007306:	4b10      	ldr	r3, [pc, #64]	; (8007348 <__ieee754_pow+0x230>)
 8007308:	dd07      	ble.n	800731a <__ieee754_pow+0x202>
 800730a:	429c      	cmp	r4, r3
 800730c:	dc0a      	bgt.n	8007324 <__ieee754_pow+0x20c>
 800730e:	2f00      	cmp	r7, #0
 8007310:	da84      	bge.n	800721c <__ieee754_pow+0x104>
 8007312:	a307      	add	r3, pc, #28	; (adr r3, 8007330 <__ieee754_pow+0x218>)
 8007314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007318:	e795      	b.n	8007246 <__ieee754_pow+0x12e>
 800731a:	429c      	cmp	r4, r3
 800731c:	dbf7      	blt.n	800730e <__ieee754_pow+0x1f6>
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <__ieee754_pow+0x22c>)
 8007320:	429c      	cmp	r4, r3
 8007322:	dd17      	ble.n	8007354 <__ieee754_pow+0x23c>
 8007324:	2f00      	cmp	r7, #0
 8007326:	dcf4      	bgt.n	8007312 <__ieee754_pow+0x1fa>
 8007328:	e778      	b.n	800721c <__ieee754_pow+0x104>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	8800759c 	.word	0x8800759c
 8007334:	7e37e43c 	.word	0x7e37e43c
 8007338:	7ff00000 	.word	0x7ff00000
 800733c:	080086bc 	.word	0x080086bc
 8007340:	433fffff 	.word	0x433fffff
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	3fefffff 	.word	0x3fefffff
 800734c:	3fe00000 	.word	0x3fe00000
 8007350:	41e00000 	.word	0x41e00000
 8007354:	4b64      	ldr	r3, [pc, #400]	; (80074e8 <__ieee754_pow+0x3d0>)
 8007356:	2200      	movs	r2, #0
 8007358:	f7f8 ff42 	bl	80001e0 <__aeabi_dsub>
 800735c:	a356      	add	r3, pc, #344	; (adr r3, 80074b8 <__ieee754_pow+0x3a0>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	4604      	mov	r4, r0
 8007364:	460d      	mov	r5, r1
 8007366:	f7f9 f8f3 	bl	8000550 <__aeabi_dmul>
 800736a:	a355      	add	r3, pc, #340	; (adr r3, 80074c0 <__ieee754_pow+0x3a8>)
 800736c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007370:	4606      	mov	r6, r0
 8007372:	460f      	mov	r7, r1
 8007374:	4620      	mov	r0, r4
 8007376:	4629      	mov	r1, r5
 8007378:	f7f9 f8ea 	bl	8000550 <__aeabi_dmul>
 800737c:	4b5b      	ldr	r3, [pc, #364]	; (80074ec <__ieee754_pow+0x3d4>)
 800737e:	4682      	mov	sl, r0
 8007380:	468b      	mov	fp, r1
 8007382:	2200      	movs	r2, #0
 8007384:	4620      	mov	r0, r4
 8007386:	4629      	mov	r1, r5
 8007388:	f7f9 f8e2 	bl	8000550 <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	a14d      	add	r1, pc, #308	; (adr r1, 80074c8 <__ieee754_pow+0x3b0>)
 8007392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007396:	f7f8 ff23 	bl	80001e0 <__aeabi_dsub>
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	f7f9 f8d7 	bl	8000550 <__aeabi_dmul>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	2000      	movs	r0, #0
 80073a8:	4951      	ldr	r1, [pc, #324]	; (80074f0 <__ieee754_pow+0x3d8>)
 80073aa:	f7f8 ff19 	bl	80001e0 <__aeabi_dsub>
 80073ae:	4622      	mov	r2, r4
 80073b0:	4680      	mov	r8, r0
 80073b2:	4689      	mov	r9, r1
 80073b4:	462b      	mov	r3, r5
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f9 f8c9 	bl	8000550 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4640      	mov	r0, r8
 80073c4:	4649      	mov	r1, r9
 80073c6:	f7f9 f8c3 	bl	8000550 <__aeabi_dmul>
 80073ca:	a341      	add	r3, pc, #260	; (adr r3, 80074d0 <__ieee754_pow+0x3b8>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f9 f8be 	bl	8000550 <__aeabi_dmul>
 80073d4:	4602      	mov	r2, r0
 80073d6:	460b      	mov	r3, r1
 80073d8:	4650      	mov	r0, sl
 80073da:	4659      	mov	r1, fp
 80073dc:	f7f8 ff00 	bl	80001e0 <__aeabi_dsub>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4680      	mov	r8, r0
 80073e6:	4689      	mov	r9, r1
 80073e8:	4630      	mov	r0, r6
 80073ea:	4639      	mov	r1, r7
 80073ec:	f7f8 fefa 	bl	80001e4 <__adddf3>
 80073f0:	2400      	movs	r4, #0
 80073f2:	4632      	mov	r2, r6
 80073f4:	463b      	mov	r3, r7
 80073f6:	4620      	mov	r0, r4
 80073f8:	460d      	mov	r5, r1
 80073fa:	f7f8 fef1 	bl	80001e0 <__aeabi_dsub>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	4640      	mov	r0, r8
 8007404:	4649      	mov	r1, r9
 8007406:	f7f8 feeb 	bl	80001e0 <__aeabi_dsub>
 800740a:	9b00      	ldr	r3, [sp, #0]
 800740c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800740e:	3b01      	subs	r3, #1
 8007410:	4313      	orrs	r3, r2
 8007412:	4682      	mov	sl, r0
 8007414:	468b      	mov	fp, r1
 8007416:	f040 81f1 	bne.w	80077fc <__ieee754_pow+0x6e4>
 800741a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80074d8 <__ieee754_pow+0x3c0>
 800741e:	eeb0 8a47 	vmov.f32	s16, s14
 8007422:	eef0 8a67 	vmov.f32	s17, s15
 8007426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800742a:	2600      	movs	r6, #0
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007434:	f7f8 fed4 	bl	80001e0 <__aeabi_dsub>
 8007438:	4622      	mov	r2, r4
 800743a:	462b      	mov	r3, r5
 800743c:	f7f9 f888 	bl	8000550 <__aeabi_dmul>
 8007440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007444:	4680      	mov	r8, r0
 8007446:	4689      	mov	r9, r1
 8007448:	4650      	mov	r0, sl
 800744a:	4659      	mov	r1, fp
 800744c:	f7f9 f880 	bl	8000550 <__aeabi_dmul>
 8007450:	4602      	mov	r2, r0
 8007452:	460b      	mov	r3, r1
 8007454:	4640      	mov	r0, r8
 8007456:	4649      	mov	r1, r9
 8007458:	f7f8 fec4 	bl	80001e4 <__adddf3>
 800745c:	4632      	mov	r2, r6
 800745e:	463b      	mov	r3, r7
 8007460:	4680      	mov	r8, r0
 8007462:	4689      	mov	r9, r1
 8007464:	4620      	mov	r0, r4
 8007466:	4629      	mov	r1, r5
 8007468:	f7f9 f872 	bl	8000550 <__aeabi_dmul>
 800746c:	460b      	mov	r3, r1
 800746e:	4604      	mov	r4, r0
 8007470:	460d      	mov	r5, r1
 8007472:	4602      	mov	r2, r0
 8007474:	4649      	mov	r1, r9
 8007476:	4640      	mov	r0, r8
 8007478:	f7f8 feb4 	bl	80001e4 <__adddf3>
 800747c:	4b1d      	ldr	r3, [pc, #116]	; (80074f4 <__ieee754_pow+0x3dc>)
 800747e:	4299      	cmp	r1, r3
 8007480:	ec45 4b19 	vmov	d9, r4, r5
 8007484:	4606      	mov	r6, r0
 8007486:	460f      	mov	r7, r1
 8007488:	468b      	mov	fp, r1
 800748a:	f340 82fe 	ble.w	8007a8a <__ieee754_pow+0x972>
 800748e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007492:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007496:	4303      	orrs	r3, r0
 8007498:	f000 81f0 	beq.w	800787c <__ieee754_pow+0x764>
 800749c:	a310      	add	r3, pc, #64	; (adr r3, 80074e0 <__ieee754_pow+0x3c8>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	ec51 0b18 	vmov	r0, r1, d8
 80074a6:	f7f9 f853 	bl	8000550 <__aeabi_dmul>
 80074aa:	a30d      	add	r3, pc, #52	; (adr r3, 80074e0 <__ieee754_pow+0x3c8>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	e6cb      	b.n	800724a <__ieee754_pow+0x132>
 80074b2:	bf00      	nop
 80074b4:	f3af 8000 	nop.w
 80074b8:	60000000 	.word	0x60000000
 80074bc:	3ff71547 	.word	0x3ff71547
 80074c0:	f85ddf44 	.word	0xf85ddf44
 80074c4:	3e54ae0b 	.word	0x3e54ae0b
 80074c8:	55555555 	.word	0x55555555
 80074cc:	3fd55555 	.word	0x3fd55555
 80074d0:	652b82fe 	.word	0x652b82fe
 80074d4:	3ff71547 	.word	0x3ff71547
 80074d8:	00000000 	.word	0x00000000
 80074dc:	bff00000 	.word	0xbff00000
 80074e0:	8800759c 	.word	0x8800759c
 80074e4:	7e37e43c 	.word	0x7e37e43c
 80074e8:	3ff00000 	.word	0x3ff00000
 80074ec:	3fd00000 	.word	0x3fd00000
 80074f0:	3fe00000 	.word	0x3fe00000
 80074f4:	408fffff 	.word	0x408fffff
 80074f8:	4bd7      	ldr	r3, [pc, #860]	; (8007858 <__ieee754_pow+0x740>)
 80074fa:	ea03 0309 	and.w	r3, r3, r9
 80074fe:	2200      	movs	r2, #0
 8007500:	b92b      	cbnz	r3, 800750e <__ieee754_pow+0x3f6>
 8007502:	4bd6      	ldr	r3, [pc, #856]	; (800785c <__ieee754_pow+0x744>)
 8007504:	f7f9 f824 	bl	8000550 <__aeabi_dmul>
 8007508:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800750c:	460c      	mov	r4, r1
 800750e:	1523      	asrs	r3, r4, #20
 8007510:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007514:	4413      	add	r3, r2
 8007516:	9309      	str	r3, [sp, #36]	; 0x24
 8007518:	4bd1      	ldr	r3, [pc, #836]	; (8007860 <__ieee754_pow+0x748>)
 800751a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800751e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007522:	429c      	cmp	r4, r3
 8007524:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007528:	dd08      	ble.n	800753c <__ieee754_pow+0x424>
 800752a:	4bce      	ldr	r3, [pc, #824]	; (8007864 <__ieee754_pow+0x74c>)
 800752c:	429c      	cmp	r4, r3
 800752e:	f340 8163 	ble.w	80077f8 <__ieee754_pow+0x6e0>
 8007532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007534:	3301      	adds	r3, #1
 8007536:	9309      	str	r3, [sp, #36]	; 0x24
 8007538:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800753c:	2400      	movs	r4, #0
 800753e:	00e3      	lsls	r3, r4, #3
 8007540:	930b      	str	r3, [sp, #44]	; 0x2c
 8007542:	4bc9      	ldr	r3, [pc, #804]	; (8007868 <__ieee754_pow+0x750>)
 8007544:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007548:	ed93 7b00 	vldr	d7, [r3]
 800754c:	4629      	mov	r1, r5
 800754e:	ec53 2b17 	vmov	r2, r3, d7
 8007552:	eeb0 8a47 	vmov.f32	s16, s14
 8007556:	eef0 8a67 	vmov.f32	s17, s15
 800755a:	4682      	mov	sl, r0
 800755c:	f7f8 fe40 	bl	80001e0 <__aeabi_dsub>
 8007560:	4652      	mov	r2, sl
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	462b      	mov	r3, r5
 8007568:	ec51 0b18 	vmov	r0, r1, d8
 800756c:	f7f8 fe3a 	bl	80001e4 <__adddf3>
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	2000      	movs	r0, #0
 8007576:	49bd      	ldr	r1, [pc, #756]	; (800786c <__ieee754_pow+0x754>)
 8007578:	f7f9 f914 	bl	80007a4 <__aeabi_ddiv>
 800757c:	ec41 0b19 	vmov	d9, r0, r1
 8007580:	4602      	mov	r2, r0
 8007582:	460b      	mov	r3, r1
 8007584:	4630      	mov	r0, r6
 8007586:	4639      	mov	r1, r7
 8007588:	f7f8 ffe2 	bl	8000550 <__aeabi_dmul>
 800758c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007590:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007594:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007598:	2300      	movs	r3, #0
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80075a0:	46ab      	mov	fp, r5
 80075a2:	106d      	asrs	r5, r5, #1
 80075a4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80075a8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80075ac:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80075b0:	2200      	movs	r2, #0
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	4614      	mov	r4, r2
 80075b8:	461d      	mov	r5, r3
 80075ba:	f7f8 ffc9 	bl	8000550 <__aeabi_dmul>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f8 fe0b 	bl	80001e0 <__aeabi_dsub>
 80075ca:	ec53 2b18 	vmov	r2, r3, d8
 80075ce:	4606      	mov	r6, r0
 80075d0:	460f      	mov	r7, r1
 80075d2:	4620      	mov	r0, r4
 80075d4:	4629      	mov	r1, r5
 80075d6:	f7f8 fe03 	bl	80001e0 <__aeabi_dsub>
 80075da:	4602      	mov	r2, r0
 80075dc:	460b      	mov	r3, r1
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	f7f8 fdfd 	bl	80001e0 <__aeabi_dsub>
 80075e6:	4642      	mov	r2, r8
 80075e8:	464b      	mov	r3, r9
 80075ea:	f7f8 ffb1 	bl	8000550 <__aeabi_dmul>
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f8 fdf3 	bl	80001e0 <__aeabi_dsub>
 80075fa:	ec53 2b19 	vmov	r2, r3, d9
 80075fe:	f7f8 ffa7 	bl	8000550 <__aeabi_dmul>
 8007602:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007606:	ec41 0b18 	vmov	d8, r0, r1
 800760a:	4610      	mov	r0, r2
 800760c:	4619      	mov	r1, r3
 800760e:	f7f8 ff9f 	bl	8000550 <__aeabi_dmul>
 8007612:	a37d      	add	r3, pc, #500	; (adr r3, 8007808 <__ieee754_pow+0x6f0>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	4604      	mov	r4, r0
 800761a:	460d      	mov	r5, r1
 800761c:	f7f8 ff98 	bl	8000550 <__aeabi_dmul>
 8007620:	a37b      	add	r3, pc, #492	; (adr r3, 8007810 <__ieee754_pow+0x6f8>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f8 fddd 	bl	80001e4 <__adddf3>
 800762a:	4622      	mov	r2, r4
 800762c:	462b      	mov	r3, r5
 800762e:	f7f8 ff8f 	bl	8000550 <__aeabi_dmul>
 8007632:	a379      	add	r3, pc, #484	; (adr r3, 8007818 <__ieee754_pow+0x700>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f8 fdd4 	bl	80001e4 <__adddf3>
 800763c:	4622      	mov	r2, r4
 800763e:	462b      	mov	r3, r5
 8007640:	f7f8 ff86 	bl	8000550 <__aeabi_dmul>
 8007644:	a376      	add	r3, pc, #472	; (adr r3, 8007820 <__ieee754_pow+0x708>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f7f8 fdcb 	bl	80001e4 <__adddf3>
 800764e:	4622      	mov	r2, r4
 8007650:	462b      	mov	r3, r5
 8007652:	f7f8 ff7d 	bl	8000550 <__aeabi_dmul>
 8007656:	a374      	add	r3, pc, #464	; (adr r3, 8007828 <__ieee754_pow+0x710>)
 8007658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765c:	f7f8 fdc2 	bl	80001e4 <__adddf3>
 8007660:	4622      	mov	r2, r4
 8007662:	462b      	mov	r3, r5
 8007664:	f7f8 ff74 	bl	8000550 <__aeabi_dmul>
 8007668:	a371      	add	r3, pc, #452	; (adr r3, 8007830 <__ieee754_pow+0x718>)
 800766a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800766e:	f7f8 fdb9 	bl	80001e4 <__adddf3>
 8007672:	4622      	mov	r2, r4
 8007674:	4606      	mov	r6, r0
 8007676:	460f      	mov	r7, r1
 8007678:	462b      	mov	r3, r5
 800767a:	4620      	mov	r0, r4
 800767c:	4629      	mov	r1, r5
 800767e:	f7f8 ff67 	bl	8000550 <__aeabi_dmul>
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	4630      	mov	r0, r6
 8007688:	4639      	mov	r1, r7
 800768a:	f7f8 ff61 	bl	8000550 <__aeabi_dmul>
 800768e:	4642      	mov	r2, r8
 8007690:	4604      	mov	r4, r0
 8007692:	460d      	mov	r5, r1
 8007694:	464b      	mov	r3, r9
 8007696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769a:	f7f8 fda3 	bl	80001e4 <__adddf3>
 800769e:	ec53 2b18 	vmov	r2, r3, d8
 80076a2:	f7f8 ff55 	bl	8000550 <__aeabi_dmul>
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	f7f8 fd9b 	bl	80001e4 <__adddf3>
 80076ae:	4642      	mov	r2, r8
 80076b0:	4682      	mov	sl, r0
 80076b2:	468b      	mov	fp, r1
 80076b4:	464b      	mov	r3, r9
 80076b6:	4640      	mov	r0, r8
 80076b8:	4649      	mov	r1, r9
 80076ba:	f7f8 ff49 	bl	8000550 <__aeabi_dmul>
 80076be:	4b6c      	ldr	r3, [pc, #432]	; (8007870 <__ieee754_pow+0x758>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	4606      	mov	r6, r0
 80076c4:	460f      	mov	r7, r1
 80076c6:	f7f8 fd8d 	bl	80001e4 <__adddf3>
 80076ca:	4652      	mov	r2, sl
 80076cc:	465b      	mov	r3, fp
 80076ce:	f7f8 fd89 	bl	80001e4 <__adddf3>
 80076d2:	9c04      	ldr	r4, [sp, #16]
 80076d4:	460d      	mov	r5, r1
 80076d6:	4622      	mov	r2, r4
 80076d8:	460b      	mov	r3, r1
 80076da:	4640      	mov	r0, r8
 80076dc:	4649      	mov	r1, r9
 80076de:	f7f8 ff37 	bl	8000550 <__aeabi_dmul>
 80076e2:	4b63      	ldr	r3, [pc, #396]	; (8007870 <__ieee754_pow+0x758>)
 80076e4:	4680      	mov	r8, r0
 80076e6:	4689      	mov	r9, r1
 80076e8:	2200      	movs	r2, #0
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f8 fd77 	bl	80001e0 <__aeabi_dsub>
 80076f2:	4632      	mov	r2, r6
 80076f4:	463b      	mov	r3, r7
 80076f6:	f7f8 fd73 	bl	80001e0 <__aeabi_dsub>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	4650      	mov	r0, sl
 8007700:	4659      	mov	r1, fp
 8007702:	f7f8 fd6d 	bl	80001e0 <__aeabi_dsub>
 8007706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800770a:	f7f8 ff21 	bl	8000550 <__aeabi_dmul>
 800770e:	4622      	mov	r2, r4
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	462b      	mov	r3, r5
 8007716:	ec51 0b18 	vmov	r0, r1, d8
 800771a:	f7f8 ff19 	bl	8000550 <__aeabi_dmul>
 800771e:	4602      	mov	r2, r0
 8007720:	460b      	mov	r3, r1
 8007722:	4630      	mov	r0, r6
 8007724:	4639      	mov	r1, r7
 8007726:	f7f8 fd5d 	bl	80001e4 <__adddf3>
 800772a:	4606      	mov	r6, r0
 800772c:	460f      	mov	r7, r1
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4640      	mov	r0, r8
 8007734:	4649      	mov	r1, r9
 8007736:	f7f8 fd55 	bl	80001e4 <__adddf3>
 800773a:	9c04      	ldr	r4, [sp, #16]
 800773c:	a33e      	add	r3, pc, #248	; (adr r3, 8007838 <__ieee754_pow+0x720>)
 800773e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007742:	4620      	mov	r0, r4
 8007744:	460d      	mov	r5, r1
 8007746:	f7f8 ff03 	bl	8000550 <__aeabi_dmul>
 800774a:	4642      	mov	r2, r8
 800774c:	ec41 0b18 	vmov	d8, r0, r1
 8007750:	464b      	mov	r3, r9
 8007752:	4620      	mov	r0, r4
 8007754:	4629      	mov	r1, r5
 8007756:	f7f8 fd43 	bl	80001e0 <__aeabi_dsub>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4630      	mov	r0, r6
 8007760:	4639      	mov	r1, r7
 8007762:	f7f8 fd3d 	bl	80001e0 <__aeabi_dsub>
 8007766:	a336      	add	r3, pc, #216	; (adr r3, 8007840 <__ieee754_pow+0x728>)
 8007768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776c:	f7f8 fef0 	bl	8000550 <__aeabi_dmul>
 8007770:	a335      	add	r3, pc, #212	; (adr r3, 8007848 <__ieee754_pow+0x730>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	4606      	mov	r6, r0
 8007778:	460f      	mov	r7, r1
 800777a:	4620      	mov	r0, r4
 800777c:	4629      	mov	r1, r5
 800777e:	f7f8 fee7 	bl	8000550 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4630      	mov	r0, r6
 8007788:	4639      	mov	r1, r7
 800778a:	f7f8 fd2b 	bl	80001e4 <__adddf3>
 800778e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007790:	4b38      	ldr	r3, [pc, #224]	; (8007874 <__ieee754_pow+0x75c>)
 8007792:	4413      	add	r3, r2
 8007794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007798:	f7f8 fd24 	bl	80001e4 <__adddf3>
 800779c:	4682      	mov	sl, r0
 800779e:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077a0:	468b      	mov	fp, r1
 80077a2:	f7f8 fe6b 	bl	800047c <__aeabi_i2d>
 80077a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077a8:	4b33      	ldr	r3, [pc, #204]	; (8007878 <__ieee754_pow+0x760>)
 80077aa:	4413      	add	r3, r2
 80077ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077b0:	4606      	mov	r6, r0
 80077b2:	460f      	mov	r7, r1
 80077b4:	4652      	mov	r2, sl
 80077b6:	465b      	mov	r3, fp
 80077b8:	ec51 0b18 	vmov	r0, r1, d8
 80077bc:	f7f8 fd12 	bl	80001e4 <__adddf3>
 80077c0:	4642      	mov	r2, r8
 80077c2:	464b      	mov	r3, r9
 80077c4:	f7f8 fd0e 	bl	80001e4 <__adddf3>
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	f7f8 fd0a 	bl	80001e4 <__adddf3>
 80077d0:	9c04      	ldr	r4, [sp, #16]
 80077d2:	4632      	mov	r2, r6
 80077d4:	463b      	mov	r3, r7
 80077d6:	4620      	mov	r0, r4
 80077d8:	460d      	mov	r5, r1
 80077da:	f7f8 fd01 	bl	80001e0 <__aeabi_dsub>
 80077de:	4642      	mov	r2, r8
 80077e0:	464b      	mov	r3, r9
 80077e2:	f7f8 fcfd 	bl	80001e0 <__aeabi_dsub>
 80077e6:	ec53 2b18 	vmov	r2, r3, d8
 80077ea:	f7f8 fcf9 	bl	80001e0 <__aeabi_dsub>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4650      	mov	r0, sl
 80077f4:	4659      	mov	r1, fp
 80077f6:	e606      	b.n	8007406 <__ieee754_pow+0x2ee>
 80077f8:	2401      	movs	r4, #1
 80077fa:	e6a0      	b.n	800753e <__ieee754_pow+0x426>
 80077fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8007850 <__ieee754_pow+0x738>
 8007800:	e60d      	b.n	800741e <__ieee754_pow+0x306>
 8007802:	bf00      	nop
 8007804:	f3af 8000 	nop.w
 8007808:	4a454eef 	.word	0x4a454eef
 800780c:	3fca7e28 	.word	0x3fca7e28
 8007810:	93c9db65 	.word	0x93c9db65
 8007814:	3fcd864a 	.word	0x3fcd864a
 8007818:	a91d4101 	.word	0xa91d4101
 800781c:	3fd17460 	.word	0x3fd17460
 8007820:	518f264d 	.word	0x518f264d
 8007824:	3fd55555 	.word	0x3fd55555
 8007828:	db6fabff 	.word	0xdb6fabff
 800782c:	3fdb6db6 	.word	0x3fdb6db6
 8007830:	33333303 	.word	0x33333303
 8007834:	3fe33333 	.word	0x3fe33333
 8007838:	e0000000 	.word	0xe0000000
 800783c:	3feec709 	.word	0x3feec709
 8007840:	dc3a03fd 	.word	0xdc3a03fd
 8007844:	3feec709 	.word	0x3feec709
 8007848:	145b01f5 	.word	0x145b01f5
 800784c:	be3e2fe0 	.word	0xbe3e2fe0
 8007850:	00000000 	.word	0x00000000
 8007854:	3ff00000 	.word	0x3ff00000
 8007858:	7ff00000 	.word	0x7ff00000
 800785c:	43400000 	.word	0x43400000
 8007860:	0003988e 	.word	0x0003988e
 8007864:	000bb679 	.word	0x000bb679
 8007868:	080086c0 	.word	0x080086c0
 800786c:	3ff00000 	.word	0x3ff00000
 8007870:	40080000 	.word	0x40080000
 8007874:	080086e0 	.word	0x080086e0
 8007878:	080086d0 	.word	0x080086d0
 800787c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007b54 <__ieee754_pow+0xa3c>)
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 fcad 	bl	80001e4 <__adddf3>
 800788a:	4622      	mov	r2, r4
 800788c:	ec41 0b1a 	vmov	d10, r0, r1
 8007890:	462b      	mov	r3, r5
 8007892:	4630      	mov	r0, r6
 8007894:	4639      	mov	r1, r7
 8007896:	f7f8 fca3 	bl	80001e0 <__aeabi_dsub>
 800789a:	4602      	mov	r2, r0
 800789c:	460b      	mov	r3, r1
 800789e:	ec51 0b1a 	vmov	r0, r1, d10
 80078a2:	f7f9 f8e5 	bl	8000a70 <__aeabi_dcmpgt>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f47f adf8 	bne.w	800749c <__ieee754_pow+0x384>
 80078ac:	4aa4      	ldr	r2, [pc, #656]	; (8007b40 <__ieee754_pow+0xa28>)
 80078ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078b2:	4293      	cmp	r3, r2
 80078b4:	f340 810b 	ble.w	8007ace <__ieee754_pow+0x9b6>
 80078b8:	151b      	asrs	r3, r3, #20
 80078ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80078be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80078c2:	fa4a f303 	asr.w	r3, sl, r3
 80078c6:	445b      	add	r3, fp
 80078c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80078cc:	4e9d      	ldr	r6, [pc, #628]	; (8007b44 <__ieee754_pow+0xa2c>)
 80078ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80078d2:	4116      	asrs	r6, r2
 80078d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80078d8:	2000      	movs	r0, #0
 80078da:	ea23 0106 	bic.w	r1, r3, r6
 80078de:	f1c2 0214 	rsb	r2, r2, #20
 80078e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80078e6:	fa4a fa02 	asr.w	sl, sl, r2
 80078ea:	f1bb 0f00 	cmp.w	fp, #0
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4620      	mov	r0, r4
 80078f4:	4629      	mov	r1, r5
 80078f6:	bfb8      	it	lt
 80078f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80078fc:	f7f8 fc70 	bl	80001e0 <__aeabi_dsub>
 8007900:	ec41 0b19 	vmov	d9, r0, r1
 8007904:	4642      	mov	r2, r8
 8007906:	464b      	mov	r3, r9
 8007908:	ec51 0b19 	vmov	r0, r1, d9
 800790c:	f7f8 fc6a 	bl	80001e4 <__adddf3>
 8007910:	2400      	movs	r4, #0
 8007912:	a379      	add	r3, pc, #484	; (adr r3, 8007af8 <__ieee754_pow+0x9e0>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	4620      	mov	r0, r4
 800791a:	460d      	mov	r5, r1
 800791c:	f7f8 fe18 	bl	8000550 <__aeabi_dmul>
 8007920:	ec53 2b19 	vmov	r2, r3, d9
 8007924:	4606      	mov	r6, r0
 8007926:	460f      	mov	r7, r1
 8007928:	4620      	mov	r0, r4
 800792a:	4629      	mov	r1, r5
 800792c:	f7f8 fc58 	bl	80001e0 <__aeabi_dsub>
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4640      	mov	r0, r8
 8007936:	4649      	mov	r1, r9
 8007938:	f7f8 fc52 	bl	80001e0 <__aeabi_dsub>
 800793c:	a370      	add	r3, pc, #448	; (adr r3, 8007b00 <__ieee754_pow+0x9e8>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fe05 	bl	8000550 <__aeabi_dmul>
 8007946:	a370      	add	r3, pc, #448	; (adr r3, 8007b08 <__ieee754_pow+0x9f0>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 fdfc 	bl	8000550 <__aeabi_dmul>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	4640      	mov	r0, r8
 800795e:	4649      	mov	r1, r9
 8007960:	f7f8 fc40 	bl	80001e4 <__adddf3>
 8007964:	4604      	mov	r4, r0
 8007966:	460d      	mov	r5, r1
 8007968:	4602      	mov	r2, r0
 800796a:	460b      	mov	r3, r1
 800796c:	4630      	mov	r0, r6
 800796e:	4639      	mov	r1, r7
 8007970:	f7f8 fc38 	bl	80001e4 <__adddf3>
 8007974:	4632      	mov	r2, r6
 8007976:	463b      	mov	r3, r7
 8007978:	4680      	mov	r8, r0
 800797a:	4689      	mov	r9, r1
 800797c:	f7f8 fc30 	bl	80001e0 <__aeabi_dsub>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	f7f8 fc2a 	bl	80001e0 <__aeabi_dsub>
 800798c:	4642      	mov	r2, r8
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	464b      	mov	r3, r9
 8007994:	4640      	mov	r0, r8
 8007996:	4649      	mov	r1, r9
 8007998:	f7f8 fdda 	bl	8000550 <__aeabi_dmul>
 800799c:	a35c      	add	r3, pc, #368	; (adr r3, 8007b10 <__ieee754_pow+0x9f8>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	4604      	mov	r4, r0
 80079a4:	460d      	mov	r5, r1
 80079a6:	f7f8 fdd3 	bl	8000550 <__aeabi_dmul>
 80079aa:	a35b      	add	r3, pc, #364	; (adr r3, 8007b18 <__ieee754_pow+0xa00>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fc16 	bl	80001e0 <__aeabi_dsub>
 80079b4:	4622      	mov	r2, r4
 80079b6:	462b      	mov	r3, r5
 80079b8:	f7f8 fdca 	bl	8000550 <__aeabi_dmul>
 80079bc:	a358      	add	r3, pc, #352	; (adr r3, 8007b20 <__ieee754_pow+0xa08>)
 80079be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c2:	f7f8 fc0f 	bl	80001e4 <__adddf3>
 80079c6:	4622      	mov	r2, r4
 80079c8:	462b      	mov	r3, r5
 80079ca:	f7f8 fdc1 	bl	8000550 <__aeabi_dmul>
 80079ce:	a356      	add	r3, pc, #344	; (adr r3, 8007b28 <__ieee754_pow+0xa10>)
 80079d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d4:	f7f8 fc04 	bl	80001e0 <__aeabi_dsub>
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	f7f8 fdb8 	bl	8000550 <__aeabi_dmul>
 80079e0:	a353      	add	r3, pc, #332	; (adr r3, 8007b30 <__ieee754_pow+0xa18>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f7f8 fbfd 	bl	80001e4 <__adddf3>
 80079ea:	4622      	mov	r2, r4
 80079ec:	462b      	mov	r3, r5
 80079ee:	f7f8 fdaf 	bl	8000550 <__aeabi_dmul>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4640      	mov	r0, r8
 80079f8:	4649      	mov	r1, r9
 80079fa:	f7f8 fbf1 	bl	80001e0 <__aeabi_dsub>
 80079fe:	4604      	mov	r4, r0
 8007a00:	460d      	mov	r5, r1
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	4640      	mov	r0, r8
 8007a08:	4649      	mov	r1, r9
 8007a0a:	f7f8 fda1 	bl	8000550 <__aeabi_dmul>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	ec41 0b19 	vmov	d9, r0, r1
 8007a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007a18:	4620      	mov	r0, r4
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	f7f8 fbe0 	bl	80001e0 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	ec51 0b19 	vmov	r0, r1, d9
 8007a28:	f7f8 febc 	bl	80007a4 <__aeabi_ddiv>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	463b      	mov	r3, r7
 8007a34:	4640      	mov	r0, r8
 8007a36:	4649      	mov	r1, r9
 8007a38:	f7f8 fd8a 	bl	8000550 <__aeabi_dmul>
 8007a3c:	4632      	mov	r2, r6
 8007a3e:	463b      	mov	r3, r7
 8007a40:	f7f8 fbd0 	bl	80001e4 <__adddf3>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4620      	mov	r0, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7f8 fbc8 	bl	80001e0 <__aeabi_dsub>
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	f7f8 fbc4 	bl	80001e0 <__aeabi_dsub>
 8007a58:	460b      	mov	r3, r1
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	493a      	ldr	r1, [pc, #232]	; (8007b48 <__ieee754_pow+0xa30>)
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7f8 fbbe 	bl	80001e0 <__aeabi_dsub>
 8007a64:	e9cd 0100 	strd	r0, r1, [sp]
 8007a68:	9b01      	ldr	r3, [sp, #4]
 8007a6a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a72:	da2f      	bge.n	8007ad4 <__ieee754_pow+0x9bc>
 8007a74:	4650      	mov	r0, sl
 8007a76:	ed9d 0b00 	vldr	d0, [sp]
 8007a7a:	f000 fc91 	bl	80083a0 <scalbn>
 8007a7e:	ec51 0b10 	vmov	r0, r1, d0
 8007a82:	ec53 2b18 	vmov	r2, r3, d8
 8007a86:	f7ff bbe0 	b.w	800724a <__ieee754_pow+0x132>
 8007a8a:	4b30      	ldr	r3, [pc, #192]	; (8007b4c <__ieee754_pow+0xa34>)
 8007a8c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007a90:	429e      	cmp	r6, r3
 8007a92:	f77f af0b 	ble.w	80078ac <__ieee754_pow+0x794>
 8007a96:	4b2e      	ldr	r3, [pc, #184]	; (8007b50 <__ieee754_pow+0xa38>)
 8007a98:	440b      	add	r3, r1
 8007a9a:	4303      	orrs	r3, r0
 8007a9c:	d00b      	beq.n	8007ab6 <__ieee754_pow+0x99e>
 8007a9e:	a326      	add	r3, pc, #152	; (adr r3, 8007b38 <__ieee754_pow+0xa20>)
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	ec51 0b18 	vmov	r0, r1, d8
 8007aa8:	f7f8 fd52 	bl	8000550 <__aeabi_dmul>
 8007aac:	a322      	add	r3, pc, #136	; (adr r3, 8007b38 <__ieee754_pow+0xa20>)
 8007aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab2:	f7ff bbca 	b.w	800724a <__ieee754_pow+0x132>
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	f7f8 fb91 	bl	80001e0 <__aeabi_dsub>
 8007abe:	4642      	mov	r2, r8
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	f7f8 ffcb 	bl	8000a5c <__aeabi_dcmpge>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	f43f aef0 	beq.w	80078ac <__ieee754_pow+0x794>
 8007acc:	e7e7      	b.n	8007a9e <__ieee754_pow+0x986>
 8007ace:	f04f 0a00 	mov.w	sl, #0
 8007ad2:	e717      	b.n	8007904 <__ieee754_pow+0x7ec>
 8007ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	e7d2      	b.n	8007a82 <__ieee754_pow+0x96a>
 8007adc:	491a      	ldr	r1, [pc, #104]	; (8007b48 <__ieee754_pow+0xa30>)
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f7ff bb9e 	b.w	8007220 <__ieee754_pow+0x108>
 8007ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ae8:	f7ff bb9a 	b.w	8007220 <__ieee754_pow+0x108>
 8007aec:	9000      	str	r0, [sp, #0]
 8007aee:	f7ff bb76 	b.w	80071de <__ieee754_pow+0xc6>
 8007af2:	2100      	movs	r1, #0
 8007af4:	f7ff bb60 	b.w	80071b8 <__ieee754_pow+0xa0>
 8007af8:	00000000 	.word	0x00000000
 8007afc:	3fe62e43 	.word	0x3fe62e43
 8007b00:	fefa39ef 	.word	0xfefa39ef
 8007b04:	3fe62e42 	.word	0x3fe62e42
 8007b08:	0ca86c39 	.word	0x0ca86c39
 8007b0c:	be205c61 	.word	0xbe205c61
 8007b10:	72bea4d0 	.word	0x72bea4d0
 8007b14:	3e663769 	.word	0x3e663769
 8007b18:	c5d26bf1 	.word	0xc5d26bf1
 8007b1c:	3ebbbd41 	.word	0x3ebbbd41
 8007b20:	af25de2c 	.word	0xaf25de2c
 8007b24:	3f11566a 	.word	0x3f11566a
 8007b28:	16bebd93 	.word	0x16bebd93
 8007b2c:	3f66c16c 	.word	0x3f66c16c
 8007b30:	5555553e 	.word	0x5555553e
 8007b34:	3fc55555 	.word	0x3fc55555
 8007b38:	c2f8f359 	.word	0xc2f8f359
 8007b3c:	01a56e1f 	.word	0x01a56e1f
 8007b40:	3fe00000 	.word	0x3fe00000
 8007b44:	000fffff 	.word	0x000fffff
 8007b48:	3ff00000 	.word	0x3ff00000
 8007b4c:	4090cbff 	.word	0x4090cbff
 8007b50:	3f6f3400 	.word	0x3f6f3400
 8007b54:	652b82fe 	.word	0x652b82fe
 8007b58:	3c971547 	.word	0x3c971547

08007b5c <__ieee754_sqrt>:
 8007b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	ec55 4b10 	vmov	r4, r5, d0
 8007b64:	4e56      	ldr	r6, [pc, #344]	; (8007cc0 <__ieee754_sqrt+0x164>)
 8007b66:	43ae      	bics	r6, r5
 8007b68:	ee10 0a10 	vmov	r0, s0
 8007b6c:	ee10 3a10 	vmov	r3, s0
 8007b70:	4629      	mov	r1, r5
 8007b72:	462a      	mov	r2, r5
 8007b74:	d110      	bne.n	8007b98 <__ieee754_sqrt+0x3c>
 8007b76:	ee10 2a10 	vmov	r2, s0
 8007b7a:	462b      	mov	r3, r5
 8007b7c:	f7f8 fce8 	bl	8000550 <__aeabi_dmul>
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fb2c 	bl	80001e4 <__adddf3>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	ec45 4b10 	vmov	d0, r4, r5
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	2d00      	cmp	r5, #0
 8007b9a:	dc10      	bgt.n	8007bbe <__ieee754_sqrt+0x62>
 8007b9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007ba0:	4330      	orrs	r0, r6
 8007ba2:	d0f5      	beq.n	8007b90 <__ieee754_sqrt+0x34>
 8007ba4:	b15d      	cbz	r5, 8007bbe <__ieee754_sqrt+0x62>
 8007ba6:	ee10 2a10 	vmov	r2, s0
 8007baa:	462b      	mov	r3, r5
 8007bac:	ee10 0a10 	vmov	r0, s0
 8007bb0:	f7f8 fb16 	bl	80001e0 <__aeabi_dsub>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	f7f8 fdf4 	bl	80007a4 <__aeabi_ddiv>
 8007bbc:	e7e6      	b.n	8007b8c <__ieee754_sqrt+0x30>
 8007bbe:	1509      	asrs	r1, r1, #20
 8007bc0:	d076      	beq.n	8007cb0 <__ieee754_sqrt+0x154>
 8007bc2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007bc6:	07ce      	lsls	r6, r1, #31
 8007bc8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007bcc:	bf5e      	ittt	pl
 8007bce:	0fda      	lsrpl	r2, r3, #31
 8007bd0:	005b      	lslpl	r3, r3, #1
 8007bd2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007bd6:	0fda      	lsrs	r2, r3, #31
 8007bd8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007bdc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007be0:	2000      	movs	r0, #0
 8007be2:	106d      	asrs	r5, r5, #1
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	f04f 0e16 	mov.w	lr, #22
 8007bea:	4684      	mov	ip, r0
 8007bec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bf0:	eb0c 0401 	add.w	r4, ip, r1
 8007bf4:	4294      	cmp	r4, r2
 8007bf6:	bfde      	ittt	le
 8007bf8:	1b12      	suble	r2, r2, r4
 8007bfa:	eb04 0c01 	addle.w	ip, r4, r1
 8007bfe:	1840      	addle	r0, r0, r1
 8007c00:	0052      	lsls	r2, r2, #1
 8007c02:	f1be 0e01 	subs.w	lr, lr, #1
 8007c06:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c0a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007c0e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c12:	d1ed      	bne.n	8007bf0 <__ieee754_sqrt+0x94>
 8007c14:	4671      	mov	r1, lr
 8007c16:	2720      	movs	r7, #32
 8007c18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007c1c:	4562      	cmp	r2, ip
 8007c1e:	eb04 060e 	add.w	r6, r4, lr
 8007c22:	dc02      	bgt.n	8007c2a <__ieee754_sqrt+0xce>
 8007c24:	d113      	bne.n	8007c4e <__ieee754_sqrt+0xf2>
 8007c26:	429e      	cmp	r6, r3
 8007c28:	d811      	bhi.n	8007c4e <__ieee754_sqrt+0xf2>
 8007c2a:	2e00      	cmp	r6, #0
 8007c2c:	eb06 0e04 	add.w	lr, r6, r4
 8007c30:	da43      	bge.n	8007cba <__ieee754_sqrt+0x15e>
 8007c32:	f1be 0f00 	cmp.w	lr, #0
 8007c36:	db40      	blt.n	8007cba <__ieee754_sqrt+0x15e>
 8007c38:	f10c 0801 	add.w	r8, ip, #1
 8007c3c:	eba2 020c 	sub.w	r2, r2, ip
 8007c40:	429e      	cmp	r6, r3
 8007c42:	bf88      	it	hi
 8007c44:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007c48:	1b9b      	subs	r3, r3, r6
 8007c4a:	4421      	add	r1, r4
 8007c4c:	46c4      	mov	ip, r8
 8007c4e:	0052      	lsls	r2, r2, #1
 8007c50:	3f01      	subs	r7, #1
 8007c52:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007c56:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007c5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007c5e:	d1dd      	bne.n	8007c1c <__ieee754_sqrt+0xc0>
 8007c60:	4313      	orrs	r3, r2
 8007c62:	d006      	beq.n	8007c72 <__ieee754_sqrt+0x116>
 8007c64:	1c4c      	adds	r4, r1, #1
 8007c66:	bf13      	iteet	ne
 8007c68:	3101      	addne	r1, #1
 8007c6a:	3001      	addeq	r0, #1
 8007c6c:	4639      	moveq	r1, r7
 8007c6e:	f021 0101 	bicne.w	r1, r1, #1
 8007c72:	1043      	asrs	r3, r0, #1
 8007c74:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c78:	0849      	lsrs	r1, r1, #1
 8007c7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c7e:	07c2      	lsls	r2, r0, #31
 8007c80:	bf48      	it	mi
 8007c82:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007c86:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	463d      	mov	r5, r7
 8007c8e:	e77f      	b.n	8007b90 <__ieee754_sqrt+0x34>
 8007c90:	0ada      	lsrs	r2, r3, #11
 8007c92:	3815      	subs	r0, #21
 8007c94:	055b      	lsls	r3, r3, #21
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d0fa      	beq.n	8007c90 <__ieee754_sqrt+0x134>
 8007c9a:	02d7      	lsls	r7, r2, #11
 8007c9c:	d50a      	bpl.n	8007cb4 <__ieee754_sqrt+0x158>
 8007c9e:	f1c1 0420 	rsb	r4, r1, #32
 8007ca2:	fa23 f404 	lsr.w	r4, r3, r4
 8007ca6:	1e4d      	subs	r5, r1, #1
 8007ca8:	408b      	lsls	r3, r1
 8007caa:	4322      	orrs	r2, r4
 8007cac:	1b41      	subs	r1, r0, r5
 8007cae:	e788      	b.n	8007bc2 <__ieee754_sqrt+0x66>
 8007cb0:	4608      	mov	r0, r1
 8007cb2:	e7f0      	b.n	8007c96 <__ieee754_sqrt+0x13a>
 8007cb4:	0052      	lsls	r2, r2, #1
 8007cb6:	3101      	adds	r1, #1
 8007cb8:	e7ef      	b.n	8007c9a <__ieee754_sqrt+0x13e>
 8007cba:	46e0      	mov	r8, ip
 8007cbc:	e7be      	b.n	8007c3c <__ieee754_sqrt+0xe0>
 8007cbe:	bf00      	nop
 8007cc0:	7ff00000 	.word	0x7ff00000

08007cc4 <__ieee754_powf>:
 8007cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc8:	ee10 5a90 	vmov	r5, s1
 8007ccc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007cd0:	ed2d 8b02 	vpush	{d8}
 8007cd4:	eeb0 8a40 	vmov.f32	s16, s0
 8007cd8:	eef0 8a60 	vmov.f32	s17, s1
 8007cdc:	f000 8291 	beq.w	8008202 <__ieee754_powf+0x53e>
 8007ce0:	ee10 8a10 	vmov	r8, s0
 8007ce4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007ce8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007cec:	dc06      	bgt.n	8007cfc <__ieee754_powf+0x38>
 8007cee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007cf2:	dd0a      	ble.n	8007d0a <__ieee754_powf+0x46>
 8007cf4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007cf8:	f000 8283 	beq.w	8008202 <__ieee754_powf+0x53e>
 8007cfc:	ecbd 8b02 	vpop	{d8}
 8007d00:	48d8      	ldr	r0, [pc, #864]	; (8008064 <__ieee754_powf+0x3a0>)
 8007d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d06:	f000 bbe5 	b.w	80084d4 <nanf>
 8007d0a:	f1b8 0f00 	cmp.w	r8, #0
 8007d0e:	da1f      	bge.n	8007d50 <__ieee754_powf+0x8c>
 8007d10:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007d14:	da2e      	bge.n	8007d74 <__ieee754_powf+0xb0>
 8007d16:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007d1a:	f2c0 827b 	blt.w	8008214 <__ieee754_powf+0x550>
 8007d1e:	15fb      	asrs	r3, r7, #23
 8007d20:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007d24:	fa47 f603 	asr.w	r6, r7, r3
 8007d28:	fa06 f303 	lsl.w	r3, r6, r3
 8007d2c:	42bb      	cmp	r3, r7
 8007d2e:	f040 8271 	bne.w	8008214 <__ieee754_powf+0x550>
 8007d32:	f006 0601 	and.w	r6, r6, #1
 8007d36:	f1c6 0602 	rsb	r6, r6, #2
 8007d3a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007d3e:	d120      	bne.n	8007d82 <__ieee754_powf+0xbe>
 8007d40:	2d00      	cmp	r5, #0
 8007d42:	f280 8264 	bge.w	800820e <__ieee754_powf+0x54a>
 8007d46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007d4a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007d4e:	e00d      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007d50:	2600      	movs	r6, #0
 8007d52:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007d56:	d1f0      	bne.n	8007d3a <__ieee754_powf+0x76>
 8007d58:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007d5c:	f000 8251 	beq.w	8008202 <__ieee754_powf+0x53e>
 8007d60:	dd0a      	ble.n	8007d78 <__ieee754_powf+0xb4>
 8007d62:	2d00      	cmp	r5, #0
 8007d64:	f280 8250 	bge.w	8008208 <__ieee754_powf+0x544>
 8007d68:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8008068 <__ieee754_powf+0x3a4>
 8007d6c:	ecbd 8b02 	vpop	{d8}
 8007d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d74:	2602      	movs	r6, #2
 8007d76:	e7ec      	b.n	8007d52 <__ieee754_powf+0x8e>
 8007d78:	2d00      	cmp	r5, #0
 8007d7a:	daf5      	bge.n	8007d68 <__ieee754_powf+0xa4>
 8007d7c:	eeb1 0a68 	vneg.f32	s0, s17
 8007d80:	e7f4      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007d82:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007d86:	d102      	bne.n	8007d8e <__ieee754_powf+0xca>
 8007d88:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007d8c:	e7ee      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007d8e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007d92:	eeb0 0a48 	vmov.f32	s0, s16
 8007d96:	d108      	bne.n	8007daa <__ieee754_powf+0xe6>
 8007d98:	f1b8 0f00 	cmp.w	r8, #0
 8007d9c:	db05      	blt.n	8007daa <__ieee754_powf+0xe6>
 8007d9e:	ecbd 8b02 	vpop	{d8}
 8007da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	f000 ba4d 	b.w	8008244 <__ieee754_sqrtf>
 8007daa:	f000 fb7f 	bl	80084ac <fabsf>
 8007dae:	b124      	cbz	r4, 8007dba <__ieee754_powf+0xf6>
 8007db0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007db4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007db8:	d117      	bne.n	8007dea <__ieee754_powf+0x126>
 8007dba:	2d00      	cmp	r5, #0
 8007dbc:	bfbc      	itt	lt
 8007dbe:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007dc2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	dacf      	bge.n	8007d6c <__ieee754_powf+0xa8>
 8007dcc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007dd0:	ea54 0306 	orrs.w	r3, r4, r6
 8007dd4:	d104      	bne.n	8007de0 <__ieee754_powf+0x11c>
 8007dd6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007dda:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007dde:	e7c5      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007de0:	2e01      	cmp	r6, #1
 8007de2:	d1c3      	bne.n	8007d6c <__ieee754_powf+0xa8>
 8007de4:	eeb1 0a40 	vneg.f32	s0, s0
 8007de8:	e7c0      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007dea:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007dee:	3801      	subs	r0, #1
 8007df0:	ea56 0300 	orrs.w	r3, r6, r0
 8007df4:	d104      	bne.n	8007e00 <__ieee754_powf+0x13c>
 8007df6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007dfa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007dfe:	e7b5      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007e00:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007e04:	dd6b      	ble.n	8007ede <__ieee754_powf+0x21a>
 8007e06:	4b99      	ldr	r3, [pc, #612]	; (800806c <__ieee754_powf+0x3a8>)
 8007e08:	429c      	cmp	r4, r3
 8007e0a:	dc06      	bgt.n	8007e1a <__ieee754_powf+0x156>
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	daab      	bge.n	8007d68 <__ieee754_powf+0xa4>
 8007e10:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8008070 <__ieee754_powf+0x3ac>
 8007e14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007e18:	e7a8      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007e1a:	4b96      	ldr	r3, [pc, #600]	; (8008074 <__ieee754_powf+0x3b0>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	dd02      	ble.n	8007e26 <__ieee754_powf+0x162>
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	dcf5      	bgt.n	8007e10 <__ieee754_powf+0x14c>
 8007e24:	e7a0      	b.n	8007d68 <__ieee754_powf+0xa4>
 8007e26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007e2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007e2e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8008078 <__ieee754_powf+0x3b4>
 8007e32:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007e36:	eee0 6a67 	vfms.f32	s13, s0, s15
 8007e3a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007e3e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8007e42:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800807c <__ieee754_powf+0x3b8>
 8007e4e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8007e52:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008080 <__ieee754_powf+0x3bc>
 8007e56:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007e5a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8008084 <__ieee754_powf+0x3c0>
 8007e5e:	eef0 6a67 	vmov.f32	s13, s15
 8007e62:	eee0 6a07 	vfma.f32	s13, s0, s14
 8007e66:	ee16 3a90 	vmov	r3, s13
 8007e6a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007e6e:	f023 030f 	bic.w	r3, r3, #15
 8007e72:	ee00 3a90 	vmov	s1, r3
 8007e76:	eee0 0a47 	vfms.f32	s1, s0, s14
 8007e7a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007e7e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007e82:	f025 050f 	bic.w	r5, r5, #15
 8007e86:	ee07 5a10 	vmov	s14, r5
 8007e8a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8007e8e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eee7 0a27 	vfma.f32	s1, s14, s15
 8007e9a:	3e01      	subs	r6, #1
 8007e9c:	ea56 0200 	orrs.w	r2, r6, r0
 8007ea0:	ee07 5a10 	vmov	s14, r5
 8007ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ea8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007eac:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8007eb0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007eb4:	ee17 4a10 	vmov	r4, s14
 8007eb8:	bf08      	it	eq
 8007eba:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007ebe:	2c00      	cmp	r4, #0
 8007ec0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007ec4:	f340 8184 	ble.w	80081d0 <__ieee754_powf+0x50c>
 8007ec8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007ecc:	f340 80fc 	ble.w	80080c8 <__ieee754_powf+0x404>
 8007ed0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8008070 <__ieee754_powf+0x3ac>
 8007ed4:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007ed8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007edc:	e746      	b.n	8007d6c <__ieee754_powf+0xa8>
 8007ede:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8007ee2:	bf01      	itttt	eq
 8007ee4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8008088 <__ieee754_powf+0x3c4>
 8007ee8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8007eec:	f06f 0217 	mvneq.w	r2, #23
 8007ef0:	ee17 4a90 	vmoveq	r4, s15
 8007ef4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007ef8:	bf18      	it	ne
 8007efa:	2200      	movne	r2, #0
 8007efc:	3b7f      	subs	r3, #127	; 0x7f
 8007efe:	4413      	add	r3, r2
 8007f00:	4a62      	ldr	r2, [pc, #392]	; (800808c <__ieee754_powf+0x3c8>)
 8007f02:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007f06:	4294      	cmp	r4, r2
 8007f08:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007f0c:	dd06      	ble.n	8007f1c <__ieee754_powf+0x258>
 8007f0e:	4a60      	ldr	r2, [pc, #384]	; (8008090 <__ieee754_powf+0x3cc>)
 8007f10:	4294      	cmp	r4, r2
 8007f12:	f340 80a4 	ble.w	800805e <__ieee754_powf+0x39a>
 8007f16:	3301      	adds	r3, #1
 8007f18:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007f1c:	2400      	movs	r4, #0
 8007f1e:	4a5d      	ldr	r2, [pc, #372]	; (8008094 <__ieee754_powf+0x3d0>)
 8007f20:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007f24:	ee07 1a90 	vmov	s15, r1
 8007f28:	ed92 7a00 	vldr	s14, [r2]
 8007f2c:	4a5a      	ldr	r2, [pc, #360]	; (8008098 <__ieee754_powf+0x3d4>)
 8007f2e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007f32:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007f36:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8007f3a:	1049      	asrs	r1, r1, #1
 8007f3c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007f40:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007f44:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007f48:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8007f4c:	ee06 1a10 	vmov	s12, r1
 8007f50:	ee65 4a26 	vmul.f32	s9, s10, s13
 8007f54:	ee36 7a47 	vsub.f32	s14, s12, s14
 8007f58:	ee14 7a90 	vmov	r7, s9
 8007f5c:	4017      	ands	r7, r2
 8007f5e:	ee05 7a90 	vmov	s11, r7
 8007f62:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8007f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f6a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800809c <__ieee754_powf+0x3d8>
 8007f6e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8007f72:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8007f76:	ee25 6a26 	vmul.f32	s12, s10, s13
 8007f7a:	eddf 6a49 	vldr	s13, [pc, #292]	; 80080a0 <__ieee754_powf+0x3dc>
 8007f7e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8007f82:	eddf 6a48 	vldr	s13, [pc, #288]	; 80080a4 <__ieee754_powf+0x3e0>
 8007f86:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f8a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8008078 <__ieee754_powf+0x3b4>
 8007f8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f92:	eddf 6a45 	vldr	s13, [pc, #276]	; 80080a8 <__ieee754_powf+0x3e4>
 8007f96:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007f9a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80080ac <__ieee754_powf+0x3e8>
 8007f9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fa2:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8007fa6:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8007faa:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007fae:	eee5 6a07 	vfma.f32	s13, s10, s14
 8007fb2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8007fb6:	eef0 7a45 	vmov.f32	s15, s10
 8007fba:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8007fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fc2:	ee17 1a90 	vmov	r1, s15
 8007fc6:	4011      	ands	r1, r2
 8007fc8:	ee07 1a90 	vmov	s15, r1
 8007fcc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8007fd0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8007fd4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007fd8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8007fdc:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007fe0:	eeb0 6a47 	vmov.f32	s12, s14
 8007fe4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8007fe8:	ee16 1a10 	vmov	r1, s12
 8007fec:	4011      	ands	r1, r2
 8007fee:	ee06 1a90 	vmov	s13, r1
 8007ff2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8007ff6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80080b0 <__ieee754_powf+0x3ec>
 8007ffa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80080b4 <__ieee754_powf+0x3f0>
 8007ffe:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008002:	ee06 1a10 	vmov	s12, r1
 8008006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800800a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80080b8 <__ieee754_powf+0x3f4>
 800800e:	492b      	ldr	r1, [pc, #172]	; (80080bc <__ieee754_powf+0x3f8>)
 8008010:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008014:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008018:	edd1 7a00 	vldr	s15, [r1]
 800801c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	4b26      	ldr	r3, [pc, #152]	; (80080c0 <__ieee754_powf+0x3fc>)
 8008026:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800802a:	eef0 7a47 	vmov.f32	s15, s14
 800802e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008032:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008036:	edd4 0a00 	vldr	s1, [r4]
 800803a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800803e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008042:	ee17 3a90 	vmov	r3, s15
 8008046:	4013      	ands	r3, r2
 8008048:	ee07 3a90 	vmov	s15, r3
 800804c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008050:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8008054:	eee6 6a65 	vfms.f32	s13, s12, s11
 8008058:	ee77 7a66 	vsub.f32	s15, s14, s13
 800805c:	e70f      	b.n	8007e7e <__ieee754_powf+0x1ba>
 800805e:	2401      	movs	r4, #1
 8008060:	e75d      	b.n	8007f1e <__ieee754_powf+0x25a>
 8008062:	bf00      	nop
 8008064:	080086bc 	.word	0x080086bc
 8008068:	00000000 	.word	0x00000000
 800806c:	3f7ffff7 	.word	0x3f7ffff7
 8008070:	7149f2ca 	.word	0x7149f2ca
 8008074:	3f800007 	.word	0x3f800007
 8008078:	3eaaaaab 	.word	0x3eaaaaab
 800807c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008080:	36eca570 	.word	0x36eca570
 8008084:	3fb8aa00 	.word	0x3fb8aa00
 8008088:	4b800000 	.word	0x4b800000
 800808c:	001cc471 	.word	0x001cc471
 8008090:	005db3d6 	.word	0x005db3d6
 8008094:	080086f0 	.word	0x080086f0
 8008098:	fffff000 	.word	0xfffff000
 800809c:	3e6c3255 	.word	0x3e6c3255
 80080a0:	3e53f142 	.word	0x3e53f142
 80080a4:	3e8ba305 	.word	0x3e8ba305
 80080a8:	3edb6db7 	.word	0x3edb6db7
 80080ac:	3f19999a 	.word	0x3f19999a
 80080b0:	3f76384f 	.word	0x3f76384f
 80080b4:	3f763800 	.word	0x3f763800
 80080b8:	369dc3a0 	.word	0x369dc3a0
 80080bc:	08008700 	.word	0x08008700
 80080c0:	080086f8 	.word	0x080086f8
 80080c4:	3338aa3c 	.word	0x3338aa3c
 80080c8:	f040 8092 	bne.w	80081f0 <__ieee754_powf+0x52c>
 80080cc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80080c4 <__ieee754_powf+0x400>
 80080d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80080d4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80080d8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80080dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e0:	f73f aef6 	bgt.w	8007ed0 <__ieee754_powf+0x20c>
 80080e4:	15db      	asrs	r3, r3, #23
 80080e6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80080ea:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80080ee:	4103      	asrs	r3, r0
 80080f0:	4423      	add	r3, r4
 80080f2:	4949      	ldr	r1, [pc, #292]	; (8008218 <__ieee754_powf+0x554>)
 80080f4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80080f8:	3a7f      	subs	r2, #127	; 0x7f
 80080fa:	4111      	asrs	r1, r2
 80080fc:	ea23 0101 	bic.w	r1, r3, r1
 8008100:	ee07 1a10 	vmov	s14, r1
 8008104:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008108:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800810c:	f1c2 0217 	rsb	r2, r2, #23
 8008110:	4110      	asrs	r0, r2
 8008112:	2c00      	cmp	r4, #0
 8008114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008118:	bfb8      	it	lt
 800811a:	4240      	neglt	r0, r0
 800811c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8008120:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800821c <__ieee754_powf+0x558>
 8008124:	ee17 3a10 	vmov	r3, s14
 8008128:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800812c:	f023 030f 	bic.w	r3, r3, #15
 8008130:	ee07 3a10 	vmov	s14, r3
 8008134:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008138:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800813c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008220 <__ieee754_powf+0x55c>
 8008140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008144:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8008148:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008224 <__ieee754_powf+0x560>
 800814c:	eeb0 0a67 	vmov.f32	s0, s15
 8008150:	eea7 0a26 	vfma.f32	s0, s14, s13
 8008154:	eeb0 6a40 	vmov.f32	s12, s0
 8008158:	eea7 6a66 	vfms.f32	s12, s14, s13
 800815c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008160:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008164:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008228 <__ieee754_powf+0x564>
 8008168:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800822c <__ieee754_powf+0x568>
 800816c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008170:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8008230 <__ieee754_powf+0x56c>
 8008174:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008178:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8008234 <__ieee754_powf+0x570>
 800817c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008180:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008238 <__ieee754_powf+0x574>
 8008184:	eee6 6a07 	vfma.f32	s13, s12, s14
 8008188:	eeb0 6a40 	vmov.f32	s12, s0
 800818c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8008190:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008194:	eeb0 7a46 	vmov.f32	s14, s12
 8008198:	ee77 6a66 	vsub.f32	s13, s14, s13
 800819c:	ee20 6a06 	vmul.f32	s12, s0, s12
 80081a0:	eee0 7a27 	vfma.f32	s15, s0, s15
 80081a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80081a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80081ac:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80081b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80081b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80081b8:	ee10 3a10 	vmov	r3, s0
 80081bc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80081c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c4:	da1a      	bge.n	80081fc <__ieee754_powf+0x538>
 80081c6:	f000 f9e7 	bl	8008598 <scalbnf>
 80081ca:	ee20 0a08 	vmul.f32	s0, s0, s16
 80081ce:	e5cd      	b.n	8007d6c <__ieee754_powf+0xa8>
 80081d0:	4a1a      	ldr	r2, [pc, #104]	; (800823c <__ieee754_powf+0x578>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	dd02      	ble.n	80081dc <__ieee754_powf+0x518>
 80081d6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8008240 <__ieee754_powf+0x57c>
 80081da:	e67b      	b.n	8007ed4 <__ieee754_powf+0x210>
 80081dc:	d108      	bne.n	80081f0 <__ieee754_powf+0x52c>
 80081de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80081e2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80081e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ea:	f6ff af7b 	blt.w	80080e4 <__ieee754_powf+0x420>
 80081ee:	e7f2      	b.n	80081d6 <__ieee754_powf+0x512>
 80081f0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80081f4:	f73f af76 	bgt.w	80080e4 <__ieee754_powf+0x420>
 80081f8:	2000      	movs	r0, #0
 80081fa:	e78f      	b.n	800811c <__ieee754_powf+0x458>
 80081fc:	ee00 3a10 	vmov	s0, r3
 8008200:	e7e3      	b.n	80081ca <__ieee754_powf+0x506>
 8008202:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008206:	e5b1      	b.n	8007d6c <__ieee754_powf+0xa8>
 8008208:	eeb0 0a68 	vmov.f32	s0, s17
 800820c:	e5ae      	b.n	8007d6c <__ieee754_powf+0xa8>
 800820e:	eeb0 0a48 	vmov.f32	s0, s16
 8008212:	e5ab      	b.n	8007d6c <__ieee754_powf+0xa8>
 8008214:	2600      	movs	r6, #0
 8008216:	e590      	b.n	8007d3a <__ieee754_powf+0x76>
 8008218:	007fffff 	.word	0x007fffff
 800821c:	3f317218 	.word	0x3f317218
 8008220:	35bfbe8c 	.word	0x35bfbe8c
 8008224:	3f317200 	.word	0x3f317200
 8008228:	3331bb4c 	.word	0x3331bb4c
 800822c:	b5ddea0e 	.word	0xb5ddea0e
 8008230:	388ab355 	.word	0x388ab355
 8008234:	bb360b61 	.word	0xbb360b61
 8008238:	3e2aaaab 	.word	0x3e2aaaab
 800823c:	43160000 	.word	0x43160000
 8008240:	0da24260 	.word	0x0da24260

08008244 <__ieee754_sqrtf>:
 8008244:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008248:	4770      	bx	lr

0800824a <fabs>:
 800824a:	ec51 0b10 	vmov	r0, r1, d0
 800824e:	ee10 2a10 	vmov	r2, s0
 8008252:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008256:	ec43 2b10 	vmov	d0, r2, r3
 800825a:	4770      	bx	lr

0800825c <finite>:
 800825c:	b082      	sub	sp, #8
 800825e:	ed8d 0b00 	vstr	d0, [sp]
 8008262:	9801      	ldr	r0, [sp, #4]
 8008264:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008268:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800826c:	0fc0      	lsrs	r0, r0, #31
 800826e:	b002      	add	sp, #8
 8008270:	4770      	bx	lr
 8008272:	0000      	movs	r0, r0
 8008274:	0000      	movs	r0, r0
	...

08008278 <nan>:
 8008278:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008280 <nan+0x8>
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	00000000 	.word	0x00000000
 8008284:	7ff80000 	.word	0x7ff80000

08008288 <rint>:
 8008288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800828a:	ec51 0b10 	vmov	r0, r1, d0
 800828e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008292:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008296:	2e13      	cmp	r6, #19
 8008298:	ee10 4a10 	vmov	r4, s0
 800829c:	460b      	mov	r3, r1
 800829e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80082a2:	dc58      	bgt.n	8008356 <rint+0xce>
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	da2b      	bge.n	8008300 <rint+0x78>
 80082a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80082ac:	4302      	orrs	r2, r0
 80082ae:	d023      	beq.n	80082f8 <rint+0x70>
 80082b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80082b4:	4302      	orrs	r2, r0
 80082b6:	4254      	negs	r4, r2
 80082b8:	4314      	orrs	r4, r2
 80082ba:	0c4b      	lsrs	r3, r1, #17
 80082bc:	0b24      	lsrs	r4, r4, #12
 80082be:	045b      	lsls	r3, r3, #17
 80082c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80082c4:	ea44 0103 	orr.w	r1, r4, r3
 80082c8:	4b32      	ldr	r3, [pc, #200]	; (8008394 <rint+0x10c>)
 80082ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80082ce:	e9d3 6700 	ldrd	r6, r7, [r3]
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	f7f7 ff83 	bl	80001e4 <__adddf3>
 80082de:	e9cd 0100 	strd	r0, r1, [sp]
 80082e2:	463b      	mov	r3, r7
 80082e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082e8:	4632      	mov	r2, r6
 80082ea:	f7f7 ff79 	bl	80001e0 <__aeabi_dsub>
 80082ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80082f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80082f6:	4639      	mov	r1, r7
 80082f8:	ec41 0b10 	vmov	d0, r0, r1
 80082fc:	b003      	add	sp, #12
 80082fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008300:	4a25      	ldr	r2, [pc, #148]	; (8008398 <rint+0x110>)
 8008302:	4132      	asrs	r2, r6
 8008304:	ea01 0702 	and.w	r7, r1, r2
 8008308:	4307      	orrs	r7, r0
 800830a:	d0f5      	beq.n	80082f8 <rint+0x70>
 800830c:	0851      	lsrs	r1, r2, #1
 800830e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008312:	4314      	orrs	r4, r2
 8008314:	d00c      	beq.n	8008330 <rint+0xa8>
 8008316:	ea23 0201 	bic.w	r2, r3, r1
 800831a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800831e:	2e13      	cmp	r6, #19
 8008320:	fa43 f606 	asr.w	r6, r3, r6
 8008324:	bf0c      	ite	eq
 8008326:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800832a:	2400      	movne	r4, #0
 800832c:	ea42 0306 	orr.w	r3, r2, r6
 8008330:	4918      	ldr	r1, [pc, #96]	; (8008394 <rint+0x10c>)
 8008332:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008336:	4622      	mov	r2, r4
 8008338:	e9d5 4500 	ldrd	r4, r5, [r5]
 800833c:	4620      	mov	r0, r4
 800833e:	4629      	mov	r1, r5
 8008340:	f7f7 ff50 	bl	80001e4 <__adddf3>
 8008344:	e9cd 0100 	strd	r0, r1, [sp]
 8008348:	e9dd 0100 	ldrd	r0, r1, [sp]
 800834c:	4622      	mov	r2, r4
 800834e:	462b      	mov	r3, r5
 8008350:	f7f7 ff46 	bl	80001e0 <__aeabi_dsub>
 8008354:	e7d0      	b.n	80082f8 <rint+0x70>
 8008356:	2e33      	cmp	r6, #51	; 0x33
 8008358:	dd07      	ble.n	800836a <rint+0xe2>
 800835a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800835e:	d1cb      	bne.n	80082f8 <rint+0x70>
 8008360:	ee10 2a10 	vmov	r2, s0
 8008364:	f7f7 ff3e 	bl	80001e4 <__adddf3>
 8008368:	e7c6      	b.n	80082f8 <rint+0x70>
 800836a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800836e:	f04f 36ff 	mov.w	r6, #4294967295
 8008372:	40d6      	lsrs	r6, r2
 8008374:	4230      	tst	r0, r6
 8008376:	d0bf      	beq.n	80082f8 <rint+0x70>
 8008378:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800837c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008380:	bf1f      	itttt	ne
 8008382:	ea24 0101 	bicne.w	r1, r4, r1
 8008386:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800838a:	fa44 f202 	asrne.w	r2, r4, r2
 800838e:	ea41 0402 	orrne.w	r4, r1, r2
 8008392:	e7cd      	b.n	8008330 <rint+0xa8>
 8008394:	08008708 	.word	0x08008708
 8008398:	000fffff 	.word	0x000fffff
 800839c:	00000000 	.word	0x00000000

080083a0 <scalbn>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	ec55 4b10 	vmov	r4, r5, d0
 80083a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80083aa:	4606      	mov	r6, r0
 80083ac:	462b      	mov	r3, r5
 80083ae:	b99a      	cbnz	r2, 80083d8 <scalbn+0x38>
 80083b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80083b4:	4323      	orrs	r3, r4
 80083b6:	d036      	beq.n	8008426 <scalbn+0x86>
 80083b8:	4b39      	ldr	r3, [pc, #228]	; (80084a0 <scalbn+0x100>)
 80083ba:	4629      	mov	r1, r5
 80083bc:	ee10 0a10 	vmov	r0, s0
 80083c0:	2200      	movs	r2, #0
 80083c2:	f7f8 f8c5 	bl	8000550 <__aeabi_dmul>
 80083c6:	4b37      	ldr	r3, [pc, #220]	; (80084a4 <scalbn+0x104>)
 80083c8:	429e      	cmp	r6, r3
 80083ca:	4604      	mov	r4, r0
 80083cc:	460d      	mov	r5, r1
 80083ce:	da10      	bge.n	80083f2 <scalbn+0x52>
 80083d0:	a32b      	add	r3, pc, #172	; (adr r3, 8008480 <scalbn+0xe0>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	e03a      	b.n	800844e <scalbn+0xae>
 80083d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80083dc:	428a      	cmp	r2, r1
 80083de:	d10c      	bne.n	80083fa <scalbn+0x5a>
 80083e0:	ee10 2a10 	vmov	r2, s0
 80083e4:	4620      	mov	r0, r4
 80083e6:	4629      	mov	r1, r5
 80083e8:	f7f7 fefc 	bl	80001e4 <__adddf3>
 80083ec:	4604      	mov	r4, r0
 80083ee:	460d      	mov	r5, r1
 80083f0:	e019      	b.n	8008426 <scalbn+0x86>
 80083f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083f6:	460b      	mov	r3, r1
 80083f8:	3a36      	subs	r2, #54	; 0x36
 80083fa:	4432      	add	r2, r6
 80083fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008400:	428a      	cmp	r2, r1
 8008402:	dd08      	ble.n	8008416 <scalbn+0x76>
 8008404:	2d00      	cmp	r5, #0
 8008406:	a120      	add	r1, pc, #128	; (adr r1, 8008488 <scalbn+0xe8>)
 8008408:	e9d1 0100 	ldrd	r0, r1, [r1]
 800840c:	da1c      	bge.n	8008448 <scalbn+0xa8>
 800840e:	a120      	add	r1, pc, #128	; (adr r1, 8008490 <scalbn+0xf0>)
 8008410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008414:	e018      	b.n	8008448 <scalbn+0xa8>
 8008416:	2a00      	cmp	r2, #0
 8008418:	dd08      	ble.n	800842c <scalbn+0x8c>
 800841a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800841e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008422:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008426:	ec45 4b10 	vmov	d0, r4, r5
 800842a:	bd70      	pop	{r4, r5, r6, pc}
 800842c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008430:	da19      	bge.n	8008466 <scalbn+0xc6>
 8008432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008436:	429e      	cmp	r6, r3
 8008438:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800843c:	dd0a      	ble.n	8008454 <scalbn+0xb4>
 800843e:	a112      	add	r1, pc, #72	; (adr r1, 8008488 <scalbn+0xe8>)
 8008440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e2      	bne.n	800840e <scalbn+0x6e>
 8008448:	a30f      	add	r3, pc, #60	; (adr r3, 8008488 <scalbn+0xe8>)
 800844a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844e:	f7f8 f87f 	bl	8000550 <__aeabi_dmul>
 8008452:	e7cb      	b.n	80083ec <scalbn+0x4c>
 8008454:	a10a      	add	r1, pc, #40	; (adr r1, 8008480 <scalbn+0xe0>)
 8008456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0b8      	beq.n	80083d0 <scalbn+0x30>
 800845e:	a10e      	add	r1, pc, #56	; (adr r1, 8008498 <scalbn+0xf8>)
 8008460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008464:	e7b4      	b.n	80083d0 <scalbn+0x30>
 8008466:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800846a:	3236      	adds	r2, #54	; 0x36
 800846c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008470:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008474:	4620      	mov	r0, r4
 8008476:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <scalbn+0x108>)
 8008478:	2200      	movs	r2, #0
 800847a:	e7e8      	b.n	800844e <scalbn+0xae>
 800847c:	f3af 8000 	nop.w
 8008480:	c2f8f359 	.word	0xc2f8f359
 8008484:	01a56e1f 	.word	0x01a56e1f
 8008488:	8800759c 	.word	0x8800759c
 800848c:	7e37e43c 	.word	0x7e37e43c
 8008490:	8800759c 	.word	0x8800759c
 8008494:	fe37e43c 	.word	0xfe37e43c
 8008498:	c2f8f359 	.word	0xc2f8f359
 800849c:	81a56e1f 	.word	0x81a56e1f
 80084a0:	43500000 	.word	0x43500000
 80084a4:	ffff3cb0 	.word	0xffff3cb0
 80084a8:	3c900000 	.word	0x3c900000

080084ac <fabsf>:
 80084ac:	ee10 3a10 	vmov	r3, s0
 80084b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80084b4:	ee00 3a10 	vmov	s0, r3
 80084b8:	4770      	bx	lr

080084ba <finitef>:
 80084ba:	b082      	sub	sp, #8
 80084bc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80084c0:	9801      	ldr	r0, [sp, #4]
 80084c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80084c6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80084ca:	bfac      	ite	ge
 80084cc:	2000      	movge	r0, #0
 80084ce:	2001      	movlt	r0, #1
 80084d0:	b002      	add	sp, #8
 80084d2:	4770      	bx	lr

080084d4 <nanf>:
 80084d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084dc <nanf+0x8>
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	7fc00000 	.word	0x7fc00000

080084e0 <rintf>:
 80084e0:	ee10 2a10 	vmov	r2, s0
 80084e4:	b513      	push	{r0, r1, r4, lr}
 80084e6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80084ea:	397f      	subs	r1, #127	; 0x7f
 80084ec:	2916      	cmp	r1, #22
 80084ee:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80084f2:	dc47      	bgt.n	8008584 <rintf+0xa4>
 80084f4:	b32b      	cbz	r3, 8008542 <rintf+0x62>
 80084f6:	2900      	cmp	r1, #0
 80084f8:	ee10 3a10 	vmov	r3, s0
 80084fc:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8008500:	da21      	bge.n	8008546 <rintf+0x66>
 8008502:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008506:	425b      	negs	r3, r3
 8008508:	4921      	ldr	r1, [pc, #132]	; (8008590 <rintf+0xb0>)
 800850a:	0a5b      	lsrs	r3, r3, #9
 800850c:	0d12      	lsrs	r2, r2, #20
 800850e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008512:	0512      	lsls	r2, r2, #20
 8008514:	4313      	orrs	r3, r2
 8008516:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	edd1 6a00 	vldr	s13, [r1]
 8008522:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008526:	ed8d 7a01 	vstr	s14, [sp, #4]
 800852a:	eddd 7a01 	vldr	s15, [sp, #4]
 800852e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008532:	ee17 3a90 	vmov	r3, s15
 8008536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800853a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800853e:	ee00 3a10 	vmov	s0, r3
 8008542:	b002      	add	sp, #8
 8008544:	bd10      	pop	{r4, pc}
 8008546:	4a13      	ldr	r2, [pc, #76]	; (8008594 <rintf+0xb4>)
 8008548:	410a      	asrs	r2, r1
 800854a:	4213      	tst	r3, r2
 800854c:	d0f9      	beq.n	8008542 <rintf+0x62>
 800854e:	0854      	lsrs	r4, r2, #1
 8008550:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008554:	d006      	beq.n	8008564 <rintf+0x84>
 8008556:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800855a:	ea23 0304 	bic.w	r3, r3, r4
 800855e:	fa42 f101 	asr.w	r1, r2, r1
 8008562:	430b      	orrs	r3, r1
 8008564:	4a0a      	ldr	r2, [pc, #40]	; (8008590 <rintf+0xb0>)
 8008566:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800856a:	ed90 7a00 	vldr	s14, [r0]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008576:	edcd 7a01 	vstr	s15, [sp, #4]
 800857a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800857e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008582:	e7de      	b.n	8008542 <rintf+0x62>
 8008584:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008588:	d3db      	bcc.n	8008542 <rintf+0x62>
 800858a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800858e:	e7d8      	b.n	8008542 <rintf+0x62>
 8008590:	08008718 	.word	0x08008718
 8008594:	007fffff 	.word	0x007fffff

08008598 <scalbnf>:
 8008598:	ee10 3a10 	vmov	r3, s0
 800859c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80085a0:	d025      	beq.n	80085ee <scalbnf+0x56>
 80085a2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80085a6:	d302      	bcc.n	80085ae <scalbnf+0x16>
 80085a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80085ac:	4770      	bx	lr
 80085ae:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80085b2:	d122      	bne.n	80085fa <scalbnf+0x62>
 80085b4:	4b2a      	ldr	r3, [pc, #168]	; (8008660 <scalbnf+0xc8>)
 80085b6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008664 <scalbnf+0xcc>
 80085ba:	4298      	cmp	r0, r3
 80085bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085c0:	db16      	blt.n	80085f0 <scalbnf+0x58>
 80085c2:	ee10 3a10 	vmov	r3, s0
 80085c6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80085ca:	3a19      	subs	r2, #25
 80085cc:	4402      	add	r2, r0
 80085ce:	2afe      	cmp	r2, #254	; 0xfe
 80085d0:	dd15      	ble.n	80085fe <scalbnf+0x66>
 80085d2:	ee10 3a10 	vmov	r3, s0
 80085d6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008668 <scalbnf+0xd0>
 80085da:	eddf 6a24 	vldr	s13, [pc, #144]	; 800866c <scalbnf+0xd4>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	eeb0 7a67 	vmov.f32	s14, s15
 80085e4:	bfb8      	it	lt
 80085e6:	eef0 7a66 	vmovlt.f32	s15, s13
 80085ea:	ee27 0a27 	vmul.f32	s0, s14, s15
 80085ee:	4770      	bx	lr
 80085f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008670 <scalbnf+0xd8>
 80085f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80085f8:	4770      	bx	lr
 80085fa:	0dd2      	lsrs	r2, r2, #23
 80085fc:	e7e6      	b.n	80085cc <scalbnf+0x34>
 80085fe:	2a00      	cmp	r2, #0
 8008600:	dd06      	ble.n	8008610 <scalbnf+0x78>
 8008602:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008606:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800860a:	ee00 3a10 	vmov	s0, r3
 800860e:	4770      	bx	lr
 8008610:	f112 0f16 	cmn.w	r2, #22
 8008614:	da1a      	bge.n	800864c <scalbnf+0xb4>
 8008616:	f24c 3350 	movw	r3, #50000	; 0xc350
 800861a:	4298      	cmp	r0, r3
 800861c:	ee10 3a10 	vmov	r3, s0
 8008620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008624:	dd0a      	ble.n	800863c <scalbnf+0xa4>
 8008626:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008668 <scalbnf+0xd0>
 800862a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800866c <scalbnf+0xd4>
 800862e:	eef0 7a40 	vmov.f32	s15, s0
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf18      	it	ne
 8008636:	eeb0 0a47 	vmovne.f32	s0, s14
 800863a:	e7db      	b.n	80085f4 <scalbnf+0x5c>
 800863c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8008670 <scalbnf+0xd8>
 8008640:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008674 <scalbnf+0xdc>
 8008644:	eef0 7a40 	vmov.f32	s15, s0
 8008648:	2b00      	cmp	r3, #0
 800864a:	e7f3      	b.n	8008634 <scalbnf+0x9c>
 800864c:	3219      	adds	r2, #25
 800864e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008652:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008656:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008678 <scalbnf+0xe0>
 800865a:	ee07 3a10 	vmov	s14, r3
 800865e:	e7c4      	b.n	80085ea <scalbnf+0x52>
 8008660:	ffff3cb0 	.word	0xffff3cb0
 8008664:	4c000000 	.word	0x4c000000
 8008668:	7149f2ca 	.word	0x7149f2ca
 800866c:	f149f2ca 	.word	0xf149f2ca
 8008670:	0da24260 	.word	0x0da24260
 8008674:	8da24260 	.word	0x8da24260
 8008678:	33000000 	.word	0x33000000

0800867c <_init>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr

08008688 <_fini>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	bf00      	nop
 800868c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800868e:	bc08      	pop	{r3}
 8008690:	469e      	mov	lr, r3
 8008692:	4770      	bx	lr
