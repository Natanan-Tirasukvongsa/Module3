
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c0  080070c0  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080070c0  080070c0  000170c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070c8  080070c8  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070cc  080070cc  000170cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080070d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d4  20000098  08007168  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08007168  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ac  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206c  00000000  00000000  00030a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f20  00000000  00000000  00033a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f1c  00000000  00000000  000349b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000112e0  00000000  00000000  0004b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091908  00000000  00000000  0005cbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee4b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d4  00000000  00000000  000ee508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007060 	.word	0x08007060

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08007060 	.word	0x08007060

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006f0:	ed2d 8b02 	vpush	{d8}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f002 f9f0 	bl	8002adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f9b4 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 fc0a 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000704:	f000 fbe0 	bl	8000ec8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000708:	f000 fbb2 	bl	8000e70 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800070c:	f000 fa42 	bl	8000b94 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000710:	f000 faea 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000714:	f000 fa96 	bl	8000c44 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000718:	f000 fa0e 	bl	8000b38 <MX_I2C1_Init>
  MX_TIM4_Init();
 800071c:	f000 fb5a 	bl	8000dd4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000720:	48b1      	ldr	r0, [pc, #708]	; (80009e8 <main+0x2fc>)
 8000722:	f003 ff85 	bl	8004630 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000726:	213c      	movs	r1, #60	; 0x3c
 8000728:	48b0      	ldr	r0, [pc, #704]	; (80009ec <main+0x300>)
 800072a:	f004 f993 	bl	8004a54 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800072e:	48b0      	ldr	r0, [pc, #704]	; (80009f0 <main+0x304>)
 8000730:	f003 ff24 	bl	800457c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000734:	210c      	movs	r1, #12
 8000736:	48ae      	ldr	r0, [pc, #696]	; (80009f0 <main+0x304>)
 8000738:	f004 f836 	bl	80047a8 <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 800073c:	4bad      	ldr	r3, [pc, #692]	; (80009f4 <main+0x308>)
 800073e:	4aae      	ldr	r2, [pc, #696]	; (80009f8 <main+0x30c>)
 8000740:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000742:	4bac      	ldr	r3, [pc, #688]	; (80009f4 <main+0x308>)
 8000744:	22ff      	movs	r2, #255	; 0xff
 8000746:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000748:	4baa      	ldr	r3, [pc, #680]	; (80009f4 <main+0x308>)
 800074a:	22ff      	movs	r2, #255	; 0xff
 800074c:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800074e:	48a9      	ldr	r0, [pc, #676]	; (80009f4 <main+0x308>)
 8000750:	f001 fb96 	bl	8001e80 <UARTInit>
  UARTResetStart(&UART2);
 8000754:	48a7      	ldr	r0, [pc, #668]	; (80009f4 <main+0x308>)
 8000756:	f001 fbbb 	bl	8001ed0 <UARTResetStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	int16_t inputChar = UARTReadChar(&UART2);
 800075a:	48a6      	ldr	r0, [pc, #664]	; (80009f4 <main+0x308>)
 800075c:	f001 fbdc 	bl	8001f18 <UARTReadChar>
 8000760:	4603      	mov	r3, r0
 8000762:	80fb      	strh	r3, [r7, #6]
	  	if (inputChar != -1)
 8000764:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d00b      	beq.n	8000786 <main+0x9a>
	  	{
	  		UART_Protocol(&UART2, inputChar);
 800076e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000772:	4619      	mov	r1, r3
 8000774:	489f      	ldr	r0, [pc, #636]	; (80009f4 <main+0x308>)
 8000776:	f001 fc91 	bl	800209c <UART_Protocol>
			len+=1;
 800077a:	4ba0      	ldr	r3, [pc, #640]	; (80009fc <main+0x310>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b9e      	ldr	r3, [pc, #632]	; (80009fc <main+0x310>)
 8000784:	701a      	strb	r2, [r3, #0]

	  	}

	  if (micros() - Time_Velocity_Stamp >= 100)
 8000786:	f001 feb1 	bl	80024ec <micros>
 800078a:	4b9d      	ldr	r3, [pc, #628]	; (8000a00 <main+0x314>)
 800078c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000790:	1a84      	subs	r4, r0, r2
 8000792:	eb61 0503 	sbc.w	r5, r1, r3
 8000796:	2d00      	cmp	r5, #0
 8000798:	bf08      	it	eq
 800079a:	2c64      	cmpeq	r4, #100	; 0x64
 800079c:	d33d      	bcc.n	800081a <main+0x12e>
	  {
		  Time_Velocity_Stamp = micros();
 800079e:	f001 fea5 	bl	80024ec <micros>
 80007a2:	4602      	mov	r2, r0
 80007a4:	460b      	mov	r3, r1
 80007a6:	4996      	ldr	r1, [pc, #600]	; (8000a00 <main+0x314>)
 80007a8:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 80007ac:	4b95      	ldr	r3, [pc, #596]	; (8000a04 <main+0x318>)
 80007ae:	edd3 7a00 	vldr	s15, [r3]
 80007b2:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8000a08 <main+0x31c>
 80007b6:	ee27 8a87 	vmul.f32	s16, s15, s14
 80007ba:	f000 fc53 	bl	8001064 <Encoder_Velocity_Update>
 80007be:	eef0 7a40 	vmov.f32	s15, s0
 80007c2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80007c6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8000a0c <main+0x320>
 80007ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007ce:	4b8d      	ldr	r3, [pc, #564]	; (8000a04 <main+0x318>)
 80007d0:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 80007d4:	4b8b      	ldr	r3, [pc, #556]	; (8000a04 <main+0x318>)
 80007d6:	edd3 7a00 	vldr	s15, [r3]
 80007da:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000a10 <main+0x324>
 80007de:	ee67 6a87 	vmul.f32	s13, s15, s14
 80007e2:	4b8c      	ldr	r3, [pc, #560]	; (8000a14 <main+0x328>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007f2:	4b89      	ldr	r3, [pc, #548]	; (8000a18 <main+0x32c>)
 80007f4:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 80007f8:	4b87      	ldr	r3, [pc, #540]	; (8000a18 <main+0x32c>)
 80007fa:	edd3 7a00 	vldr	s15, [r3]
 80007fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000802:	4b86      	ldr	r3, [pc, #536]	; (8000a1c <main+0x330>)
 8000804:	edd3 7a00 	vldr	s15, [r3]
 8000808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800080c:	eddf 6a80 	vldr	s13, [pc, #512]	; 8000a10 <main+0x324>
 8000810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000814:	4b82      	ldr	r3, [pc, #520]	; (8000a20 <main+0x334>)
 8000816:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 800081a:	f001 fe67 	bl	80024ec <micros>
 800081e:	4b81      	ldr	r3, [pc, #516]	; (8000a24 <main+0x338>)
 8000820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000824:	ebb0 0802 	subs.w	r8, r0, r2
 8000828:	eb61 0903 	sbc.w	r9, r1, r3
 800082c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	454b      	cmp	r3, r9
 8000836:	bf08      	it	eq
 8000838:	4542      	cmpeq	r2, r8
 800083a:	d28e      	bcs.n	800075a <main+0x6e>
	  {

			Time_Sampling_Stamp = micros();
 800083c:	f001 fe56 	bl	80024ec <micros>
 8000840:	4602      	mov	r2, r0
 8000842:	460b      	mov	r3, r1
 8000844:	4977      	ldr	r1, [pc, #476]	; (8000a24 <main+0x338>)
 8000846:	e9c1 2300 	strd	r2, r3, [r1]
			if(NO_KALMAN)
 800084a:	4b77      	ldr	r3, [pc, #476]	; (8000a28 <main+0x33c>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d020      	beq.n	8000894 <main+0x1a8>
			{
				Position_Read_Encoder = htim1.Instance->CNT; //Read Encoder
 8000852:	4b66      	ldr	r3, [pc, #408]	; (80009ec <main+0x300>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000858:	ee07 3a90 	vmov	s15, r3
 800085c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000860:	4b72      	ldr	r3, [pc, #456]	; (8000a2c <main+0x340>)
 8000862:	edc3 7a00 	vstr	s15, [r3]
				Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 8000866:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <main+0x340>)
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8000a30 <main+0x344>
 8000870:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000874:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <main+0x328>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	ee07 3a90 	vmov	s15, r3
 800087c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000884:	4b6b      	ldr	r3, [pc, #428]	; (8000a34 <main+0x348>)
 8000886:	edc3 7a00 	vstr	s15, [r3]
				NO_KALMAN=Prev_NO_KALMAN;
 800088a:	4b6b      	ldr	r3, [pc, #428]	; (8000a38 <main+0x34c>)
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	4b66      	ldr	r3, [pc, #408]	; (8000a28 <main+0x33c>)
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	e049      	b.n	8000928 <main+0x23c>
			}
			else
			{
				if(NO_KALMAN!=Prev_NO_KALMAN)
 8000894:	4b64      	ldr	r3, [pc, #400]	; (8000a28 <main+0x33c>)
 8000896:	781a      	ldrb	r2, [r3, #0]
 8000898:	4b67      	ldr	r3, [pc, #412]	; (8000a38 <main+0x34c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d02a      	beq.n	80008f6 <main+0x20a>
				{
					Position_Read_Encoder = htim1.Instance->CNT; //Read Encoder
 80008a0:	4b52      	ldr	r3, [pc, #328]	; (80009ec <main+0x300>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008ae:	4b5f      	ldr	r3, [pc, #380]	; (8000a2c <main+0x340>)
 80008b0:	edc3 7a00 	vstr	s15, [r3]
					Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 80008b4:	4b5d      	ldr	r3, [pc, #372]	; (8000a2c <main+0x340>)
 80008b6:	edd3 7a00 	vldr	s15, [r3]
 80008ba:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000a30 <main+0x344>
 80008be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80008c2:	4b54      	ldr	r3, [pc, #336]	; (8000a14 <main+0x328>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	ee07 3a90 	vmov	s15, r3
 80008ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80008d2:	4b58      	ldr	r3, [pc, #352]	; (8000a34 <main+0x348>)
 80008d4:	edc3 7a00 	vstr	s15, [r3]
					Position_Kalman = Position_Now_Degree*pi/180;
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <main+0x348>)
 80008da:	ed93 7a00 	vldr	s14, [r3]
 80008de:	4b4f      	ldr	r3, [pc, #316]	; (8000a1c <main+0x330>)
 80008e0:	edd3 7a00 	vldr	s15, [r3]
 80008e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008e8:	eddf 6a54 	vldr	s13, [pc, #336]	; 8000a3c <main+0x350>
 80008ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008f0:	4b53      	ldr	r3, [pc, #332]	; (8000a40 <main+0x354>)
 80008f2:	edc3 7a00 	vstr	s15, [r3]
				}

				Kalman_Filter();
 80008f6:	f000 fc5b 	bl	80011b0 <Kalman_Filter>
				Position_Now_Rad = Position_Kalman;
 80008fa:	4b51      	ldr	r3, [pc, #324]	; (8000a40 <main+0x354>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a51      	ldr	r2, [pc, #324]	; (8000a44 <main+0x358>)
 8000900:	6013      	str	r3, [r2, #0]
				Velocity_Now_Rad = Velocity_Kalman;
 8000902:	4b51      	ldr	r3, [pc, #324]	; (8000a48 <main+0x35c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a46      	ldr	r2, [pc, #280]	; (8000a20 <main+0x334>)
 8000908:	6013      	str	r3, [r2, #0]
				Position_Now_Degree = Position_Now_Rad*180/pi;
 800090a:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <main+0x358>)
 800090c:	edd3 7a00 	vldr	s15, [r3]
 8000910:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8000a3c <main+0x350>
 8000914:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000918:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <main+0x330>)
 800091a:	ed93 7a00 	vldr	s14, [r3]
 800091e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000922:	4b44      	ldr	r3, [pc, #272]	; (8000a34 <main+0x348>)
 8000924:	edc3 7a00 	vstr	s15, [r3]
			}


		if ((Distance_Calculated == 0 )&& (Position_Now_Degree != Position_Want_Degree)) //Distance not calculated and not arrive at next station
 8000928:	4b48      	ldr	r3, [pc, #288]	; (8000a4c <main+0x360>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10d      	bne.n	800094c <main+0x260>
 8000930:	4b40      	ldr	r3, [pc, #256]	; (8000a34 <main+0x348>)
 8000932:	ed93 7a00 	vldr	s14, [r3]
 8000936:	4b46      	ldr	r3, [pc, #280]	; (8000a50 <main+0x364>)
 8000938:	edd3 7a00 	vldr	s15, [r3]
 800093c:	eeb4 7a67 	vcmp.f32	s14, s15
 8000940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000944:	d002      	beq.n	800094c <main+0x260>
			{
				Distance_Calculation();		//Calculate distance
 8000946:	f000 febd 	bl	80016c4 <Distance_Calculation>
 800094a:	e01f      	b.n	800098c <main+0x2a0>
			}
			else if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree) && (Trajectory_Flag < 5)) //Distance calculated and not arrive at next station
 800094c:	4b3f      	ldr	r3, [pc, #252]	; (8000a4c <main+0x360>)
 800094e:	881b      	ldrh	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d11b      	bne.n	800098c <main+0x2a0>
 8000954:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <main+0x348>)
 8000956:	ed93 7a00 	vldr	s14, [r3]
 800095a:	4b3d      	ldr	r3, [pc, #244]	; (8000a50 <main+0x364>)
 800095c:	edd3 7a00 	vldr	s15, [r3]
 8000960:	eeb4 7a67 	vcmp.f32	s14, s15
 8000964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000968:	d010      	beq.n	800098c <main+0x2a0>
 800096a:	4b3a      	ldr	r3, [pc, #232]	; (8000a54 <main+0x368>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2b04      	cmp	r3, #4
 8000970:	d80c      	bhi.n	800098c <main+0x2a0>
			{
				Trajectory_Generation();	//Get Velocity_Want_RPM
 8000972:	f001 f80f 	bl	8001994 <Trajectory_Generation>
				Velocity_Control();
 8000976:	f000 fdcf 	bl	8001518 <Velocity_Control>
				Motor_Drive_PWM();			//Drive
 800097a:	f000 fbd3 	bl	8001124 <Motor_Drive_PWM>

				if(Trajectory_Flag == 4)
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <main+0x368>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2b04      	cmp	r3, #4
 8000984:	d102      	bne.n	800098c <main+0x2a0>
					{
						Distance_Calculation();
						Trajectory_Flag = 0;
					}*/

					Trajectory_Flag = 5;
 8000986:	4b33      	ldr	r3, [pc, #204]	; (8000a54 <main+0x368>)
 8000988:	2205      	movs	r2, #5
 800098a:	801a      	strh	r2, [r3, #0]


			}


			if (Trajectory_Flag == 5)		//Reach next station
 800098c:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <main+0x368>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	2b05      	cmp	r3, #5
 8000992:	d123      	bne.n	80009dc <main+0x2f0>
			{

				if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <main+0x36c>)
 8000996:	ed93 7a00 	vldr	s14, [r3]
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <main+0x364>)
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	eeb4 7a67 	vcmp.f32	s14, s15
 80009a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a8:	d00d      	beq.n	80009c6 <main+0x2da>
				{
					Trajectory_Flag = 0;	//Reset flag
 80009aa:	4b2a      	ldr	r3, [pc, #168]	; (8000a54 <main+0x368>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	801a      	strh	r2, [r3, #0]
					Distance_Calculated = 0;//Reset distance
 80009b0:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <main+0x360>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	801a      	strh	r2, [r3, #0]
					Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 80009b6:	4b29      	ldr	r3, [pc, #164]	; (8000a5c <main+0x370>)
 80009b8:	f04f 0200 	mov.w	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
					Velocity_Error_Sum = 0;
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0x374>)
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
				}
				Velocity_Want_RPM = 0;
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <main+0x370>)
 80009c8:	f04f 0200 	mov.w	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
				Velocity_Control();
 80009ce:	f000 fda3 	bl	8001518 <Velocity_Control>
				PWM_Out = 0;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <main+0x378>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	801a      	strh	r2, [r3, #0]
				Motor_Drive_PWM();			//Drive
 80009d8:	f000 fba4 	bl	8001124 <Motor_Drive_PWM>

			}
			Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 80009dc:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <main+0x364>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <main+0x36c>)
 80009e2:	6013      	str	r3, [r2, #0]
  {
 80009e4:	e6b9      	b.n	800075a <main+0x6e>
 80009e6:	bf00      	nop
 80009e8:	200003c8 	.word	0x200003c8
 80009ec:	2000037c 	.word	0x2000037c
 80009f0:	200002d0 	.word	0x200002d0
 80009f4:	20000190 	.word	0x20000190
 80009f8:	20000410 	.word	0x20000410
 80009fc:	20000454 	.word	0x20000454
 8000a00:	200000c8 	.word	0x200000c8
 8000a04:	200000dc 	.word	0x200000dc
 8000a08:	461c3c00 	.word	0x461c3c00
 8000a0c:	461c4000 	.word	0x461c4000
 8000a10:	42700000 	.word	0x42700000
 8000a14:	20000002 	.word	0x20000002
 8000a18:	200000e0 	.word	0x200000e0
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000110 	.word	0x20000110
 8000a24:	200000c0 	.word	0x200000c0
 8000a28:	20000000 	.word	0x20000000
 8000a2c:	20000100 	.word	0x20000100
 8000a30:	43b40000 	.word	0x43b40000
 8000a34:	20000104 	.word	0x20000104
 8000a38:	20000001 	.word	0x20000001
 8000a3c:	43340000 	.word	0x43340000
 8000a40:	20000168 	.word	0x20000168
 8000a44:	20000134 	.word	0x20000134
 8000a48:	2000016c 	.word	0x2000016c
 8000a4c:	200000da 	.word	0x200000da
 8000a50:	20000108 	.word	0x20000108
 8000a54:	2000015c 	.word	0x2000015c
 8000a58:	2000010c 	.word	0x2000010c
 8000a5c:	200000e4 	.word	0x200000e4
 8000a60:	200000f0 	.word	0x200000f0
 8000a64:	200000fc 	.word	0x200000fc

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0320 	add.w	r3, r7, #32
 8000a72:	2230      	movs	r2, #48	; 0x30
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f005 fdf8 	bl	800666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <SystemClock_Config+0xc8>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <SystemClock_Config+0xc8>)
 8000a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xc8>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <SystemClock_Config+0xcc>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <SystemClock_Config+0xcc>)
 8000ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <SystemClock_Config+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000acc:	2310      	movs	r3, #16
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000adc:	2364      	movs	r3, #100	; 0x64
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae8:	f107 0320 	add.w	r3, r7, #32
 8000aec:	4618      	mov	r0, r3
 8000aee:	f003 f881 	bl	8003bf4 <HAL_RCC_OscConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000af8:	f001 fd12 	bl	8002520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afc:	230f      	movs	r3, #15
 8000afe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	2302      	movs	r3, #2
 8000b02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	2103      	movs	r1, #3
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fae3 	bl	80040e4 <HAL_RCC_ClockConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b24:	f001 fcfc 	bl	8002520 <Error_Handler>
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3750      	adds	r7, #80	; 0x50
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40007000 	.word	0x40007000

08000b38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <MX_I2C1_Init+0x54>)
 8000b40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b44:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_I2C1_Init+0x58>)
 8000b46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	; (8000b88 <MX_I2C1_Init+0x50>)
 8000b76:	f002 fef9 	bl	800396c <HAL_I2C_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b80:	f001 fcce 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000278 	.word	0x20000278
 8000b8c:	40005400 	.word	0x40005400
 8000b90:	000186a0 	.word	0x000186a0

08000b94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2224      	movs	r2, #36	; 0x24
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f005 fd62 	bl	800666c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_TIM1_Init+0xac>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bc4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	4619      	mov	r1, r3
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000c08:	f003 fe7e 	bl	8004908 <HAL_TIM_Encoder_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c12:	f001 fc85 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <MX_TIM1_Init+0xa8>)
 8000c24:	f004 fd22 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c2e:	f001 fc77 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000037c 	.word	0x2000037c
 8000c40:	40010000 	.word	0x40010000

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	463b      	mov	r3, r7
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c6a:	2263      	movs	r2, #99	; 0x63
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c76:	f04f 32ff 	mov.w	r2, #4294967295
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4816      	ldr	r0, [pc, #88]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000c8a:	f003 fc27 	bl	80044dc <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c94:	f001 fc44 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000ca6:	f004 f929 	bl	8004efc <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f001 fc36 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000cc2:	f004 fcd3 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f001 fc28 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <MX_TIM2_Init+0xa0>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f06f 0201 	mvn.w	r2, #1
 8000cd8:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200003c8 	.word	0x200003c8

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08e      	sub	sp, #56	; 0x38
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	f107 0320 	add.w	r3, r7, #32
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3e:	4823      	ldr	r0, [pc, #140]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d40:	f003 fbcc 	bl	80044dc <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d4a:	f001 fbe9 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d58:	4619      	mov	r1, r3
 8000d5a:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d5c:	f004 f8ce 	bl	8004efc <HAL_TIM_ConfigClockSource>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d66:	f001 fbdb 	bl	8002520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6a:	4818      	ldr	r0, [pc, #96]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d6c:	f003 fcc2 	bl	80046f4 <HAL_TIM_PWM_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d76:	f001 fbd3 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	4619      	mov	r1, r3
 8000d88:	4810      	ldr	r0, [pc, #64]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000d8a:	f004 fc6f 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d94:	f001 fbc4 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d98:	2360      	movs	r3, #96	; 0x60
 8000d9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	220c      	movs	r2, #12
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000db0:	f003 ffe6 	bl	8004d80 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dba:	f001 fbb1 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <MX_TIM3_Init+0xe4>)
 8000dc0:	f001 fcc6 	bl	8002750 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	; 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200002d0 	.word	0x200002d0
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	463b      	mov	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_TIM4_Init+0x98>)
 8000df4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e18:	f003 fb60 	bl	80044dc <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e22:	f001 fb7d 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e34:	f004 f862 	bl	8004efc <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f001 fb6f 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM4_Init+0x94>)
 8000e50:	f004 fc0c 	bl	800566c <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000e5a:	f001 fb61 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000230 	.word	0x20000230
 8000e6c:	40000800 	.word	0x40000800

08000e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <MX_USART2_UART_Init+0x54>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e7c:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8000e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e88:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_USART2_UART_Init+0x50>)
 8000eac:	f004 fc60 	bl	8005770 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f001 fb33 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000410 	.word	0x20000410
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a0f      	ldr	r2, [pc, #60]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_DMA_Init+0x4c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f001 ff41 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ef4:	2010      	movs	r0, #16
 8000ef6:	f001 ff5a 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2011      	movs	r0, #17
 8000f00:	f001 ff39 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f04:	2011      	movs	r0, #17
 8000f06:	f001 ff52 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a46      	ldr	r2, [pc, #280]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a3f      	ldr	r2, [pc, #252]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b39      	ldr	r3, [pc, #228]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a38      	ldr	r2, [pc, #224]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b36      	ldr	r3, [pc, #216]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a31      	ldr	r2, [pc, #196]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_GPIO_Init+0x138>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2120      	movs	r1, #32
 8000fa2:	482c      	ldr	r0, [pc, #176]	; (8001054 <MX_GPIO_Init+0x13c>)
 8000fa4:	f002 fca4 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fae:	482a      	ldr	r0, [pc, #168]	; (8001058 <MX_GPIO_Init+0x140>)
 8000fb0:	f002 fc9e 	bl	80038f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_GPIO_Init+0x144>)
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4825      	ldr	r0, [pc, #148]	; (8001060 <MX_GPIO_Init+0x148>)
 8000fca:	f002 fb0d 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000fce:	2381      	movs	r3, #129	; 0x81
 8000fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <MX_GPIO_Init+0x148>)
 8000fe2:	f002 fb01 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <MX_GPIO_Init+0x13c>)
 8000ffa:	f002 faf5 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ffe:	2320      	movs	r3, #32
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	480f      	ldr	r0, [pc, #60]	; (8001054 <MX_GPIO_Init+0x13c>)
 8001016:	f002 fae7 	bl	80035e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800101a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <MX_GPIO_Init+0x140>)
 8001034:	f002 fad8 	bl	80035e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2028      	movs	r0, #40	; 0x28
 800103e:	f001 fe9a 	bl	8002d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001042:	2028      	movs	r0, #40	; 0x28
 8001044:	f001 feb3 	bl	8002dae <HAL_NVIC_EnableIRQ>

}
 8001048:	bf00      	nop
 800104a:	3728      	adds	r7, #40	; 0x28
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40020400 	.word	0x40020400
 800105c:	10210000 	.word	0x10210000
 8001060:	40020800 	.word	0x40020800

08001064 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	ed2d 8b02 	vpush	{d8}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <Encoder_Velocity_Update+0xa8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8001076:	f001 fa39 	bl	80024ec <micros>
 800107a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <Encoder_Velocity_Update+0xac>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001088:	1a84      	subs	r4, r0, r2
 800108a:	eb61 0503 	sbc.w	r5, r1, r3
 800108e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <Encoder_Velocity_Update+0xb0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <Encoder_Velocity_Update+0xb4>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	db06      	blt.n	80010b6 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <Encoder_Velocity_Update+0xb8>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	461a      	mov	r2, r3
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	1a9b      	subs	r3, r3, r2
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e00b      	b.n	80010ce <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	425b      	negs	r3, r3
 80010ba:	4a17      	ldr	r2, [pc, #92]	; (8001118 <Encoder_Velocity_Update+0xb4>)
 80010bc:	8812      	ldrh	r2, [r2, #0]
 80010be:	4293      	cmp	r3, r2
 80010c0:	db05      	blt.n	80010ce <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <Encoder_Velocity_Update+0xb8>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4413      	add	r3, r2
 80010cc:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <Encoder_Velocity_Update+0xb0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80010d4:	490e      	ldr	r1, [pc, #56]	; (8001110 <Encoder_Velocity_Update+0xac>)
 80010d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010da:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <Encoder_Velocity_Update+0xbc>)
 80010e2:	fb02 f303 	mul.w	r3, r2, r3
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80010ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010f2:	f7ff f939 	bl	8000368 <__aeabi_ul2f>
 80010f6:	ee07 0a10 	vmov	s14, r0
 80010fa:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	ecbd 8b02 	vpop	{d8}
 800110a:	bdb0      	pop	{r4, r5, r7, pc}
 800110c:	2000037c 	.word	0x2000037c
 8001110:	200001b0 	.word	0x200001b0
 8001114:	200001b8 	.word	0x200001b8
 8001118:	20000004 	.word	0x20000004
 800111c:	20000002 	.word	0x20000002
 8001120:	000f4240 	.word	0x000f4240

08001124 <Motor_Drive_PWM>:

#define PWM_CHANNEL TIM_CHANNEL_4			//Set channel for PWM
#define GPIO_PIN_DIRECTION GPIO_PIN_10		//Set pin for direction
void Motor_Drive_PWM()	//Motor drive
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	if (PWM_Out > 10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8001128:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001132:	4293      	cmp	r3, r2
 8001134:	dd04      	ble.n	8001140 <Motor_Drive_PWM+0x1c>
	{
		PWM_Out = 10000;		//Run with Velocity_Max_RPM
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 8001138:	f242 7210 	movw	r2, #10000	; 0x2710
 800113c:	801a      	strh	r2, [r3, #0]
 800113e:	e009      	b.n	8001154 <Motor_Drive_PWM+0x30>
	}
	else if (PWM_Out < -10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <Motor_Drive_PWM+0x80>)
 8001148:	4293      	cmp	r3, r2
 800114a:	da03      	bge.n	8001154 <Motor_Drive_PWM+0x30>
	{
		PWM_Out = -10000;		//Run with Velocity_Max_RPM
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 800114e:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8001152:	801a      	strh	r2, [r3, #0]
	}

	if (PWM_Out < 0)
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	2b00      	cmp	r3, #0
 800115c:	da0d      	bge.n	800117a <Motor_Drive_PWM+0x56>
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, -PWM_Out);
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	425a      	negs	r2, r3
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <Motor_Drive_PWM+0x84>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001172:	480e      	ldr	r0, [pc, #56]	; (80011ac <Motor_Drive_PWM+0x88>)
 8001174:	f002 fbbc 	bl	80038f0 <HAL_GPIO_WritePin>
	else if (PWM_Out >= 0)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 8001178:	e010      	b.n	800119c <Motor_Drive_PWM+0x78>
	else if (PWM_Out >= 0)
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0b      	blt.n	800119c <Motor_Drive_PWM+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <Motor_Drive_PWM+0x7c>)
 8001186:	f9b3 2000 	ldrsh.w	r2, [r3]
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <Motor_Drive_PWM+0x84>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <Motor_Drive_PWM+0x88>)
 8001198:	f002 fbaa 	bl	80038f0 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	200000fc 	.word	0x200000fc
 80011a4:	ffffd8f0 	.word	0xffffd8f0
 80011a8:	200002d0 	.word	0x200002d0
 80011ac:	40020400 	.word	0x40020400

080011b0 <Kalman_Filter>:
void Kalman_Filter()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	ed2d 8b02 	vpush	{d8}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
	Q = powf(Sigma_a, 2);
 80011ba:	4bca      	ldr	r3, [pc, #808]	; (80014e4 <Kalman_Filter+0x334>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f005 fae0 	bl	800678c <powf>
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	4bc5      	ldr	r3, [pc, #788]	; (80014e8 <Kalman_Filter+0x338>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
	R = powf(Sigma_w, 2);
 80011d6:	4bc5      	ldr	r3, [pc, #788]	; (80014ec <Kalman_Filter+0x33c>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80011e0:	eeb0 0a67 	vmov.f32	s0, s15
 80011e4:	f005 fad2 	bl	800678c <powf>
 80011e8:	eef0 7a40 	vmov.f32	s15, s0
 80011ec:	4bc0      	ldr	r3, [pc, #768]	; (80014f0 <Kalman_Filter+0x340>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]

	float Position_Kalman_New = Position_Kalman + (Velocity_Kalman*CON_T);
 80011f2:	4bc0      	ldr	r3, [pc, #768]	; (80014f4 <Kalman_Filter+0x344>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80014f8 <Kalman_Filter+0x348>
 80011fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001200:	4bbe      	ldr	r3, [pc, #760]	; (80014fc <Kalman_Filter+0x34c>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	edc7 7a03 	vstr	s15, [r7, #12]
	float Velocity_Kalman_New = 0 + Velocity_Kalman;
 800120e:	4bb9      	ldr	r3, [pc, #740]	; (80014f4 <Kalman_Filter+0x344>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001500 <Kalman_Filter+0x350>
 8001218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800121c:	edc7 7a02 	vstr	s15, [r7, #8]
	float ye = Velocity_Now_Rad - Velocity_Kalman_New;
 8001220:	4bb8      	ldr	r3, [pc, #736]	; (8001504 <Kalman_Filter+0x354>)
 8001222:	ed93 7a00 	vldr	s14, [r3]
 8001226:	edd7 7a02 	vldr	s15, [r7, #8]
 800122a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800122e:	edc7 7a01 	vstr	s15, [r7, #4]

	p11 = p11 + (CON_T*p21) + (Q*powf(fabs(CON_T),4))/4 + (powf(fabs(CON_T),2)*(p12 + CON_T*p22))/CON_T;
 8001232:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80014f8 <Kalman_Filter+0x348>
 8001236:	4bb4      	ldr	r3, [pc, #720]	; (8001508 <Kalman_Filter+0x358>)
 8001238:	edd3 7a00 	vldr	s15, [r3]
 800123c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001240:	4bb2      	ldr	r3, [pc, #712]	; (800150c <Kalman_Filter+0x35c>)
 8001242:	edd3 7a00 	vldr	s15, [r3]
 8001246:	ee37 8a27 	vadd.f32	s16, s14, s15
 800124a:	eddf 7aab 	vldr	s15, [pc, #684]	; 80014f8 <Kalman_Filter+0x348>
 800124e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001252:	eeb0 0a67 	vmov.f32	s0, s15
 8001256:	f005 fa99 	bl	800678c <powf>
 800125a:	eeb0 7a40 	vmov.f32	s14, s0
 800125e:	4ba2      	ldr	r3, [pc, #648]	; (80014e8 <Kalman_Filter+0x338>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001268:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800126c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001270:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001274:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80014f8 <Kalman_Filter+0x348>
 8001278:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f005 fa84 	bl	800678c <powf>
 8001284:	eef0 6a40 	vmov.f32	s13, s0
 8001288:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80014f8 <Kalman_Filter+0x348>
 800128c:	4ba0      	ldr	r3, [pc, #640]	; (8001510 <Kalman_Filter+0x360>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001296:	4b9f      	ldr	r3, [pc, #636]	; (8001514 <Kalman_Filter+0x364>)
 8001298:	edd3 7a00 	vldr	s15, [r3]
 800129c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a0:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80012a4:	eddf 6a94 	vldr	s13, [pc, #592]	; 80014f8 <Kalman_Filter+0x348>
 80012a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <Kalman_Filter+0x35c>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 + (CON_T*p22) + (Q*CON_T*powf(fabs(CON_T),2))/2;
 80012b6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80014f8 <Kalman_Filter+0x348>
 80012ba:	4b95      	ldr	r3, [pc, #596]	; (8001510 <Kalman_Filter+0x360>)
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c4:	4b93      	ldr	r3, [pc, #588]	; (8001514 <Kalman_Filter+0x364>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee37 8a27 	vadd.f32	s16, s14, s15
 80012ce:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <Kalman_Filter+0x338>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ed9f 7a88 	vldr	s14, [pc, #544]	; 80014f8 <Kalman_Filter+0x348>
 80012d8:	ee67 8a87 	vmul.f32	s17, s15, s14
 80012dc:	eddf 7a86 	vldr	s15, [pc, #536]	; 80014f8 <Kalman_Filter+0x348>
 80012e0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80012e4:	eeb0 0a67 	vmov.f32	s0, s15
 80012e8:	f005 fa50 	bl	800678c <powf>
 80012ec:	eef0 7a40 	vmov.f32	s15, s0
 80012f0:	ee28 7aa7 	vmul.f32	s14, s17, s15
 80012f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001300:	4b84      	ldr	r3, [pc, #528]	; (8001514 <Kalman_Filter+0x364>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
	p21 = (2*CON_T*p21 + Q*powf(fabs(CON_T),4) + 2*p22*powf(fabs(CON_T),2))/(2*CON_T);
 8001306:	eddf 7a7c 	vldr	s15, [pc, #496]	; 80014f8 <Kalman_Filter+0x348>
 800130a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800130e:	4b7e      	ldr	r3, [pc, #504]	; (8001508 <Kalman_Filter+0x358>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001318:	eddf 7a77 	vldr	s15, [pc, #476]	; 80014f8 <Kalman_Filter+0x348>
 800131c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	f005 fa32 	bl	800678c <powf>
 8001328:	eeb0 7a40 	vmov.f32	s14, s0
 800132c:	4b6e      	ldr	r3, [pc, #440]	; (80014e8 <Kalman_Filter+0x338>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	ee38 8a27 	vadd.f32	s16, s16, s15
 800133a:	4b75      	ldr	r3, [pc, #468]	; (8001510 <Kalman_Filter+0x360>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ee77 8aa7 	vadd.f32	s17, s15, s15
 8001344:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80014f8 <Kalman_Filter+0x348>
 8001348:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800134c:	eeb0 0a67 	vmov.f32	s0, s15
 8001350:	f005 fa1c 	bl	800678c <powf>
 8001354:	eef0 7a40 	vmov.f32	s15, s0
 8001358:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800135c:	ee78 6a27 	vadd.f32	s13, s16, s15
 8001360:	eddf 7a65 	vldr	s15, [pc, #404]	; 80014f8 <Kalman_Filter+0x348>
 8001364:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136c:	4b66      	ldr	r3, [pc, #408]	; (8001508 <Kalman_Filter+0x358>)
 800136e:	edc3 7a00 	vstr	s15, [r3]
	p22 = Q*powf(fabs(CON_T),2) + p22;
 8001372:	eddf 7a61 	vldr	s15, [pc, #388]	; 80014f8 <Kalman_Filter+0x348>
 8001376:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	f005 fa05 	bl	800678c <powf>
 8001382:	eeb0 7a40 	vmov.f32	s14, s0
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <Kalman_Filter+0x338>)
 8001388:	edd3 7a00 	vldr	s15, [r3]
 800138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001390:	4b5f      	ldr	r3, [pc, #380]	; (8001510 <Kalman_Filter+0x360>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <Kalman_Filter+0x360>)
 800139c:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman_New = Position_Kalman_New + (p12*ye)/(R+p22);
 80013a0:	4b5c      	ldr	r3, [pc, #368]	; (8001514 <Kalman_Filter+0x364>)
 80013a2:	ed93 7a00 	vldr	s14, [r3]
 80013a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <Kalman_Filter+0x340>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b56      	ldr	r3, [pc, #344]	; (8001510 <Kalman_Filter+0x360>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]
	Velocity_Kalman_New = Velocity_Kalman_New + (p22*ye)/(R+p22);
 80013ce:	4b50      	ldr	r3, [pc, #320]	; (8001510 <Kalman_Filter+0x360>)
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013dc:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <Kalman_Filter+0x340>)
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <Kalman_Filter+0x360>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	edc7 7a02 	vstr	s15, [r7, #8]

	p11 = p11 - (p12*p21)/(R+p22);
 80013fc:	4b43      	ldr	r3, [pc, #268]	; (800150c <Kalman_Filter+0x35c>)
 80013fe:	ed93 7a00 	vldr	s14, [r3]
 8001402:	4b44      	ldr	r3, [pc, #272]	; (8001514 <Kalman_Filter+0x364>)
 8001404:	edd3 6a00 	vldr	s13, [r3]
 8001408:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <Kalman_Filter+0x358>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001412:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <Kalman_Filter+0x340>)
 8001414:	edd3 6a00 	vldr	s13, [r3]
 8001418:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <Kalman_Filter+0x360>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001422:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <Kalman_Filter+0x35c>)
 800142c:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 - (p12*p22)/(R+p22);
 8001430:	4b38      	ldr	r3, [pc, #224]	; (8001514 <Kalman_Filter+0x364>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <Kalman_Filter+0x364>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b34      	ldr	r3, [pc, #208]	; (8001510 <Kalman_Filter+0x360>)
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <Kalman_Filter+0x340>)
 8001448:	edd3 6a00 	vldr	s13, [r3]
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <Kalman_Filter+0x360>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001456:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <Kalman_Filter+0x364>)
 8001460:	edc3 7a00 	vstr	s15, [r3]
	p21 = -p21*(p22/(R+22)-1);
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <Kalman_Filter+0x358>)
 8001466:	edd3 7a00 	vldr	s15, [r3]
 800146a:	eeb1 7a67 	vneg.f32	s14, s15
 800146e:	4b28      	ldr	r3, [pc, #160]	; (8001510 <Kalman_Filter+0x360>)
 8001470:	ed93 6a00 	vldr	s12, [r3]
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <Kalman_Filter+0x340>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 800147e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001482:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800148a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800148e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <Kalman_Filter+0x358>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
	p22 = -p22*(p22/(R+22)-1);
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <Kalman_Filter+0x360>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	eeb1 7a67 	vneg.f32	s14, s15
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <Kalman_Filter+0x360>)
 80014a4:	ed93 6a00 	vldr	s12, [r3]
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <Kalman_Filter+0x340>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 80014b2:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80014b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80014ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80014c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c6:	4b12      	ldr	r3, [pc, #72]	; (8001510 <Kalman_Filter+0x360>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman = Position_Kalman_New;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <Kalman_Filter+0x34c>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6013      	str	r3, [r2, #0]
	Velocity_Kalman = Velocity_Kalman_New;
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <Kalman_Filter+0x344>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	ecbd 8b02 	vpop	{d8}
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000018 	.word	0x20000018
 80014e8:	20000160 	.word	0x20000160
 80014ec:	2000001c 	.word	0x2000001c
 80014f0:	20000164 	.word	0x20000164
 80014f4:	2000016c 	.word	0x2000016c
 80014f8:	3a83126f 	.word	0x3a83126f
 80014fc:	20000168 	.word	0x20000168
 8001500:	00000000 	.word	0x00000000
 8001504:	20000110 	.word	0x20000110
 8001508:	20000178 	.word	0x20000178
 800150c:	20000170 	.word	0x20000170
 8001510:	2000017c 	.word	0x2000017c
 8001514:	20000174 	.word	0x20000174

08001518 <Velocity_Control>:
void Velocity_Control()  //Velocity Control PID
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0

	if(NO_KALMAN)
 800151c:	4b57      	ldr	r3, [pc, #348]	; (800167c <Velocity_Control+0x164>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d023      	beq.n	800156c <Velocity_Control+0x54>
	{
		Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8001524:	4b56      	ldr	r3, [pc, #344]	; (8001680 <Velocity_Control+0x168>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001684 <Velocity_Control+0x16c>
 800152e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001532:	4b55      	ldr	r3, [pc, #340]	; (8001688 <Velocity_Control+0x170>)
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	4b52      	ldr	r3, [pc, #328]	; (800168c <Velocity_Control+0x174>)
 8001544:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <Velocity_Control+0x174>)
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001552:	4b4f      	ldr	r3, [pc, #316]	; (8001690 <Velocity_Control+0x178>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800155c:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001684 <Velocity_Control+0x16c>
 8001560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001564:	4b4b      	ldr	r3, [pc, #300]	; (8001694 <Velocity_Control+0x17c>)
 8001566:	edc3 7a00 	vstr	s15, [r3]
 800156a:	e014      	b.n	8001596 <Velocity_Control+0x7e>
	}

	else
	{
		Velocity_Now_Rad = Velocity_Kalman;
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <Velocity_Control+0x180>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a48      	ldr	r2, [pc, #288]	; (8001694 <Velocity_Control+0x17c>)
 8001572:	6013      	str	r3, [r2, #0]
		Velocity_Now_RPM = Velocity_Now_Rad*60/(2*pi);
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <Velocity_Control+0x17c>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001684 <Velocity_Control+0x16c>
 800157e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <Velocity_Control+0x178>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800158c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <Velocity_Control+0x174>)
 8001592:	edc3 7a00 	vstr	s15, [r3]
	}

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8001596:	4b41      	ldr	r3, [pc, #260]	; (800169c <Velocity_Control+0x184>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <Velocity_Control+0x188>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	dd04      	ble.n	80015b6 <Velocity_Control+0x9e>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 80015ac:	4b3c      	ldr	r3, [pc, #240]	; (80016a0 <Velocity_Control+0x188>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a3a      	ldr	r2, [pc, #232]	; (800169c <Velocity_Control+0x184>)
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e014      	b.n	80015e0 <Velocity_Control+0xc8>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 80015b6:	4b3a      	ldr	r3, [pc, #232]	; (80016a0 <Velocity_Control+0x188>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	eeb1 7a67 	vneg.f32	s14, s15
 80015c0:	4b36      	ldr	r3, [pc, #216]	; (800169c <Velocity_Control+0x184>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ce:	dd07      	ble.n	80015e0 <Velocity_Control+0xc8>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 80015d0:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <Velocity_Control+0x188>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eef1 7a67 	vneg.f32	s15, s15
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <Velocity_Control+0x184>)
 80015dc:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <Velocity_Control+0x184>)
 80015e2:	ed93 7a00 	vldr	s14, [r3]
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <Velocity_Control+0x174>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f0:	4b2c      	ldr	r3, [pc, #176]	; (80016a4 <Velocity_Control+0x18c>)
 80015f2:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <Velocity_Control+0x190>)
 80015f8:	ed93 7a00 	vldr	s14, [r3]
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <Velocity_Control+0x18c>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001606:	4b28      	ldr	r3, [pc, #160]	; (80016a8 <Velocity_Control+0x190>)
 8001608:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <Velocity_Control+0x18c>)
 800160e:	ed93 7a00 	vldr	s14, [r3]
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <Velocity_Control+0x194>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <Velocity_Control+0x198>)
 800161e:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <Velocity_Control+0x18c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a21      	ldr	r2, [pc, #132]	; (80016ac <Velocity_Control+0x194>)
 8001628:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <Velocity_Control+0x19c>)
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <Velocity_Control+0x18c>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800163a:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <Velocity_Control+0x1a0>)
 800163c:	edd3 6a00 	vldr	s13, [r3]
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <Velocity_Control+0x190>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800164a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <Velocity_Control+0x1a4>)
 8001650:	edd3 6a00 	vldr	s13, [r3]
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <Velocity_Control+0x198>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001666:	ee17 3a90 	vmov	r3, s15
 800166a:	b21a      	sxth	r2, r3
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <Velocity_Control+0x1a8>)
 800166e:	801a      	strh	r2, [r3, #0]

}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000000 	.word	0x20000000
 8001680:	200000dc 	.word	0x200000dc
 8001684:	42700000 	.word	0x42700000
 8001688:	20000002 	.word	0x20000002
 800168c:	200000e0 	.word	0x200000e0
 8001690:	20000008 	.word	0x20000008
 8001694:	20000110 	.word	0x20000110
 8001698:	2000016c 	.word	0x2000016c
 800169c:	200000e4 	.word	0x200000e4
 80016a0:	20000014 	.word	0x20000014
 80016a4:	200000ec 	.word	0x200000ec
 80016a8:	200000f0 	.word	0x200000f0
 80016ac:	200000f8 	.word	0x200000f8
 80016b0:	200000f4 	.word	0x200000f4
 80016b4:	2000000c 	.word	0x2000000c
 80016b8:	20000010 	.word	0x20000010
 80016bc:	200000e8 	.word	0x200000e8
 80016c0:	200000fc 	.word	0x200000fc

080016c4 <Distance_Calculation>:
void Distance_Calculation()	//Calculate that distance is short or long
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
	if(NO_KALMAN)
 80016c8:	4b97      	ldr	r3, [pc, #604]	; (8001928 <Distance_Calculation+0x264>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d012      	beq.n	80016f6 <Distance_Calculation+0x32>
	{
		Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution;  //degree
 80016d0:	4b96      	ldr	r3, [pc, #600]	; (800192c <Distance_Calculation+0x268>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001930 <Distance_Calculation+0x26c>
 80016da:	ee67 6a87 	vmul.f32	s13, s15, s14
 80016de:	4b95      	ldr	r3, [pc, #596]	; (8001934 <Distance_Calculation+0x270>)
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	ee07 3a90 	vmov	s15, r3
 80016e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ee:	4b92      	ldr	r3, [pc, #584]	; (8001938 <Distance_Calculation+0x274>)
 80016f0:	edc3 7a00 	vstr	s15, [r3]
 80016f4:	e00e      	b.n	8001714 <Distance_Calculation+0x50>
	}
	else
	{
		Position_Now_Degree = Position_Now_Rad*180/pi;
 80016f6:	4b91      	ldr	r3, [pc, #580]	; (800193c <Distance_Calculation+0x278>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001940 <Distance_Calculation+0x27c>
 8001700:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <Distance_Calculation+0x280>)
 8001706:	ed93 7a00 	vldr	s14, [r3]
 800170a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170e:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <Distance_Calculation+0x274>)
 8001710:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 8001714:	4b8c      	ldr	r3, [pc, #560]	; (8001948 <Distance_Calculation+0x284>)
 8001716:	ed93 7a00 	vldr	s14, [r3]
 800171a:	4b87      	ldr	r3, [pc, #540]	; (8001938 <Distance_Calculation+0x274>)
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001724:	4b89      	ldr	r3, [pc, #548]	; (800194c <Distance_Calculation+0x288>)
 8001726:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <Distance_Calculation+0x288>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	d509      	bpl.n	800174e <Distance_Calculation+0x8a>
	{
		Distance_Degree_Set += 360;
 800173a:	4b84      	ldr	r3, [pc, #528]	; (800194c <Distance_Calculation+0x288>)
 800173c:	edd3 7a00 	vldr	s15, [r3]
 8001740:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001930 <Distance_Calculation+0x26c>
 8001744:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001748:	4b80      	ldr	r3, [pc, #512]	; (800194c <Distance_Calculation+0x288>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 800174e:	4b7f      	ldr	r3, [pc, #508]	; (800194c <Distance_Calculation+0x288>)
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <Distance_Calculation+0x280>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175e:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001940 <Distance_Calculation+0x27c>
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	4b7a      	ldr	r3, [pc, #488]	; (8001950 <Distance_Calculation+0x28c>)
 8001768:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 800176c:	4b79      	ldr	r3, [pc, #484]	; (8001954 <Distance_Calculation+0x290>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <Distance_Calculation+0x280>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001780:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001958 <Distance_Calculation+0x294>
 8001784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001788:	4b74      	ldr	r3, [pc, #464]	; (800195c <Distance_Calculation+0x298>)
 800178a:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800178e:	4b73      	ldr	r3, [pc, #460]	; (800195c <Distance_Calculation+0x298>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001798:	4b71      	ldr	r3, [pc, #452]	; (8001960 <Distance_Calculation+0x29c>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 800179e:	4b70      	ldr	r3, [pc, #448]	; (8001960 <Distance_Calculation+0x29c>)
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001964 <Distance_Calculation+0x2a0>
 80017a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ac:	4b6e      	ldr	r3, [pc, #440]	; (8001968 <Distance_Calculation+0x2a4>)
 80017ae:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <Distance_Calculation+0x298>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	f004 ffe4 	bl	800678c <powf>
 80017c4:	eef0 7a40 	vmov.f32	s15, s0
 80017c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017cc:	4b67      	ldr	r3, [pc, #412]	; (800196c <Distance_Calculation+0x2a8>)
 80017ce:	edc3 7a00 	vstr	s15, [r3]


	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 80017d2:	4b66      	ldr	r3, [pc, #408]	; (800196c <Distance_Calculation+0x2a8>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017dc:	4b5c      	ldr	r3, [pc, #368]	; (8001950 <Distance_Calculation+0x28c>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	d53c      	bpl.n	8001866 <Distance_Calculation+0x1a2>
	{
		Distance_Length = 1;
 80017ec:	4b60      	ldr	r3, [pc, #384]	; (8001970 <Distance_Calculation+0x2ac>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	801a      	strh	r2, [r3, #0]
		Distance_Center = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 80017f2:	4b57      	ldr	r3, [pc, #348]	; (8001950 <Distance_Calculation+0x28c>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	4b5c      	ldr	r3, [pc, #368]	; (800196c <Distance_Calculation+0x2a8>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <Distance_Calculation+0x2b0>)
 8001808:	edc3 7a00 	vstr	s15, [r3]
		Time_Center = Distance_Center/Velocity_Max_Rad;
 800180c:	4b59      	ldr	r3, [pc, #356]	; (8001974 <Distance_Calculation+0x2b0>)
 800180e:	edd3 6a00 	vldr	s13, [r3]
 8001812:	4b52      	ldr	r3, [pc, #328]	; (800195c <Distance_Calculation+0x298>)
 8001814:	ed93 7a00 	vldr	s14, [r3]
 8001818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181c:	4b56      	ldr	r3, [pc, #344]	; (8001978 <Distance_Calculation+0x2b4>)
 800181e:	edc3 7a00 	vstr	s15, [r3]
		Time_Center_Micro = Time_Center*1000000;
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <Distance_Calculation+0x2b4>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001964 <Distance_Calculation+0x2a0>
 800182c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001830:	4b52      	ldr	r3, [pc, #328]	; (800197c <Distance_Calculation+0x2b8>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend) + (Time_Center);//Time use to reach next station
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <Distance_Calculation+0x29c>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001840:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <Distance_Calculation+0x2b4>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184a:	4b4d      	ldr	r3, [pc, #308]	; (8001980 <Distance_Calculation+0x2bc>)
 800184c:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <Distance_Calculation+0x2bc>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001964 <Distance_Calculation+0x2a0>
 800185a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185e:	4b49      	ldr	r3, [pc, #292]	; (8001984 <Distance_Calculation+0x2c0>)
 8001860:	edc3 7a00 	vstr	s15, [r3]
 8001864:	e05a      	b.n	800191c <Distance_Calculation+0x258>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <Distance_Calculation+0x2a8>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001870:	4b37      	ldr	r3, [pc, #220]	; (8001950 <Distance_Calculation+0x28c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	db4d      	blt.n	800191c <Distance_Calculation+0x258>
	{
		Distance_Length = 0;
 8001880:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <Distance_Calculation+0x2ac>)
 8001882:	2200      	movs	r2, #0
 8001884:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <Distance_Calculation+0x28c>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001890:	eeb0 0a67 	vmov.f32	s0, s15
 8001894:	f005 f812 	bl	80068bc <sqrtf>
 8001898:	eef0 7a40 	vmov.f32	s15, s0
 800189c:	4b30      	ldr	r3, [pc, #192]	; (8001960 <Distance_Calculation+0x29c>)
 800189e:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <Distance_Calculation+0x29c>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001964 <Distance_Calculation+0x2a0>
 80018ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <Distance_Calculation+0x2a4>)
 80018b2:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <Distance_Calculation+0x29c>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80018c0:	4b2f      	ldr	r3, [pc, #188]	; (8001980 <Distance_Calculation+0x2bc>)
 80018c2:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 80018c6:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <Distance_Calculation+0x2bc>)
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001964 <Distance_Calculation+0x2a0>
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <Distance_Calculation+0x2c0>)
 80018d6:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 80018da:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <Distance_Calculation+0x28c>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80018e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ec:	f004 ffe6 	bl	80068bc <sqrtf>
 80018f0:	eef0 7a40 	vmov.f32	s15, s0
 80018f4:	4b24      	ldr	r3, [pc, #144]	; (8001988 <Distance_Calculation+0x2c4>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <Distance_Calculation+0x2c4>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001958 <Distance_Calculation+0x294>
 8001904:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <Distance_Calculation+0x280>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <Distance_Calculation+0x2c8>)
 8001918:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <Distance_Calculation+0x2cc>)
 800191e:	2201      	movs	r2, #1
 8001920:	801a      	strh	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000
 800192c:	20000100 	.word	0x20000100
 8001930:	43b40000 	.word	0x43b40000
 8001934:	20000002 	.word	0x20000002
 8001938:	20000104 	.word	0x20000104
 800193c:	20000134 	.word	0x20000134
 8001940:	43340000 	.word	0x43340000
 8001944:	20000008 	.word	0x20000008
 8001948:	20000108 	.word	0x20000108
 800194c:	20000120 	.word	0x20000120
 8001950:	20000124 	.word	0x20000124
 8001954:	20000014 	.word	0x20000014
 8001958:	42700000 	.word	0x42700000
 800195c:	20000114 	.word	0x20000114
 8001960:	20000138 	.word	0x20000138
 8001964:	49742400 	.word	0x49742400
 8001968:	20000150 	.word	0x20000150
 800196c:	20000128 	.word	0x20000128
 8001970:	200000d8 	.word	0x200000d8
 8001974:	2000012c 	.word	0x2000012c
 8001978:	20000140 	.word	0x20000140
 800197c:	20000158 	.word	0x20000158
 8001980:	2000013c 	.word	0x2000013c
 8001984:	20000154 	.word	0x20000154
 8001988:	2000011c 	.word	0x2000011c
 800198c:	20000118 	.word	0x20000118
 8001990:	200000da 	.word	0x200000da

08001994 <Trajectory_Generation>:

	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}
void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	ed2d 8b02 	vpush	{d8}
 800199c:	b096      	sub	sp, #88	; 0x58
 800199e:	af00      	add	r7, sp, #0
	if(NO_KALMAN)
 80019a0:	4bb8      	ldr	r3, [pc, #736]	; (8001c84 <Trajectory_Generation+0x2f0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01f      	beq.n	80019e8 <Trajectory_Generation+0x54>
	{
		Position_Read_Encoder = htim1.Instance->CNT;
 80019a8:	4bb7      	ldr	r3, [pc, #732]	; (8001c88 <Trajectory_Generation+0x2f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b6:	4bb5      	ldr	r3, [pc, #724]	; (8001c8c <Trajectory_Generation+0x2f8>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
			Position_Now_Rad  = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //radian
 80019bc:	4bb3      	ldr	r3, [pc, #716]	; (8001c8c <Trajectory_Generation+0x2f8>)
 80019be:	edd3 7a00 	vldr	s15, [r3]
 80019c2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80019c6:	4bb2      	ldr	r3, [pc, #712]	; (8001c90 <Trajectory_Generation+0x2fc>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019d0:	4bb0      	ldr	r3, [pc, #704]	; (8001c94 <Trajectory_Generation+0x300>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e0:	4bad      	ldr	r3, [pc, #692]	; (8001c98 <Trajectory_Generation+0x304>)
 80019e2:	edc3 7a00 	vstr	s15, [r3]
 80019e6:	e003      	b.n	80019f0 <Trajectory_Generation+0x5c>

	}
	else
	{
		Position_Now_Rad = Position_Kalman;
 80019e8:	4bac      	ldr	r3, [pc, #688]	; (8001c9c <Trajectory_Generation+0x308>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <Trajectory_Generation+0x304>)
 80019ee:	601a      	str	r2, [r3, #0]
	}

	if (Trajectory_Flag == 0)
 80019f0:	4bab      	ldr	r3, [pc, #684]	; (8001ca0 <Trajectory_Generation+0x30c>)
 80019f2:	881b      	ldrh	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d10d      	bne.n	8001a14 <Trajectory_Generation+0x80>
	{
		Time_Start = micros();
 80019f8:	f000 fd78 	bl	80024ec <micros>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	49a8      	ldr	r1, [pc, #672]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001a02:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Now_Rad;
 8001a06:	4ba4      	ldr	r3, [pc, #656]	; (8001c98 <Trajectory_Generation+0x304>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	4ba7      	ldr	r3, [pc, #668]	; (8001ca8 <Trajectory_Generation+0x314>)
 8001a0c:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 8001a0e:	4aa4      	ldr	r2, [pc, #656]	; (8001ca0 <Trajectory_Generation+0x30c>)
 8001a10:	2301      	movs	r3, #1
 8001a12:	8013      	strh	r3, [r2, #0]
	}
	Time_Trajectory_Stamp = micros();
 8001a14:	f000 fd6a 	bl	80024ec <micros>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	49a3      	ldr	r1, [pc, #652]	; (8001cac <Trajectory_Generation+0x318>)
 8001a1e:	e9c1 2300 	strd	r2, r3, [r1]
	Distance_Traveled = Position_Now_Rad-Position_Start;
 8001a22:	4b9d      	ldr	r3, [pc, #628]	; (8001c98 <Trajectory_Generation+0x304>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	4b9f      	ldr	r3, [pc, #636]	; (8001ca8 <Trajectory_Generation+0x314>)
 8001a2a:	edd3 7a00 	vldr	s15, [r3]
 8001a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a32:	4b9f      	ldr	r3, [pc, #636]	; (8001cb0 <Trajectory_Generation+0x31c>)
 8001a34:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Length == 1)
 8001a38:	4b9e      	ldr	r3, [pc, #632]	; (8001cb4 <Trajectory_Generation+0x320>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	f040 8149 	bne.w	8001cd4 <Trajectory_Generation+0x340>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001a42:	4b9a      	ldr	r3, [pc, #616]	; (8001cac <Trajectory_Generation+0x318>)
 8001a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a48:	4b96      	ldr	r3, [pc, #600]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	1a84      	subs	r4, r0, r2
 8001a50:	653c      	str	r4, [r7, #80]	; 0x50
 8001a52:	eb61 0303 	sbc.w	r3, r1, r3
 8001a56:	657b      	str	r3, [r7, #84]	; 0x54
 8001a58:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a5c:	f7fe fc84 	bl	8000368 <__aeabi_ul2f>
 8001a60:	ee07 0a10 	vmov	s14, r0
 8001a64:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	d825      	bhi.n	8001ac0 <Trajectory_Generation+0x12c>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001a74:	4b8d      	ldr	r3, [pc, #564]	; (8001cac <Trajectory_Generation+0x318>)
 8001a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a7a:	4b8a      	ldr	r3, [pc, #552]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	1a84      	subs	r4, r0, r2
 8001a82:	64bc      	str	r4, [r7, #72]	; 0x48
 8001a84:	eb61 0303 	sbc.w	r3, r1, r3
 8001a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001a8e:	f7fe fc6b 	bl	8000368 <__aeabi_ul2f>
 8001a92:	ee06 0a90 	vmov	s13, r0
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001a98:	edd3 7a00 	vldr	s15, [r3]
 8001a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001aa0:	4b86      	ldr	r3, [pc, #536]	; (8001cbc <Trajectory_Generation+0x328>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <Trajectory_Generation+0x32c>)
 8001aac:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 8001ab0:	4b7b      	ldr	r3, [pc, #492]	; (8001ca0 <Trajectory_Generation+0x30c>)
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	801a      	strh	r2, [r3, #0]
			P1 = Distance_Traveled;
 8001ab6:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <Trajectory_Generation+0x31c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a82      	ldr	r2, [pc, #520]	; (8001cc4 <Trajectory_Generation+0x330>)
 8001abc:	6013      	str	r3, [r2, #0]
			Trajectory_Flag = 4;
		}
	}


}
 8001abe:	e1ca      	b.n	8001e56 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Blend_Micro) )
 8001ac0:	4b7a      	ldr	r3, [pc, #488]	; (8001cac <Trajectory_Generation+0x318>)
 8001ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ac6:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	1a84      	subs	r4, r0, r2
 8001ace:	643c      	str	r4, [r7, #64]	; 0x40
 8001ad0:	eb61 0303 	sbc.w	r3, r1, r3
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
 8001ad6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ada:	f7fe fc45 	bl	8000368 <__aeabi_ul2f>
 8001ade:	ee07 0a10 	vmov	s14, r0
 8001ae2:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd2d      	ble.n	8001b4e <Trajectory_Generation+0x1ba>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 8001af2:	4b6e      	ldr	r3, [pc, #440]	; (8001cac <Trajectory_Generation+0x318>)
 8001af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af8:	4b6a      	ldr	r3, [pc, #424]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	1a84      	subs	r4, r0, r2
 8001b00:	63bc      	str	r4, [r7, #56]	; 0x38
 8001b02:	eb61 0303 	sbc.w	r3, r1, r3
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b08:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001b0c:	f7fe fc2c 	bl	8000368 <__aeabi_ul2f>
 8001b10:	ee06 0a90 	vmov	s13, r0
 8001b14:	4b6c      	ldr	r3, [pc, #432]	; (8001cc8 <Trajectory_Generation+0x334>)
 8001b16:	ed93 7a00 	vldr	s14, [r3]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001b1c:	edd3 7a00 	vldr	s15, [r3]
 8001b20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b24:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	d50f      	bpl.n	8001b4e <Trajectory_Generation+0x1ba>
			Velocity_Want_RPM = Velocity_Max_RPM;
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <Trajectory_Generation+0x328>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a63      	ldr	r2, [pc, #396]	; (8001cc0 <Trajectory_Generation+0x32c>)
 8001b34:	6013      	str	r3, [r2, #0]
			P2 = Distance_Traveled-P1;
 8001b36:	4b5e      	ldr	r3, [pc, #376]	; (8001cb0 <Trajectory_Generation+0x31c>)
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <Trajectory_Generation+0x330>)
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b46:	4b61      	ldr	r3, [pc, #388]	; (8001ccc <Trajectory_Generation+0x338>)
 8001b48:	edc3 7a00 	vstr	s15, [r3]
 8001b4c:	e183      	b.n	8001e56 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 8001b4e:	4b57      	ldr	r3, [pc, #348]	; (8001cac <Trajectory_Generation+0x318>)
 8001b50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	1a84      	subs	r4, r0, r2
 8001b5c:	633c      	str	r4, [r7, #48]	; 0x30
 8001b5e:	eb61 0303 	sbc.w	r3, r1, r3
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
 8001b64:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b68:	f7fe fbfe 	bl	8000368 <__aeabi_ul2f>
 8001b6c:	ee06 0a90 	vmov	s13, r0
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <Trajectory_Generation+0x334>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b80:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	db5a      	blt.n	8001c40 <Trajectory_Generation+0x2ac>
				&& (Time_Trajectory_Stamp-Time_Start <= Time_All_Micro) )
 8001b8a:	4b48      	ldr	r3, [pc, #288]	; (8001cac <Trajectory_Generation+0x318>)
 8001b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b90:	4b44      	ldr	r3, [pc, #272]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	1a84      	subs	r4, r0, r2
 8001b98:	62bc      	str	r4, [r7, #40]	; 0x28
 8001b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001ba4:	f7fe fbe0 	bl	8000368 <__aeabi_ul2f>
 8001ba8:	ee07 0a10 	vmov	s14, r0
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <Trajectory_Generation+0x334>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	d841      	bhi.n	8001c40 <Trajectory_Generation+0x2ac>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 8001bbc:	4b3f      	ldr	r3, [pc, #252]	; (8001cbc <Trajectory_Generation+0x328>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	eeb1 8a67 	vneg.f32	s16, s15
 8001bc6:	4b39      	ldr	r3, [pc, #228]	; (8001cac <Trajectory_Generation+0x318>)
 8001bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd2:	1a84      	subs	r4, r0, r2
 8001bd4:	623c      	str	r4, [r7, #32]
 8001bd6:	eb61 0303 	sbc.w	r3, r1, r3
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
 8001bdc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001be0:	f7fe fbc2 	bl	8000368 <__aeabi_ul2f>
 8001be4:	ee06 0a90 	vmov	s13, r0
 8001be8:	4b37      	ldr	r3, [pc, #220]	; (8001cc8 <Trajectory_Generation+0x334>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001bf0:	edd3 7a00 	vldr	s15, [r3]
 8001bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <Trajectory_Generation+0x324>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c0e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <Trajectory_Generation+0x32c>)
 8001c14:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <Trajectory_Generation+0x30c>)
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	801a      	strh	r2, [r3, #0]
			P3 = Distance_Traveled-P2-P1;
 8001c1e:	4b24      	ldr	r3, [pc, #144]	; (8001cb0 <Trajectory_Generation+0x31c>)
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <Trajectory_Generation+0x338>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <Trajectory_Generation+0x330>)
 8001c30:	edd3 7a00 	vldr	s15, [r3]
 8001c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c38:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <Trajectory_Generation+0x33c>)
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
 8001c3e:	e10a      	b.n	8001e56 <Trajectory_Generation+0x4c2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <Trajectory_Generation+0x318>)
 8001c42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <Trajectory_Generation+0x310>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	1a84      	subs	r4, r0, r2
 8001c4e:	61bc      	str	r4, [r7, #24]
 8001c50:	eb61 0303 	sbc.w	r3, r1, r3
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5a:	f7fe fb85 	bl	8000368 <__aeabi_ul2f>
 8001c5e:	ee07 0a10 	vmov	s14, r0
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <Trajectory_Generation+0x334>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	da00      	bge.n	8001c74 <Trajectory_Generation+0x2e0>
}
 8001c72:	e0f0      	b.n	8001e56 <Trajectory_Generation+0x4c2>
			Velocity_Want_RPM = 0;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <Trajectory_Generation+0x32c>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <Trajectory_Generation+0x30c>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	801a      	strh	r2, [r3, #0]
}
 8001c82:	e0e8      	b.n	8001e56 <Trajectory_Generation+0x4c2>
 8001c84:	20000000 	.word	0x20000000
 8001c88:	2000037c 	.word	0x2000037c
 8001c8c:	20000100 	.word	0x20000100
 8001c90:	20000008 	.word	0x20000008
 8001c94:	20000002 	.word	0x20000002
 8001c98:	20000134 	.word	0x20000134
 8001c9c:	20000168 	.word	0x20000168
 8001ca0:	2000015c 	.word	0x2000015c
 8001ca4:	20000148 	.word	0x20000148
 8001ca8:	20000130 	.word	0x20000130
 8001cac:	200000d0 	.word	0x200000d0
 8001cb0:	2000018c 	.word	0x2000018c
 8001cb4:	200000d8 	.word	0x200000d8
 8001cb8:	20000150 	.word	0x20000150
 8001cbc:	20000014 	.word	0x20000014
 8001cc0:	200000e4 	.word	0x200000e4
 8001cc4:	20000180 	.word	0x20000180
 8001cc8:	20000154 	.word	0x20000154
 8001ccc:	20000184 	.word	0x20000184
 8001cd0:	20000188 	.word	0x20000188
	else if (Distance_Length == 0)
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <Trajectory_Generation+0x4d0>)
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 80bc 	bne.w	8001e56 <Trajectory_Generation+0x4c2>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cea:	1a84      	subs	r4, r0, r2
 8001cec:	eb61 0503 	sbc.w	r5, r1, r3
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	4629      	mov	r1, r5
 8001cf4:	f7fe fb38 	bl	8000368 <__aeabi_ul2f>
 8001cf8:	ee07 0a10 	vmov	s14, r0
 8001cfc:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	d821      	bhi.n	8001d50 <Trajectory_Generation+0x3bc>
			Velocity_Want_RPM = Velocity_Achieve_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001d0c:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d12:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	1a84      	subs	r4, r0, r2
 8001d1a:	613c      	str	r4, [r7, #16]
 8001d1c:	eb61 0303 	sbc.w	r3, r1, r3
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d26:	f7fe fb1f 	bl	8000368 <__aeabi_ul2f>
 8001d2a:	ee06 0a90 	vmov	s13, r0
 8001d2e:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001d30:	edd3 7a00 	vldr	s15, [r3]
 8001d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d38:	4b4e      	ldr	r3, [pc, #312]	; (8001e74 <Trajectory_Generation+0x4e0>)
 8001d3a:	edd3 7a00 	vldr	s15, [r3]
 8001d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d42:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <Trajectory_Generation+0x4e4>)
 8001d44:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 8001d48:	4b4c      	ldr	r3, [pc, #304]	; (8001e7c <Trajectory_Generation+0x4e8>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	801a      	strh	r2, [r3, #0]
}
 8001d4e:	e082      	b.n	8001e56 <Trajectory_Generation+0x4c2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 8001d50:	4b45      	ldr	r3, [pc, #276]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d56:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	1a84      	subs	r4, r0, r2
 8001d5e:	60bc      	str	r4, [r7, #8]
 8001d60:	eb61 0303 	sbc.w	r3, r1, r3
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d6a:	f7fe fafd 	bl	8000368 <__aeabi_ul2f>
 8001d6e:	ee07 0a10 	vmov	s14, r0
 8001d72:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d80:	db46      	blt.n	8001e10 <Trajectory_Generation+0x47c>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 8001d82:	4b39      	ldr	r3, [pc, #228]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001d84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	1a84      	subs	r4, r0, r2
 8001d90:	603c      	str	r4, [r7, #0]
 8001d92:	eb61 0303 	sbc.w	r3, r1, r3
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9c:	f7fe fae4 	bl	8000368 <__aeabi_ul2f>
 8001da0:	ee07 0a10 	vmov	s14, r0
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db6:	d52b      	bpl.n	8001e10 <Trajectory_Generation+0x47c>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <Trajectory_Generation+0x4e0>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	eeb1 8a67 	vneg.f32	s16, s15
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	ebb0 0a02 	subs.w	sl, r0, r2
 8001dd2:	eb61 0b03 	sbc.w	fp, r1, r3
 8001dd6:	4650      	mov	r0, sl
 8001dd8:	4659      	mov	r1, fp
 8001dda:	f7fe fac5 	bl	8000368 <__aeabi_ul2f>
 8001dde:	ee07 0a10 	vmov	s14, r0
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dec:	4b20      	ldr	r3, [pc, #128]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001dfe:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <Trajectory_Generation+0x4e4>)
 8001e04:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <Trajectory_Generation+0x4e8>)
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e022      	b.n	8001e56 <Trajectory_Generation+0x4c2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <Trajectory_Generation+0x4d4>)
 8001e12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <Trajectory_Generation+0x4d8>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	ebb0 0802 	subs.w	r8, r0, r2
 8001e20:	eb61 0903 	sbc.w	r9, r1, r3
 8001e24:	4640      	mov	r0, r8
 8001e26:	4649      	mov	r1, r9
 8001e28:	f7fe fa9e 	bl	8000368 <__aeabi_ul2f>
 8001e2c:	ee07 0a10 	vmov	s14, r0
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <Trajectory_Generation+0x4dc>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	da00      	bge.n	8001e46 <Trajectory_Generation+0x4b2>
}
 8001e44:	e007      	b.n	8001e56 <Trajectory_Generation+0x4c2>
			Velocity_Want_RPM = 0;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <Trajectory_Generation+0x4e4>)
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <Trajectory_Generation+0x4e8>)
 8001e50:	2204      	movs	r2, #4
 8001e52:	801a      	strh	r2, [r3, #0]
}
 8001e54:	e7ff      	b.n	8001e56 <Trajectory_Generation+0x4c2>
 8001e56:	bf00      	nop
 8001e58:	3758      	adds	r7, #88	; 0x58
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	ecbd 8b02 	vpop	{d8}
 8001e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e64:	200000d8 	.word	0x200000d8
 8001e68:	200000d0 	.word	0x200000d0
 8001e6c:	20000148 	.word	0x20000148
 8001e70:	20000150 	.word	0x20000150
 8001e74:	20000118 	.word	0x20000118
 8001e78:	200000e4 	.word	0x200000e4
 8001e7c:	2000015c 	.word	0x2000015c

08001e80 <UARTInit>:
void UARTInit(UARTStucrture *uart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <UARTInit+0x4c>)
 8001e8a:	88db      	ldrh	r3, [r3, #6]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f004 fbac 	bl	80065ec <calloc>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <UARTInit+0x4c>)
 8001e9e:	889b      	ldrh	r3, [r3, #4]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	2001      	movs	r0, #1
 8001ea4:	f004 fba2 	bl	80065ec <calloc>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	81da      	strh	r2, [r3, #14]

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000190 	.word	0x20000190

08001ed0 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6919      	ldr	r1, [r3, #16]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	88db      	ldrh	r3, [r3, #6]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	f003 fcfd 	bl	80058e4 <HAL_UART_Receive_DMA>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	88db      	ldrh	r3, [r3, #6]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	1ad3      	subs	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001f18:	b590      	push	{r4, r7, lr}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8001f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f24:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	8a9b      	ldrh	r3, [r3, #20]
 8001f2a:	461c      	mov	r4, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe0 	bl	8001ef2 <UARTGetRxHead>
 8001f32:	4603      	mov	r3, r0
 8001f34:	429c      	cmp	r4, r3
 8001f36:	d013      	beq.n	8001f60 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	8a92      	ldrh	r2, [r2, #20]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	8a9b      	ldrh	r3, [r3, #20]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	88d2      	ldrh	r2, [r2, #6]
 8001f50:	fb93 f1f2 	sdiv	r1, r3, r2
 8001f54:	fb02 f201 	mul.w	r2, r2, r1
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8001f60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}

08001f6c <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d13d      	bne.n	8001ffe <UARTTxDumpBuffer+0x92>
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <UARTTxDumpBuffer+0x9c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d139      	bne.n	8001ffe <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <UARTTxDumpBuffer+0x9c>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	89da      	ldrh	r2, [r3, #14]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	899b      	ldrh	r3, [r3, #12]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d02d      	beq.n	8001ff8 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	89da      	ldrh	r2, [r3, #14]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d906      	bls.n	8001fb6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	89da      	ldrh	r2, [r3, #14]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	e005      	b.n	8001fc2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	889a      	ldrh	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	8992      	ldrh	r2, [r2, #12]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	89fa      	ldrh	r2, [r7, #14]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f003 fc19 	bl	800580c <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	899b      	ldrh	r3, [r3, #12]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	8892      	ldrh	r2, [r2, #4]
 8001fe8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001fec:	fb02 f201 	mul.w	r2, r2, r1
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	; (8002008 <UARTTxDumpBuffer+0x9c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
	}
}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200001bc 	.word	0x200001bc

0800200c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	889b      	ldrh	r3, [r3, #4]
 800201e:	88fa      	ldrh	r2, [r7, #6]
 8002020:	4293      	cmp	r3, r2
 8002022:	bf28      	it	cs
 8002024:	4613      	movcs	r3, r2
 8002026:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002028:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	4619      	mov	r1, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	89db      	ldrh	r3, [r3, #14]
 8002034:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8002036:	4293      	cmp	r3, r2
 8002038:	bfa8      	it	ge
 800203a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800203c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	89d2      	ldrh	r2, [r2, #14]
 8002046:	4413      	add	r3, r2
 8002048:	8aba      	ldrh	r2, [r7, #20]
 800204a:	68b9      	ldr	r1, [r7, #8]
 800204c:	4618      	mov	r0, r3
 800204e:	f004 faff 	bl	8006650 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	89db      	ldrh	r3, [r3, #14]
 8002056:	461a      	mov	r2, r3
 8002058:	8afb      	ldrh	r3, [r7, #22]
 800205a:	4413      	add	r3, r2
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	8892      	ldrh	r2, [r2, #4]
 8002060:	fb93 f1f2 	sdiv	r1, r3, r2
 8002064:	fb02 f201 	mul.w	r2, r2, r1
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8002070:	8afa      	ldrh	r2, [r7, #22]
 8002072:	8abb      	ldrh	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	d00a      	beq.n	800208e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	8abb      	ldrh	r3, [r7, #20]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8002082:	8afa      	ldrh	r2, [r7, #22]
 8002084:	8abb      	ldrh	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8002088:	461a      	mov	r2, r3
 800208a:	f004 fae1 	bl	8006650 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff ff6c 	bl	8001f6c <UARTTxDumpBuffer>

}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	807b      	strh	r3, [r7, #2]

	switch (State)
 80020a8:	4baa      	ldr	r3, [pc, #680]	; (8002354 <UART_Protocol+0x2b8>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	f200 817a 	bhi.w	80023a6 <UART_Protocol+0x30a>
 80020b2:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <UART_Protocol+0x1c>)
 80020b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b8:	080020c9 	.word	0x080020c9
 80020bc:	0800220f 	.word	0x0800220f
 80020c0:	0800221f 	.word	0x0800221f
 80020c4:	08002293 	.word	0x08002293
	{
	case Start_Mode:
		Mode = dataIn;
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	b2da      	uxtb	r2, r3
 80020cc:	4ba2      	ldr	r3, [pc, #648]	; (8002358 <UART_Protocol+0x2bc>)
 80020ce:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 80020d0:	4ba1      	ldr	r3, [pc, #644]	; (8002358 <UART_Protocol+0x2bc>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	3b91      	subs	r3, #145	; 0x91
 80020d6:	2b0d      	cmp	r3, #13
 80020d8:	f200 8082 	bhi.w	80021e0 <UART_Protocol+0x144>
 80020dc:	a201      	add	r2, pc, #4	; (adr r2, 80020e4 <UART_Protocol+0x48>)
 80020de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e2:	bf00      	nop
 80020e4:	0800211d 	.word	0x0800211d
 80020e8:	0800212b 	.word	0x0800212b
 80020ec:	08002139 	.word	0x08002139
 80020f0:	08002147 	.word	0x08002147
 80020f4:	08002155 	.word	0x08002155
 80020f8:	08002163 	.word	0x08002163
 80020fc:	08002171 	.word	0x08002171
 8002100:	0800217f 	.word	0x0800217f
 8002104:	0800218d 	.word	0x0800218d
 8002108:	0800219b 	.word	0x0800219b
 800210c:	080021a9 	.word	0x080021a9
 8002110:	080021b7 	.word	0x080021b7
 8002114:	080021c5 	.word	0x080021c5
 8002118:	080021d3 	.word	0x080021d3
		{
		case Test_Command:
			Frame = 2;
 800211c:	4b8f      	ldr	r3, [pc, #572]	; (800235c <UART_Protocol+0x2c0>)
 800211e:	2202      	movs	r2, #2
 8002120:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002122:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <UART_Protocol+0x2b8>)
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]
			break;
 8002128:	e070      	b.n	800220c <UART_Protocol+0x170>
		case Connect_MCU:
			Frame = 1;
 800212a:	4b8c      	ldr	r3, [pc, #560]	; (800235c <UART_Protocol+0x2c0>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <UART_Protocol+0x2b8>)
 8002132:	2203      	movs	r2, #3
 8002134:	701a      	strb	r2, [r3, #0]
			break;
 8002136:	e069      	b.n	800220c <UART_Protocol+0x170>
		case Disconnect_MCU:
			Frame = 1;
 8002138:	4b88      	ldr	r3, [pc, #544]	; (800235c <UART_Protocol+0x2c0>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800213e:	4b85      	ldr	r3, [pc, #532]	; (8002354 <UART_Protocol+0x2b8>)
 8002140:	2203      	movs	r2, #3
 8002142:	701a      	strb	r2, [r3, #0]
			break;
 8002144:	e062      	b.n	800220c <UART_Protocol+0x170>
		case Velocity_Set:
			Frame = 2;
 8002146:	4b85      	ldr	r3, [pc, #532]	; (800235c <UART_Protocol+0x2c0>)
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <UART_Protocol+0x2b8>)
 800214e:	2202      	movs	r2, #2
 8002150:	701a      	strb	r2, [r3, #0]
			break;
 8002152:	e05b      	b.n	800220c <UART_Protocol+0x170>
		case Position_Set:
			Frame = 2;
 8002154:	4b81      	ldr	r3, [pc, #516]	; (800235c <UART_Protocol+0x2c0>)
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 800215a:	4b7e      	ldr	r3, [pc, #504]	; (8002354 <UART_Protocol+0x2b8>)
 800215c:	2202      	movs	r2, #2
 800215e:	701a      	strb	r2, [r3, #0]
			break;
 8002160:	e054      	b.n	800220c <UART_Protocol+0x170>
		case Goal_1_Set:
			Frame = 2;
 8002162:	4b7e      	ldr	r3, [pc, #504]	; (800235c <UART_Protocol+0x2c0>)
 8002164:	2202      	movs	r2, #2
 8002166:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8002168:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <UART_Protocol+0x2b8>)
 800216a:	2202      	movs	r2, #2
 800216c:	701a      	strb	r2, [r3, #0]
			break;
 800216e:	e04d      	b.n	800220c <UART_Protocol+0x170>
		case Goal_N_Set:
			Frame = 3;
 8002170:	4b7a      	ldr	r3, [pc, #488]	; (800235c <UART_Protocol+0x2c0>)
 8002172:	2203      	movs	r2, #3
 8002174:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 8002176:	4b77      	ldr	r3, [pc, #476]	; (8002354 <UART_Protocol+0x2b8>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
			break;
 800217c:	e046      	b.n	800220c <UART_Protocol+0x170>
		case Go_to_Goal:
			Frame = 1;
 800217e:	4b77      	ldr	r3, [pc, #476]	; (800235c <UART_Protocol+0x2c0>)
 8002180:	2201      	movs	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002184:	4b73      	ldr	r3, [pc, #460]	; (8002354 <UART_Protocol+0x2b8>)
 8002186:	2203      	movs	r2, #3
 8002188:	701a      	strb	r2, [r3, #0]
			break;
 800218a:	e03f      	b.n	800220c <UART_Protocol+0x170>
		case Station_Request:
			Frame = 1;
 800218c:	4b73      	ldr	r3, [pc, #460]	; (800235c <UART_Protocol+0x2c0>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8002192:	4b70      	ldr	r3, [pc, #448]	; (8002354 <UART_Protocol+0x2b8>)
 8002194:	2203      	movs	r2, #3
 8002196:	701a      	strb	r2, [r3, #0]
			break;
 8002198:	e038      	b.n	800220c <UART_Protocol+0x170>
		case Position_Request:
			Frame = 1;
 800219a:	4b70      	ldr	r3, [pc, #448]	; (800235c <UART_Protocol+0x2c0>)
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80021a0:	4b6c      	ldr	r3, [pc, #432]	; (8002354 <UART_Protocol+0x2b8>)
 80021a2:	2203      	movs	r2, #3
 80021a4:	701a      	strb	r2, [r3, #0]
			break;
 80021a6:	e031      	b.n	800220c <UART_Protocol+0x170>
		case Velocity_Request:
			Frame = 1;
 80021a8:	4b6c      	ldr	r3, [pc, #432]	; (800235c <UART_Protocol+0x2c0>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80021ae:	4b69      	ldr	r3, [pc, #420]	; (8002354 <UART_Protocol+0x2b8>)
 80021b0:	2203      	movs	r2, #3
 80021b2:	701a      	strb	r2, [r3, #0]
			break;
 80021b4:	e02a      	b.n	800220c <UART_Protocol+0x170>
		case Gripper_On:
			Frame = 1;
 80021b6:	4b69      	ldr	r3, [pc, #420]	; (800235c <UART_Protocol+0x2c0>)
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80021bc:	4b65      	ldr	r3, [pc, #404]	; (8002354 <UART_Protocol+0x2b8>)
 80021be:	2203      	movs	r2, #3
 80021c0:	701a      	strb	r2, [r3, #0]
			break;
 80021c2:	e023      	b.n	800220c <UART_Protocol+0x170>
		case Gripper_Off:
			Frame = 1;
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <UART_Protocol+0x2c0>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80021ca:	4b62      	ldr	r3, [pc, #392]	; (8002354 <UART_Protocol+0x2b8>)
 80021cc:	2203      	movs	r2, #3
 80021ce:	701a      	strb	r2, [r3, #0]
			break;
 80021d0:	e01c      	b.n	800220c <UART_Protocol+0x170>
		case Home_Set:
			Frame = 1;
 80021d2:	4b62      	ldr	r3, [pc, #392]	; (800235c <UART_Protocol+0x2c0>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <UART_Protocol+0x2b8>)
 80021da:	2203      	movs	r2, #3
 80021dc:	701a      	strb	r2, [r3, #0]
			break;
 80021de:	e015      	b.n	800220c <UART_Protocol+0x170>
		default:
			State = Start_Mode;
 80021e0:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <UART_Protocol+0x2b8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 80021e6:	4b5c      	ldr	r3, [pc, #368]	; (8002358 <UART_Protocol+0x2bc>)
 80021e8:	2290      	movs	r2, #144	; 0x90
 80021ea:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 80021ec:	4b5b      	ldr	r3, [pc, #364]	; (800235c <UART_Protocol+0x2c0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			Data = 0;
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <UART_Protocol+0x2c4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 80021f8:	4b5a      	ldr	r3, [pc, #360]	; (8002364 <UART_Protocol+0x2c8>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
			N = 0;
 80021fe:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <UART_Protocol+0x2cc>)
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
			len = 0;
 8002204:	4b59      	ldr	r3, [pc, #356]	; (800236c <UART_Protocol+0x2d0>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
			break;
 800220a:	bf00      	nop
		break;
		}
		break;
 800220c:	e0cb      	b.n	80023a6 <UART_Protocol+0x30a>
	case N_Station:
		N = dataIn;
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b55      	ldr	r3, [pc, #340]	; (8002368 <UART_Protocol+0x2cc>)
 8002214:	701a      	strb	r2, [r3, #0]
		State = Data_Frame;
 8002216:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <UART_Protocol+0x2b8>)
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
		break;
 800221c:	e0c3      	b.n	80023a6 <UART_Protocol+0x30a>
	case Data_Frame:
		Data = dataIn;
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <UART_Protocol+0x2c4>)
 8002224:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8002226:	4b4c      	ldr	r3, [pc, #304]	; (8002358 <UART_Protocol+0x2bc>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3b91      	subs	r3, #145	; 0x91
 800222c:	2b06      	cmp	r3, #6
 800222e:	f200 80b9 	bhi.w	80023a4 <UART_Protocol+0x308>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <UART_Protocol+0x19c>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002255 	.word	0x08002255
 800223c:	080023a5 	.word	0x080023a5
 8002240:	080023a5 	.word	0x080023a5
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002265 	.word	0x08002265
 800224c:	0800226d 	.word	0x0800226d
 8002250:	08002275 	.word	0x08002275
		{
		case Test_Command:
			State = Check_Sum;
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <UART_Protocol+0x2b8>)
 8002256:	2203      	movs	r2, #3
 8002258:	701a      	strb	r2, [r3, #0]
			break;
 800225a:	e019      	b.n	8002290 <UART_Protocol+0x1f4>
		case Velocity_Set:
			State = Check_Sum;
 800225c:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <UART_Protocol+0x2b8>)
 800225e:	2203      	movs	r2, #3
 8002260:	701a      	strb	r2, [r3, #0]
			break;
 8002262:	e015      	b.n	8002290 <UART_Protocol+0x1f4>
		case Position_Set:
			State = Check_Sum;
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <UART_Protocol+0x2b8>)
 8002266:	2203      	movs	r2, #3
 8002268:	701a      	strb	r2, [r3, #0]
			break;
 800226a:	e011      	b.n	8002290 <UART_Protocol+0x1f4>
		case Goal_1_Set:
			State = Check_Sum;
 800226c:	4b39      	ldr	r3, [pc, #228]	; (8002354 <UART_Protocol+0x2b8>)
 800226e:	2203      	movs	r2, #3
 8002270:	701a      	strb	r2, [r3, #0]
			break;
 8002272:	e00d      	b.n	8002290 <UART_Protocol+0x1f4>
		case Goal_N_Set:
			N -= 1;
 8002274:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <UART_Protocol+0x2cc>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	3b01      	subs	r3, #1
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <UART_Protocol+0x2cc>)
 800227e:	701a      	strb	r2, [r3, #0]
			if (N == 0)
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <UART_Protocol+0x2cc>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d102      	bne.n	800228e <UART_Protocol+0x1f2>
			{
				State = Check_Sum;
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <UART_Protocol+0x2b8>)
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800228e:	bf00      	nop
		break;
		}

		break;
 8002290:	e088      	b.n	80023a4 <UART_Protocol+0x308>
	case Check_Sum:
		Sum = dataIn;
 8002292:	887b      	ldrh	r3, [r7, #2]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <UART_Protocol+0x2c8>)
 8002298:	701a      	strb	r2, [r3, #0]
		switch (Frame)
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <UART_Protocol+0x2c0>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d04c      	beq.n	800233c <UART_Protocol+0x2a0>
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	dc7a      	bgt.n	800239c <UART_Protocol+0x300>
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d002      	beq.n	80022b0 <UART_Protocol+0x214>
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d021      	beq.n	80022f2 <UART_Protocol+0x256>
 80022ae:	e075      	b.n	800239c <UART_Protocol+0x300>
		{
		case 1:
			if (Sum == (uint8_t)~Mode)
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <UART_Protocol+0x2bc>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <UART_Protocol+0x2c8>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d102      	bne.n	80022c6 <UART_Protocol+0x22a>
			{
				UART_Do_Command();
 80022c0:	f000 f884 	bl	80023cc <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 80022c4:	e06a      	b.n	800239c <UART_Protocol+0x300>
				State = Start_Mode;
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <UART_Protocol+0x2b8>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <UART_Protocol+0x2bc>)
 80022ce:	2290      	movs	r2, #144	; 0x90
 80022d0:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 80022d2:	4b22      	ldr	r3, [pc, #136]	; (800235c <UART_Protocol+0x2c0>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
				Data = 0;
 80022d8:	4b21      	ldr	r3, [pc, #132]	; (8002360 <UART_Protocol+0x2c4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <UART_Protocol+0x2c8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
				N = 0;
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <UART_Protocol+0x2cc>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
				len = 0;
 80022ea:	4b20      	ldr	r3, [pc, #128]	; (800236c <UART_Protocol+0x2d0>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
			break;
 80022f0:	e054      	b.n	800239c <UART_Protocol+0x300>
		case 2:
			if (Sum == (uint8_t)~(Mode+Data))
 80022f2:	4b19      	ldr	r3, [pc, #100]	; (8002358 <UART_Protocol+0x2bc>)
 80022f4:	781a      	ldrb	r2, [r3, #0]
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <UART_Protocol+0x2c4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b18      	ldr	r3, [pc, #96]	; (8002364 <UART_Protocol+0x2c8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d102      	bne.n	8002310 <UART_Protocol+0x274>
			{
				UART_Do_Command();
 800230a:	f000 f85f 	bl	80023cc <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 800230e:	e045      	b.n	800239c <UART_Protocol+0x300>
				State = Start_Mode;
 8002310:	4b10      	ldr	r3, [pc, #64]	; (8002354 <UART_Protocol+0x2b8>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <UART_Protocol+0x2bc>)
 8002318:	2290      	movs	r2, #144	; 0x90
 800231a:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <UART_Protocol+0x2c0>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <UART_Protocol+0x2c4>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <UART_Protocol+0x2c8>)
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
				N = 0;
 800232e:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <UART_Protocol+0x2cc>)
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
				len = 0;
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <UART_Protocol+0x2d0>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
			break;
 800233a:	e02f      	b.n	800239c <UART_Protocol+0x300>
		case 3:

			if (Sum == (uint8_t)~(Mode))
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <UART_Protocol+0x2bc>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	43db      	mvns	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <UART_Protocol+0x2c8>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d111      	bne.n	8002370 <UART_Protocol+0x2d4>
			{
				UART_Do_Command();
 800234c:	f000 f83e 	bl	80023cc <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8002350:	e023      	b.n	800239a <UART_Protocol+0x2fe>
 8002352:	bf00      	nop
 8002354:	200001a8 	.word	0x200001a8
 8002358:	20000020 	.word	0x20000020
 800235c:	200002cc 	.word	0x200002cc
 8002360:	20000378 	.word	0x20000378
 8002364:	200003c4 	.word	0x200003c4
 8002368:	200001cc 	.word	0x200001cc
 800236c:	20000454 	.word	0x20000454
				State = Start_Mode;
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <UART_Protocol+0x314>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <UART_Protocol+0x318>)
 8002378:	2290      	movs	r2, #144	; 0x90
 800237a:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <UART_Protocol+0x31c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <UART_Protocol+0x320>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <UART_Protocol+0x324>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
				N = 0;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <UART_Protocol+0x328>)
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
				len = 0;
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <UART_Protocol+0x32c>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
			break;
 800239a:	bf00      	nop
		break;
		}

		State = Start_Mode;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <UART_Protocol+0x314>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
		break;
 80023a2:	e000      	b.n	80023a6 <UART_Protocol+0x30a>
		break;
 80023a4:	bf00      	nop

	break;
	}

}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	200001a8 	.word	0x200001a8
 80023b4:	20000020 	.word	0x20000020
 80023b8:	200002cc 	.word	0x200002cc
 80023bc:	20000378 	.word	0x20000378
 80023c0:	200003c4 	.word	0x200003c4
 80023c4:	200001cc 	.word	0x200001cc
 80023c8:	20000454 	.word	0x20000454

080023cc <UART_Do_Command>:
void UART_Do_Command()
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
	if (Frame == 1)
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <UART_Do_Command+0xcc>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d113      	bne.n	8002402 <UART_Do_Command+0x36>
	{
		uint8_t Test[] = {0, 0};
 80023da:	2300      	movs	r3, #0
 80023dc:	80bb      	strh	r3, [r7, #4]
		Test[0] = Mode;
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <UART_Do_Command+0xd0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	713b      	strb	r3, [r7, #4]
		Test[1] = Sum;
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <UART_Do_Command+0xd4>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	717b      	strb	r3, [r7, #5]
		UARTTxWrite(&UART2, Test, len);
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <UART_Do_Command+0xd8>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	482c      	ldr	r0, [pc, #176]	; (80024a8 <UART_Do_Command+0xdc>)
 80023f6:	f7ff fe09 	bl	800200c <UARTTxWrite>
		len = 0;
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <UART_Do_Command+0xd8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e01f      	b.n	8002442 <UART_Do_Command+0x76>
	}
	else if (Frame == 2)
 8002402:	4b25      	ldr	r3, [pc, #148]	; (8002498 <UART_Do_Command+0xcc>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d11b      	bne.n	8002442 <UART_Do_Command+0x76>
	{
		uint8_t Test[] = {0, 0, 0};
 800240a:	4a28      	ldr	r2, [pc, #160]	; (80024ac <UART_Do_Command+0xe0>)
 800240c:	463b      	mov	r3, r7
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	4611      	mov	r1, r2
 8002412:	8019      	strh	r1, [r3, #0]
 8002414:	3302      	adds	r3, #2
 8002416:	0c12      	lsrs	r2, r2, #16
 8002418:	701a      	strb	r2, [r3, #0]
		Test[0] = Mode;
 800241a:	4b20      	ldr	r3, [pc, #128]	; (800249c <UART_Do_Command+0xd0>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	703b      	strb	r3, [r7, #0]
		Test[1] = Data;
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <UART_Do_Command+0xe4>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	707b      	strb	r3, [r7, #1]
		Test[2] = Sum;
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <UART_Do_Command+0xd4>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	70bb      	strb	r3, [r7, #2]
		UARTTxWrite(&UART2, Test, len);
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <UART_Do_Command+0xd8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	463b      	mov	r3, r7
 8002434:	4619      	mov	r1, r3
 8002436:	481c      	ldr	r0, [pc, #112]	; (80024a8 <UART_Do_Command+0xdc>)
 8002438:	f7ff fde8 	bl	800200c <UARTTxWrite>
		len = 0;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <UART_Do_Command+0xd8>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
	{


	}

	switch (Mode)
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <UART_Do_Command+0xd0>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	3b91      	subs	r3, #145	; 0x91
 8002448:	2b0d      	cmp	r3, #13
 800244a:	d820      	bhi.n	800248e <UART_Do_Command+0xc2>
 800244c:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <UART_Do_Command+0x88>)
 800244e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002452:	bf00      	nop
 8002454:	0800248d 	.word	0x0800248d
 8002458:	0800248d 	.word	0x0800248d
 800245c:	0800248d 	.word	0x0800248d
 8002460:	0800248d 	.word	0x0800248d
 8002464:	0800248d 	.word	0x0800248d
 8002468:	0800248d 	.word	0x0800248d
 800246c:	0800248d 	.word	0x0800248d
 8002470:	0800248d 	.word	0x0800248d
 8002474:	0800248d 	.word	0x0800248d
 8002478:	0800248d 	.word	0x0800248d
 800247c:	0800248d 	.word	0x0800248d
 8002480:	0800248d 	.word	0x0800248d
 8002484:	0800248d 	.word	0x0800248d
 8002488:	0800248d 	.word	0x0800248d
	{
	case Test_Command:
		break;
 800248c:	bf00      	nop
	}




}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200002cc 	.word	0x200002cc
 800249c:	20000020 	.word	0x20000020
 80024a0:	200003c4 	.word	0x200003c4
 80024a4:	20000454 	.word	0x20000454
 80024a8:	20000190 	.word	0x20000190
 80024ac:	08007078 	.word	0x08007078
 80024b0:	20000378 	.word	0x20000378

080024b4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b4b0      	push	{r4, r5, r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a09      	ldr	r2, [pc, #36]	; (80024e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d109      	bne.n	80024d8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f112 34ff 	adds.w	r4, r2, #4294967295
 80024ce:	f143 0500 	adc.w	r5, r3, #0
 80024d2:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80024d4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bcb0      	pop	{r4, r5, r7}
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	200003c8 	.word	0x200003c8
 80024e8:	200000b8 	.word	0x200000b8

080024ec <micros>:
uint64_t micros()
{
 80024ec:	b4b0      	push	{r4, r5, r7}
 80024ee:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <micros+0x2c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <micros+0x30>)
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	1884      	adds	r4, r0, r2
 8002504:	eb41 0503 	adc.w	r5, r1, r3
 8002508:	4622      	mov	r2, r4
 800250a:	462b      	mov	r3, r5
}
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bcb0      	pop	{r4, r5, r7}
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200003c8 	.word	0x200003c8
 800251c:	200000b8 	.word	0x200000b8

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	e7fe      	b.n	8002528 <Error_Handler+0x8>
	...

0800252c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
 8002536:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_MspInit+0x4c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253a:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_MspInit+0x4c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002540:	6453      	str	r3, [r2, #68]	; 0x44
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <HAL_MspInit+0x4c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	607b      	str	r3, [r7, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_MspInit+0x4c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <HAL_MspInit+0x4c>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_MspInit+0x4c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800256a:	2007      	movs	r0, #7
 800256c:	f000 fbf8 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40023800 	.word	0x40023800

0800257c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	605a      	str	r2, [r3, #4]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	60da      	str	r2, [r3, #12]
 8002592:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a19      	ldr	r2, [pc, #100]	; (8002600 <HAL_I2C_MspInit+0x84>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d12c      	bne.n	80025f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c4:	2301      	movs	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025cc:	2304      	movs	r3, #4
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	480c      	ldr	r0, [pc, #48]	; (8002608 <HAL_I2C_MspInit+0x8c>)
 80025d8:	f001 f806 	bl	80035e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a07      	ldr	r2, [pc, #28]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_I2C_MspInit+0x88>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025f8:	bf00      	nop
 80025fa:	3728      	adds	r7, #40	; 0x28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40005400 	.word	0x40005400
 8002604:	40023800 	.word	0x40023800
 8002608:	40020400 	.word	0x40020400

0800260c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08a      	sub	sp, #40	; 0x28
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 0314 	add.w	r3, r7, #20
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_TIM_Encoder_MspInit+0x84>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d12c      	bne.n	8002688 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a17      	ldr	r2, [pc, #92]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a10      	ldr	r2, [pc, #64]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_TIM_Encoder_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8002666:	f44f 7340 	mov.w	r3, #768	; 0x300
 800266a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266c:	2302      	movs	r3, #2
 800266e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002678:	2301      	movs	r3, #1
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002684:	f000 ffb0 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002688:	bf00      	nop
 800268a:	3728      	adds	r7, #40	; 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40010000 	.word	0x40010000
 8002694:	40023800 	.word	0x40023800
 8002698:	40020000 	.word	0x40020000

0800269c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d116      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026ca:	2200      	movs	r2, #0
 80026cc:	2100      	movs	r1, #0
 80026ce:	201c      	movs	r0, #28
 80026d0:	f000 fb51 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026d4:	201c      	movs	r0, #28
 80026d6:	f000 fb6a 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80026da:	e02e      	b.n	800273a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_TIM_Base_MspInit+0xac>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	4a15      	ldr	r2, [pc, #84]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6413      	str	r3, [r2, #64]	; 0x40
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	613b      	str	r3, [r7, #16]
 8002700:	693b      	ldr	r3, [r7, #16]
}
 8002702:	e01a      	b.n	800273a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a10      	ldr	r2, [pc, #64]	; (800274c <HAL_TIM_Base_MspInit+0xb0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d115      	bne.n	800273a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_TIM_Base_MspInit+0xa8>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	201e      	movs	r0, #30
 8002730:	f000 fb21 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002734:	201e      	movs	r0, #30
 8002736:	f000 fb3a 	bl	8002dae <HAL_NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40023800 	.word	0x40023800
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800

08002750 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <HAL_TIM_MspPostInit+0x68>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d11d      	bne.n	80027ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_TIM_MspPostInit+0x6c>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	4a10      	ldr	r2, [pc, #64]	; (80027bc <HAL_TIM_MspPostInit+0x6c>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	6313      	str	r3, [r2, #48]	; 0x30
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_TIM_MspPostInit+0x6c>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800278e:	2302      	movs	r3, #2
 8002790:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002792:	2302      	movs	r3, #2
 8002794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800279e:	2302      	movs	r3, #2
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a2:	f107 030c 	add.w	r3, r7, #12
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <HAL_TIM_MspPostInit+0x70>)
 80027aa:	f000 ff1d 	bl	80035e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40000400 	.word	0x40000400
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40020400 	.word	0x40020400

080027c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	; 0x28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a4c      	ldr	r2, [pc, #304]	; (8002914 <HAL_UART_MspInit+0x150>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 8091 	bne.w	800290a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	4b4a      	ldr	r3, [pc, #296]	; (8002918 <HAL_UART_MspInit+0x154>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a49      	ldr	r2, [pc, #292]	; (8002918 <HAL_UART_MspInit+0x154>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40
 80027f8:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_UART_MspInit+0x154>)
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_UART_MspInit+0x154>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_UART_MspInit+0x154>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <HAL_UART_MspInit+0x154>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002820:	230c      	movs	r3, #12
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282c:	2303      	movs	r3, #3
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002830:	2307      	movs	r3, #7
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4838      	ldr	r0, [pc, #224]	; (800291c <HAL_UART_MspInit+0x158>)
 800283c:	f000 fed4 	bl	80035e8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002840:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002842:	4a38      	ldr	r2, [pc, #224]	; (8002924 <HAL_UART_MspInit+0x160>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002848:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800284c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800284e:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002854:	4b32      	ldr	r3, [pc, #200]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_UART_MspInit+0x15c>)
 800285c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002860:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002864:	2200      	movs	r2, #0
 8002866:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_UART_MspInit+0x15c>)
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800286e:	4b2c      	ldr	r3, [pc, #176]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002870:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002874:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002876:	4b2a      	ldr	r3, [pc, #168]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800287c:	4b28      	ldr	r3, [pc, #160]	; (8002920 <HAL_UART_MspInit+0x15c>)
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002882:	4827      	ldr	r0, [pc, #156]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002884:	f000 faae 	bl	8002de4 <HAL_DMA_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800288e:	f7ff fe47 	bl	8002520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <HAL_UART_MspInit+0x15c>)
 8002896:	639a      	str	r2, [r3, #56]	; 0x38
 8002898:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_UART_MspInit+0x15c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800289e:	4b22      	ldr	r3, [pc, #136]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028a0:	4a22      	ldr	r2, [pc, #136]	; (800292c <HAL_UART_MspInit+0x168>)
 80028a2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028a4:	4b20      	ldr	r3, [pc, #128]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ac:	4b1e      	ldr	r3, [pc, #120]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028ae:	2240      	movs	r2, #64	; 0x40
 80028b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b2:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028be:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028da:	2200      	movs	r2, #0
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80028de:	4812      	ldr	r0, [pc, #72]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028e0:	f000 fa80 	bl	8002de4 <HAL_DMA_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80028ea:	f7ff fe19 	bl	8002520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
 80028f4:	4a0c      	ldr	r2, [pc, #48]	; (8002928 <HAL_UART_MspInit+0x164>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2026      	movs	r0, #38	; 0x26
 8002900:	f000 fa39 	bl	8002d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002904:	2026      	movs	r0, #38	; 0x26
 8002906:	f000 fa52 	bl	8002dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40004400 	.word	0x40004400
 8002918:	40023800 	.word	0x40023800
 800291c:	40020000 	.word	0x40020000
 8002920:	200001d0 	.word	0x200001d0
 8002924:	40026088 	.word	0x40026088
 8002928:	20000318 	.word	0x20000318
 800292c:	400260a0 	.word	0x400260a0

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <NMI_Handler+0x4>

08002936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler+0x4>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0x4>

08002948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler+0x4>

0800294e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297c:	f000 f900 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <DMA1_Stream5_IRQHandler+0x10>)
 800298a:	f000 fbc3 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200001d0 	.word	0x200001d0

08002998 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <DMA1_Stream6_IRQHandler+0x10>)
 800299e:	f000 fbb9 	bl	8003114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000318 	.word	0x20000318

080029ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029b0:	4802      	ldr	r0, [pc, #8]	; (80029bc <TIM2_IRQHandler+0x10>)
 80029b2:	f002 f8dd 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200003c8 	.word	0x200003c8

080029c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029c4:	4802      	ldr	r0, [pc, #8]	; (80029d0 <TIM4_IRQHandler+0x10>)
 80029c6:	f002 f8d3 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000230 	.word	0x20000230

080029d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <USART2_IRQHandler+0x10>)
 80029da:	f002 ffb3 	bl	8005944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000410 	.word	0x20000410

080029e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80029ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029f0:	f000 ff98 	bl	8003924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	; (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	; (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a28:	f003 fde8 	bl	80065fc <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	220c      	movs	r2, #12
 8002a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e009      	b.n	8002a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a38:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a05      	ldr	r2, [pc, #20]	; (8002a5c <_sbrk+0x64>)
 8002a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20020000 	.word	0x20020000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	200001c0 	.word	0x200001c0
 8002a60:	20000470 	.word	0x20000470

08002a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <SystemInit+0x20>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <SystemInit+0x20>)
 8002a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a8c:	480d      	ldr	r0, [pc, #52]	; (8002ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a8e:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a90:	4a0e      	ldr	r2, [pc, #56]	; (8002acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a94:	e002      	b.n	8002a9c <LoopCopyDataInit>

08002a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9a:	3304      	adds	r3, #4

08002a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa0:	d3f9      	bcc.n	8002a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa2:	4a0b      	ldr	r2, [pc, #44]	; (8002ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002aa4:	4c0b      	ldr	r4, [pc, #44]	; (8002ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aa8:	e001      	b.n	8002aae <LoopFillZerobss>

08002aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002aac:	3204      	adds	r2, #4

08002aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab0:	d3fb      	bcc.n	8002aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ab2:	f7ff ffd7 	bl	8002a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f003 fda7 	bl	8006608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7fd fe17 	bl	80006ec <main>
  bx  lr    
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac8:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002acc:	080070d0 	.word	0x080070d0
  ldr r2, =_sbss
 8002ad0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002ad4:	2000046c 	.word	0x2000046c

08002ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC_IRQHandler>
	...

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_Init+0x40>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <HAL_Init+0x40>)
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <HAL_Init+0x40>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 f92b 	bl	8002d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f000 f808 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7ff fd0c 	bl	800252c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f943 	bl	8002dca <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 f90b 	bl	8002d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	; (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000024 	.word	0x20000024
 8002b78:	2000002c 	.word	0x2000002c
 8002b7c:	20000028 	.word	0x20000028

08002b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <HAL_IncTick+0x20>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_IncTick+0x24>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	2000002c 	.word	0x2000002c
 8002ba4:	20000458 	.word	0x20000458

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_GetTick+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000458 	.word	0x20000458

08002bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf2:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	60d3      	str	r3, [r2, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <__NVIC_GetPriorityGrouping+0x18>)
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	f003 0307 	and.w	r3, r3, #7
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	db0b      	blt.n	8002c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	4907      	ldr	r1, [pc, #28]	; (8002c5c <__NVIC_EnableIRQ+0x38>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	2001      	movs	r0, #1
 8002c46:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3b01      	subs	r3, #1
 8002d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d2c:	d301      	bcc.n	8002d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00f      	b.n	8002d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <SysTick_Config+0x40>)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3a:	210f      	movs	r1, #15
 8002d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d40:	f7ff ff8e 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d44:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <SysTick_Config+0x40>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <SysTick_Config+0x40>)
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	e000e010 	.word	0xe000e010

08002d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff29 	bl	8002bc0 <__NVIC_SetPriorityGrouping>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	60b9      	str	r1, [r7, #8]
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff ff3e 	bl	8002c08 <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff8e 	bl	8002cb4 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5d 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff31 	bl	8002c24 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ffa2 	bl	8002d1c <SysTick_Config>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002df0:	f7ff feda 	bl	8002ba8 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e099      	b.n	8002f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e20:	e00f      	b.n	8002e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e22:	f7ff fec1 	bl	8002ba8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d908      	bls.n	8002e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e078      	b.n	8002f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e8      	bne.n	8002e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4b38      	ldr	r3, [pc, #224]	; (8002f3c <HAL_DMA_Init+0x158>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d107      	bne.n	8002eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0307 	bic.w	r3, r3, #7
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d117      	bne.n	8002f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fb01 	bl	80034f0 <DMA_CheckFifoParam>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d008      	beq.n	8002f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2240      	movs	r2, #64	; 0x40
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002f02:	2301      	movs	r3, #1
 8002f04:	e016      	b.n	8002f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fab8 	bl	8003484 <DMA_CalcBaseAndBitshift>
 8002f14:	4603      	mov	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	223f      	movs	r2, #63	; 0x3f
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	f010803f 	.word	0xf010803f

08002f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
 8002f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_DMA_Start_IT+0x26>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e040      	b.n	8002fe8 <HAL_DMA_Start_IT+0xa8>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d12f      	bne.n	8002fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa4a 	bl	8003428 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	223f      	movs	r2, #63	; 0x3f
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0216 	orr.w	r2, r2, #22
 8002fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e005      	b.n	8002fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ffe:	f7ff fdd3 	bl	8002ba8 <HAL_GetTick>
 8003002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2280      	movs	r2, #128	; 0x80
 8003014:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e052      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0216 	bic.w	r2, r2, #22
 8003030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695a      	ldr	r2, [r3, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HAL_DMA_Abort+0x62>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0208 	bic.w	r2, r2, #8
 8003060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0201 	bic.w	r2, r2, #1
 8003070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003072:	e013      	b.n	800309c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003074:	f7ff fd98 	bl	8002ba8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b05      	cmp	r3, #5
 8003080:	d90c      	bls.n	800309c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2220      	movs	r2, #32
 8003086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2203      	movs	r2, #3
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e015      	b.n	80030c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e4      	bne.n	8003074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	223f      	movs	r2, #63	; 0x3f
 80030b0:	409a      	lsls	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d004      	beq.n	80030ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2280      	movs	r2, #128	; 0x80
 80030e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00c      	b.n	8003108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2205      	movs	r2, #5
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0201 	bic.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003120:	4b92      	ldr	r3, [pc, #584]	; (800336c <HAL_DMA_IRQHandler+0x258>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a92      	ldr	r2, [pc, #584]	; (8003370 <HAL_DMA_IRQHandler+0x25c>)
 8003126:	fba2 2303 	umull	r2, r3, r2, r3
 800312a:	0a9b      	lsrs	r3, r3, #10
 800312c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	2208      	movs	r2, #8
 8003140:	409a      	lsls	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01a      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d013      	beq.n	8003180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0204 	bic.w	r2, r2, #4
 8003166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316c:	2208      	movs	r2, #8
 800316e:	409a      	lsls	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003184:	2201      	movs	r2, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	2201      	movs	r2, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	2204      	movs	r2, #4
 80031bc:	409a      	lsls	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d012      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00b      	beq.n	80031ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d8:	2204      	movs	r2, #4
 80031da:	409a      	lsls	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e4:	f043 0204 	orr.w	r2, r3, #4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	2210      	movs	r2, #16
 80031f2:	409a      	lsls	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d043      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d03c      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2210      	movs	r2, #16
 8003210:	409a      	lsls	r2, r3
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d018      	beq.n	8003256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d108      	bne.n	8003244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d024      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
 8003242:	e01f      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01b      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
 8003254:	e016      	b.n	8003284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d107      	bne.n	8003274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0208 	bic.w	r2, r2, #8
 8003272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2220      	movs	r2, #32
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 808e 	beq.w	80033b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8086 	beq.w	80033b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	2220      	movs	r2, #32
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b05      	cmp	r3, #5
 80032bc:	d136      	bne.n	800332c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0216 	bic.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d103      	bne.n	80032ee <HAL_DMA_IRQHandler+0x1da>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	223f      	movs	r2, #63	; 0x3f
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800331e:	2b00      	cmp	r3, #0
 8003320:	d07d      	beq.n	800341e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
        }
        return;
 800332a:	e078      	b.n	800341e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01c      	beq.n	8003374 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d108      	bne.n	800335a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334c:	2b00      	cmp	r3, #0
 800334e:	d030      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	e02b      	b.n	80033b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335e:	2b00      	cmp	r3, #0
 8003360:	d027      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
 800336a:	e022      	b.n	80033b2 <HAL_DMA_IRQHandler+0x29e>
 800336c:	20000024 	.word	0x20000024
 8003370:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0210 	bic.w	r2, r2, #16
 8003390:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d032      	beq.n	8003420 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d022      	beq.n	800340c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2205      	movs	r2, #5
 80033ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3301      	adds	r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d307      	bcc.n	80033fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1f2      	bne.n	80033de <HAL_DMA_IRQHandler+0x2ca>
 80033f8:	e000      	b.n	80033fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80033fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
 800341c:	e000      	b.n	8003420 <HAL_DMA_IRQHandler+0x30c>
        return;
 800341e:	bf00      	nop
    }
  }
}
 8003420:	3718      	adds	r7, #24
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop

08003428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b40      	cmp	r3, #64	; 0x40
 8003454:	d108      	bne.n	8003468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003466:	e007      	b.n	8003478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]
}
 8003478:	bf00      	nop
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	3b10      	subs	r3, #16
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <DMA_CalcBaseAndBitshift+0x68>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d909      	bls.n	80034c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	659a      	str	r2, [r3, #88]	; 0x58
 80034c4:	e007      	b.n	80034d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ce:	f023 0303 	bic.w	r3, r3, #3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	aaaaaaab 	.word	0xaaaaaaab
 80034ec:	08007094 	.word	0x08007094

080034f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11f      	bne.n	800354a <DMA_CheckFifoParam+0x5a>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b03      	cmp	r3, #3
 800350e:	d856      	bhi.n	80035be <DMA_CheckFifoParam+0xce>
 8003510:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <DMA_CheckFifoParam+0x28>)
 8003512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003516:	bf00      	nop
 8003518:	08003529 	.word	0x08003529
 800351c:	0800353b 	.word	0x0800353b
 8003520:	08003529 	.word	0x08003529
 8003524:	080035bf 	.word	0x080035bf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d046      	beq.n	80035c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003538:	e043      	b.n	80035c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003542:	d140      	bne.n	80035c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003548:	e03d      	b.n	80035c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d121      	bne.n	8003598 <DMA_CheckFifoParam+0xa8>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b03      	cmp	r3, #3
 8003558:	d837      	bhi.n	80035ca <DMA_CheckFifoParam+0xda>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <DMA_CheckFifoParam+0x70>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	08003571 	.word	0x08003571
 8003564:	08003577 	.word	0x08003577
 8003568:	08003571 	.word	0x08003571
 800356c:	08003589 	.word	0x08003589
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	73fb      	strb	r3, [r7, #15]
      break;
 8003574:	e030      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d025      	beq.n	80035ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003586:	e022      	b.n	80035ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003590:	d11f      	bne.n	80035d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003596:	e01c      	b.n	80035d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d903      	bls.n	80035a6 <DMA_CheckFifoParam+0xb6>
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d003      	beq.n	80035ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035a4:	e018      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
      break;
 80035aa:	e015      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
      break;
 80035bc:	e00b      	b.n	80035d6 <DMA_CheckFifoParam+0xe6>
      break;
 80035be:	bf00      	nop
 80035c0:	e00a      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
 80035c4:	e008      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;
 80035c6:	bf00      	nop
 80035c8:	e006      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ca:	bf00      	nop
 80035cc:	e004      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;
 80035ce:	bf00      	nop
 80035d0:	e002      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035d2:	bf00      	nop
 80035d4:	e000      	b.n	80035d8 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
    }
  } 
  
  return status; 
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	e159      	b.n	80038b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003604:	2201      	movs	r2, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	4013      	ands	r3, r2
 8003616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	f040 8148 	bne.w	80038b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 0303 	and.w	r3, r3, #3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d005      	beq.n	800363a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003636:	2b02      	cmp	r3, #2
 8003638:	d130      	bne.n	800369c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	2203      	movs	r2, #3
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003670:	2201      	movs	r2, #1
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 0201 	and.w	r2, r3, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d017      	beq.n	80036d8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	2203      	movs	r2, #3
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d123      	bne.n	800372c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	08da      	lsrs	r2, r3, #3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3208      	adds	r2, #8
 80036ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	220f      	movs	r2, #15
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	08da      	lsrs	r2, r3, #3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3208      	adds	r2, #8
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0203 	and.w	r2, r3, #3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a2 	beq.w	80038b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b54      	ldr	r3, [pc, #336]	; (80038d0 <HAL_GPIO_Init+0x2e8>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800378a:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_GPIO_Init+0x2ec>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	3302      	adds	r3, #2
 8003792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4013      	ands	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a49      	ldr	r2, [pc, #292]	; (80038d8 <HAL_GPIO_Init+0x2f0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d019      	beq.n	80037ea <HAL_GPIO_Init+0x202>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a48      	ldr	r2, [pc, #288]	; (80038dc <HAL_GPIO_Init+0x2f4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <HAL_GPIO_Init+0x1fe>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a47      	ldr	r2, [pc, #284]	; (80038e0 <HAL_GPIO_Init+0x2f8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <HAL_GPIO_Init+0x1fa>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a46      	ldr	r2, [pc, #280]	; (80038e4 <HAL_GPIO_Init+0x2fc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <HAL_GPIO_Init+0x1f6>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a45      	ldr	r2, [pc, #276]	; (80038e8 <HAL_GPIO_Init+0x300>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <HAL_GPIO_Init+0x1f2>
 80037d6:	2304      	movs	r3, #4
 80037d8:	e008      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037da:	2307      	movs	r3, #7
 80037dc:	e006      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037de:	2303      	movs	r3, #3
 80037e0:	e004      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e002      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e000      	b.n	80037ec <HAL_GPIO_Init+0x204>
 80037ea:	2300      	movs	r3, #0
 80037ec:	69fa      	ldr	r2, [r7, #28]
 80037ee:	f002 0203 	and.w	r2, r2, #3
 80037f2:	0092      	lsls	r2, r2, #2
 80037f4:	4093      	lsls	r3, r2
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037fc:	4935      	ldr	r1, [pc, #212]	; (80038d4 <HAL_GPIO_Init+0x2ec>)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800380a:	4b38      	ldr	r3, [pc, #224]	; (80038ec <HAL_GPIO_Init+0x304>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800382e:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003834:	4b2d      	ldr	r3, [pc, #180]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003858:	4a24      	ldr	r2, [pc, #144]	; (80038ec <HAL_GPIO_Init+0x304>)
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <HAL_GPIO_Init+0x304>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003888:	4b18      	ldr	r3, [pc, #96]	; (80038ec <HAL_GPIO_Init+0x304>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ac:	4a0f      	ldr	r2, [pc, #60]	; (80038ec <HAL_GPIO_Init+0x304>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	2b0f      	cmp	r3, #15
 80038bc:	f67f aea2 	bls.w	8003604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3724      	adds	r7, #36	; 0x24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40020000 	.word	0x40020000
 80038dc:	40020400 	.word	0x40020400
 80038e0:	40020800 	.word	0x40020800
 80038e4:	40020c00 	.word	0x40020c00
 80038e8:	40021000 	.word	0x40021000
 80038ec:	40013c00 	.word	0x40013c00

080038f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	807b      	strh	r3, [r7, #2]
 80038fc:	4613      	mov	r3, r2
 80038fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003900:	787b      	ldrb	r3, [r7, #1]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800390c:	e003      	b.n	8003916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800390e:	887b      	ldrh	r3, [r7, #2]
 8003910:	041a      	lsls	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	619a      	str	r2, [r3, #24]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	4013      	ands	r3, r2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d006      	beq.n	8003948 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003940:	88fb      	ldrh	r3, [r7, #6]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f806 	bl	8003954 <HAL_GPIO_EXTI_Callback>
  }
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40013c00 	.word	0x40013c00

08003954 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e12b      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7fe fdf2 	bl	800257c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2224      	movs	r2, #36	; 0x24
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039d0:	f000 fd5c 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 80039d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4a81      	ldr	r2, [pc, #516]	; (8003be0 <HAL_I2C_Init+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d807      	bhi.n	80039f0 <HAL_I2C_Init+0x84>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a80      	ldr	r2, [pc, #512]	; (8003be4 <HAL_I2C_Init+0x278>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e006      	b.n	80039fe <HAL_I2C_Init+0x92>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4a7d      	ldr	r2, [pc, #500]	; (8003be8 <HAL_I2C_Init+0x27c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	bf94      	ite	ls
 80039f8:	2301      	movls	r3, #1
 80039fa:	2300      	movhi	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e0e7      	b.n	8003bd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4a78      	ldr	r2, [pc, #480]	; (8003bec <HAL_I2C_Init+0x280>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	0c9b      	lsrs	r3, r3, #18
 8003a10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	430a      	orrs	r2, r1
 8003a24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <HAL_I2C_Init+0x274>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d802      	bhi.n	8003a40 <HAL_I2C_Init+0xd4>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	e009      	b.n	8003a54 <HAL_I2C_Init+0xe8>
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	4a69      	ldr	r2, [pc, #420]	; (8003bf0 <HAL_I2C_Init+0x284>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	099b      	lsrs	r3, r3, #6
 8003a52:	3301      	adds	r3, #1
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	430b      	orrs	r3, r1
 8003a5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	495c      	ldr	r1, [pc, #368]	; (8003be0 <HAL_I2C_Init+0x274>)
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d819      	bhi.n	8003aa8 <HAL_I2C_Init+0x13c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	1e59      	subs	r1, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a82:	1c59      	adds	r1, r3, #1
 8003a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a88:	400b      	ands	r3, r1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_I2C_Init+0x138>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1e59      	subs	r1, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa2:	e051      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	e04f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d111      	bne.n	8003ad4 <HAL_I2C_Init+0x168>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	1e58      	subs	r0, r3, #1
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6859      	ldr	r1, [r3, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	440b      	add	r3, r1
 8003abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e012      	b.n	8003afa <HAL_I2C_Init+0x18e>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e58      	subs	r0, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6859      	ldr	r1, [r3, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	0099      	lsls	r1, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aea:	3301      	adds	r3, #1
 8003aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_I2C_Init+0x196>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e022      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_I2C_Init+0x1bc>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1e58      	subs	r0, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6859      	ldr	r1, [r3, #4]
 8003b12:	460b      	mov	r3, r1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	440b      	add	r3, r1
 8003b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b26:	e00f      	b.n	8003b48 <HAL_I2C_Init+0x1dc>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1e58      	subs	r0, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	0099      	lsls	r1, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	6809      	ldr	r1, [r1, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6911      	ldr	r1, [r2, #16]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68d2      	ldr	r2, [r2, #12]
 8003b82:	4311      	orrs	r1, r2
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	000186a0 	.word	0x000186a0
 8003be4:	001e847f 	.word	0x001e847f
 8003be8:	003d08ff 	.word	0x003d08ff
 8003bec:	431bde83 	.word	0x431bde83
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e264      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d075      	beq.n	8003cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c12:	4ba3      	ldr	r3, [pc, #652]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d00c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1e:	4ba0      	ldr	r3, [pc, #640]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d112      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2a:	4b9d      	ldr	r3, [pc, #628]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	4b99      	ldr	r3, [pc, #612]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05b      	beq.n	8003cfc <HAL_RCC_OscConfig+0x108>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d157      	bne.n	8003cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e23f      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d106      	bne.n	8003c68 <HAL_RCC_OscConfig+0x74>
 8003c5a:	4b91      	ldr	r3, [pc, #580]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a90      	ldr	r2, [pc, #576]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e01d      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x98>
 8003c72:	4b8b      	ldr	r3, [pc, #556]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a8a      	ldr	r2, [pc, #552]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b88      	ldr	r3, [pc, #544]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a87      	ldr	r2, [pc, #540]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0xb0>
 8003c8c:	4b84      	ldr	r3, [pc, #528]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a83      	ldr	r2, [pc, #524]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c96:	6013      	str	r3, [r2, #0]
 8003c98:	4b81      	ldr	r3, [pc, #516]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a80      	ldr	r2, [pc, #512]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d013      	beq.n	8003cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe ff7c 	bl	8002ba8 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb4:	f7fe ff78 	bl	8002ba8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b64      	cmp	r3, #100	; 0x64
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e204      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b76      	ldr	r3, [pc, #472]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f0      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xc0>
 8003cd2:	e014      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd4:	f7fe ff68 	bl	8002ba8 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cdc:	f7fe ff64 	bl	8002ba8 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e1f0      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cee:	4b6c      	ldr	r3, [pc, #432]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0xe8>
 8003cfa:	e000      	b.n	8003cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d063      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0a:	4b65      	ldr	r3, [pc, #404]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00b      	beq.n	8003d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d16:	4b62      	ldr	r3, [pc, #392]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d11c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d22:	4b5f      	ldr	r3, [pc, #380]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d116      	bne.n	8003d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d001      	beq.n	8003d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1c4      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d46:	4b56      	ldr	r3, [pc, #344]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4952      	ldr	r1, [pc, #328]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	e03a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d64:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <HAL_RCC_OscConfig+0x2b0>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6a:	f7fe ff1d 	bl	8002ba8 <HAL_GetTick>
 8003d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d72:	f7fe ff19 	bl	8002ba8 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e1a5      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	4b46      	ldr	r3, [pc, #280]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d90:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4940      	ldr	r1, [pc, #256]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	600b      	str	r3, [r1, #0]
 8003da4:	e015      	b.n	8003dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003da6:	4b3f      	ldr	r3, [pc, #252]	; (8003ea4 <HAL_RCC_OscConfig+0x2b0>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fe fefc 	bl	8002ba8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db4:	f7fe fef8 	bl	8002ba8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e184      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d030      	beq.n	8003e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de6:	4b30      	ldr	r3, [pc, #192]	; (8003ea8 <HAL_RCC_OscConfig+0x2b4>)
 8003de8:	2201      	movs	r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dec:	f7fe fedc 	bl	8002ba8 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df4:	f7fe fed8 	bl	8002ba8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e164      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0f0      	beq.n	8003df4 <HAL_RCC_OscConfig+0x200>
 8003e12:	e015      	b.n	8003e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e14:	4b24      	ldr	r3, [pc, #144]	; (8003ea8 <HAL_RCC_OscConfig+0x2b4>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fec5 	bl	8002ba8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fe fec1 	bl	8002ba8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e14d      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b1a      	ldr	r3, [pc, #104]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a0 	beq.w	8003f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e52:	4b13      	ldr	r3, [pc, #76]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10f      	bne.n	8003e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	4b0f      	ldr	r3, [pc, #60]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	4a0e      	ldr	r2, [pc, #56]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	60bb      	str	r3, [r7, #8]
 8003e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d121      	bne.n	8003ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e8a:	4b08      	ldr	r3, [pc, #32]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a07      	ldr	r2, [pc, #28]	; (8003eac <HAL_RCC_OscConfig+0x2b8>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fe fe87 	bl	8002ba8 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	e011      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2ce>
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	42470000 	.word	0x42470000
 8003ea8:	42470e80 	.word	0x42470e80
 8003eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb0:	f7fe fe7a 	bl	8002ba8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e106      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec2:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <HAL_RCC_OscConfig+0x4e4>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x2f0>
 8003ed6:	4b81      	ldr	r3, [pc, #516]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a80      	ldr	r2, [pc, #512]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	e01c      	b.n	8003f1e <HAL_RCC_OscConfig+0x32a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCC_OscConfig+0x312>
 8003eec:	4b7b      	ldr	r3, [pc, #492]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a7a      	ldr	r2, [pc, #488]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef8:	4b78      	ldr	r3, [pc, #480]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	4a77      	ldr	r2, [pc, #476]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6713      	str	r3, [r2, #112]	; 0x70
 8003f04:	e00b      	b.n	8003f1e <HAL_RCC_OscConfig+0x32a>
 8003f06:	4b75      	ldr	r3, [pc, #468]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	4a74      	ldr	r2, [pc, #464]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	; 0x70
 8003f12:	4b72      	ldr	r3, [pc, #456]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d015      	beq.n	8003f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f26:	f7fe fe3f 	bl	8002ba8 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fe fe3b 	bl	8002ba8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0c5      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	4b65      	ldr	r3, [pc, #404]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ee      	beq.n	8003f2e <HAL_RCC_OscConfig+0x33a>
 8003f50:	e014      	b.n	8003f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f52:	f7fe fe29 	bl	8002ba8 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fe fe25 	bl	8002ba8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e0af      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ee      	bne.n	8003f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7c:	7dfb      	ldrb	r3, [r7, #23]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	4a55      	ldr	r2, [pc, #340]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 809b 	beq.w	80040ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f98:	4b50      	ldr	r3, [pc, #320]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d05c      	beq.n	800405e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d141      	bne.n	8004030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fac:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb2:	f7fe fdf9 	bl	8002ba8 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fba:	f7fe fdf5 	bl	8002ba8 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e081      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fcc:	4b43      	ldr	r3, [pc, #268]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	019b      	lsls	r3, r3, #6
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fee:	085b      	lsrs	r3, r3, #1
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	041b      	lsls	r3, r3, #16
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	061b      	lsls	r3, r3, #24
 8003ffc:	4937      	ldr	r1, [pc, #220]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004002:	4b37      	ldr	r3, [pc, #220]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004004:	2201      	movs	r2, #1
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fdce 	bl	8002ba8 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe fdca 	bl	8002ba8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e056      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4b2e      	ldr	r3, [pc, #184]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f0      	beq.n	8004010 <HAL_RCC_OscConfig+0x41c>
 800402e:	e04e      	b.n	80040ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004030:	4b2b      	ldr	r3, [pc, #172]	; (80040e0 <HAL_RCC_OscConfig+0x4ec>)
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe fdb7 	bl	8002ba8 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403e:	f7fe fdb3 	bl	8002ba8 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e03f      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x44a>
 800405c:	e037      	b.n	80040ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e032      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_RCC_OscConfig+0x4e8>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d028      	beq.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d121      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d11a      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800409a:	4013      	ands	r3, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d001      	beq.n	80040ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40007000 	.word	0x40007000
 80040dc:	40023800 	.word	0x40023800
 80040e0:	42470060 	.word	0x42470060

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0cc      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b68      	ldr	r3, [pc, #416]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d90c      	bls.n	8004120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b65      	ldr	r3, [pc, #404]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410e:	4b63      	ldr	r3, [pc, #396]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d001      	beq.n	8004120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0b8      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004138:	4b59      	ldr	r3, [pc, #356]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004142:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4b53      	ldr	r3, [pc, #332]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a52      	ldr	r2, [pc, #328]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b50      	ldr	r3, [pc, #320]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	494d      	ldr	r1, [pc, #308]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d044      	beq.n	8004204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004182:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d119      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d003      	beq.n	80041a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b3f      	ldr	r3, [pc, #252]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e06f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e067      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b37      	ldr	r3, [pc, #220]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4934      	ldr	r1, [pc, #208]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d4:	f7fe fce8 	bl	8002ba8 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fce4 	bl	8002ba8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e04f      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2b      	ldr	r3, [pc, #172]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b25      	ldr	r3, [pc, #148]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0307 	and.w	r3, r3, #7
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d20c      	bcs.n	800422c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b22      	ldr	r3, [pc, #136]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421a:	4b20      	ldr	r3, [pc, #128]	; (800429c <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d001      	beq.n	800422c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e032      	b.n	8004292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004238:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	4916      	ldr	r1, [pc, #88]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0308 	and.w	r3, r3, #8
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	490e      	ldr	r1, [pc, #56]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426a:	f000 f821 	bl	80042b0 <HAL_RCC_GetSysClockFreq>
 800426e:	4602      	mov	r2, r0
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	091b      	lsrs	r3, r3, #4
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	490a      	ldr	r1, [pc, #40]	; (80042a4 <HAL_RCC_ClockConfig+0x1c0>)
 800427c:	5ccb      	ldrb	r3, [r1, r3]
 800427e:	fa22 f303 	lsr.w	r3, r2, r3
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004286:	4b09      	ldr	r3, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f7fe fc48 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023c00 	.word	0x40023c00
 80042a0:	40023800 	.word	0x40023800
 80042a4:	0800707c 	.word	0x0800707c
 80042a8:	20000024 	.word	0x20000024
 80042ac:	20000028 	.word	0x20000028

080042b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	607b      	str	r3, [r7, #4]
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]
 80042c0:	2300      	movs	r3, #0
 80042c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c8:	4b67      	ldr	r3, [pc, #412]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00d      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x40>
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	f200 80bd 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x1a4>
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d002      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0x34>
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d003      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x3a>
 80042e2:	e0b7      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e4:	4b61      	ldr	r3, [pc, #388]	; (800446c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042e6:	60bb      	str	r3, [r7, #8]
       break;
 80042e8:	e0b7      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ea:	4b61      	ldr	r3, [pc, #388]	; (8004470 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042ec:	60bb      	str	r3, [r7, #8]
      break;
 80042ee:	e0b4      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f0:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fa:	4b5b      	ldr	r3, [pc, #364]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d04d      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004306:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	099b      	lsrs	r3, r3, #6
 800430c:	461a      	mov	r2, r3
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	ea02 0800 	and.w	r8, r2, r0
 800431e:	ea03 0901 	and.w	r9, r3, r1
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	014b      	lsls	r3, r1, #5
 8004330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004334:	0142      	lsls	r2, r0, #5
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	ebb0 0008 	subs.w	r0, r0, r8
 800433e:	eb61 0109 	sbc.w	r1, r1, r9
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	018b      	lsls	r3, r1, #6
 800434c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004350:	0182      	lsls	r2, r0, #6
 8004352:	1a12      	subs	r2, r2, r0
 8004354:	eb63 0301 	sbc.w	r3, r3, r1
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	00d9      	lsls	r1, r3, #3
 8004362:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004366:	00d0      	lsls	r0, r2, #3
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	eb12 0208 	adds.w	r2, r2, r8
 8004370:	eb43 0309 	adc.w	r3, r3, r9
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	0259      	lsls	r1, r3, #9
 800437e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004382:	0250      	lsls	r0, r2, #9
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	f7fc f82e 	bl	80003f4 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	e04a      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b31      	ldr	r3, [pc, #196]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	461a      	mov	r2, r3
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	ea02 0400 	and.w	r4, r2, r0
 80043ba:	ea03 0501 	and.w	r5, r3, r1
 80043be:	4620      	mov	r0, r4
 80043c0:	4629      	mov	r1, r5
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	014b      	lsls	r3, r1, #5
 80043cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043d0:	0142      	lsls	r2, r0, #5
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	1b00      	subs	r0, r0, r4
 80043d8:	eb61 0105 	sbc.w	r1, r1, r5
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	f04f 0300 	mov.w	r3, #0
 80043e4:	018b      	lsls	r3, r1, #6
 80043e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043ea:	0182      	lsls	r2, r0, #6
 80043ec:	1a12      	subs	r2, r2, r0
 80043ee:	eb63 0301 	sbc.w	r3, r3, r1
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	00d9      	lsls	r1, r3, #3
 80043fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004400:	00d0      	lsls	r0, r2, #3
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	1912      	adds	r2, r2, r4
 8004408:	eb45 0303 	adc.w	r3, r5, r3
 800440c:	f04f 0000 	mov.w	r0, #0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	0299      	lsls	r1, r3, #10
 8004416:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800441a:	0290      	lsls	r0, r2, #10
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4610      	mov	r0, r2
 8004422:	4619      	mov	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	f7fb ffe2 	bl	80003f4 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	60bb      	str	r3, [r7, #8]
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004456:	60bb      	str	r3, [r7, #8]
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	68bb      	ldr	r3, [r7, #8]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000024 	.word	0x20000024

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	0800708c 	.word	0x0800708c

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b8:	f7ff ffdc 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0b5b      	lsrs	r3, r3, #13
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	0800708c 	.word	0x0800708c

080044dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e041      	b.n	8004572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe f8ca 	bl	800269c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	4619      	mov	r1, r3
 800451a:	4610      	mov	r0, r2
 800451c:	f000 fdda 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b01      	cmp	r3, #1
 800458e:	d001      	beq.n	8004594 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e03c      	b.n	800460e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1e      	ldr	r2, [pc, #120]	; (800461c <HAL_TIM_Base_Start+0xa0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d018      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ae:	d013      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1a      	ldr	r2, [pc, #104]	; (8004620 <HAL_TIM_Base_Start+0xa4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00e      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a19      	ldr	r2, [pc, #100]	; (8004624 <HAL_TIM_Base_Start+0xa8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a17      	ldr	r2, [pc, #92]	; (8004628 <HAL_TIM_Base_Start+0xac>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_TIM_Base_Start+0x5c>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIM_Base_Start+0xb0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d111      	bne.n	80045fc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2b06      	cmp	r3, #6
 80045e8:	d010      	beq.n	800460c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0201 	orr.w	r2, r2, #1
 80045f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fa:	e007      	b.n	800460c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000

08004630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d001      	beq.n	8004648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e044      	b.n	80046d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x6c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004672:	d013      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x6c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1a      	ldr	r2, [pc, #104]	; (80046e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x6c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a19      	ldr	r2, [pc, #100]	; (80046e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x6c>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_TIM_Base_Start_IT+0xbc>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x6c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d010      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	e007      	b.n	80046d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40014000 	.word	0x40014000

080046f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f839 	bl	8004792 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fcce 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <HAL_TIM_PWM_Start+0x24>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	e022      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d109      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x3e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	bf14      	ite	ne
 80047de:	2301      	movne	r3, #1
 80047e0:	2300      	moveq	r3, #0
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	e015      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d109      	bne.n	8004800 <HAL_TIM_PWM_Start+0x58>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	e008      	b.n	8004812 <HAL_TIM_PWM_Start+0x6a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b01      	cmp	r3, #1
 800480a:	bf14      	ite	ne
 800480c:	2301      	movne	r3, #1
 800480e:	2300      	moveq	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e068      	b.n	80048ec <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0x82>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0x92>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xa2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xaa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fee0 	bl	8005620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_TIM_PWM_Start+0x14c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d107      	bne.n	800487a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1d      	ldr	r2, [pc, #116]	; (80048f4 <HAL_TIM_PWM_Start+0x14c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x10e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488c:	d013      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x10e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_TIM_PWM_Start+0x150>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x10e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a17      	ldr	r2, [pc, #92]	; (80048fc <HAL_TIM_PWM_Start+0x154>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x10e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a16      	ldr	r2, [pc, #88]	; (8004900 <HAL_TIM_PWM_Start+0x158>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x10e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a14      	ldr	r2, [pc, #80]	; (8004904 <HAL_TIM_PWM_Start+0x15c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d111      	bne.n	80048da <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b06      	cmp	r3, #6
 80048c6:	d010      	beq.n	80048ea <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	e007      	b.n	80048ea <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40010000 	.word	0x40010000
 80048f8:	40000400 	.word	0x40000400
 80048fc:	40000800 	.word	0x40000800
 8004900:	40000c00 	.word	0x40000c00
 8004904:	40014000 	.word	0x40014000

08004908 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e097      	b.n	8004a4c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7fd fe6b 	bl	800260c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800494c:	f023 0307 	bic.w	r3, r3, #7
 8004950:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4610      	mov	r0, r2
 800495e:	f000 fbb9 	bl	80050d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	f023 0303 	bic.w	r3, r3, #3
 800498e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	021b      	lsls	r3, r3, #8
 800499a:	4313      	orrs	r3, r2
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049a8:	f023 030c 	bic.w	r3, r3, #12
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4313      	orrs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	011a      	lsls	r2, r3, #4
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	031b      	lsls	r3, r3, #12
 80049d8:	4313      	orrs	r3, r2
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	4313      	orrs	r3, r2
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a64:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a6c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a74:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a7c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d110      	bne.n	8004aa6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d102      	bne.n	8004a90 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a8a:	7b7b      	ldrb	r3, [r7, #13]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e069      	b.n	8004b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa4:	e031      	b.n	8004b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d110      	bne.n	8004ace <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aac:	7bbb      	ldrb	r3, [r7, #14]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ab2:	7b3b      	ldrb	r3, [r7, #12]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d001      	beq.n	8004abc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e055      	b.n	8004b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004acc:	e01d      	b.n	8004b0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d108      	bne.n	8004ae6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ad4:	7bbb      	ldrb	r3, [r7, #14]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d105      	bne.n	8004ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ada:	7b7b      	ldrb	r3, [r7, #13]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d102      	bne.n	8004ae6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae0:	7b3b      	ldrb	r3, [r7, #12]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d001      	beq.n	8004aea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e03e      	b.n	8004b68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2202      	movs	r2, #2
 8004af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_TIM_Encoder_Start+0xc4>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d008      	beq.n	8004b28 <HAL_TIM_Encoder_Start+0xd4>
 8004b16:	e00f      	b.n	8004b38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fd7d 	bl	8005620 <TIM_CCxChannelCmd>
      break;
 8004b26:	e016      	b.n	8004b56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2104      	movs	r1, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fd75 	bl	8005620 <TIM_CCxChannelCmd>
      break;
 8004b36:	e00e      	b.n	8004b56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fd6d 	bl	8005620 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	2104      	movs	r1, #4
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd66 	bl	8005620 <TIM_CCxChannelCmd>
      break;
 8004b54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d122      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d11b      	bne.n	8004bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0202 	mvn.w	r2, #2
 8004b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa70 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004bb8:	e005      	b.n	8004bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 fa62 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 fa73 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d122      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b04      	cmp	r3, #4
 8004be6:	d11b      	bne.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa46 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fa38 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fa49 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f003 0308 	and.w	r3, r3, #8
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d122      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0208 	mvn.w	r2, #8
 8004c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fa1c 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004c60:	e005      	b.n	8004c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa0e 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fa1f 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d122      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f06f 0210 	mvn.w	r2, #16
 8004c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f9f2 	bl	8005098 <HAL_TIM_IC_CaptureCallback>
 8004cb4:	e005      	b.n	8004cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f9e4 	bl	8005084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f9f5 	bl	80050ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10e      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d107      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0201 	mvn.w	r2, #1
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fd fbe0 	bl	80024b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfe:	2b80      	cmp	r3, #128	; 0x80
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d107      	bne.n	8004d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fd1e 	bl	800575c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d10e      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d107      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f9ba 	bl	80050c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b20      	cmp	r3, #32
 8004d58:	d10e      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b20      	cmp	r3, #32
 8004d66:	d107      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0220 	mvn.w	r2, #32
 8004d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fce8 	bl	8005748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0ac      	b.n	8004ef4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b0c      	cmp	r3, #12
 8004da6:	f200 809f 	bhi.w	8004ee8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004ee9 	.word	0x08004ee9
 8004db8:	08004ee9 	.word	0x08004ee9
 8004dbc:	08004ee9 	.word	0x08004ee9
 8004dc0:	08004e25 	.word	0x08004e25
 8004dc4:	08004ee9 	.word	0x08004ee9
 8004dc8:	08004ee9 	.word	0x08004ee9
 8004dcc:	08004ee9 	.word	0x08004ee9
 8004dd0:	08004e67 	.word	0x08004e67
 8004dd4:	08004ee9 	.word	0x08004ee9
 8004dd8:	08004ee9 	.word	0x08004ee9
 8004ddc:	08004ee9 	.word	0x08004ee9
 8004de0:	08004ea7 	.word	0x08004ea7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f9f2 	bl	80051d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0204 	bic.w	r2, r2, #4
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	619a      	str	r2, [r3, #24]
      break;
 8004e22:	e062      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fa38 	bl	80052a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6999      	ldr	r1, [r3, #24]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	021a      	lsls	r2, r3, #8
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	619a      	str	r2, [r3, #24]
      break;
 8004e64:	e041      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fa83 	bl	8005378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0208 	orr.w	r2, r2, #8
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0204 	bic.w	r2, r2, #4
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	61da      	str	r2, [r3, #28]
      break;
 8004ea4:	e021      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68b9      	ldr	r1, [r7, #8]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 facd 	bl	800544c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69d9      	ldr	r1, [r3, #28]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	021a      	lsls	r2, r3, #8
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	61da      	str	r2, [r3, #28]
      break;
 8004ee6:	e000      	b.n	8004eea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ee8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_TIM_ConfigClockSource+0x18>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e0b3      	b.n	800507c <HAL_TIM_ConfigClockSource+0x180>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4c:	d03e      	beq.n	8004fcc <HAL_TIM_ConfigClockSource+0xd0>
 8004f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f52:	f200 8087 	bhi.w	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5a:	f000 8085 	beq.w	8005068 <HAL_TIM_ConfigClockSource+0x16c>
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f62:	d87f      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d01a      	beq.n	8004f9e <HAL_TIM_ConfigClockSource+0xa2>
 8004f68:	2b70      	cmp	r3, #112	; 0x70
 8004f6a:	d87b      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d050      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x116>
 8004f70:	2b60      	cmp	r3, #96	; 0x60
 8004f72:	d877      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d03c      	beq.n	8004ff2 <HAL_TIM_ConfigClockSource+0xf6>
 8004f78:	2b50      	cmp	r3, #80	; 0x50
 8004f7a:	d873      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d058      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x136>
 8004f80:	2b40      	cmp	r3, #64	; 0x40
 8004f82:	d86f      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d064      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x156>
 8004f88:	2b30      	cmp	r3, #48	; 0x30
 8004f8a:	d86b      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d060      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x156>
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d867      	bhi.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d05c      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x156>
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d05a      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f9c:	e062      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6899      	ldr	r1, [r3, #8]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f000 fb17 	bl	80055e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	609a      	str	r2, [r3, #8]
      break;
 8004fca:	e04e      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6818      	ldr	r0, [r3, #0]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6899      	ldr	r1, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f000 fb00 	bl	80055e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fee:	609a      	str	r2, [r3, #8]
      break;
 8004ff0:	e03b      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	461a      	mov	r2, r3
 8005000:	f000 fa74 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2150      	movs	r1, #80	; 0x50
 800500a:	4618      	mov	r0, r3
 800500c:	f000 facd 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005010:	e02b      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fa93 	bl	800554a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2160      	movs	r1, #96	; 0x60
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fabd 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005030:	e01b      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fa54 	bl	80054ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2140      	movs	r1, #64	; 0x40
 800504a:	4618      	mov	r0, r3
 800504c:	f000 faad 	bl	80055aa <TIM_ITRx_SetConfig>
      break;
 8005050:	e00b      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	4610      	mov	r0, r2
 800505e:	f000 faa4 	bl	80055aa <TIM_ITRx_SetConfig>
        break;
 8005062:	e002      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005064:	bf00      	nop
 8005066:	e000      	b.n	800506a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005068:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800507a:	2300      	movs	r3, #0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00f      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00b      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a31      	ldr	r2, [pc, #196]	; (80051bc <TIM_Base_SetConfig+0xe8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d007      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a30      	ldr	r2, [pc, #192]	; (80051c0 <TIM_Base_SetConfig+0xec>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d003      	beq.n	800510c <TIM_Base_SetConfig+0x38>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a2f      	ldr	r2, [pc, #188]	; (80051c4 <TIM_Base_SetConfig+0xf0>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d108      	bne.n	800511e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a25      	ldr	r2, [pc, #148]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01b      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d017      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a22      	ldr	r2, [pc, #136]	; (80051bc <TIM_Base_SetConfig+0xe8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d013      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <TIM_Base_SetConfig+0xec>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00f      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a20      	ldr	r2, [pc, #128]	; (80051c4 <TIM_Base_SetConfig+0xf0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1f      	ldr	r2, [pc, #124]	; (80051c8 <TIM_Base_SetConfig+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a1e      	ldr	r2, [pc, #120]	; (80051cc <TIM_Base_SetConfig+0xf8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0x8a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <TIM_Base_SetConfig+0xfc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689a      	ldr	r2, [r3, #8]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a08      	ldr	r2, [pc, #32]	; (80051b8 <TIM_Base_SetConfig+0xe4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691a      	ldr	r2, [r3, #16]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	615a      	str	r2, [r3, #20]
}
 80051aa:	bf00      	nop
 80051ac:	3714      	adds	r7, #20
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40010000 	.word	0x40010000
 80051bc:	40000400 	.word	0x40000400
 80051c0:	40000800 	.word	0x40000800
 80051c4:	40000c00 	.word	0x40000c00
 80051c8:	40014000 	.word	0x40014000
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800

080051d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f023 0201 	bic.w	r2, r3, #1
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0303 	bic.w	r3, r3, #3
 800520a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 0302 	bic.w	r3, r3, #2
 800521c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <TIM_OC1_SetConfig+0xc8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10c      	bne.n	800524a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	f023 0308 	bic.w	r3, r3, #8
 8005236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 0304 	bic.w	r3, r3, #4
 8005248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a13      	ldr	r2, [pc, #76]	; (800529c <TIM_OC1_SetConfig+0xc8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d111      	bne.n	8005276 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4313      	orrs	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	40010000 	.word	0x40010000

080052a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0210 	bic.w	r2, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	021b      	lsls	r3, r3, #8
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f023 0320 	bic.w	r3, r3, #32
 80052ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a1e      	ldr	r2, [pc, #120]	; (8005374 <TIM_OC2_SetConfig+0xd4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d10d      	bne.n	800531c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800531a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a15      	ldr	r2, [pc, #84]	; (8005374 <TIM_OC2_SetConfig+0xd4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d113      	bne.n	800534c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005332:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4313      	orrs	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000

08005378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005378:	b480      	push	{r7}
 800537a:	b087      	sub	sp, #28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0303 	bic.w	r3, r3, #3
 80053ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10d      	bne.n	80053f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <TIM_OC3_SetConfig+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d113      	bne.n	8005422 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	4313      	orrs	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	40010000 	.word	0x40010000

0800544c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005496:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <TIM_OC4_SetConfig+0x9c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d109      	bne.n	80054c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000

080054ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a1b      	ldr	r3, [r3, #32]
 80054fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f023 030a 	bic.w	r3, r3, #10
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	621a      	str	r2, [r3, #32]
}
 800553e:	bf00      	nop
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800554a:	b480      	push	{r7}
 800554c:	b087      	sub	sp, #28
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0210 	bic.w	r2, r3, #16
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005574:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	031b      	lsls	r3, r3, #12
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f043 0307 	orr.w	r3, r3, #7
 80055cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	431a      	orrs	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4313      	orrs	r3, r2
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	f003 031f 	and.w	r3, r3, #31
 8005632:	2201      	movs	r2, #1
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	43db      	mvns	r3, r3
 8005642:	401a      	ands	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a1a      	ldr	r2, [r3, #32]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	431a      	orrs	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e050      	b.n	8005726 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1c      	ldr	r2, [pc, #112]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d018      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d0:	d013      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d00e      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a15      	ldr	r2, [pc, #84]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d10c      	bne.n	8005714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4313      	orrs	r3, r2
 800570a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40014000 	.word	0x40014000

08005748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e03f      	b.n	8005802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fd f814 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2224      	movs	r2, #36	; 0x24
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fd51 	bl	800625c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68da      	ldr	r2, [r3, #12]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b20      	cmp	r3, #32
 8005824:	d153      	bne.n	80058ce <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <HAL_UART_Transmit_DMA+0x26>
 800582c:	88fb      	ldrh	r3, [r7, #6]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04c      	b.n	80058d0 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_UART_Transmit_DMA+0x38>
 8005840:	2302      	movs	r3, #2
 8005842:	e045      	b.n	80058d0 <HAL_UART_Transmit_DMA+0xc4>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2221      	movs	r2, #33	; 0x21
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	4a19      	ldr	r2, [pc, #100]	; (80058d8 <HAL_UART_Transmit_DMA+0xcc>)
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_UART_Transmit_DMA+0xd0>)
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_UART_Transmit_DMA+0xd4>)
 8005882:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005888:	2200      	movs	r2, #0
 800588a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800588c:	f107 0308 	add.w	r3, r7, #8
 8005890:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	6819      	ldr	r1, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3304      	adds	r3, #4
 80058a0:	461a      	mov	r2, r3
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	f7fd fb4c 	bl	8002f40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058b0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058c8:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e000      	b.n	80058d0 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	08005d19 	.word	0x08005d19
 80058dc:	08005d6b 	.word	0x08005d6b
 80058e0:	08005e53 	.word	0x08005e53

080058e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b20      	cmp	r3, #32
 80058fc:	d11d      	bne.n	800593a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_Receive_DMA+0x26>
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e016      	b.n	800593c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_UART_Receive_DMA+0x38>
 8005918:	2302      	movs	r3, #2
 800591a:	e00f      	b.n	800593c <HAL_UART_Receive_DMA+0x58>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	461a      	mov	r2, r3
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fad9 	bl	8005ee8 <UART_Start_Receive_DMA>
 8005936:	4603      	mov	r3, r0
 8005938:	e000      	b.n	800593c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800593a:	2302      	movs	r3, #2
  }
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_UART_IRQHandler+0x52>
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fbcd 	bl	800612e <UART_Receive_IT>
      return;
 8005994:	e17c      	b.n	8005c90 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80b1 	beq.w	8005b00 <HAL_UART_IRQHandler+0x1bc>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d105      	bne.n	80059b4 <HAL_UART_IRQHandler+0x70>
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 80a6 	beq.w	8005b00 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00a      	beq.n	80059d4 <HAL_UART_IRQHandler+0x90>
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	f043 0201 	orr.w	r2, r3, #1
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	f003 0304 	and.w	r3, r3, #4
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_UART_IRQHandler+0xb0>
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0202 	orr.w	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_UART_IRQHandler+0xd0>
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	f043 0204 	orr.w	r2, r3, #4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00f      	beq.n	8005a3e <HAL_UART_IRQHandler+0xfa>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_UART_IRQHandler+0xee>
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 811f 	beq.w	8005c86 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_UART_IRQHandler+0x11e>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d002      	beq.n	8005a62 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fb66 	bl	800612e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	bf0c      	ite	eq
 8005a70:	2301      	moveq	r3, #1
 8005a72:	2300      	movne	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <HAL_UART_IRQHandler+0x146>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d031      	beq.n	8005aee <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 faa6 	bl	8005fdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b40      	cmp	r3, #64	; 0x40
 8005a9c:	d123      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aac:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d013      	beq.n	8005ade <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	4a77      	ldr	r2, [pc, #476]	; (8005c98 <HAL_UART_IRQHandler+0x354>)
 8005abc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fd fb04 	bl	80030d0 <HAL_DMA_Abort_IT>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ad8:	4610      	mov	r0, r2
 8005ada:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	e00e      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f904 	bl	8005cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	e00a      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f900 	bl	8005cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e006      	b.n	8005afc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f8fc 	bl	8005cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005afa:	e0c4      	b.n	8005c86 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	bf00      	nop
    return;
 8005afe:	e0c2      	b.n	8005c86 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 80a2 	bne.w	8005c4e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 809c 	beq.w	8005c4e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 8096 	beq.w	8005c4e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b22:	2300      	movs	r3, #0
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d14f      	bne.n	8005be6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005b50:	8a3b      	ldrh	r3, [r7, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8099 	beq.w	8005c8a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b5c:	8a3a      	ldrh	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	f080 8093 	bcs.w	8005c8a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8a3a      	ldrh	r2, [r7, #16]
 8005b68:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b74:	d02b      	beq.n	8005bce <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b84:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	695a      	ldr	r2, [r3, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 0201 	bic.w	r2, r2, #1
 8005b94:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
 8005bc2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7fd fa11 	bl	8002ff0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f88e 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005be4:	e051      	b.n	8005c8a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d047      	beq.n	8005c8e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005bfe:	8a7b      	ldrh	r3, [r7, #18]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d044      	beq.n	8005c8e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68da      	ldr	r2, [r3, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c12:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0201 	bic.w	r2, r2, #1
 8005c22:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0210 	bic.w	r2, r2, #16
 8005c40:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c42:	8a7b      	ldrh	r3, [r7, #18]
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f85a 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c4c:	e01f      	b.n	8005c8e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_UART_IRQHandler+0x326>
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9fb 	bl	800605e <UART_Transmit_IT>
    return;
 8005c68:	e012      	b.n	8005c90 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00d      	beq.n	8005c90 <HAL_UART_IRQHandler+0x34c>
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d008      	beq.n	8005c90 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fa3d 	bl	80060fe <UART_EndTransmit_IT>
    return;
 8005c84:	e004      	b.n	8005c90 <HAL_UART_IRQHandler+0x34c>
    return;
 8005c86:	bf00      	nop
 8005c88:	e002      	b.n	8005c90 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c8a:	bf00      	nop
 8005c8c:	e000      	b.n	8005c90 <HAL_UART_IRQHandler+0x34c>
      return;
 8005c8e:	bf00      	nop
  }
}
 8005c90:	3728      	adds	r7, #40	; 0x28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	08006037 	.word	0x08006037

08005c9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d113      	bne.n	8005d5c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	695a      	ldr	r2, [r3, #20]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d48:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d58:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d5a:	e002      	b.n	8005d62 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f7ff ff9d 	bl	8005c9c <HAL_UART_TxCpltCallback>
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b084      	sub	sp, #16
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f7ff ff99 	bl	8005cb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7e:	bf00      	nop
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d12a      	bne.n	8005df8 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68da      	ldr	r2, [r3, #12]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005db6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695a      	ldr	r2, [r3, #20]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0201 	bic.w	r2, r2, #1
 8005dc6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	695a      	ldr	r2, [r3, #20]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dd6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d107      	bne.n	8005df8 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0210 	bic.w	r2, r2, #16
 8005df6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d106      	bne.n	8005e0e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e04:	4619      	mov	r1, r3
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f7ff ff7a 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e0c:	e002      	b.n	8005e14 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f7ff ff58 	bl	8005cc4 <HAL_UART_RxCpltCallback>
}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d108      	bne.n	8005e44 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ff5f 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e42:	e002      	b.n	8005e4a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f7ff ff47 	bl	8005cd8 <HAL_UART_RxHalfCpltCallback>
}
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b084      	sub	sp, #16
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e6e:	2b80      	cmp	r3, #128	; 0x80
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b21      	cmp	r3, #33	; 0x21
 8005e84:	d108      	bne.n	8005e98 <UART_DMAError+0x46>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f000 f88c 	bl	8005fb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea2:	2b40      	cmp	r3, #64	; 0x40
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b22      	cmp	r3, #34	; 0x22
 8005eb8:	d108      	bne.n	8005ecc <UART_DMAError+0x7a>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ec6:	68b8      	ldr	r0, [r7, #8]
 8005ec8:	f000 f888 	bl	8005fdc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	f043 0210 	orr.w	r2, r3, #16
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ed8:	68b8      	ldr	r0, [r7, #8]
 8005eda:	f7ff ff07 	bl	8005cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	88fa      	ldrh	r2, [r7, #6]
 8005f00:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2222      	movs	r2, #34	; 0x22
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <UART_Start_Receive_DMA+0xbc>)
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1c:	4a22      	ldr	r2, [pc, #136]	; (8005fa8 <UART_Start_Receive_DMA+0xc0>)
 8005f1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	4a21      	ldr	r2, [pc, #132]	; (8005fac <UART_Start_Receive_DMA+0xc4>)
 8005f26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005f30:	f107 0308 	add.w	r3, r7, #8
 8005f34:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4619      	mov	r1, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	f7fc fffa 	bl	8002f40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	613b      	str	r3, [r7, #16]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	613b      	str	r3, [r7, #16]
 8005f60:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f78:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695a      	ldr	r2, [r3, #20]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	695a      	ldr	r2, [r3, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f98:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	08005d87 	.word	0x08005d87
 8005fa8:	08005e1d 	.word	0x08005e1d
 8005fac:	08005e53 	.word	0x08005e53

08005fb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005fc6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ff2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0201 	bic.w	r2, r2, #1
 8006002:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0210 	bic.w	r2, r2, #16
 800601a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fe4b 	bl	8005cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b21      	cmp	r3, #33	; 0x21
 8006070:	d13e      	bne.n	80060f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d114      	bne.n	80060a6 <UART_Transmit_IT+0x48>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d110      	bne.n	80060a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	1c9a      	adds	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	621a      	str	r2, [r3, #32]
 80060a4:	e008      	b.n	80060b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6211      	str	r1, [r2, #32]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fdbc 	bl	8005c9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b22      	cmp	r3, #34	; 0x22
 8006140:	f040 8087 	bne.w	8006252 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d117      	bne.n	800617e <UART_Receive_IT+0x50>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	b29a      	uxth	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
 800617c:	e026      	b.n	80061cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006190:	d007      	beq.n	80061a2 <UART_Receive_IT+0x74>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <UART_Receive_IT+0x82>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e008      	b.n	80061c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4619      	mov	r1, r3
 80061da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d136      	bne.n	800624e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0220 	bic.w	r2, r2, #32
 80061ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10e      	bne.n	800623e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0210 	bic.w	r2, r2, #16
 800622e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006234:	4619      	mov	r1, r3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7ff fd62 	bl	8005d00 <HAL_UARTEx_RxEventCallback>
 800623c:	e002      	b.n	8006244 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fd40 	bl	8005cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e002      	b.n	8006254 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e000      	b.n	8006254 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006252:	2302      	movs	r3, #2
  }
}
 8006254:	4618      	mov	r0, r3
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800625c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006260:	b09f      	sub	sp, #124	; 0x7c
 8006262:	af00      	add	r7, sp, #0
 8006264:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006272:	68d9      	ldr	r1, [r3, #12]
 8006274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	ea40 0301 	orr.w	r3, r0, r1
 800627c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800627e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	431a      	orrs	r2, r3
 800628e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4313      	orrs	r3, r2
 8006294:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a0:	f021 010c 	bic.w	r1, r1, #12
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062aa:	430b      	orrs	r3, r1
 80062ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ba:	6999      	ldr	r1, [r3, #24]
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	ea40 0301 	orr.w	r3, r0, r1
 80062c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	4bc5      	ldr	r3, [pc, #788]	; (80065e0 <UART_SetConfig+0x384>)
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d004      	beq.n	80062da <UART_SetConfig+0x7e>
 80062d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4bc3      	ldr	r3, [pc, #780]	; (80065e4 <UART_SetConfig+0x388>)
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d103      	bne.n	80062e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062da:	f7fe f8eb 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 80062de:	6778      	str	r0, [r7, #116]	; 0x74
 80062e0:	e002      	b.n	80062e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e2:	f7fe f8d3 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 80062e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062f0:	f040 80b6 	bne.w	8006460 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f6:	461c      	mov	r4, r3
 80062f8:	f04f 0500 	mov.w	r5, #0
 80062fc:	4622      	mov	r2, r4
 80062fe:	462b      	mov	r3, r5
 8006300:	1891      	adds	r1, r2, r2
 8006302:	6439      	str	r1, [r7, #64]	; 0x40
 8006304:	415b      	adcs	r3, r3
 8006306:	647b      	str	r3, [r7, #68]	; 0x44
 8006308:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800630c:	1912      	adds	r2, r2, r4
 800630e:	eb45 0303 	adc.w	r3, r5, r3
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f04f 0100 	mov.w	r1, #0
 800631a:	00d9      	lsls	r1, r3, #3
 800631c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006320:	00d0      	lsls	r0, r2, #3
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	1911      	adds	r1, r2, r4
 8006328:	6639      	str	r1, [r7, #96]	; 0x60
 800632a:	416b      	adcs	r3, r5
 800632c:	667b      	str	r3, [r7, #100]	; 0x64
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	461a      	mov	r2, r3
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	1891      	adds	r1, r2, r2
 800633a:	63b9      	str	r1, [r7, #56]	; 0x38
 800633c:	415b      	adcs	r3, r3
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006344:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006348:	f7fa f854 	bl	80003f4 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4ba5      	ldr	r3, [pc, #660]	; (80065e8 <UART_SetConfig+0x38c>)
 8006352:	fba3 2302 	umull	r2, r3, r3, r2
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	011e      	lsls	r6, r3, #4
 800635a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800635c:	461c      	mov	r4, r3
 800635e:	f04f 0500 	mov.w	r5, #0
 8006362:	4622      	mov	r2, r4
 8006364:	462b      	mov	r3, r5
 8006366:	1891      	adds	r1, r2, r2
 8006368:	6339      	str	r1, [r7, #48]	; 0x30
 800636a:	415b      	adcs	r3, r3
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
 800636e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006372:	1912      	adds	r2, r2, r4
 8006374:	eb45 0303 	adc.w	r3, r5, r3
 8006378:	f04f 0000 	mov.w	r0, #0
 800637c:	f04f 0100 	mov.w	r1, #0
 8006380:	00d9      	lsls	r1, r3, #3
 8006382:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006386:	00d0      	lsls	r0, r2, #3
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	1911      	adds	r1, r2, r4
 800638e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006390:	416b      	adcs	r3, r5
 8006392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006394:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	461a      	mov	r2, r3
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	1891      	adds	r1, r2, r2
 80063a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80063a2:	415b      	adcs	r3, r3
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80063ae:	f7fa f821 	bl	80003f4 <__aeabi_uldivmod>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4b8c      	ldr	r3, [pc, #560]	; (80065e8 <UART_SetConfig+0x38c>)
 80063b8:	fba3 1302 	umull	r1, r3, r3, r2
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	2164      	movs	r1, #100	; 0x64
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	3332      	adds	r3, #50	; 0x32
 80063ca:	4a87      	ldr	r2, [pc, #540]	; (80065e8 <UART_SetConfig+0x38c>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063d8:	441e      	add	r6, r3
 80063da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063dc:	4618      	mov	r0, r3
 80063de:	f04f 0100 	mov.w	r1, #0
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	1894      	adds	r4, r2, r2
 80063e8:	623c      	str	r4, [r7, #32]
 80063ea:	415b      	adcs	r3, r3
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063f2:	1812      	adds	r2, r2, r0
 80063f4:	eb41 0303 	adc.w	r3, r1, r3
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	f04f 0500 	mov.w	r5, #0
 8006400:	00dd      	lsls	r5, r3, #3
 8006402:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006406:	00d4      	lsls	r4, r2, #3
 8006408:	4622      	mov	r2, r4
 800640a:	462b      	mov	r3, r5
 800640c:	1814      	adds	r4, r2, r0
 800640e:	653c      	str	r4, [r7, #80]	; 0x50
 8006410:	414b      	adcs	r3, r1
 8006412:	657b      	str	r3, [r7, #84]	; 0x54
 8006414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	461a      	mov	r2, r3
 800641a:	f04f 0300 	mov.w	r3, #0
 800641e:	1891      	adds	r1, r2, r2
 8006420:	61b9      	str	r1, [r7, #24]
 8006422:	415b      	adcs	r3, r3
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800642a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800642e:	f7f9 ffe1 	bl	80003f4 <__aeabi_uldivmod>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4b6c      	ldr	r3, [pc, #432]	; (80065e8 <UART_SetConfig+0x38c>)
 8006438:	fba3 1302 	umull	r1, r3, r3, r2
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	2164      	movs	r1, #100	; 0x64
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	3332      	adds	r3, #50	; 0x32
 800644a:	4a67      	ldr	r2, [pc, #412]	; (80065e8 <UART_SetConfig+0x38c>)
 800644c:	fba2 2303 	umull	r2, r3, r2, r3
 8006450:	095b      	lsrs	r3, r3, #5
 8006452:	f003 0207 	and.w	r2, r3, #7
 8006456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4432      	add	r2, r6
 800645c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800645e:	e0b9      	b.n	80065d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006462:	461c      	mov	r4, r3
 8006464:	f04f 0500 	mov.w	r5, #0
 8006468:	4622      	mov	r2, r4
 800646a:	462b      	mov	r3, r5
 800646c:	1891      	adds	r1, r2, r2
 800646e:	6139      	str	r1, [r7, #16]
 8006470:	415b      	adcs	r3, r3
 8006472:	617b      	str	r3, [r7, #20]
 8006474:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006478:	1912      	adds	r2, r2, r4
 800647a:	eb45 0303 	adc.w	r3, r5, r3
 800647e:	f04f 0000 	mov.w	r0, #0
 8006482:	f04f 0100 	mov.w	r1, #0
 8006486:	00d9      	lsls	r1, r3, #3
 8006488:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800648c:	00d0      	lsls	r0, r2, #3
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	eb12 0804 	adds.w	r8, r2, r4
 8006496:	eb43 0905 	adc.w	r9, r3, r5
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4618      	mov	r0, r3
 80064a0:	f04f 0100 	mov.w	r1, #0
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	008b      	lsls	r3, r1, #2
 80064ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80064b2:	0082      	lsls	r2, r0, #2
 80064b4:	4640      	mov	r0, r8
 80064b6:	4649      	mov	r1, r9
 80064b8:	f7f9 ff9c 	bl	80003f4 <__aeabi_uldivmod>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <UART_SetConfig+0x38c>)
 80064c2:	fba3 2302 	umull	r2, r3, r3, r2
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	011e      	lsls	r6, r3, #4
 80064ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064cc:	4618      	mov	r0, r3
 80064ce:	f04f 0100 	mov.w	r1, #0
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	1894      	adds	r4, r2, r2
 80064d8:	60bc      	str	r4, [r7, #8]
 80064da:	415b      	adcs	r3, r3
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064e2:	1812      	adds	r2, r2, r0
 80064e4:	eb41 0303 	adc.w	r3, r1, r3
 80064e8:	f04f 0400 	mov.w	r4, #0
 80064ec:	f04f 0500 	mov.w	r5, #0
 80064f0:	00dd      	lsls	r5, r3, #3
 80064f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80064f6:	00d4      	lsls	r4, r2, #3
 80064f8:	4622      	mov	r2, r4
 80064fa:	462b      	mov	r3, r5
 80064fc:	1814      	adds	r4, r2, r0
 80064fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8006500:	414b      	adcs	r3, r1
 8006502:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4618      	mov	r0, r3
 800650a:	f04f 0100 	mov.w	r1, #0
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800651c:	0082      	lsls	r2, r0, #2
 800651e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006522:	f7f9 ff67 	bl	80003f4 <__aeabi_uldivmod>
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	4b2f      	ldr	r3, [pc, #188]	; (80065e8 <UART_SetConfig+0x38c>)
 800652c:	fba3 1302 	umull	r1, r3, r3, r2
 8006530:	095b      	lsrs	r3, r3, #5
 8006532:	2164      	movs	r1, #100	; 0x64
 8006534:	fb01 f303 	mul.w	r3, r1, r3
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	011b      	lsls	r3, r3, #4
 800653c:	3332      	adds	r3, #50	; 0x32
 800653e:	4a2a      	ldr	r2, [pc, #168]	; (80065e8 <UART_SetConfig+0x38c>)
 8006540:	fba2 2303 	umull	r2, r3, r2, r3
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800654a:	441e      	add	r6, r3
 800654c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800654e:	4618      	mov	r0, r3
 8006550:	f04f 0100 	mov.w	r1, #0
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	1894      	adds	r4, r2, r2
 800655a:	603c      	str	r4, [r7, #0]
 800655c:	415b      	adcs	r3, r3
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	1812      	adds	r2, r2, r0
 8006566:	eb41 0303 	adc.w	r3, r1, r3
 800656a:	f04f 0400 	mov.w	r4, #0
 800656e:	f04f 0500 	mov.w	r5, #0
 8006572:	00dd      	lsls	r5, r3, #3
 8006574:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006578:	00d4      	lsls	r4, r2, #3
 800657a:	4622      	mov	r2, r4
 800657c:	462b      	mov	r3, r5
 800657e:	eb12 0a00 	adds.w	sl, r2, r0
 8006582:	eb43 0b01 	adc.w	fp, r3, r1
 8006586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4618      	mov	r0, r3
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	008b      	lsls	r3, r1, #2
 800659a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800659e:	0082      	lsls	r2, r0, #2
 80065a0:	4650      	mov	r0, sl
 80065a2:	4659      	mov	r1, fp
 80065a4:	f7f9 ff26 	bl	80003f4 <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <UART_SetConfig+0x38c>)
 80065ae:	fba3 1302 	umull	r1, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	2164      	movs	r1, #100	; 0x64
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	3332      	adds	r3, #50	; 0x32
 80065c0:	4a09      	ldr	r2, [pc, #36]	; (80065e8 <UART_SetConfig+0x38c>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	f003 020f 	and.w	r2, r3, #15
 80065cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4432      	add	r2, r6
 80065d2:	609a      	str	r2, [r3, #8]
}
 80065d4:	bf00      	nop
 80065d6:	377c      	adds	r7, #124	; 0x7c
 80065d8:	46bd      	mov	sp, r7
 80065da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065de:	bf00      	nop
 80065e0:	40011000 	.word	0x40011000
 80065e4:	40011400 	.word	0x40011400
 80065e8:	51eb851f 	.word	0x51eb851f

080065ec <calloc>:
 80065ec:	4b02      	ldr	r3, [pc, #8]	; (80065f8 <calloc+0xc>)
 80065ee:	460a      	mov	r2, r1
 80065f0:	4601      	mov	r1, r0
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	f000 b842 	b.w	800667c <_calloc_r>
 80065f8:	20000030 	.word	0x20000030

080065fc <__errno>:
 80065fc:	4b01      	ldr	r3, [pc, #4]	; (8006604 <__errno+0x8>)
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	20000030 	.word	0x20000030

08006608 <__libc_init_array>:
 8006608:	b570      	push	{r4, r5, r6, lr}
 800660a:	4d0d      	ldr	r5, [pc, #52]	; (8006640 <__libc_init_array+0x38>)
 800660c:	4c0d      	ldr	r4, [pc, #52]	; (8006644 <__libc_init_array+0x3c>)
 800660e:	1b64      	subs	r4, r4, r5
 8006610:	10a4      	asrs	r4, r4, #2
 8006612:	2600      	movs	r6, #0
 8006614:	42a6      	cmp	r6, r4
 8006616:	d109      	bne.n	800662c <__libc_init_array+0x24>
 8006618:	4d0b      	ldr	r5, [pc, #44]	; (8006648 <__libc_init_array+0x40>)
 800661a:	4c0c      	ldr	r4, [pc, #48]	; (800664c <__libc_init_array+0x44>)
 800661c:	f000 fd20 	bl	8007060 <_init>
 8006620:	1b64      	subs	r4, r4, r5
 8006622:	10a4      	asrs	r4, r4, #2
 8006624:	2600      	movs	r6, #0
 8006626:	42a6      	cmp	r6, r4
 8006628:	d105      	bne.n	8006636 <__libc_init_array+0x2e>
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006630:	4798      	blx	r3
 8006632:	3601      	adds	r6, #1
 8006634:	e7ee      	b.n	8006614 <__libc_init_array+0xc>
 8006636:	f855 3b04 	ldr.w	r3, [r5], #4
 800663a:	4798      	blx	r3
 800663c:	3601      	adds	r6, #1
 800663e:	e7f2      	b.n	8006626 <__libc_init_array+0x1e>
 8006640:	080070c8 	.word	0x080070c8
 8006644:	080070c8 	.word	0x080070c8
 8006648:	080070c8 	.word	0x080070c8
 800664c:	080070cc 	.word	0x080070cc

08006650 <memcpy>:
 8006650:	440a      	add	r2, r1
 8006652:	4291      	cmp	r1, r2
 8006654:	f100 33ff 	add.w	r3, r0, #4294967295
 8006658:	d100      	bne.n	800665c <memcpy+0xc>
 800665a:	4770      	bx	lr
 800665c:	b510      	push	{r4, lr}
 800665e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006666:	4291      	cmp	r1, r2
 8006668:	d1f9      	bne.n	800665e <memcpy+0xe>
 800666a:	bd10      	pop	{r4, pc}

0800666c <memset>:
 800666c:	4402      	add	r2, r0
 800666e:	4603      	mov	r3, r0
 8006670:	4293      	cmp	r3, r2
 8006672:	d100      	bne.n	8006676 <memset+0xa>
 8006674:	4770      	bx	lr
 8006676:	f803 1b01 	strb.w	r1, [r3], #1
 800667a:	e7f9      	b.n	8006670 <memset+0x4>

0800667c <_calloc_r>:
 800667c:	b513      	push	{r0, r1, r4, lr}
 800667e:	434a      	muls	r2, r1
 8006680:	4611      	mov	r1, r2
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	f000 f80a 	bl	800669c <_malloc_r>
 8006688:	4604      	mov	r4, r0
 800668a:	b118      	cbz	r0, 8006694 <_calloc_r+0x18>
 800668c:	9a01      	ldr	r2, [sp, #4]
 800668e:	2100      	movs	r1, #0
 8006690:	f7ff ffec 	bl	800666c <memset>
 8006694:	4620      	mov	r0, r4
 8006696:	b002      	add	sp, #8
 8006698:	bd10      	pop	{r4, pc}
	...

0800669c <_malloc_r>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	1ccd      	adds	r5, r1, #3
 80066a0:	f025 0503 	bic.w	r5, r5, #3
 80066a4:	3508      	adds	r5, #8
 80066a6:	2d0c      	cmp	r5, #12
 80066a8:	bf38      	it	cc
 80066aa:	250c      	movcc	r5, #12
 80066ac:	2d00      	cmp	r5, #0
 80066ae:	4606      	mov	r6, r0
 80066b0:	db01      	blt.n	80066b6 <_malloc_r+0x1a>
 80066b2:	42a9      	cmp	r1, r5
 80066b4:	d903      	bls.n	80066be <_malloc_r+0x22>
 80066b6:	230c      	movs	r3, #12
 80066b8:	6033      	str	r3, [r6, #0]
 80066ba:	2000      	movs	r0, #0
 80066bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066be:	f000 f857 	bl	8006770 <__malloc_lock>
 80066c2:	4921      	ldr	r1, [pc, #132]	; (8006748 <_malloc_r+0xac>)
 80066c4:	680a      	ldr	r2, [r1, #0]
 80066c6:	4614      	mov	r4, r2
 80066c8:	b99c      	cbnz	r4, 80066f2 <_malloc_r+0x56>
 80066ca:	4f20      	ldr	r7, [pc, #128]	; (800674c <_malloc_r+0xb0>)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	b923      	cbnz	r3, 80066da <_malloc_r+0x3e>
 80066d0:	4621      	mov	r1, r4
 80066d2:	4630      	mov	r0, r6
 80066d4:	f000 f83c 	bl	8006750 <_sbrk_r>
 80066d8:	6038      	str	r0, [r7, #0]
 80066da:	4629      	mov	r1, r5
 80066dc:	4630      	mov	r0, r6
 80066de:	f000 f837 	bl	8006750 <_sbrk_r>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d123      	bne.n	800672e <_malloc_r+0x92>
 80066e6:	230c      	movs	r3, #12
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	4630      	mov	r0, r6
 80066ec:	f000 f846 	bl	800677c <__malloc_unlock>
 80066f0:	e7e3      	b.n	80066ba <_malloc_r+0x1e>
 80066f2:	6823      	ldr	r3, [r4, #0]
 80066f4:	1b5b      	subs	r3, r3, r5
 80066f6:	d417      	bmi.n	8006728 <_malloc_r+0x8c>
 80066f8:	2b0b      	cmp	r3, #11
 80066fa:	d903      	bls.n	8006704 <_malloc_r+0x68>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	441c      	add	r4, r3
 8006700:	6025      	str	r5, [r4, #0]
 8006702:	e004      	b.n	800670e <_malloc_r+0x72>
 8006704:	6863      	ldr	r3, [r4, #4]
 8006706:	42a2      	cmp	r2, r4
 8006708:	bf0c      	ite	eq
 800670a:	600b      	streq	r3, [r1, #0]
 800670c:	6053      	strne	r3, [r2, #4]
 800670e:	4630      	mov	r0, r6
 8006710:	f000 f834 	bl	800677c <__malloc_unlock>
 8006714:	f104 000b 	add.w	r0, r4, #11
 8006718:	1d23      	adds	r3, r4, #4
 800671a:	f020 0007 	bic.w	r0, r0, #7
 800671e:	1ac2      	subs	r2, r0, r3
 8006720:	d0cc      	beq.n	80066bc <_malloc_r+0x20>
 8006722:	1a1b      	subs	r3, r3, r0
 8006724:	50a3      	str	r3, [r4, r2]
 8006726:	e7c9      	b.n	80066bc <_malloc_r+0x20>
 8006728:	4622      	mov	r2, r4
 800672a:	6864      	ldr	r4, [r4, #4]
 800672c:	e7cc      	b.n	80066c8 <_malloc_r+0x2c>
 800672e:	1cc4      	adds	r4, r0, #3
 8006730:	f024 0403 	bic.w	r4, r4, #3
 8006734:	42a0      	cmp	r0, r4
 8006736:	d0e3      	beq.n	8006700 <_malloc_r+0x64>
 8006738:	1a21      	subs	r1, r4, r0
 800673a:	4630      	mov	r0, r6
 800673c:	f000 f808 	bl	8006750 <_sbrk_r>
 8006740:	3001      	adds	r0, #1
 8006742:	d1dd      	bne.n	8006700 <_malloc_r+0x64>
 8006744:	e7cf      	b.n	80066e6 <_malloc_r+0x4a>
 8006746:	bf00      	nop
 8006748:	200001c4 	.word	0x200001c4
 800674c:	200001c8 	.word	0x200001c8

08006750 <_sbrk_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_sbrk_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fc f94c 	bl	80029f8 <_sbrk>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_sbrk_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_sbrk_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	2000045c 	.word	0x2000045c

08006770 <__malloc_lock>:
 8006770:	4801      	ldr	r0, [pc, #4]	; (8006778 <__malloc_lock+0x8>)
 8006772:	f000 b809 	b.w	8006788 <__retarget_lock_acquire_recursive>
 8006776:	bf00      	nop
 8006778:	20000464 	.word	0x20000464

0800677c <__malloc_unlock>:
 800677c:	4801      	ldr	r0, [pc, #4]	; (8006784 <__malloc_unlock+0x8>)
 800677e:	f000 b804 	b.w	800678a <__retarget_lock_release_recursive>
 8006782:	bf00      	nop
 8006784:	20000464 	.word	0x20000464

08006788 <__retarget_lock_acquire_recursive>:
 8006788:	4770      	bx	lr

0800678a <__retarget_lock_release_recursive>:
 800678a:	4770      	bx	lr

0800678c <powf>:
 800678c:	b508      	push	{r3, lr}
 800678e:	ed2d 8b04 	vpush	{d8-d9}
 8006792:	eeb0 9a40 	vmov.f32	s18, s0
 8006796:	eef0 8a60 	vmov.f32	s17, s1
 800679a:	f000 f8b5 	bl	8006908 <__ieee754_powf>
 800679e:	4b43      	ldr	r3, [pc, #268]	; (80068ac <powf+0x120>)
 80067a0:	f993 3000 	ldrsb.w	r3, [r3]
 80067a4:	3301      	adds	r3, #1
 80067a6:	eeb0 8a40 	vmov.f32	s16, s0
 80067aa:	d012      	beq.n	80067d2 <powf+0x46>
 80067ac:	eef4 8a68 	vcmp.f32	s17, s17
 80067b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b4:	d60d      	bvs.n	80067d2 <powf+0x46>
 80067b6:	eeb4 9a49 	vcmp.f32	s18, s18
 80067ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067be:	d70d      	bvc.n	80067dc <powf+0x50>
 80067c0:	eef5 8a40 	vcmp.f32	s17, #0.0
 80067c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80067cc:	bf08      	it	eq
 80067ce:	eeb0 8a67 	vmoveq.f32	s16, s15
 80067d2:	eeb0 0a48 	vmov.f32	s0, s16
 80067d6:	ecbd 8b04 	vpop	{d8-d9}
 80067da:	bd08      	pop	{r3, pc}
 80067dc:	eddf 9a34 	vldr	s19, [pc, #208]	; 80068b0 <powf+0x124>
 80067e0:	eeb4 9a69 	vcmp.f32	s18, s19
 80067e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e8:	d116      	bne.n	8006818 <powf+0x8c>
 80067ea:	eef4 8a69 	vcmp.f32	s17, s19
 80067ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067f2:	d057      	beq.n	80068a4 <powf+0x118>
 80067f4:	eeb0 0a68 	vmov.f32	s0, s17
 80067f8:	f000 fb50 	bl	8006e9c <finitef>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d0e8      	beq.n	80067d2 <powf+0x46>
 8006800:	eef4 8ae9 	vcmpe.f32	s17, s19
 8006804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006808:	d5e3      	bpl.n	80067d2 <powf+0x46>
 800680a:	f7ff fef7 	bl	80065fc <__errno>
 800680e:	2321      	movs	r3, #33	; 0x21
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80068b4 <powf+0x128>
 8006816:	e7dc      	b.n	80067d2 <powf+0x46>
 8006818:	f000 fb40 	bl	8006e9c <finitef>
 800681c:	bb50      	cbnz	r0, 8006874 <powf+0xe8>
 800681e:	eeb0 0a49 	vmov.f32	s0, s18
 8006822:	f000 fb3b 	bl	8006e9c <finitef>
 8006826:	b328      	cbz	r0, 8006874 <powf+0xe8>
 8006828:	eeb0 0a68 	vmov.f32	s0, s17
 800682c:	f000 fb36 	bl	8006e9c <finitef>
 8006830:	b300      	cbz	r0, 8006874 <powf+0xe8>
 8006832:	eeb4 8a48 	vcmp.f32	s16, s16
 8006836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800683a:	d706      	bvc.n	800684a <powf+0xbe>
 800683c:	f7ff fede 	bl	80065fc <__errno>
 8006840:	2321      	movs	r3, #33	; 0x21
 8006842:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8006846:	6003      	str	r3, [r0, #0]
 8006848:	e7c3      	b.n	80067d2 <powf+0x46>
 800684a:	f7ff fed7 	bl	80065fc <__errno>
 800684e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006852:	2322      	movs	r3, #34	; 0x22
 8006854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006858:	6003      	str	r3, [r0, #0]
 800685a:	d508      	bpl.n	800686e <powf+0xe2>
 800685c:	eeb0 0a68 	vmov.f32	s0, s17
 8006860:	f000 fb30 	bl	8006ec4 <rintf>
 8006864:	eeb4 0a68 	vcmp.f32	s0, s17
 8006868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800686c:	d1d1      	bne.n	8006812 <powf+0x86>
 800686e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80068b8 <powf+0x12c>
 8006872:	e7ae      	b.n	80067d2 <powf+0x46>
 8006874:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800687c:	d1a9      	bne.n	80067d2 <powf+0x46>
 800687e:	eeb0 0a49 	vmov.f32	s0, s18
 8006882:	f000 fb0b 	bl	8006e9c <finitef>
 8006886:	2800      	cmp	r0, #0
 8006888:	d0a3      	beq.n	80067d2 <powf+0x46>
 800688a:	eeb0 0a68 	vmov.f32	s0, s17
 800688e:	f000 fb05 	bl	8006e9c <finitef>
 8006892:	2800      	cmp	r0, #0
 8006894:	d09d      	beq.n	80067d2 <powf+0x46>
 8006896:	f7ff feb1 	bl	80065fc <__errno>
 800689a:	2322      	movs	r3, #34	; 0x22
 800689c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80068b0 <powf+0x124>
 80068a0:	6003      	str	r3, [r0, #0]
 80068a2:	e796      	b.n	80067d2 <powf+0x46>
 80068a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80068a8:	e793      	b.n	80067d2 <powf+0x46>
 80068aa:	bf00      	nop
 80068ac:	20000094 	.word	0x20000094
 80068b0:	00000000 	.word	0x00000000
 80068b4:	ff800000 	.word	0xff800000
 80068b8:	7f800000 	.word	0x7f800000

080068bc <sqrtf>:
 80068bc:	b508      	push	{r3, lr}
 80068be:	ed2d 8b02 	vpush	{d8}
 80068c2:	eeb0 8a40 	vmov.f32	s16, s0
 80068c6:	f000 fadf 	bl	8006e88 <__ieee754_sqrtf>
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <sqrtf+0x44>)
 80068cc:	f993 3000 	ldrsb.w	r3, [r3]
 80068d0:	3301      	adds	r3, #1
 80068d2:	d011      	beq.n	80068f8 <sqrtf+0x3c>
 80068d4:	eeb4 8a48 	vcmp.f32	s16, s16
 80068d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068dc:	d60c      	bvs.n	80068f8 <sqrtf+0x3c>
 80068de:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006904 <sqrtf+0x48>
 80068e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80068e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ea:	d505      	bpl.n	80068f8 <sqrtf+0x3c>
 80068ec:	f7ff fe86 	bl	80065fc <__errno>
 80068f0:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80068f4:	2321      	movs	r3, #33	; 0x21
 80068f6:	6003      	str	r3, [r0, #0]
 80068f8:	ecbd 8b02 	vpop	{d8}
 80068fc:	bd08      	pop	{r3, pc}
 80068fe:	bf00      	nop
 8006900:	20000094 	.word	0x20000094
 8006904:	00000000 	.word	0x00000000

08006908 <__ieee754_powf>:
 8006908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800690c:	ee10 5a90 	vmov	r5, s1
 8006910:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006914:	ed2d 8b02 	vpush	{d8}
 8006918:	eeb0 8a40 	vmov.f32	s16, s0
 800691c:	eef0 8a60 	vmov.f32	s17, s1
 8006920:	f000 8291 	beq.w	8006e46 <__ieee754_powf+0x53e>
 8006924:	ee10 8a10 	vmov	r8, s0
 8006928:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800692c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006930:	dc06      	bgt.n	8006940 <__ieee754_powf+0x38>
 8006932:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006936:	dd0a      	ble.n	800694e <__ieee754_powf+0x46>
 8006938:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800693c:	f000 8283 	beq.w	8006e46 <__ieee754_powf+0x53e>
 8006940:	ecbd 8b02 	vpop	{d8}
 8006944:	48d8      	ldr	r0, [pc, #864]	; (8006ca8 <__ieee754_powf+0x3a0>)
 8006946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800694a:	f000 bab5 	b.w	8006eb8 <nanf>
 800694e:	f1b8 0f00 	cmp.w	r8, #0
 8006952:	da1f      	bge.n	8006994 <__ieee754_powf+0x8c>
 8006954:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006958:	da2e      	bge.n	80069b8 <__ieee754_powf+0xb0>
 800695a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800695e:	f2c0 827b 	blt.w	8006e58 <__ieee754_powf+0x550>
 8006962:	15fb      	asrs	r3, r7, #23
 8006964:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006968:	fa47 f603 	asr.w	r6, r7, r3
 800696c:	fa06 f303 	lsl.w	r3, r6, r3
 8006970:	42bb      	cmp	r3, r7
 8006972:	f040 8271 	bne.w	8006e58 <__ieee754_powf+0x550>
 8006976:	f006 0601 	and.w	r6, r6, #1
 800697a:	f1c6 0602 	rsb	r6, r6, #2
 800697e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006982:	d120      	bne.n	80069c6 <__ieee754_powf+0xbe>
 8006984:	2d00      	cmp	r5, #0
 8006986:	f280 8264 	bge.w	8006e52 <__ieee754_powf+0x54a>
 800698a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800698e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006992:	e00d      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006994:	2600      	movs	r6, #0
 8006996:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800699a:	d1f0      	bne.n	800697e <__ieee754_powf+0x76>
 800699c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80069a0:	f000 8251 	beq.w	8006e46 <__ieee754_powf+0x53e>
 80069a4:	dd0a      	ble.n	80069bc <__ieee754_powf+0xb4>
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	f280 8250 	bge.w	8006e4c <__ieee754_powf+0x544>
 80069ac:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8006cac <__ieee754_powf+0x3a4>
 80069b0:	ecbd 8b02 	vpop	{d8}
 80069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069b8:	2602      	movs	r6, #2
 80069ba:	e7ec      	b.n	8006996 <__ieee754_powf+0x8e>
 80069bc:	2d00      	cmp	r5, #0
 80069be:	daf5      	bge.n	80069ac <__ieee754_powf+0xa4>
 80069c0:	eeb1 0a68 	vneg.f32	s0, s17
 80069c4:	e7f4      	b.n	80069b0 <__ieee754_powf+0xa8>
 80069c6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80069ca:	d102      	bne.n	80069d2 <__ieee754_powf+0xca>
 80069cc:	ee28 0a08 	vmul.f32	s0, s16, s16
 80069d0:	e7ee      	b.n	80069b0 <__ieee754_powf+0xa8>
 80069d2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80069d6:	eeb0 0a48 	vmov.f32	s0, s16
 80069da:	d108      	bne.n	80069ee <__ieee754_powf+0xe6>
 80069dc:	f1b8 0f00 	cmp.w	r8, #0
 80069e0:	db05      	blt.n	80069ee <__ieee754_powf+0xe6>
 80069e2:	ecbd 8b02 	vpop	{d8}
 80069e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ea:	f000 ba4d 	b.w	8006e88 <__ieee754_sqrtf>
 80069ee:	f000 fa4e 	bl	8006e8e <fabsf>
 80069f2:	b124      	cbz	r4, 80069fe <__ieee754_powf+0xf6>
 80069f4:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80069f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80069fc:	d117      	bne.n	8006a2e <__ieee754_powf+0x126>
 80069fe:	2d00      	cmp	r5, #0
 8006a00:	bfbc      	itt	lt
 8006a02:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006a06:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006a0a:	f1b8 0f00 	cmp.w	r8, #0
 8006a0e:	dacf      	bge.n	80069b0 <__ieee754_powf+0xa8>
 8006a10:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006a14:	ea54 0306 	orrs.w	r3, r4, r6
 8006a18:	d104      	bne.n	8006a24 <__ieee754_powf+0x11c>
 8006a1a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006a1e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006a22:	e7c5      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006a24:	2e01      	cmp	r6, #1
 8006a26:	d1c3      	bne.n	80069b0 <__ieee754_powf+0xa8>
 8006a28:	eeb1 0a40 	vneg.f32	s0, s0
 8006a2c:	e7c0      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006a2e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006a32:	3801      	subs	r0, #1
 8006a34:	ea56 0300 	orrs.w	r3, r6, r0
 8006a38:	d104      	bne.n	8006a44 <__ieee754_powf+0x13c>
 8006a3a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006a3e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006a42:	e7b5      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006a44:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006a48:	dd6b      	ble.n	8006b22 <__ieee754_powf+0x21a>
 8006a4a:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <__ieee754_powf+0x3a8>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	dc06      	bgt.n	8006a5e <__ieee754_powf+0x156>
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	daab      	bge.n	80069ac <__ieee754_powf+0xa4>
 8006a54:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8006cb4 <__ieee754_powf+0x3ac>
 8006a58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006a5c:	e7a8      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006a5e:	4b96      	ldr	r3, [pc, #600]	; (8006cb8 <__ieee754_powf+0x3b0>)
 8006a60:	429c      	cmp	r4, r3
 8006a62:	dd02      	ble.n	8006a6a <__ieee754_powf+0x162>
 8006a64:	2d00      	cmp	r5, #0
 8006a66:	dcf5      	bgt.n	8006a54 <__ieee754_powf+0x14c>
 8006a68:	e7a0      	b.n	80069ac <__ieee754_powf+0xa4>
 8006a6a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a72:	eddf 6a92 	vldr	s13, [pc, #584]	; 8006cbc <__ieee754_powf+0x3b4>
 8006a76:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006a7a:	eee0 6a67 	vfms.f32	s13, s0, s15
 8006a7e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006a82:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8006a86:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006cc0 <__ieee754_powf+0x3b8>
 8006a92:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8006a96:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006cc4 <__ieee754_powf+0x3bc>
 8006a9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006a9e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006cc8 <__ieee754_powf+0x3c0>
 8006aa2:	eef0 6a67 	vmov.f32	s13, s15
 8006aa6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006aaa:	ee16 3a90 	vmov	r3, s13
 8006aae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006ab2:	f023 030f 	bic.w	r3, r3, #15
 8006ab6:	ee00 3a90 	vmov	s1, r3
 8006aba:	eee0 0a47 	vfms.f32	s1, s0, s14
 8006abe:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006ac2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006ac6:	f025 050f 	bic.w	r5, r5, #15
 8006aca:	ee07 5a10 	vmov	s14, r5
 8006ace:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006ad2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006ad6:	ee07 3a90 	vmov	s15, r3
 8006ada:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006ade:	3e01      	subs	r6, #1
 8006ae0:	ea56 0200 	orrs.w	r2, r6, r0
 8006ae4:	ee07 5a10 	vmov	s14, r5
 8006ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006af0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006af4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006af8:	ee17 4a10 	vmov	r4, s14
 8006afc:	bf08      	it	eq
 8006afe:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006b08:	f340 8184 	ble.w	8006e14 <__ieee754_powf+0x50c>
 8006b0c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006b10:	f340 80fc 	ble.w	8006d0c <__ieee754_powf+0x404>
 8006b14:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006cb4 <__ieee754_powf+0x3ac>
 8006b18:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006b1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006b20:	e746      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006b22:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8006b26:	bf01      	itttt	eq
 8006b28:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8006ccc <__ieee754_powf+0x3c4>
 8006b2c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8006b30:	f06f 0217 	mvneq.w	r2, #23
 8006b34:	ee17 4a90 	vmoveq	r4, s15
 8006b38:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006b3c:	bf18      	it	ne
 8006b3e:	2200      	movne	r2, #0
 8006b40:	3b7f      	subs	r3, #127	; 0x7f
 8006b42:	4413      	add	r3, r2
 8006b44:	4a62      	ldr	r2, [pc, #392]	; (8006cd0 <__ieee754_powf+0x3c8>)
 8006b46:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006b4a:	4294      	cmp	r4, r2
 8006b4c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006b50:	dd06      	ble.n	8006b60 <__ieee754_powf+0x258>
 8006b52:	4a60      	ldr	r2, [pc, #384]	; (8006cd4 <__ieee754_powf+0x3cc>)
 8006b54:	4294      	cmp	r4, r2
 8006b56:	f340 80a4 	ble.w	8006ca2 <__ieee754_powf+0x39a>
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006b60:	2400      	movs	r4, #0
 8006b62:	4a5d      	ldr	r2, [pc, #372]	; (8006cd8 <__ieee754_powf+0x3d0>)
 8006b64:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006b68:	ee07 1a90 	vmov	s15, r1
 8006b6c:	ed92 7a00 	vldr	s14, [r2]
 8006b70:	4a5a      	ldr	r2, [pc, #360]	; (8006cdc <__ieee754_powf+0x3d4>)
 8006b72:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006b76:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006b7a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8006b7e:	1049      	asrs	r1, r1, #1
 8006b80:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006b84:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006b88:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006b8c:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8006b90:	ee06 1a10 	vmov	s12, r1
 8006b94:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006b98:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006b9c:	ee14 7a90 	vmov	r7, s9
 8006ba0:	4017      	ands	r7, r2
 8006ba2:	ee05 7a90 	vmov	s11, r7
 8006ba6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bae:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006ce0 <__ieee754_powf+0x3d8>
 8006bb2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006bb6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006bba:	ee25 6a26 	vmul.f32	s12, s10, s13
 8006bbe:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006ce4 <__ieee754_powf+0x3dc>
 8006bc2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006bc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006ce8 <__ieee754_powf+0x3e0>
 8006bca:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006bce:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006cbc <__ieee754_powf+0x3b4>
 8006bd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006bd6:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006cec <__ieee754_powf+0x3e4>
 8006bda:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006bde:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006cf0 <__ieee754_powf+0x3e8>
 8006be2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006be6:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006bea:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006bee:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006bf2:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006bf6:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006bfa:	eef0 7a45 	vmov.f32	s15, s10
 8006bfe:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee17 1a90 	vmov	r1, s15
 8006c0a:	4011      	ands	r1, r2
 8006c0c:	ee07 1a90 	vmov	s15, r1
 8006c10:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8006c14:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006c18:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006c1c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006c20:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006c24:	eeb0 6a47 	vmov.f32	s12, s14
 8006c28:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006c2c:	ee16 1a10 	vmov	r1, s12
 8006c30:	4011      	ands	r1, r2
 8006c32:	ee06 1a90 	vmov	s13, r1
 8006c36:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8006c3a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006cf4 <__ieee754_powf+0x3ec>
 8006c3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006cf8 <__ieee754_powf+0x3f0>
 8006c42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006c46:	ee06 1a10 	vmov	s12, r1
 8006c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c4e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006cfc <__ieee754_powf+0x3f4>
 8006c52:	492b      	ldr	r1, [pc, #172]	; (8006d00 <__ieee754_powf+0x3f8>)
 8006c54:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006c58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c5c:	edd1 7a00 	vldr	s15, [r1]
 8006c60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c64:	ee07 3a90 	vmov	s15, r3
 8006c68:	4b26      	ldr	r3, [pc, #152]	; (8006d04 <__ieee754_powf+0x3fc>)
 8006c6a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006c6e:	eef0 7a47 	vmov.f32	s15, s14
 8006c72:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006c76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c7a:	edd4 0a00 	vldr	s1, [r4]
 8006c7e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8006c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c86:	ee17 3a90 	vmov	r3, s15
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006c94:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006c98:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006c9c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8006ca0:	e70f      	b.n	8006ac2 <__ieee754_powf+0x1ba>
 8006ca2:	2401      	movs	r4, #1
 8006ca4:	e75d      	b.n	8006b62 <__ieee754_powf+0x25a>
 8006ca6:	bf00      	nop
 8006ca8:	0800709c 	.word	0x0800709c
 8006cac:	00000000 	.word	0x00000000
 8006cb0:	3f7ffff7 	.word	0x3f7ffff7
 8006cb4:	7149f2ca 	.word	0x7149f2ca
 8006cb8:	3f800007 	.word	0x3f800007
 8006cbc:	3eaaaaab 	.word	0x3eaaaaab
 8006cc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8006cc4:	36eca570 	.word	0x36eca570
 8006cc8:	3fb8aa00 	.word	0x3fb8aa00
 8006ccc:	4b800000 	.word	0x4b800000
 8006cd0:	001cc471 	.word	0x001cc471
 8006cd4:	005db3d6 	.word	0x005db3d6
 8006cd8:	080070a0 	.word	0x080070a0
 8006cdc:	fffff000 	.word	0xfffff000
 8006ce0:	3e6c3255 	.word	0x3e6c3255
 8006ce4:	3e53f142 	.word	0x3e53f142
 8006ce8:	3e8ba305 	.word	0x3e8ba305
 8006cec:	3edb6db7 	.word	0x3edb6db7
 8006cf0:	3f19999a 	.word	0x3f19999a
 8006cf4:	3f76384f 	.word	0x3f76384f
 8006cf8:	3f763800 	.word	0x3f763800
 8006cfc:	369dc3a0 	.word	0x369dc3a0
 8006d00:	080070b0 	.word	0x080070b0
 8006d04:	080070a8 	.word	0x080070a8
 8006d08:	3338aa3c 	.word	0x3338aa3c
 8006d0c:	f040 8092 	bne.w	8006e34 <__ieee754_powf+0x52c>
 8006d10:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006d08 <__ieee754_powf+0x400>
 8006d14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d18:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006d1c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	f73f aef6 	bgt.w	8006b14 <__ieee754_powf+0x20c>
 8006d28:	15db      	asrs	r3, r3, #23
 8006d2a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006d2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d32:	4103      	asrs	r3, r0
 8006d34:	4423      	add	r3, r4
 8006d36:	4949      	ldr	r1, [pc, #292]	; (8006e5c <__ieee754_powf+0x554>)
 8006d38:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006d3c:	3a7f      	subs	r2, #127	; 0x7f
 8006d3e:	4111      	asrs	r1, r2
 8006d40:	ea23 0101 	bic.w	r1, r3, r1
 8006d44:	ee07 1a10 	vmov	s14, r1
 8006d48:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006d4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006d50:	f1c2 0217 	rsb	r2, r2, #23
 8006d54:	4110      	asrs	r0, r2
 8006d56:	2c00      	cmp	r4, #0
 8006d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006d5c:	bfb8      	it	lt
 8006d5e:	4240      	neglt	r0, r0
 8006d60:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006d64:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006e60 <__ieee754_powf+0x558>
 8006d68:	ee17 3a10 	vmov	r3, s14
 8006d6c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d70:	f023 030f 	bic.w	r3, r3, #15
 8006d74:	ee07 3a10 	vmov	s14, r3
 8006d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d7c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006d80:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006e64 <__ieee754_powf+0x55c>
 8006d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d88:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006d8c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006e68 <__ieee754_powf+0x560>
 8006d90:	eeb0 0a67 	vmov.f32	s0, s15
 8006d94:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006d98:	eeb0 6a40 	vmov.f32	s12, s0
 8006d9c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006da0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006da4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006da8:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006e6c <__ieee754_powf+0x564>
 8006dac:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8006e70 <__ieee754_powf+0x568>
 8006db0:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006db4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006e74 <__ieee754_powf+0x56c>
 8006db8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006dbc:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006e78 <__ieee754_powf+0x570>
 8006dc0:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006dc4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006e7c <__ieee754_powf+0x574>
 8006dc8:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006dcc:	eeb0 6a40 	vmov.f32	s12, s0
 8006dd0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006dd4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006dd8:	eeb0 7a46 	vmov.f32	s14, s12
 8006ddc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006de0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006de4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006de8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006df4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006df8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006dfc:	ee10 3a10 	vmov	r3, s0
 8006e00:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e08:	da1a      	bge.n	8006e40 <__ieee754_powf+0x538>
 8006e0a:	f000 f8b7 	bl	8006f7c <scalbnf>
 8006e0e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006e12:	e5cd      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006e14:	4a1a      	ldr	r2, [pc, #104]	; (8006e80 <__ieee754_powf+0x578>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	dd02      	ble.n	8006e20 <__ieee754_powf+0x518>
 8006e1a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8006e84 <__ieee754_powf+0x57c>
 8006e1e:	e67b      	b.n	8006b18 <__ieee754_powf+0x210>
 8006e20:	d108      	bne.n	8006e34 <__ieee754_powf+0x52c>
 8006e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e26:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e2e:	f6ff af7b 	blt.w	8006d28 <__ieee754_powf+0x420>
 8006e32:	e7f2      	b.n	8006e1a <__ieee754_powf+0x512>
 8006e34:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006e38:	f73f af76 	bgt.w	8006d28 <__ieee754_powf+0x420>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e78f      	b.n	8006d60 <__ieee754_powf+0x458>
 8006e40:	ee00 3a10 	vmov	s0, r3
 8006e44:	e7e3      	b.n	8006e0e <__ieee754_powf+0x506>
 8006e46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006e4a:	e5b1      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006e4c:	eeb0 0a68 	vmov.f32	s0, s17
 8006e50:	e5ae      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006e52:	eeb0 0a48 	vmov.f32	s0, s16
 8006e56:	e5ab      	b.n	80069b0 <__ieee754_powf+0xa8>
 8006e58:	2600      	movs	r6, #0
 8006e5a:	e590      	b.n	800697e <__ieee754_powf+0x76>
 8006e5c:	007fffff 	.word	0x007fffff
 8006e60:	3f317218 	.word	0x3f317218
 8006e64:	35bfbe8c 	.word	0x35bfbe8c
 8006e68:	3f317200 	.word	0x3f317200
 8006e6c:	3331bb4c 	.word	0x3331bb4c
 8006e70:	b5ddea0e 	.word	0xb5ddea0e
 8006e74:	388ab355 	.word	0x388ab355
 8006e78:	bb360b61 	.word	0xbb360b61
 8006e7c:	3e2aaaab 	.word	0x3e2aaaab
 8006e80:	43160000 	.word	0x43160000
 8006e84:	0da24260 	.word	0x0da24260

08006e88 <__ieee754_sqrtf>:
 8006e88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006e8c:	4770      	bx	lr

08006e8e <fabsf>:
 8006e8e:	ee10 3a10 	vmov	r3, s0
 8006e92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e96:	ee00 3a10 	vmov	s0, r3
 8006e9a:	4770      	bx	lr

08006e9c <finitef>:
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006ea2:	9801      	ldr	r0, [sp, #4]
 8006ea4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006ea8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006eac:	bfac      	ite	ge
 8006eae:	2000      	movge	r0, #0
 8006eb0:	2001      	movlt	r0, #1
 8006eb2:	b002      	add	sp, #8
 8006eb4:	4770      	bx	lr
	...

08006eb8 <nanf>:
 8006eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006ec0 <nanf+0x8>
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	7fc00000 	.word	0x7fc00000

08006ec4 <rintf>:
 8006ec4:	ee10 2a10 	vmov	r2, s0
 8006ec8:	b513      	push	{r0, r1, r4, lr}
 8006eca:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006ece:	397f      	subs	r1, #127	; 0x7f
 8006ed0:	2916      	cmp	r1, #22
 8006ed2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006ed6:	dc47      	bgt.n	8006f68 <rintf+0xa4>
 8006ed8:	b32b      	cbz	r3, 8006f26 <rintf+0x62>
 8006eda:	2900      	cmp	r1, #0
 8006edc:	ee10 3a10 	vmov	r3, s0
 8006ee0:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8006ee4:	da21      	bge.n	8006f2a <rintf+0x66>
 8006ee6:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8006eea:	425b      	negs	r3, r3
 8006eec:	4921      	ldr	r1, [pc, #132]	; (8006f74 <rintf+0xb0>)
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	0d12      	lsrs	r2, r2, #20
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef6:	0512      	lsls	r2, r2, #20
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	edd1 6a00 	vldr	s13, [r1]
 8006f06:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006f0a:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006f0e:	eddd 7a01 	vldr	s15, [sp, #4]
 8006f12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006f16:	ee17 3a90 	vmov	r3, s15
 8006f1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006f22:	ee00 3a10 	vmov	s0, r3
 8006f26:	b002      	add	sp, #8
 8006f28:	bd10      	pop	{r4, pc}
 8006f2a:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <rintf+0xb4>)
 8006f2c:	410a      	asrs	r2, r1
 8006f2e:	4213      	tst	r3, r2
 8006f30:	d0f9      	beq.n	8006f26 <rintf+0x62>
 8006f32:	0854      	lsrs	r4, r2, #1
 8006f34:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006f38:	d006      	beq.n	8006f48 <rintf+0x84>
 8006f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f3e:	ea23 0304 	bic.w	r3, r3, r4
 8006f42:	fa42 f101 	asr.w	r1, r2, r1
 8006f46:	430b      	orrs	r3, r1
 8006f48:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <rintf+0xb0>)
 8006f4a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006f4e:	ed90 7a00 	vldr	s14, [r0]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f5a:	edcd 7a01 	vstr	s15, [sp, #4]
 8006f5e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006f62:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006f66:	e7de      	b.n	8006f26 <rintf+0x62>
 8006f68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f6c:	d3db      	bcc.n	8006f26 <rintf+0x62>
 8006f6e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f72:	e7d8      	b.n	8006f26 <rintf+0x62>
 8006f74:	080070b8 	.word	0x080070b8
 8006f78:	007fffff 	.word	0x007fffff

08006f7c <scalbnf>:
 8006f7c:	ee10 3a10 	vmov	r3, s0
 8006f80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006f84:	d025      	beq.n	8006fd2 <scalbnf+0x56>
 8006f86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006f8a:	d302      	bcc.n	8006f92 <scalbnf+0x16>
 8006f8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f90:	4770      	bx	lr
 8006f92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006f96:	d122      	bne.n	8006fde <scalbnf+0x62>
 8006f98:	4b2a      	ldr	r3, [pc, #168]	; (8007044 <scalbnf+0xc8>)
 8006f9a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007048 <scalbnf+0xcc>
 8006f9e:	4298      	cmp	r0, r3
 8006fa0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006fa4:	db16      	blt.n	8006fd4 <scalbnf+0x58>
 8006fa6:	ee10 3a10 	vmov	r3, s0
 8006faa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006fae:	3a19      	subs	r2, #25
 8006fb0:	4402      	add	r2, r0
 8006fb2:	2afe      	cmp	r2, #254	; 0xfe
 8006fb4:	dd15      	ble.n	8006fe2 <scalbnf+0x66>
 8006fb6:	ee10 3a10 	vmov	r3, s0
 8006fba:	eddf 7a24 	vldr	s15, [pc, #144]	; 800704c <scalbnf+0xd0>
 8006fbe:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007050 <scalbnf+0xd4>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	eeb0 7a67 	vmov.f32	s14, s15
 8006fc8:	bfb8      	it	lt
 8006fca:	eef0 7a66 	vmovlt.f32	s15, s13
 8006fce:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006fd2:	4770      	bx	lr
 8006fd4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007054 <scalbnf+0xd8>
 8006fd8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006fdc:	4770      	bx	lr
 8006fde:	0dd2      	lsrs	r2, r2, #23
 8006fe0:	e7e6      	b.n	8006fb0 <scalbnf+0x34>
 8006fe2:	2a00      	cmp	r2, #0
 8006fe4:	dd06      	ble.n	8006ff4 <scalbnf+0x78>
 8006fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006fee:	ee00 3a10 	vmov	s0, r3
 8006ff2:	4770      	bx	lr
 8006ff4:	f112 0f16 	cmn.w	r2, #22
 8006ff8:	da1a      	bge.n	8007030 <scalbnf+0xb4>
 8006ffa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ffe:	4298      	cmp	r0, r3
 8007000:	ee10 3a10 	vmov	r3, s0
 8007004:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007008:	dd0a      	ble.n	8007020 <scalbnf+0xa4>
 800700a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800704c <scalbnf+0xd0>
 800700e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007050 <scalbnf+0xd4>
 8007012:	eef0 7a40 	vmov.f32	s15, s0
 8007016:	2b00      	cmp	r3, #0
 8007018:	bf18      	it	ne
 800701a:	eeb0 0a47 	vmovne.f32	s0, s14
 800701e:	e7db      	b.n	8006fd8 <scalbnf+0x5c>
 8007020:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007054 <scalbnf+0xd8>
 8007024:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007058 <scalbnf+0xdc>
 8007028:	eef0 7a40 	vmov.f32	s15, s0
 800702c:	2b00      	cmp	r3, #0
 800702e:	e7f3      	b.n	8007018 <scalbnf+0x9c>
 8007030:	3219      	adds	r2, #25
 8007032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007036:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800703a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800705c <scalbnf+0xe0>
 800703e:	ee07 3a10 	vmov	s14, r3
 8007042:	e7c4      	b.n	8006fce <scalbnf+0x52>
 8007044:	ffff3cb0 	.word	0xffff3cb0
 8007048:	4c000000 	.word	0x4c000000
 800704c:	7149f2ca 	.word	0x7149f2ca
 8007050:	f149f2ca 	.word	0xf149f2ca
 8007054:	0da24260 	.word	0x0da24260
 8007058:	8da24260 	.word	0x8da24260
 800705c:	33000000 	.word	0x33000000

08007060 <_init>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr

0800706c <_fini>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr
