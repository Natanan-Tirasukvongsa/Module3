
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008708  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f0  080088f0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080088f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200000b0  080089a4  000200b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  080089a4  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ef5  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002094  00000000  00000000  00030fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00033068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f28  00000000  00000000  00034f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119f0  00000000  00000000  0004be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cbe  00000000  00000000  0005d880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  000ef594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008888 	.word	0x08008888

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000b4 	.word	0x200000b4
 80001d4:	08008888 	.word	0x08008888

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_frsub>:
 8000b24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b28:	e002      	b.n	8000b30 <__addsf3>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_fsub>:
 8000b2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b30 <__addsf3>:
 8000b30:	0042      	lsls	r2, r0, #1
 8000b32:	bf1f      	itttt	ne
 8000b34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b38:	ea92 0f03 	teqne	r2, r3
 8000b3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b44:	d06a      	beq.n	8000c1c <__addsf3+0xec>
 8000b46:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4e:	bfc1      	itttt	gt
 8000b50:	18d2      	addgt	r2, r2, r3
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	4048      	eorgt	r0, r1
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	bfb8      	it	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	2b19      	cmp	r3, #25
 8000b5e:	bf88      	it	hi
 8000b60:	4770      	bxhi	lr
 8000b62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4249      	negne	r1, r1
 8000b82:	ea92 0f03 	teq	r2, r3
 8000b86:	d03f      	beq.n	8000c08 <__addsf3+0xd8>
 8000b88:	f1a2 0201 	sub.w	r2, r2, #1
 8000b8c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b90:	eb10 000c 	adds.w	r0, r0, ip
 8000b94:	f1c3 0320 	rsb	r3, r3, #32
 8000b98:	fa01 f103 	lsl.w	r1, r1, r3
 8000b9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba0:	d502      	bpl.n	8000ba8 <__addsf3+0x78>
 8000ba2:	4249      	negs	r1, r1
 8000ba4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bac:	d313      	bcc.n	8000bd6 <__addsf3+0xa6>
 8000bae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb2:	d306      	bcc.n	8000bc2 <__addsf3+0x92>
 8000bb4:	0840      	lsrs	r0, r0, #1
 8000bb6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bba:	f102 0201 	add.w	r2, r2, #1
 8000bbe:	2afe      	cmp	r2, #254	; 0xfe
 8000bc0:	d251      	bcs.n	8000c66 <__addsf3+0x136>
 8000bc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bca:	bf08      	it	eq
 8000bcc:	f020 0001 	biceq.w	r0, r0, #1
 8000bd0:	ea40 0003 	orr.w	r0, r0, r3
 8000bd4:	4770      	bx	lr
 8000bd6:	0049      	lsls	r1, r1, #1
 8000bd8:	eb40 0000 	adc.w	r0, r0, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	bf28      	it	cs
 8000be0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be4:	d2ed      	bcs.n	8000bc2 <__addsf3+0x92>
 8000be6:	fab0 fc80 	clz	ip, r0
 8000bea:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bee:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf6:	bfaa      	itet	ge
 8000bf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bfc:	4252      	neglt	r2, r2
 8000bfe:	4318      	orrge	r0, r3
 8000c00:	bfbc      	itt	lt
 8000c02:	40d0      	lsrlt	r0, r2
 8000c04:	4318      	orrlt	r0, r3
 8000c06:	4770      	bx	lr
 8000c08:	f092 0f00 	teq	r2, #0
 8000c0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c10:	bf06      	itte	eq
 8000c12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c16:	3201      	addeq	r2, #1
 8000c18:	3b01      	subne	r3, #1
 8000c1a:	e7b5      	b.n	8000b88 <__addsf3+0x58>
 8000c1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c24:	bf18      	it	ne
 8000c26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2a:	d021      	beq.n	8000c70 <__addsf3+0x140>
 8000c2c:	ea92 0f03 	teq	r2, r3
 8000c30:	d004      	beq.n	8000c3c <__addsf3+0x10c>
 8000c32:	f092 0f00 	teq	r2, #0
 8000c36:	bf08      	it	eq
 8000c38:	4608      	moveq	r0, r1
 8000c3a:	4770      	bx	lr
 8000c3c:	ea90 0f01 	teq	r0, r1
 8000c40:	bf1c      	itt	ne
 8000c42:	2000      	movne	r0, #0
 8000c44:	4770      	bxne	lr
 8000c46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4a:	d104      	bne.n	8000c56 <__addsf3+0x126>
 8000c4c:	0040      	lsls	r0, r0, #1
 8000c4e:	bf28      	it	cs
 8000c50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5a:	bf3c      	itt	cc
 8000c5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c60:	4770      	bxcc	lr
 8000c62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	4770      	bx	lr
 8000c70:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c74:	bf16      	itet	ne
 8000c76:	4608      	movne	r0, r1
 8000c78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c7c:	4601      	movne	r1, r0
 8000c7e:	0242      	lsls	r2, r0, #9
 8000c80:	bf06      	itte	eq
 8000c82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c86:	ea90 0f01 	teqeq	r0, r1
 8000c8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8e:	4770      	bx	lr

08000c90 <__aeabi_ui2f>:
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e004      	b.n	8000ca0 <__aeabi_i2f+0x8>
 8000c96:	bf00      	nop

08000c98 <__aeabi_i2f>:
 8000c98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c9c:	bf48      	it	mi
 8000c9e:	4240      	negmi	r0, r0
 8000ca0:	ea5f 0c00 	movs.w	ip, r0
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cac:	4601      	mov	r1, r0
 8000cae:	f04f 0000 	mov.w	r0, #0
 8000cb2:	e01c      	b.n	8000cee <__aeabi_l2f+0x2a>

08000cb4 <__aeabi_ul2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e00a      	b.n	8000cd8 <__aeabi_l2f+0x14>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_l2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd0:	d502      	bpl.n	8000cd8 <__aeabi_l2f+0x14>
 8000cd2:	4240      	negs	r0, r0
 8000cd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd8:	ea5f 0c01 	movs.w	ip, r1
 8000cdc:	bf02      	ittt	eq
 8000cde:	4684      	moveq	ip, r0
 8000ce0:	4601      	moveq	r1, r0
 8000ce2:	2000      	moveq	r0, #0
 8000ce4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce8:	bf08      	it	eq
 8000cea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf2:	fabc f28c 	clz	r2, ip
 8000cf6:	3a08      	subs	r2, #8
 8000cf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cfc:	db10      	blt.n	8000d20 <__aeabi_l2f+0x5c>
 8000cfe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d02:	4463      	add	r3, ip
 8000d04:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d08:	f1c2 0220 	rsb	r2, r2, #32
 8000d0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d10:	fa20 f202 	lsr.w	r2, r0, r2
 8000d14:	eb43 0002 	adc.w	r0, r3, r2
 8000d18:	bf08      	it	eq
 8000d1a:	f020 0001 	biceq.w	r0, r0, #1
 8000d1e:	4770      	bx	lr
 8000d20:	f102 0220 	add.w	r2, r2, #32
 8000d24:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d28:	f1c2 0220 	rsb	r2, r2, #32
 8000d2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d30:	fa21 f202 	lsr.w	r2, r1, r2
 8000d34:	eb43 0002 	adc.w	r0, r3, r2
 8000d38:	bf08      	it	eq
 8000d3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3e:	4770      	bx	lr

08000d40 <__aeabi_uldivmod>:
 8000d40:	b953      	cbnz	r3, 8000d58 <__aeabi_uldivmod+0x18>
 8000d42:	b94a      	cbnz	r2, 8000d58 <__aeabi_uldivmod+0x18>
 8000d44:	2900      	cmp	r1, #0
 8000d46:	bf08      	it	eq
 8000d48:	2800      	cmpeq	r0, #0
 8000d4a:	bf1c      	itt	ne
 8000d4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000d50:	f04f 30ff 	movne.w	r0, #4294967295
 8000d54:	f000 b96e 	b.w	8001034 <__aeabi_idiv0>
 8000d58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d60:	f000 f806 	bl	8000d70 <__udivmoddi4>
 8000d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d6c:	b004      	add	sp, #16
 8000d6e:	4770      	bx	lr

08000d70 <__udivmoddi4>:
 8000d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d74:	9d08      	ldr	r5, [sp, #32]
 8000d76:	4604      	mov	r4, r0
 8000d78:	468c      	mov	ip, r1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f040 8083 	bne.w	8000e86 <__udivmoddi4+0x116>
 8000d80:	428a      	cmp	r2, r1
 8000d82:	4617      	mov	r7, r2
 8000d84:	d947      	bls.n	8000e16 <__udivmoddi4+0xa6>
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	b142      	cbz	r2, 8000d9e <__udivmoddi4+0x2e>
 8000d8c:	f1c2 0020 	rsb	r0, r2, #32
 8000d90:	fa24 f000 	lsr.w	r0, r4, r0
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4097      	lsls	r7, r2
 8000d98:	ea40 0c01 	orr.w	ip, r0, r1
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000da2:	0c23      	lsrs	r3, r4, #16
 8000da4:	fbbc f6f8 	udiv	r6, ip, r8
 8000da8:	fa1f fe87 	uxth.w	lr, r7
 8000dac:	fb08 c116 	mls	r1, r8, r6, ip
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f10e 	mul.w	r1, r6, lr
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x60>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dc2:	f080 8119 	bcs.w	8000ff8 <__udivmoddi4+0x288>
 8000dc6:	4299      	cmp	r1, r3
 8000dc8:	f240 8116 	bls.w	8000ff8 <__udivmoddi4+0x288>
 8000dcc:	3e02      	subs	r6, #2
 8000dce:	443b      	add	r3, r7
 8000dd0:	1a5b      	subs	r3, r3, r1
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000ddc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x8c>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dee:	f080 8105 	bcs.w	8000ffc <__udivmoddi4+0x28c>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	f240 8102 	bls.w	8000ffc <__udivmoddi4+0x28c>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	443c      	add	r4, r7
 8000dfc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e00:	eba4 040e 	sub.w	r4, r4, lr
 8000e04:	2600      	movs	r6, #0
 8000e06:	b11d      	cbz	r5, 8000e10 <__udivmoddi4+0xa0>
 8000e08:	40d4      	lsrs	r4, r2
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xaa>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f282 	clz	r2, r2
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d150      	bne.n	8000ec4 <__udivmoddi4+0x154>
 8000e22:	1bcb      	subs	r3, r1, r7
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	2601      	movs	r6, #1
 8000e2e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e32:	0c21      	lsrs	r1, r4, #16
 8000e34:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb08 f30c 	mul.w	r3, r8, ip
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d907      	bls.n	8000e54 <__udivmoddi4+0xe4>
 8000e44:	1879      	adds	r1, r7, r1
 8000e46:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e4a:	d202      	bcs.n	8000e52 <__udivmoddi4+0xe2>
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	f200 80e9 	bhi.w	8001024 <__udivmoddi4+0x2b4>
 8000e52:	4684      	mov	ip, r0
 8000e54:	1ac9      	subs	r1, r1, r3
 8000e56:	b2a3      	uxth	r3, r4
 8000e58:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e5c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e60:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e64:	fb08 f800 	mul.w	r8, r8, r0
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x10c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x10a>
 8000e74:	45a0      	cmp	r8, r4
 8000e76:	f200 80d9 	bhi.w	800102c <__udivmoddi4+0x2bc>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	eba4 0408 	sub.w	r4, r4, r8
 8000e80:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e84:	e7bf      	b.n	8000e06 <__udivmoddi4+0x96>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0x12e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80b1 	beq.w	8000ff2 <__udivmoddi4+0x282>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x1cc>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0x140>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80b8 	bhi.w	8001020 <__udivmoddi4+0x2b0>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0103 	sbc.w	r1, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	468c      	mov	ip, r1
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0a8      	beq.n	8000e10 <__udivmoddi4+0xa0>
 8000ebe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ec4:	f1c2 0320 	rsb	r3, r2, #32
 8000ec8:	fa20 f603 	lsr.w	r6, r0, r3
 8000ecc:	4097      	lsls	r7, r2
 8000ece:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed6:	40d9      	lsrs	r1, r3
 8000ed8:	4330      	orrs	r0, r6
 8000eda:	0c03      	lsrs	r3, r0, #16
 8000edc:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee0:	fa1f f887 	uxth.w	r8, r7
 8000ee4:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eec:	fb06 f108 	mul.w	r1, r6, r8
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x19c>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f106 3cff 	add.w	ip, r6, #4294967295
 8000efe:	f080 808d 	bcs.w	800101c <__udivmoddi4+0x2ac>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 808a 	bls.w	800101c <__udivmoddi4+0x2ac>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	443b      	add	r3, r7
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b281      	uxth	r1, r0
 8000f10:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f14:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1c:	fb00 f308 	mul.w	r3, r0, r8
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d907      	bls.n	8000f34 <__udivmoddi4+0x1c4>
 8000f24:	1879      	adds	r1, r7, r1
 8000f26:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2a:	d273      	bcs.n	8001014 <__udivmoddi4+0x2a4>
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d971      	bls.n	8001014 <__udivmoddi4+0x2a4>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4439      	add	r1, r7
 8000f34:	1acb      	subs	r3, r1, r3
 8000f36:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f3a:	e778      	b.n	8000e2e <__udivmoddi4+0xbe>
 8000f3c:	f1c6 0c20 	rsb	ip, r6, #32
 8000f40:	fa03 f406 	lsl.w	r4, r3, r6
 8000f44:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f48:	431c      	orrs	r4, r3
 8000f4a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f56:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f5a:	431f      	orrs	r7, r3
 8000f5c:	0c3b      	lsrs	r3, r7, #16
 8000f5e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f62:	fa1f f884 	uxth.w	r8, r4
 8000f66:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f6a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f6e:	fb09 fa08 	mul.w	sl, r9, r8
 8000f72:	458a      	cmp	sl, r1
 8000f74:	fa02 f206 	lsl.w	r2, r2, r6
 8000f78:	fa00 f306 	lsl.w	r3, r0, r6
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x220>
 8000f7e:	1861      	adds	r1, r4, r1
 8000f80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f84:	d248      	bcs.n	8001018 <__udivmoddi4+0x2a8>
 8000f86:	458a      	cmp	sl, r1
 8000f88:	d946      	bls.n	8001018 <__udivmoddi4+0x2a8>
 8000f8a:	f1a9 0902 	sub.w	r9, r9, #2
 8000f8e:	4421      	add	r1, r4
 8000f90:	eba1 010a 	sub.w	r1, r1, sl
 8000f94:	b2bf      	uxth	r7, r7
 8000f96:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f9a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f9e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fa2:	fb00 f808 	mul.w	r8, r0, r8
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d907      	bls.n	8000fba <__udivmoddi4+0x24a>
 8000faa:	19e7      	adds	r7, r4, r7
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	d22e      	bcs.n	8001010 <__udivmoddi4+0x2a0>
 8000fb2:	45b8      	cmp	r8, r7
 8000fb4:	d92c      	bls.n	8001010 <__udivmoddi4+0x2a0>
 8000fb6:	3802      	subs	r0, #2
 8000fb8:	4427      	add	r7, r4
 8000fba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fbe:	eba7 0708 	sub.w	r7, r7, r8
 8000fc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000fc6:	454f      	cmp	r7, r9
 8000fc8:	46c6      	mov	lr, r8
 8000fca:	4649      	mov	r1, r9
 8000fcc:	d31a      	bcc.n	8001004 <__udivmoddi4+0x294>
 8000fce:	d017      	beq.n	8001000 <__udivmoddi4+0x290>
 8000fd0:	b15d      	cbz	r5, 8000fea <__udivmoddi4+0x27a>
 8000fd2:	ebb3 020e 	subs.w	r2, r3, lr
 8000fd6:	eb67 0701 	sbc.w	r7, r7, r1
 8000fda:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fde:	40f2      	lsrs	r2, r6
 8000fe0:	ea4c 0202 	orr.w	r2, ip, r2
 8000fe4:	40f7      	lsrs	r7, r6
 8000fe6:	e9c5 2700 	strd	r2, r7, [r5]
 8000fea:	2600      	movs	r6, #0
 8000fec:	4631      	mov	r1, r6
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	462e      	mov	r6, r5
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	e70b      	b.n	8000e10 <__udivmoddi4+0xa0>
 8000ff8:	4606      	mov	r6, r0
 8000ffa:	e6e9      	b.n	8000dd0 <__udivmoddi4+0x60>
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	e6fd      	b.n	8000dfc <__udivmoddi4+0x8c>
 8001000:	4543      	cmp	r3, r8
 8001002:	d2e5      	bcs.n	8000fd0 <__udivmoddi4+0x260>
 8001004:	ebb8 0e02 	subs.w	lr, r8, r2
 8001008:	eb69 0104 	sbc.w	r1, r9, r4
 800100c:	3801      	subs	r0, #1
 800100e:	e7df      	b.n	8000fd0 <__udivmoddi4+0x260>
 8001010:	4608      	mov	r0, r1
 8001012:	e7d2      	b.n	8000fba <__udivmoddi4+0x24a>
 8001014:	4660      	mov	r0, ip
 8001016:	e78d      	b.n	8000f34 <__udivmoddi4+0x1c4>
 8001018:	4681      	mov	r9, r0
 800101a:	e7b9      	b.n	8000f90 <__udivmoddi4+0x220>
 800101c:	4666      	mov	r6, ip
 800101e:	e775      	b.n	8000f0c <__udivmoddi4+0x19c>
 8001020:	4630      	mov	r0, r6
 8001022:	e74a      	b.n	8000eba <__udivmoddi4+0x14a>
 8001024:	f1ac 0c02 	sub.w	ip, ip, #2
 8001028:	4439      	add	r1, r7
 800102a:	e713      	b.n	8000e54 <__udivmoddi4+0xe4>
 800102c:	3802      	subs	r0, #2
 800102e:	443c      	add	r4, r7
 8001030:	e724      	b.n	8000e7c <__udivmoddi4+0x10c>
 8001032:	bf00      	nop

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	ed2d 8b02 	vpush	{d8}
 8001040:	b088      	sub	sp, #32
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001044:	f003 f946 	bl	80042d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001048:	f001 f910 	bl	800226c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104c:	f001 fb66 	bl	800271c <MX_GPIO_Init>
  MX_DMA_Init();
 8001050:	f001 fb3c 	bl	80026cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001054:	f001 fb0e 	bl	8002674 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001058:	f001 f99e 	bl	8002398 <MX_TIM1_Init>
  MX_TIM3_Init();
 800105c:	f001 fa46 	bl	80024ec <MX_TIM3_Init>
  MX_TIM2_Init();
 8001060:	f001 f9f2 	bl	8002448 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001064:	f001 f96a 	bl	800233c <MX_I2C1_Init>
  MX_TIM4_Init();
 8001068:	f001 fab6 	bl	80025d8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 800106c:	48a2      	ldr	r0, [pc, #648]	; (80012f8 <main+0x2c0>)
 800106e:	f004 fef3 	bl	8005e58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8001072:	213c      	movs	r1, #60	; 0x3c
 8001074:	48a1      	ldr	r0, [pc, #644]	; (80012fc <main+0x2c4>)
 8001076:	f005 f901 	bl	800627c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800107a:	48a1      	ldr	r0, [pc, #644]	; (8001300 <main+0x2c8>)
 800107c:	f004 fe92 	bl	8005da4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8001080:	210c      	movs	r1, #12
 8001082:	489f      	ldr	r0, [pc, #636]	; (8001300 <main+0x2c8>)
 8001084:	f004 ffa4 	bl	8005fd0 <HAL_TIM_PWM_Start>


  UART2.huart = &huart2;
 8001088:	4b9e      	ldr	r3, [pc, #632]	; (8001304 <main+0x2cc>)
 800108a:	4a9f      	ldr	r2, [pc, #636]	; (8001308 <main+0x2d0>)
 800108c:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 800108e:	4b9d      	ldr	r3, [pc, #628]	; (8001304 <main+0x2cc>)
 8001090:	22ff      	movs	r2, #255	; 0xff
 8001092:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8001094:	4b9b      	ldr	r3, [pc, #620]	; (8001304 <main+0x2cc>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800109a:	489a      	ldr	r0, [pc, #616]	; (8001304 <main+0x2cc>)
 800109c:	f002 faec 	bl	8003678 <UARTInit>
  UARTResetStart(&UART2);
 80010a0:	4898      	ldr	r0, [pc, #608]	; (8001304 <main+0x2cc>)
 80010a2:	f002 fb11 	bl	80036c8 <UARTResetStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  	int16_t inputChar = UARTReadChar(&UART2);
 80010a6:	4897      	ldr	r0, [pc, #604]	; (8001304 <main+0x2cc>)
 80010a8:	f002 fb32 	bl	8003710 <UARTReadChar>
 80010ac:	4603      	mov	r3, r0
 80010ae:	83fb      	strh	r3, [r7, #30]
	  	if (inputChar != -1)
 80010b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d00b      	beq.n	80010d2 <main+0x9a>
	  	{
	  		UART_Protocol(&UART2, inputChar);
 80010ba:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010be:	4619      	mov	r1, r3
 80010c0:	4890      	ldr	r0, [pc, #576]	; (8001304 <main+0x2cc>)
 80010c2:	f002 fbe7 	bl	8003894 <UART_Protocol>
			len+=1;
 80010c6:	4b91      	ldr	r3, [pc, #580]	; (800130c <main+0x2d4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4b8f      	ldr	r3, [pc, #572]	; (800130c <main+0x2d4>)
 80010d0:	701a      	strb	r2, [r3, #0]

	  	}

	  if (micros() - Time_Velocity_Stamp >= 100) //measurement
 80010d2:	f002 fe07 	bl	8003ce4 <micros>
 80010d6:	4b8e      	ldr	r3, [pc, #568]	; (8001310 <main+0x2d8>)
 80010d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010dc:	ebb0 0802 	subs.w	r8, r0, r2
 80010e0:	eb61 0903 	sbc.w	r9, r1, r3
 80010e4:	f1b9 0f00 	cmp.w	r9, #0
 80010e8:	bf08      	it	eq
 80010ea:	f1b8 0f64 	cmpeq.w	r8, #100	; 0x64
 80010ee:	d36a      	bcc.n	80011c6 <main+0x18e>
	  {
		  Time_Velocity_Stamp = micros();
 80010f0:	f002 fdf8 	bl	8003ce4 <micros>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4985      	ldr	r1, [pc, #532]	; (8001310 <main+0x2d8>)
 80010fa:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000; //pulse per sec
 80010fe:	4b85      	ldr	r3, [pc, #532]	; (8001314 <main+0x2dc>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8001318 <main+0x2e0>
 8001108:	ee27 8a87 	vmul.f32	s16, s15, s14
 800110c:	f001 fbac 	bl	8002868 <Encoder_Velocity_Update>
 8001110:	eef0 7a40 	vmov.f32	s15, s0
 8001114:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001118:	eddf 6a80 	vldr	s13, [pc, #512]	; 800131c <main+0x2e4>
 800111c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001120:	4b7c      	ldr	r3, [pc, #496]	; (8001314 <main+0x2dc>)
 8001122:	edc3 7a00 	vstr	s15, [r3]
//		  Velocity_Read_Encoder = Encoder_Velocity_Update();
		  Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <main+0x2dc>)
 8001128:	edd3 7a00 	vldr	s15, [r3]
 800112c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001320 <main+0x2e8>
 8001130:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001134:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <main+0x2ec>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001144:	4b78      	ldr	r3, [pc, #480]	; (8001328 <main+0x2f0>)
 8001146:	edc3 7a00 	vstr	s15, [r3]
		  Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 800114a:	4b77      	ldr	r3, [pc, #476]	; (8001328 <main+0x2f0>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001154:	4b75      	ldr	r3, [pc, #468]	; (800132c <main+0x2f4>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001320 <main+0x2e8>
 8001162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001166:	4b72      	ldr	r3, [pc, #456]	; (8001330 <main+0x2f8>)
 8001168:	edc3 7a00 	vstr	s15, [r3]

		  //read position
//		  Position_Read_Encoder = htim1.Instance->CNT;
		  Position_Read_Encoder = Encoder_Position_Update();
 800116c:	f001 fbd0 	bl	8002910 <Encoder_Position_Update>
 8001170:	eef0 7a40 	vmov.f32	s15, s0
 8001174:	4b6f      	ldr	r3, [pc, #444]	; (8001334 <main+0x2fc>)
 8001176:	edc3 7a00 	vstr	s15, [r3]
		  Position_Now_Rad = (Position_Read_Encoder*2*M_PI)/Encoder_Resolution;  //rad
 800117a:	4b6e      	ldr	r3, [pc, #440]	; (8001334 <main+0x2fc>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001184:	ee17 0a90 	vmov	r0, s15
 8001188:	f7ff f98a 	bl	80004a0 <__aeabi_f2d>
 800118c:	a358      	add	r3, pc, #352	; (adr r3, 80012f0 <main+0x2b8>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff f9dd 	bl	8000550 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4614      	mov	r4, r2
 800119c:	461d      	mov	r5, r3
 800119e:	4b61      	ldr	r3, [pc, #388]	; (8001324 <main+0x2ec>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f96a 	bl	800047c <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff faf8 	bl	80007a4 <__aeabi_ddiv>
 80011b4:	4602      	mov	r2, r0
 80011b6:	460b      	mov	r3, r1
 80011b8:	4610      	mov	r0, r2
 80011ba:	4619      	mov	r1, r3
 80011bc:	f7ff fc62 	bl	8000a84 <__aeabi_d2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a5d      	ldr	r2, [pc, #372]	; (8001338 <main+0x300>)
 80011c4:	6013      	str	r3, [r2, #0]
	  }

	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 80011c6:	f002 fd8d 	bl	8003ce4 <micros>
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <main+0x304>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	ebb0 0a02 	subs.w	sl, r0, r2
 80011d4:	eb61 0b03 	sbc.w	fp, r1, r3
 80011d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	455b      	cmp	r3, fp
 80011e2:	bf08      	it	eq
 80011e4:	4552      	cmpeq	r2, sl
 80011e6:	f4bf af5e 	bcs.w	80010a6 <main+0x6e>
	  {
		  	PWM_Out_Pre = PWM_Out;
 80011ea:	4b55      	ldr	r3, [pc, #340]	; (8001340 <main+0x308>)
 80011ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <main+0x30c>)
 80011f2:	801a      	strh	r2, [r3, #0]
			Time_Sampling_Stamp = micros();
 80011f4:	f002 fd76 	bl	8003ce4 <micros>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	494f      	ldr	r1, [pc, #316]	; (800133c <main+0x304>)
 80011fe:	e9c1 2300 	strd	r2, r3, [r1]
//			Proximity[1] = Proximity[0];



			//frang code
			Proximity[0] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8001202:	2102      	movs	r1, #2
 8001204:	4850      	ldr	r0, [pc, #320]	; (8001348 <main+0x310>)
 8001206:	f003 ff6f 	bl	80050e8 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <main+0x314>)
 8001210:	701a      	strb	r2, [r3, #0]
			if (set_home_finished == 0)
 8001212:	4b4f      	ldr	r3, [pc, #316]	; (8001350 <main+0x318>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	f040 8198 	bne.w	800154c <main+0x514>
			{
				switch (STATE_DISPLAY) {
 800121c:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <main+0x31c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b04      	cmp	r3, #4
 8001222:	f200 8195 	bhi.w	8001550 <main+0x518>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <main+0x1f4>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	08001241 	.word	0x08001241
 8001230:	080012af 	.word	0x080012af
 8001234:	08001413 	.word	0x08001413
 8001238:	0800142b 	.word	0x0800142b
 800123c:	08001495 	.word	0x08001495

					case FindPorximity:
						PWM_Out = 5000;
 8001240:	4b3f      	ldr	r3, [pc, #252]	; (8001340 <main+0x308>)
 8001242:	f241 3288 	movw	r2, #5000	; 0x1388
 8001246:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 8001248:	4b3d      	ldr	r3, [pc, #244]	; (8001340 <main+0x308>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	2b00      	cmp	r3, #0
 8001250:	bfb8      	it	lt
 8001252:	425b      	neglt	r3, r3
 8001254:	b29a      	uxth	r2, r3
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <main+0x2c8>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001262:	483d      	ldr	r0, [pc, #244]	; (8001358 <main+0x320>)
 8001264:	f003 ff58 	bl	8005118 <HAL_GPIO_WritePin>
						if (Proximity[0] == GPIO_PIN_SET && Proximity[1] == GPIO_PIN_RESET) //if not set home & proximity detects robot arm
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <main+0x314>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	f040 8171 	bne.w	8001554 <main+0x51c>
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <main+0x314>)
 8001274:	785b      	ldrb	r3, [r3, #1]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 816c 	bne.w	8001554 <main+0x51c>
						{
							find_proximity = 1;
 800127c:	4b37      	ldr	r3, [pc, #220]	; (800135c <main+0x324>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
							save_angle = Position_Now_Rad; //save angle that proximity detect robot arm
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <main+0x300>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a36      	ldr	r2, [pc, #216]	; (8001360 <main+0x328>)
 8001288:	6013      	str	r3, [r2, #0]
							Time_Delay = micros();
 800128a:	f002 fd2b 	bl	8003ce4 <micros>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4934      	ldr	r1, [pc, #208]	; (8001364 <main+0x32c>)
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
							Prox_Delay = micros();
 8001298:	f002 fd24 	bl	8003ce4 <micros>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4931      	ldr	r1, [pc, #196]	; (8001368 <main+0x330>)
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
							STATE_DISPLAY = FoundProximity;
 80012a6:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <main+0x31c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
						}
						break;
 80012ac:	e152      	b.n	8001554 <main+0x51c>
					case FoundProximity:
						if(micros() - Time_Delay >= 1000000){
 80012ae:	f002 fd19 	bl	8003ce4 <micros>
 80012b2:	4b2c      	ldr	r3, [pc, #176]	; (8001364 <main+0x32c>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	1a84      	subs	r4, r0, r2
 80012ba:	613c      	str	r4, [r7, #16]
 80012bc:	eb61 0303 	sbc.w	r3, r1, r3
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	4a2a      	ldr	r2, [pc, #168]	; (800136c <main+0x334>)
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012cc:	428b      	cmp	r3, r1
 80012ce:	bf08      	it	eq
 80012d0:	4282      	cmpeq	r2, r0
 80012d2:	d270      	bcs.n	80013b6 <main+0x37e>
							Time_Delay = micros();
 80012d4:	f002 fd06 	bl	8003ce4 <micros>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4921      	ldr	r1, [pc, #132]	; (8001364 <main+0x32c>)
 80012de:	e9c1 2300 	strd	r2, r3, [r1]
							for ( i = 0; i < 8; ++i) {
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <main+0x338>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e061      	b.n	80013ae <main+0x376>
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	400921fb 	.word	0x400921fb
 80012f8:	20000418 	.word	0x20000418
 80012fc:	200003cc 	.word	0x200003cc
 8001300:	2000031c 	.word	0x2000031c
 8001304:	200001d4 	.word	0x200001d4
 8001308:	20000460 	.word	0x20000460
 800130c:	200004a4 	.word	0x200004a4
 8001310:	200000e0 	.word	0x200000e0
 8001314:	200000e8 	.word	0x200000e8
 8001318:	461c3c00 	.word	0x461c3c00
 800131c:	461c4000 	.word	0x461c4000
 8001320:	42700000 	.word	0x42700000
 8001324:	20000000 	.word	0x20000000
 8001328:	200000ec 	.word	0x200000ec
 800132c:	20000004 	.word	0x20000004
 8001330:	200000f8 	.word	0x200000f8
 8001334:	200000f4 	.word	0x200000f4
 8001338:	200000fc 	.word	0x200000fc
 800133c:	200000d8 	.word	0x200000d8
 8001340:	200000f0 	.word	0x200000f0
 8001344:	200000f2 	.word	0x200000f2
 8001348:	40020000 	.word	0x40020000
 800134c:	20000364 	.word	0x20000364
 8001350:	200001c4 	.word	0x200001c4
 8001354:	200001d0 	.word	0x200001d0
 8001358:	40020400 	.word	0x40020400
 800135c:	200001cc 	.word	0x200001cc
 8001360:	200001c8 	.word	0x200001c8
 8001364:	200001b0 	.word	0x200001b0
 8001368:	200001a8 	.word	0x200001a8
 800136c:	000f423f 	.word	0x000f423f
 8001370:	200001b8 	.word	0x200001b8
									PWM_Out = 3*PWM_Out/4;
 8001374:	4baa      	ldr	r3, [pc, #680]	; (8001620 <main+0x5e8>)
 8001376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800137a:	461a      	mov	r2, r3
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <main+0x350>
 8001386:	3303      	adds	r3, #3
 8001388:	109b      	asrs	r3, r3, #2
 800138a:	b21a      	sxth	r2, r3
 800138c:	4ba4      	ldr	r3, [pc, #656]	; (8001620 <main+0x5e8>)
 800138e:	801a      	strh	r2, [r3, #0]
									__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 8001390:	4ba3      	ldr	r3, [pc, #652]	; (8001620 <main+0x5e8>)
 8001392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4ba1      	ldr	r3, [pc, #644]	; (8001624 <main+0x5ec>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
							for ( i = 0; i < 8; ++i) {
 80013a4:	4ba0      	ldr	r3, [pc, #640]	; (8001628 <main+0x5f0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	3301      	adds	r3, #1
 80013aa:	4a9f      	ldr	r2, [pc, #636]	; (8001628 <main+0x5f0>)
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b9e      	ldr	r3, [pc, #632]	; (8001628 <main+0x5f0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b07      	cmp	r3, #7
 80013b4:	ddde      	ble.n	8001374 <main+0x33c>
							}
						}

						if(i == 8){
 80013b6:	4b9c      	ldr	r3, [pc, #624]	; (8001628 <main+0x5f0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	f040 80cc 	bne.w	8001558 <main+0x520>
//							angle_rad_start = Position_Now_Rad;
//							angle_rad_stop = Position_Now_Rad + M_PI/4;
							if (micros() - Prox_Delay >= 500000){
 80013c0:	f002 fc90 	bl	8003ce4 <micros>
 80013c4:	4b99      	ldr	r3, [pc, #612]	; (800162c <main+0x5f4>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	1a84      	subs	r4, r0, r2
 80013cc:	60bc      	str	r4, [r7, #8]
 80013ce:	eb61 0303 	sbc.w	r3, r1, r3
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	4a96      	ldr	r2, [pc, #600]	; (8001630 <main+0x5f8>)
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013de:	428b      	cmp	r3, r1
 80013e0:	bf08      	it	eq
 80013e2:	4282      	cmpeq	r2, r0
 80013e4:	d20c      	bcs.n	8001400 <main+0x3c8>
								Prox_Delay = micros();
 80013e6:	f002 fc7d 	bl	8003ce4 <micros>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	498f      	ldr	r1, [pc, #572]	; (800162c <main+0x5f4>)
 80013f0:	e9c1 2300 	strd	r2, r3, [r1]
								Delay += 1;
 80013f4:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <main+0x5fc>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <main+0x5fc>)
 80013fe:	801a      	strh	r2, [r3, #0]
							}
							if(Delay >= 2){
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <main+0x5fc>)
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	2b01      	cmp	r3, #1
 8001406:	f240 80a7 	bls.w	8001558 <main+0x520>
								STATE_DISPLAY = GotoProximity;
 800140a:	4b8b      	ldr	r3, [pc, #556]	; (8001638 <main+0x600>)
 800140c:	2202      	movs	r2, #2
 800140e:	701a      	strb	r2, [r3, #0]
							}

						}
						break;
 8001410:	e0a2      	b.n	8001558 <main+0x520>
					case GotoProximity:
						angle_rad_start = Position_Now_Rad;
 8001412:	4b8a      	ldr	r3, [pc, #552]	; (800163c <main+0x604>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a8a      	ldr	r2, [pc, #552]	; (8001640 <main+0x608>)
 8001418:	6013      	str	r3, [r2, #0]
						angle_rad_stop = save_angle;
 800141a:	4b8a      	ldr	r3, [pc, #552]	; (8001644 <main+0x60c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <main+0x610>)
 8001420:	6013      	str	r3, [r2, #0]
						STATE_DISPLAY = QinticFinish;
 8001422:	4b85      	ldr	r3, [pc, #532]	; (8001638 <main+0x600>)
 8001424:	2204      	movs	r2, #4
 8001426:	701a      	strb	r2, [r3, #0]
						break;
 8001428:	e09b      	b.n	8001562 <main+0x52a>
					case QinticStaff:
						i = 0;
 800142a:	4b7f      	ldr	r3, [pc, #508]	; (8001628 <main+0x5f0>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
						j=0;
 8001430:	4b86      	ldr	r3, [pc, #536]	; (800164c <main+0x614>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
						quintic();
 8001436:	f001 fadb 	bl	80029f0 <quintic>
						if (initial == 1){
 800143a:	4b85      	ldr	r3, [pc, #532]	; (8001650 <main+0x618>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	f040 808c 	bne.w	800155c <main+0x524>
							if (micros() - Prox_Delay >= 500000){
 8001444:	f002 fc4e 	bl	8003ce4 <micros>
 8001448:	4b78      	ldr	r3, [pc, #480]	; (800162c <main+0x5f4>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	1a84      	subs	r4, r0, r2
 8001450:	603c      	str	r4, [r7, #0]
 8001452:	eb61 0303 	sbc.w	r3, r1, r3
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	4a75      	ldr	r2, [pc, #468]	; (8001630 <main+0x5f8>)
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001462:	428b      	cmp	r3, r1
 8001464:	bf08      	it	eq
 8001466:	4282      	cmpeq	r2, r0
 8001468:	d20c      	bcs.n	8001484 <main+0x44c>
								Prox_Delay = micros();
 800146a:	f002 fc3b 	bl	8003ce4 <micros>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	496e      	ldr	r1, [pc, #440]	; (800162c <main+0x5f4>)
 8001474:	e9c1 2300 	strd	r2, r3, [r1]
								Delay += 1;
 8001478:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <main+0x5fc>)
 800147a:	881b      	ldrh	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <main+0x5fc>)
 8001482:	801a      	strh	r2, [r3, #0]
							}
							if(Delay >= 5){
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <main+0x5fc>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d967      	bls.n	800155c <main+0x524>
								STATE_DISPLAY = GotoProximity;
 800148c:	4b6a      	ldr	r3, [pc, #424]	; (8001638 <main+0x600>)
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
							}
						}

						break;
 8001492:	e063      	b.n	800155c <main+0x524>
					case QinticFinish:
						quintic();
 8001494:	f001 faac 	bl	80029f0 <quintic>
						if (initial == 1){
 8001498:	4b6d      	ldr	r3, [pc, #436]	; (8001650 <main+0x618>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d15f      	bne.n	8001560 <main+0x528>
							if (micros()/1000000.0 - time_initial >= tau_max + 2)
 80014a0:	f002 fc20 	bl	8003ce4 <micros>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff f81a 	bl	80004e4 <__aeabi_ul2d>
 80014b0:	a359      	add	r3, pc, #356	; (adr r3, 8001618 <main+0x5e0>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7ff f975 	bl	80007a4 <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4614      	mov	r4, r2
 80014c0:	461d      	mov	r5, r3
 80014c2:	4b64      	ldr	r3, [pc, #400]	; (8001654 <main+0x61c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffea 	bl	80004a0 <__aeabi_f2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fe84 	bl	80001e0 <__aeabi_dsub>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4614      	mov	r4, r2
 80014de:	461d      	mov	r5, r3
 80014e0:	4b5d      	ldr	r3, [pc, #372]	; (8001658 <main+0x620>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80014ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014ee:	ee17 0a90 	vmov	r0, s15
 80014f2:	f7fe ffd5 	bl	80004a0 <__aeabi_f2d>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7ff faad 	bl	8000a5c <__aeabi_dcmpge>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d100      	bne.n	800150a <main+0x4d2>
								clear_counter_velocity = 1;
							}


						}
						break;
 8001508:	e02a      	b.n	8001560 <main+0x528>
								Prox_Delay = micros();
 800150a:	f002 fbeb 	bl	8003ce4 <micros>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4946      	ldr	r1, [pc, #280]	; (800162c <main+0x5f4>)
 8001514:	e9c1 2300 	strd	r2, r3, [r1]
								set_home_finished = 1;
 8001518:	4b50      	ldr	r3, [pc, #320]	; (800165c <main+0x624>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]
								angle_rad_start = 0;
 800151e:	4b48      	ldr	r3, [pc, #288]	; (8001640 <main+0x608>)
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
								angle_rad_stop = 0;
 8001526:	4b48      	ldr	r3, [pc, #288]	; (8001648 <main+0x610>)
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
								htim1.Instance->CNT = 0;
 800152e:	4b4c      	ldr	r3, [pc, #304]	; (8001660 <main+0x628>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	625a      	str	r2, [r3, #36]	; 0x24
								Position_Now_Rad = 0;
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <main+0x604>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
								clear_counter_position = 1;
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <main+0x62c>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
								clear_counter_velocity = 1;
 8001544:	4b48      	ldr	r3, [pc, #288]	; (8001668 <main+0x630>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
						break;
 800154a:	e009      	b.n	8001560 <main+0x528>
					default:
						break;
				}
			}
 800154c:	bf00      	nop
 800154e:	e008      	b.n	8001562 <main+0x52a>
						break;
 8001550:	bf00      	nop
 8001552:	e006      	b.n	8001562 <main+0x52a>
						break;
 8001554:	bf00      	nop
 8001556:	e004      	b.n	8001562 <main+0x52a>
						break;
 8001558:	bf00      	nop
 800155a:	e002      	b.n	8001562 <main+0x52a>
						break;
 800155c:	bf00      	nop
 800155e:	e000      	b.n	8001562 <main+0x52a>
						break;
 8001560:	bf00      	nop

			if (set_home_finished == 1)
 8001562:	4b3e      	ldr	r3, [pc, #248]	; (800165c <main+0x624>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	f47f ad9d 	bne.w	80010a6 <main+0x6e>
			{
				if (initial == 1 && angle_rad_stop - angle_rad_start != 0)
 800156c:	4b38      	ldr	r3, [pc, #224]	; (8001650 <main+0x618>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b01      	cmp	r3, #1
 8001572:	f040 8137 	bne.w	80017e4 <main+0x7ac>
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <main+0x610>)
 8001578:	ed93 7a00 	vldr	s14, [r3]
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <main+0x608>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001586:	eef5 7a40 	vcmp.f32	s15, #0.0
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	f000 8129 	beq.w	80017e4 <main+0x7ac>
				{
					//calculate tau
					//short if condition
					tau_max = 15/8*(angle_rad_stop - angle_rad_start)/omega_max >= sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max)) ? 15/8*(angle_rad_stop - angle_rad_start)/omega_max : sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max));
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <main+0x610>)
 8001594:	ed93 7a00 	vldr	s14, [r3]
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <main+0x608>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <main+0x634>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <main+0x610>)
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <main+0x608>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015bc:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001670 <main+0x638>
 80015c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <main+0x63c>)
 80015c6:	ed93 7a00 	vldr	s14, [r3]
 80015ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d2:	ee17 3a90 	vmov	r3, s15
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	bfb8      	it	lt
 80015da:	425b      	neglt	r3, r3
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	eeb0 0a67 	vmov.f32	s0, s15
 80015e8:	f006 fd7c 	bl	80080e4 <sqrtf>
 80015ec:	eef0 7a40 	vmov.f32	s15, s0
 80015f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80015f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015f8:	db3e      	blt.n	8001678 <main+0x640>
 80015fa:	4b13      	ldr	r3, [pc, #76]	; (8001648 <main+0x610>)
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <main+0x608>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee77 6a67 	vsub.f32	s13, s14, s15
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <main+0x634>)
 800160c:	ed93 7a00 	vldr	s14, [r3]
 8001610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001614:	e052      	b.n	80016bc <main+0x684>
 8001616:	bf00      	nop
 8001618:	00000000 	.word	0x00000000
 800161c:	412e8480 	.word	0x412e8480
 8001620:	200000f0 	.word	0x200000f0
 8001624:	2000031c 	.word	0x2000031c
 8001628:	200001b8 	.word	0x200001b8
 800162c:	200001a8 	.word	0x200001a8
 8001630:	0007a11f 	.word	0x0007a11f
 8001634:	200001c0 	.word	0x200001c0
 8001638:	200001d0 	.word	0x200001d0
 800163c:	200000fc 	.word	0x200000fc
 8001640:	20000108 	.word	0x20000108
 8001644:	200001c8 	.word	0x200001c8
 8001648:	2000010c 	.word	0x2000010c
 800164c:	200001bc 	.word	0x200001bc
 8001650:	20000018 	.word	0x20000018
 8001654:	20000114 	.word	0x20000114
 8001658:	20000110 	.word	0x20000110
 800165c:	200001c4 	.word	0x200001c4
 8001660:	200003cc 	.word	0x200003cc
 8001664:	200001d2 	.word	0x200001d2
 8001668:	200001d1 	.word	0x200001d1
 800166c:	20000010 	.word	0x20000010
 8001670:	c0b8c078 	.word	0xc0b8c078
 8001674:	20000014 	.word	0x20000014
 8001678:	4b97      	ldr	r3, [pc, #604]	; (80018d8 <main+0x8a0>)
 800167a:	ed93 7a00 	vldr	s14, [r3]
 800167e:	4b97      	ldr	r3, [pc, #604]	; (80018dc <main+0x8a4>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001688:	ed9f 7a95 	vldr	s14, [pc, #596]	; 80018e0 <main+0x8a8>
 800168c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001690:	4b94      	ldr	r3, [pc, #592]	; (80018e4 <main+0x8ac>)
 8001692:	ed93 7a00 	vldr	s14, [r3]
 8001696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bfb8      	it	lt
 80016a6:	425b      	neglt	r3, r3
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b0:	eeb0 0a67 	vmov.f32	s0, s15
 80016b4:	f006 fd16 	bl	80080e4 <sqrtf>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
 80016bc:	4b8a      	ldr	r3, [pc, #552]	; (80018e8 <main+0x8b0>)
 80016be:	edc3 7a00 	vstr	s15, [r3]
					//debug
					//problem is maybe sqrt / sqrtf
				//	tau_max = 10;

					//calculate coeffient
					c_0 = angle_rad_start;
 80016c2:	4b86      	ldr	r3, [pc, #536]	; (80018dc <main+0x8a4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a89      	ldr	r2, [pc, #548]	; (80018ec <main+0x8b4>)
 80016c8:	6013      	str	r3, [r2, #0]
					c_1 = 0;
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <main+0x8b8>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
					c_2 = 0;
 80016d2:	4b88      	ldr	r3, [pc, #544]	; (80018f4 <main+0x8bc>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
					c_3 = 10*((angle_rad_stop - angle_rad_start)/(powf(tau_max,3)));
 80016da:	4b7f      	ldr	r3, [pc, #508]	; (80018d8 <main+0x8a0>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <main+0x8a4>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee37 8a67 	vsub.f32	s16, s14, s15
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <main+0x8b0>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	f006 fc5c 	bl	8007fb4 <powf>
 80016fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001700:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001704:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170c:	4b7a      	ldr	r3, [pc, #488]	; (80018f8 <main+0x8c0>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
					c_4 = 15*((angle_rad_start - angle_rad_stop)/(powf(tau_max,4)));
 8001712:	4b72      	ldr	r3, [pc, #456]	; (80018dc <main+0x8a4>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <main+0x8a0>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8001722:	4b71      	ldr	r3, [pc, #452]	; (80018e8 <main+0x8b0>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	f006 fc40 	bl	8007fb4 <powf>
 8001734:	eeb0 7a40 	vmov.f32	s14, s0
 8001738:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800173c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001744:	4b6d      	ldr	r3, [pc, #436]	; (80018fc <main+0x8c4>)
 8001746:	edc3 7a00 	vstr	s15, [r3]
					c_5 = 6*((angle_rad_stop - angle_rad_start)/(powf(tau_max,5)));
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <main+0x8a0>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b62      	ldr	r3, [pc, #392]	; (80018dc <main+0x8a4>)
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ee37 8a67 	vsub.f32	s16, s14, s15
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <main+0x8b0>)
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	f006 fc24 	bl	8007fb4 <powf>
 800176c:	eeb0 7a40 	vmov.f32	s14, s0
 8001770:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001774:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800177c:	4b60      	ldr	r3, [pc, #384]	; (8001900 <main+0x8c8>)
 800177e:	edc3 7a00 	vstr	s15, [r3]
					//save initial time
					//change microsec to second
					time_initial = micros()/1000000.0;
 8001782:	f002 faaf 	bl	8003ce4 <micros>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7fe fea9 	bl	80004e4 <__aeabi_ul2d>
 8001792:	a34f      	add	r3, pc, #316	; (adr r3, 80018d0 <main+0x898>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7ff f804 	bl	80007a4 <__aeabi_ddiv>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff f96e 	bl	8000a84 <__aeabi_d2f>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4a56      	ldr	r2, [pc, #344]	; (8001904 <main+0x8cc>)
 80017ac:	6013      	str	r3, [r2, #0]
					initial = 0;
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <main+0x8d0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]

					//initial parameter in kalman filter
					theta_estimate = angle_rad_start;
 80017b4:	4b49      	ldr	r3, [pc, #292]	; (80018dc <main+0x8a4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a54      	ldr	r2, [pc, #336]	; (800190c <main+0x8d4>)
 80017ba:	6013      	str	r3, [r2, #0]
					omega_estimate = 0;
 80017bc:	4b54      	ldr	r3, [pc, #336]	; (8001910 <main+0x8d8>)
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
					p_estimate11 = 1 ;
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <main+0x8dc>)
 80017c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017ca:	601a      	str	r2, [r3, #0]
					p_estimate12 = 0 ;
 80017cc:	4b52      	ldr	r3, [pc, #328]	; (8001918 <main+0x8e0>)
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
					p_estimate21 = 0 ;
 80017d4:	4b51      	ldr	r3, [pc, #324]	; (800191c <main+0x8e4>)
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
					p_estimate22 = 1 ;
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <main+0x8e8>)
 80017de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017e2:	601a      	str	r2, [r3, #0]

				}
				if (initial == 0 && angle_rad_stop - angle_rad_start != 0 )
 80017e4:	4b48      	ldr	r3, [pc, #288]	; (8001908 <main+0x8d0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f ac5c 	bne.w	80010a6 <main+0x6e>
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <main+0x8a0>)
 80017f0:	ed93 7a00 	vldr	s14, [r3]
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <main+0x8a4>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	f43f ac4e 	beq.w	80010a6 <main+0x6e>
				{
					//at the final point
					//tau = (micros()/1000000.0)-time_initial ; in second unit
					if ((micros()/1000000.0)-time_initial >= tau_max)
 800180a:	f002 fa6b 	bl	8003ce4 <micros>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7fe fe65 	bl	80004e4 <__aeabi_ul2d>
 800181a:	a32d      	add	r3, pc, #180	; (adr r3, 80018d0 <main+0x898>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe ffc0 	bl	80007a4 <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <main+0x8cc>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fe35 	bl	80004a0 <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fccf 	bl	80001e0 <__aeabi_dsub>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
 800184a:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <main+0x8b0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fe26 	bl	80004a0 <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7ff f8fe 	bl	8000a5c <__aeabi_dcmpge>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d072      	beq.n	800194c <main+0x914>
					{
						initial = 1;
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <main+0x8d0>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
						angle_rad_start = angle_rad_stop;
 800186c:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <main+0x8a0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <main+0x8a4>)
 8001872:	6013      	str	r3, [r2, #0]
						PWM_Out = 0;
 8001874:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <main+0x8ec>)
 8001876:	2200      	movs	r2, #0
 8001878:	801a      	strh	r2, [r3, #0]
						__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <main+0x8ec>)
 800187c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001880:	4b29      	ldr	r3, [pc, #164]	; (8001928 <main+0x8f0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
						error_position = 0;
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <main+0x8f4>)
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
						error_position_diff = 0;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <main+0x8f8>)
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
						error_position_int = 0;
 8001896:	4b27      	ldr	r3, [pc, #156]	; (8001934 <main+0x8fc>)
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
						error_position_prev = 0;
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <main+0x900>)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
						error_velocity = 0;
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <main+0x904>)
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
						error_velocity_diff = 0;
 80018ae:	4b24      	ldr	r3, [pc, #144]	; (8001940 <main+0x908>)
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
						error_velocity_int = 0;
 80018b6:	4b23      	ldr	r3, [pc, #140]	; (8001944 <main+0x90c>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
						error_velocity_prev = 0;
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <main+0x910>)
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f7ff bbee 	b.w	80010a6 <main+0x6e>
 80018ca:	bf00      	nop
 80018cc:	f3af 8000 	nop.w
 80018d0:	00000000 	.word	0x00000000
 80018d4:	412e8480 	.word	0x412e8480
 80018d8:	2000010c 	.word	0x2000010c
 80018dc:	20000108 	.word	0x20000108
 80018e0:	c0b8c078 	.word	0xc0b8c078
 80018e4:	20000014 	.word	0x20000014
 80018e8:	20000110 	.word	0x20000110
 80018ec:	20000118 	.word	0x20000118
 80018f0:	2000011c 	.word	0x2000011c
 80018f4:	20000120 	.word	0x20000120
 80018f8:	20000124 	.word	0x20000124
 80018fc:	20000128 	.word	0x20000128
 8001900:	2000012c 	.word	0x2000012c
 8001904:	20000114 	.word	0x20000114
 8001908:	20000018 	.word	0x20000018
 800190c:	20000178 	.word	0x20000178
 8001910:	2000017c 	.word	0x2000017c
 8001914:	2000002c 	.word	0x2000002c
 8001918:	20000190 	.word	0x20000190
 800191c:	20000194 	.word	0x20000194
 8001920:	20000030 	.word	0x20000030
 8001924:	200000f0 	.word	0x200000f0
 8001928:	2000031c 	.word	0x2000031c
 800192c:	20000138 	.word	0x20000138
 8001930:	2000013c 	.word	0x2000013c
 8001934:	20000140 	.word	0x20000140
 8001938:	20000144 	.word	0x20000144
 800193c:	2000015c 	.word	0x2000015c
 8001940:	20000160 	.word	0x20000160
 8001944:	20000164 	.word	0x20000164
 8001948:	20000168 	.word	0x20000168
					}
					else //on going to final point
					{
						//tau = real time - initial time (duration in second unit)
						tau = micros()/1000000.0 - time_initial;
 800194c:	f002 f9ca 	bl	8003ce4 <micros>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7fe fdc4 	bl	80004e4 <__aeabi_ul2d>
 800195c:	a3fe      	add	r3, pc, #1016	; (adr r3, 8001d58 <main+0xd20>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe ff1f 	bl	80007a4 <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	4be0      	ldr	r3, [pc, #896]	; (8001cf0 <main+0xcb8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fd94 	bl	80004a0 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	f7fe fc2e 	bl	80001e0 <__aeabi_dsub>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f87a 	bl	8000a84 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	4ad8      	ldr	r2, [pc, #864]	; (8001cf4 <main+0xcbc>)
 8001994:	6013      	str	r3, [r2, #0]
						desired_position = c_0*powf(tau,0) + c_1*powf(tau,1) + c_2*powf(tau,2) + c_3*powf(tau,3) + c_4*powf(tau,4) + c_5*powf(tau,5);
 8001996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800199a:	4bd7      	ldr	r3, [pc, #860]	; (8001cf8 <main+0xcc0>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a4:	4bd3      	ldr	r3, [pc, #844]	; (8001cf4 <main+0xcbc>)
 80019a6:	edd3 6a00 	vldr	s13, [r3]
 80019aa:	4bd4      	ldr	r3, [pc, #848]	; (8001cfc <main+0xcc4>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b4:	ee37 8a27 	vadd.f32	s16, s14, s15
 80019b8:	4bce      	ldr	r3, [pc, #824]	; (8001cf4 <main+0xcbc>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	f006 faf5 	bl	8007fb4 <powf>
 80019ca:	eeb0 7a40 	vmov.f32	s14, s0
 80019ce:	4bcc      	ldr	r3, [pc, #816]	; (8001d00 <main+0xcc8>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80019dc:	4bc5      	ldr	r3, [pc, #788]	; (8001cf4 <main+0xcbc>)
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80019e6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ea:	f006 fae3 	bl	8007fb4 <powf>
 80019ee:	eeb0 7a40 	vmov.f32	s14, s0
 80019f2:	4bc4      	ldr	r3, [pc, #784]	; (8001d04 <main+0xccc>)
 80019f4:	edd3 7a00 	vldr	s15, [r3]
 80019f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fc:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a00:	4bbc      	ldr	r3, [pc, #752]	; (8001cf4 <main+0xcbc>)
 8001a02:	edd3 7a00 	vldr	s15, [r3]
 8001a06:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a0e:	f006 fad1 	bl	8007fb4 <powf>
 8001a12:	eeb0 7a40 	vmov.f32	s14, s0
 8001a16:	4bbc      	ldr	r3, [pc, #752]	; (8001d08 <main+0xcd0>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a20:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001a24:	4bb3      	ldr	r3, [pc, #716]	; (8001cf4 <main+0xcbc>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	f006 fabf 	bl	8007fb4 <powf>
 8001a36:	eeb0 7a40 	vmov.f32	s14, s0
 8001a3a:	4bb4      	ldr	r3, [pc, #720]	; (8001d0c <main+0xcd4>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a44:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001a48:	4bb1      	ldr	r3, [pc, #708]	; (8001d10 <main+0xcd8>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
						desired_velocity = 0 + c_1 + 2*c_2*powf(tau,1) + 3*c_3*powf(tau,2) + 4*c_4*powf(tau,3) + 5*c_5*powf(tau,4);
 8001a4e:	4bab      	ldr	r3, [pc, #684]	; (8001cfc <main+0xcc4>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8001d14 <main+0xcdc>
 8001a58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a5c:	4ba8      	ldr	r3, [pc, #672]	; (8001d00 <main+0xcc8>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001a66:	4ba3      	ldr	r3, [pc, #652]	; (8001cf4 <main+0xcbc>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001a74:	4ba3      	ldr	r3, [pc, #652]	; (8001d04 <main+0xccc>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001a7e:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001a82:	4b9c      	ldr	r3, [pc, #624]	; (8001cf4 <main+0xcbc>)
 8001a84:	edd3 7a00 	vldr	s15, [r3]
 8001a88:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	f006 fa90 	bl	8007fb4 <powf>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001a9c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001aa0:	4b99      	ldr	r3, [pc, #612]	; (8001d08 <main+0xcd0>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001aaa:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001aae:	4b91      	ldr	r3, [pc, #580]	; (8001cf4 <main+0xcbc>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f006 fa7a 	bl	8007fb4 <powf>
 8001ac0:	eef0 7a40 	vmov.f32	s15, s0
 8001ac4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001ac8:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001acc:	4b8f      	ldr	r3, [pc, #572]	; (8001d0c <main+0xcd4>)
 8001ace:	edd3 7a00 	vldr	s15, [r3]
 8001ad2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001ad6:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001ada:	4b86      	ldr	r3, [pc, #536]	; (8001cf4 <main+0xcbc>)
 8001adc:	edd3 7a00 	vldr	s15, [r3]
 8001ae0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	f006 fa64 	bl	8007fb4 <powf>
 8001aec:	eef0 7a40 	vmov.f32	s15, s0
 8001af0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001af4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001af8:	4b87      	ldr	r3, [pc, #540]	; (8001d18 <main+0xce0>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
						//predict state
						//x_predict = A*x_estimate
						//x_predict = [theta_predict; omega_predict]
						//A = [1 dt; 0 1]
						//x_estimate = [theta_estimate; omega_estimate]
						theta_predict = theta_estimate + omega_estimate*CON_T;
 8001afe:	4b87      	ldr	r3, [pc, #540]	; (8001d1c <main+0xce4>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001d20 <main+0xce8>
 8001b08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b0c:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <main+0xcec>)
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b16:	4b84      	ldr	r3, [pc, #528]	; (8001d28 <main+0xcf0>)
 8001b18:	edc3 7a00 	vstr	s15, [r3]
						omega_predict = omega_estimate;
 8001b1c:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <main+0xce4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a82      	ldr	r2, [pc, #520]	; (8001d2c <main+0xcf4>)
 8001b22:	6013      	str	r3, [r2, #0]
						//p_predict = A*p_estimate*transpose(A) + G*Q*transpose(G)
						//p_predict = [p_predict11 p_predict12 ; p_predict21 p_predict22]
						//p_estimate = [p_estimate11 p_estimate12 ; p_estimate21 p_estimate22] -> initial [1 0; 0 1]
						//G = [0.5*dt^2 ; dt]
						//Q = Sigma_a^2
						Q = powf(Sigma_a,2);
 8001b24:	4b82      	ldr	r3, [pc, #520]	; (8001d30 <main+0xcf8>)
 8001b26:	edd3 7a00 	vldr	s15, [r3]
 8001b2a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b32:	f006 fa3f 	bl	8007fb4 <powf>
 8001b36:	eef0 7a40 	vmov.f32	s15, s0
 8001b3a:	4b7e      	ldr	r3, [pc, #504]	; (8001d34 <main+0xcfc>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
						p_predict11 = p_estimate11 + (p_estimate12 + p_estimate21)*CON_T + p_estimate22*powf(CON_T,2)+powf(CON_T,4)*Q/4.0;
 8001b40:	4b7d      	ldr	r3, [pc, #500]	; (8001d38 <main+0xd00>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <main+0xd04>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001d20 <main+0xce8>
 8001b54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <main+0xd08>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001b62:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8001d20 <main+0xce8>
 8001b66:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6e:	f006 fa21 	bl	8007fb4 <powf>
 8001b72:	eeb0 7a40 	vmov.f32	s14, s0
 8001b76:	4b73      	ldr	r3, [pc, #460]	; (8001d44 <main+0xd0c>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b80:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001b84:	ee17 0a90 	vmov	r0, s15
 8001b88:	f7fe fc8a 	bl	80004a0 <__aeabi_f2d>
 8001b8c:	4604      	mov	r4, r0
 8001b8e:	460d      	mov	r5, r1
 8001b90:	eddf 7a63 	vldr	s15, [pc, #396]	; 8001d20 <main+0xce8>
 8001b94:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	f006 fa0a 	bl	8007fb4 <powf>
 8001ba0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ba4:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <main+0xcfc>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	ee17 0a90 	vmov	r0, s15
 8001bb2:	f7fe fc75 	bl	80004a0 <__aeabi_f2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <main+0xd10>)
 8001bbc:	f7fe fdf2 	bl	80007a4 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	4629      	mov	r1, r5
 8001bc8:	f7fe fb0c 	bl	80001e4 <__adddf3>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe ff56 	bl	8000a84 <__aeabi_d2f>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a5c      	ldr	r2, [pc, #368]	; (8001d4c <main+0xd14>)
 8001bdc:	6013      	str	r3, [r2, #0]
						p_predict12 = p_estimate12 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 8001bde:	4b59      	ldr	r3, [pc, #356]	; (8001d44 <main+0xd0c>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001d20 <main+0xce8>
 8001be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bec:	4b52      	ldr	r3, [pc, #328]	; (8001d38 <main+0xd00>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fc51 	bl	80004a0 <__aeabi_f2d>
 8001bfe:	4604      	mov	r4, r0
 8001c00:	460d      	mov	r5, r1
 8001c02:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001d20 <main+0xce8>
 8001c06:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c0e:	f006 f9d1 	bl	8007fb4 <powf>
 8001c12:	eeb0 7a40 	vmov.f32	s14, s0
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <main+0xcfc>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	ee17 0a90 	vmov	r0, s15
 8001c24:	f7fe fc3c 	bl	80004a0 <__aeabi_f2d>
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c30:	f7fe fdb8 	bl	80007a4 <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	f7fe fad2 	bl	80001e4 <__adddf3>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ff1c 	bl	8000a84 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a40      	ldr	r2, [pc, #256]	; (8001d50 <main+0xd18>)
 8001c50:	6013      	str	r3, [r2, #0]
						p_predict21 = p_estimate21 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 8001c52:	4b3c      	ldr	r3, [pc, #240]	; (8001d44 <main+0xd0c>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001d20 <main+0xce8>
 8001c5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c60:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <main+0xd04>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	ee17 0a90 	vmov	r0, s15
 8001c6e:	f7fe fc17 	bl	80004a0 <__aeabi_f2d>
 8001c72:	4604      	mov	r4, r0
 8001c74:	460d      	mov	r5, r1
 8001c76:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8001d20 <main+0xce8>
 8001c7a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	f006 f997 	bl	8007fb4 <powf>
 8001c86:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <main+0xcfc>)
 8001c8c:	edd3 7a00 	vldr	s15, [r3]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ee17 0a90 	vmov	r0, s15
 8001c98:	f7fe fc02 	bl	80004a0 <__aeabi_f2d>
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ca4:	f7fe fd7e 	bl	80007a4 <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fa98 	bl	80001e4 <__adddf3>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe fee2 	bl	8000a84 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a24      	ldr	r2, [pc, #144]	; (8001d54 <main+0xd1c>)
 8001cc4:	6013      	str	r3, [r2, #0]
						p_predict22 = p_estimate22 + powf(CON_T,2)*Q;
 8001cc6:	eddf 7a16 	vldr	s15, [pc, #88]	; 8001d20 <main+0xce8>
 8001cca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	f006 f96f 	bl	8007fb4 <powf>
 8001cd6:	eeb0 7a40 	vmov.f32	s14, s0
 8001cda:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <main+0xcfc>)
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <main+0xd0c>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	e039      	b.n	8001d60 <main+0xd28>
 8001cec:	f3af 8000 	nop.w
 8001cf0:	20000114 	.word	0x20000114
 8001cf4:	20000130 	.word	0x20000130
 8001cf8:	20000118 	.word	0x20000118
 8001cfc:	2000011c 	.word	0x2000011c
 8001d00:	20000120 	.word	0x20000120
 8001d04:	20000124 	.word	0x20000124
 8001d08:	20000128 	.word	0x20000128
 8001d0c:	2000012c 	.word	0x2000012c
 8001d10:	20000134 	.word	0x20000134
 8001d14:	00000000 	.word	0x00000000
 8001d18:	20000158 	.word	0x20000158
 8001d1c:	2000017c 	.word	0x2000017c
 8001d20:	3a83126f 	.word	0x3a83126f
 8001d24:	20000178 	.word	0x20000178
 8001d28:	20000170 	.word	0x20000170
 8001d2c:	20000174 	.word	0x20000174
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000100 	.word	0x20000100
 8001d38:	20000190 	.word	0x20000190
 8001d3c:	20000194 	.word	0x20000194
 8001d40:	2000002c 	.word	0x2000002c
 8001d44:	20000030 	.word	0x20000030
 8001d48:	40100000 	.word	0x40100000
 8001d4c:	20000180 	.word	0x20000180
 8001d50:	20000184 	.word	0x20000184
 8001d54:	20000188 	.word	0x20000188
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	412e8480 	.word	0x412e8480
 8001d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d64:	4baa      	ldr	r3, [pc, #680]	; (8002010 <main+0xfd8>)
 8001d66:	edc3 7a00 	vstr	s15, [r3]
						//update
						//z_predict = z - C*x_predict
						//z_predict = theta_error
						//z = sensor_theta_input
						//C = [0 1]
						z_predict = Velocity_Now_Rad - omega_predict;
 8001d6a:	4baa      	ldr	r3, [pc, #680]	; (8002014 <main+0xfdc>)
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	4ba9      	ldr	r3, [pc, #676]	; (8002018 <main+0xfe0>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	4ba8      	ldr	r3, [pc, #672]	; (800201c <main+0xfe4>)
 8001d7c:	edc3 7a00 	vstr	s15, [r3]

						//S = C*p_predict*transpose(C) + R
						//R = Sigma_w^2
						R = powf(Sigma_w,2);
 8001d80:	4ba7      	ldr	r3, [pc, #668]	; (8002020 <main+0xfe8>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	f006 f911 	bl	8007fb4 <powf>
 8001d92:	eef0 7a40 	vmov.f32	s15, s0
 8001d96:	4ba3      	ldr	r3, [pc, #652]	; (8002024 <main+0xfec>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]
						s = p_predict22 + R;
 8001d9c:	4b9c      	ldr	r3, [pc, #624]	; (8002010 <main+0xfd8>)
 8001d9e:	ed93 7a00 	vldr	s14, [r3]
 8001da2:	4ba0      	ldr	r3, [pc, #640]	; (8002024 <main+0xfec>)
 8001da4:	edd3 7a00 	vldr	s15, [r3]
 8001da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <main+0xff0>)
 8001dae:	edc3 7a00 	vstr	s15, [r3]

						//K = p_predict*transpose(C)*inv(S)
						//K = [k11;k21]
						k11 = p_predict12/s;
 8001db2:	4b9e      	ldr	r3, [pc, #632]	; (800202c <main+0xff4>)
 8001db4:	edd3 6a00 	vldr	s13, [r3]
 8001db8:	4b9b      	ldr	r3, [pc, #620]	; (8002028 <main+0xff0>)
 8001dba:	ed93 7a00 	vldr	s14, [r3]
 8001dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc2:	4b9b      	ldr	r3, [pc, #620]	; (8002030 <main+0xff8>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
						k21 = p_predict22/s;
 8001dc8:	4b91      	ldr	r3, [pc, #580]	; (8002010 <main+0xfd8>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	4b96      	ldr	r3, [pc, #600]	; (8002028 <main+0xff0>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd8:	4b96      	ldr	r3, [pc, #600]	; (8002034 <main+0xffc>)
 8001dda:	edc3 7a00 	vstr	s15, [r3]

						//x_estimate = x_predict + K*z_predict
						theta_estimate = theta_predict + k11*z_predict;
 8001dde:	4b94      	ldr	r3, [pc, #592]	; (8002030 <main+0xff8>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b8d      	ldr	r3, [pc, #564]	; (800201c <main+0xfe4>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dee:	4b92      	ldr	r3, [pc, #584]	; (8002038 <main+0x1000>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df8:	4b90      	ldr	r3, [pc, #576]	; (800203c <main+0x1004>)
 8001dfa:	edc3 7a00 	vstr	s15, [r3]
						omega_estimate = omega_predict + k21*z_predict;
 8001dfe:	4b8d      	ldr	r3, [pc, #564]	; (8002034 <main+0xffc>)
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	4b85      	ldr	r3, [pc, #532]	; (800201c <main+0xfe4>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <main+0xfe0>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	4b89      	ldr	r3, [pc, #548]	; (8002040 <main+0x1008>)
 8001e1a:	edc3 7a00 	vstr	s15, [r3]

						//p_estimate = (I - K*C)*p_predict
						//I = [1 0; 0 1]
						p_estimate11 = (p_predict11*(p_predict22+R)-p_predict12*p_predict21)/s;
 8001e1e:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <main+0xfd8>)
 8001e20:	ed93 7a00 	vldr	s14, [r3]
 8001e24:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <main+0xfec>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <main+0x100c>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e38:	4b7c      	ldr	r3, [pc, #496]	; (800202c <main+0xff4>)
 8001e3a:	edd3 6a00 	vldr	s13, [r3]
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <main+0x1010>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e48:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <main+0xff0>)
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e56:	4b7d      	ldr	r3, [pc, #500]	; (800204c <main+0x1014>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]
						p_estimate12 = p_predict12*R/s;
 8001e5c:	4b73      	ldr	r3, [pc, #460]	; (800202c <main+0xff4>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b70      	ldr	r3, [pc, #448]	; (8002024 <main+0xfec>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e6c:	4b6e      	ldr	r3, [pc, #440]	; (8002028 <main+0xff0>)
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <main+0x1018>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
						p_estimate21 = p_predict21*R/s;
 8001e7c:	4b72      	ldr	r3, [pc, #456]	; (8002048 <main+0x1010>)
 8001e7e:	ed93 7a00 	vldr	s14, [r3]
 8001e82:	4b68      	ldr	r3, [pc, #416]	; (8002024 <main+0xfec>)
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e8c:	4b66      	ldr	r3, [pc, #408]	; (8002028 <main+0xff0>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <main+0x101c>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
						p_estimate22 = p_predict22*R/s;
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <main+0xfd8>)
 8001e9e:	ed93 7a00 	vldr	s14, [r3]
 8001ea2:	4b60      	ldr	r3, [pc, #384]	; (8002024 <main+0xfec>)
 8001ea4:	edd3 7a00 	vldr	s15, [r3]
 8001ea8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <main+0xff0>)
 8001eae:	ed93 7a00 	vldr	s14, [r3]
 8001eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb6:	4b68      	ldr	r3, [pc, #416]	; (8002058 <main+0x1020>)
 8001eb8:	edc3 7a00 	vstr	s15, [r3]

						if (angle_rad_start < angle_rad_stop)
 8001ebc:	4b67      	ldr	r3, [pc, #412]	; (800205c <main+0x1024>)
 8001ebe:	ed93 7a00 	vldr	s14, [r3]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <main+0x1028>)
 8001ec4:	edd3 7a00 	vldr	s15, [r3]
 8001ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	d516      	bpl.n	8001f00 <main+0xec8>
						{
							position_kd = 0;
 8001ed2:	4b64      	ldr	r3, [pc, #400]	; (8002064 <main+0x102c>)
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
							position_ki = 0;
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <main+0x1030>)
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
							position_kp = 0.25;
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <main+0x1034>)
 8001ee4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001ee8:	601a      	str	r2, [r3, #0]
							velocity_kd = 0;
 8001eea:	4b61      	ldr	r3, [pc, #388]	; (8002070 <main+0x1038>)
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
							velocity_ki = 6000;
 8001ef2:	4b60      	ldr	r3, [pc, #384]	; (8002074 <main+0x103c>)
 8001ef4:	4a60      	ldr	r2, [pc, #384]	; (8002078 <main+0x1040>)
 8001ef6:	601a      	str	r2, [r3, #0]
							velocity_kp = 8000;
 8001ef8:	4b60      	ldr	r3, [pc, #384]	; (800207c <main+0x1044>)
 8001efa:	4a61      	ldr	r2, [pc, #388]	; (8002080 <main+0x1048>)
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e015      	b.n	8001f2c <main+0xef4>
						}
						else
						{
							position_kd = 0;
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <main+0x102c>)
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
							position_ki = 0;
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <main+0x1030>)
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
							position_kp = 0.5;
 8001f10:	4b56      	ldr	r3, [pc, #344]	; (800206c <main+0x1034>)
 8001f12:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001f16:	601a      	str	r2, [r3, #0]
							velocity_kd = 0;
 8001f18:	4b55      	ldr	r3, [pc, #340]	; (8002070 <main+0x1038>)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
							velocity_ki = 1500;
 8001f20:	4b54      	ldr	r3, [pc, #336]	; (8002074 <main+0x103c>)
 8001f22:	4a58      	ldr	r2, [pc, #352]	; (8002084 <main+0x104c>)
 8001f24:	601a      	str	r2, [r3, #0]
							velocity_kp = 4000;
 8001f26:	4b55      	ldr	r3, [pc, #340]	; (800207c <main+0x1044>)
 8001f28:	4a57      	ldr	r2, [pc, #348]	; (8002088 <main+0x1050>)
 8001f2a:	601a      	str	r2, [r3, #0]
						}
						//position control
						error_position = desired_position - Position_Now_Rad;
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <main+0x1054>)
 8001f2e:	ed93 7a00 	vldr	s14, [r3]
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <main+0x1058>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3c:	4b55      	ldr	r3, [pc, #340]	; (8002094 <main+0x105c>)
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
						error_position_diff = (error_position - error_position_prev)*1000.0;
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <main+0x105c>)
 8001f44:	ed93 7a00 	vldr	s14, [r3]
 8001f48:	4b53      	ldr	r3, [pc, #332]	; (8002098 <main+0x1060>)
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800209c <main+0x1064>
 8001f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <main+0x1068>)
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
						error_position_int = error_position_int + error_position/1000.0;
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <main+0x106c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fa9b 	bl	80004a0 <__aeabi_f2d>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	4b49      	ldr	r3, [pc, #292]	; (8002094 <main+0x105c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fa94 	bl	80004a0 <__aeabi_f2d>
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <main+0x1070>)
 8001f7e:	f7fe fc11 	bl	80007a4 <__aeabi_ddiv>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4620      	mov	r0, r4
 8001f88:	4629      	mov	r1, r5
 8001f8a:	f7fe f92b 	bl	80001e4 <__adddf3>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4610      	mov	r0, r2
 8001f94:	4619      	mov	r1, r3
 8001f96:	f7fe fd75 	bl	8000a84 <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4a41      	ldr	r2, [pc, #260]	; (80020a4 <main+0x106c>)
 8001f9e:	6013      	str	r3, [r2, #0]
						command_velocity = position_kp*error_position + position_ki*error_position_int + position_kd*error_position_diff + position_bias;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <main+0x1034>)
 8001fa2:	ed93 7a00 	vldr	s14, [r3]
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <main+0x105c>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <main+0x1030>)
 8001fb2:	edd3 6a00 	vldr	s13, [r3]
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <main+0x106c>)
 8001fb8:	edd3 7a00 	vldr	s15, [r3]
 8001fbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <main+0x102c>)
 8001fc6:	edd3 6a00 	vldr	s13, [r3]
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <main+0x1068>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <main+0x1074>)
 8001fda:	edd3 7a00 	vldr	s15, [r3]
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <main+0x1078>)
 8001fe4:	edc3 7a00 	vstr	s15, [r3]
						error_position_prev = error_position;
 8001fe8:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <main+0x105c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	; (8002098 <main+0x1060>)
 8001fee:	6013      	str	r3, [r2, #0]

				//		limitter velocity
						if (command_velocity > 1)
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <main+0x1078>)
 8001ff2:	edd3 7a00 	vldr	s15, [r3]
 8001ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	dd57      	ble.n	80020b4 <main+0x107c>
						{
							command_velocity = 1;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <main+0x1078>)
 8002006:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	e05f      	b.n	80020ce <main+0x1096>
 800200e:	bf00      	nop
 8002010:	2000018c 	.word	0x2000018c
 8002014:	200000f8 	.word	0x200000f8
 8002018:	20000174 	.word	0x20000174
 800201c:	20000198 	.word	0x20000198
 8002020:	2000000c 	.word	0x2000000c
 8002024:	20000104 	.word	0x20000104
 8002028:	2000019c 	.word	0x2000019c
 800202c:	20000184 	.word	0x20000184
 8002030:	200001a0 	.word	0x200001a0
 8002034:	200001a4 	.word	0x200001a4
 8002038:	20000170 	.word	0x20000170
 800203c:	20000178 	.word	0x20000178
 8002040:	2000017c 	.word	0x2000017c
 8002044:	20000180 	.word	0x20000180
 8002048:	20000188 	.word	0x20000188
 800204c:	2000002c 	.word	0x2000002c
 8002050:	20000190 	.word	0x20000190
 8002054:	20000194 	.word	0x20000194
 8002058:	20000030 	.word	0x20000030
 800205c:	20000108 	.word	0x20000108
 8002060:	2000010c 	.word	0x2000010c
 8002064:	2000014c 	.word	0x2000014c
 8002068:	20000148 	.word	0x20000148
 800206c:	2000001c 	.word	0x2000001c
 8002070:	20000028 	.word	0x20000028
 8002074:	20000024 	.word	0x20000024
 8002078:	45bb8000 	.word	0x45bb8000
 800207c:	20000020 	.word	0x20000020
 8002080:	45fa0000 	.word	0x45fa0000
 8002084:	44bb8000 	.word	0x44bb8000
 8002088:	457a0000 	.word	0x457a0000
 800208c:	20000134 	.word	0x20000134
 8002090:	200000fc 	.word	0x200000fc
 8002094:	20000138 	.word	0x20000138
 8002098:	20000144 	.word	0x20000144
 800209c:	447a0000 	.word	0x447a0000
 80020a0:	2000013c 	.word	0x2000013c
 80020a4:	20000140 	.word	0x20000140
 80020a8:	408f4000 	.word	0x408f4000
 80020ac:	20000150 	.word	0x20000150
 80020b0:	20000154 	.word	0x20000154
						}
						else if (command_velocity < -1)
 80020b4:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <main+0x11ec>)
 80020b6:	edd3 7a00 	vldr	s15, [r3]
 80020ba:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80020be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c6:	d502      	bpl.n	80020ce <main+0x1096>
						{
							command_velocity = -1;
 80020c8:	4b56      	ldr	r3, [pc, #344]	; (8002224 <main+0x11ec>)
 80020ca:	4a57      	ldr	r2, [pc, #348]	; (8002228 <main+0x11f0>)
 80020cc:	601a      	str	r2, [r3, #0]
						}

						//velocity control
						error_velocity = desired_velocity - omega_estimate + command_velocity;
 80020ce:	4b57      	ldr	r3, [pc, #348]	; (800222c <main+0x11f4>)
 80020d0:	ed93 7a00 	vldr	s14, [r3]
 80020d4:	4b56      	ldr	r3, [pc, #344]	; (8002230 <main+0x11f8>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <main+0x11ec>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	4b52      	ldr	r3, [pc, #328]	; (8002234 <main+0x11fc>)
 80020ea:	edc3 7a00 	vstr	s15, [r3]
						error_velocity_diff = (error_velocity - error_velocity_prev)*1000.0;
 80020ee:	4b51      	ldr	r3, [pc, #324]	; (8002234 <main+0x11fc>)
 80020f0:	ed93 7a00 	vldr	s14, [r3]
 80020f4:	4b50      	ldr	r3, [pc, #320]	; (8002238 <main+0x1200>)
 80020f6:	edd3 7a00 	vldr	s15, [r3]
 80020fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fe:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800223c <main+0x1204>
 8002102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <main+0x1208>)
 8002108:	edc3 7a00 	vstr	s15, [r3]
						error_velocity_int = error_velocity_int + error_velocity/1000.0;
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <main+0x120c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe f9c5 	bl	80004a0 <__aeabi_f2d>
 8002116:	4604      	mov	r4, r0
 8002118:	460d      	mov	r5, r1
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <main+0x11fc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f9be 	bl	80004a0 <__aeabi_f2d>
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	4b47      	ldr	r3, [pc, #284]	; (8002248 <main+0x1210>)
 800212a:	f7fe fb3b 	bl	80007a4 <__aeabi_ddiv>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f855 	bl	80001e4 <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	f7fe fc9f 	bl	8000a84 <__aeabi_d2f>
 8002146:	4603      	mov	r3, r0
 8002148:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <main+0x120c>)
 800214a:	6013      	str	r3, [r2, #0]
						PWM_Out = velocity_kp*error_velocity + velocity_ki*error_velocity_int + velocity_kd*error_velocity_diff + velocity_bias;
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <main+0x1214>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <main+0x11fc>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <main+0x1218>)
 800215e:	edd3 6a00 	vldr	s13, [r3]
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <main+0x120c>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <main+0x121c>)
 8002172:	edd3 6a00 	vldr	s13, [r3]
 8002176:	4b32      	ldr	r3, [pc, #200]	; (8002240 <main+0x1208>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002180:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002184:	4b34      	ldr	r3, [pc, #208]	; (8002258 <main+0x1220>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800218e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002192:	ee17 3a90 	vmov	r3, s15
 8002196:	b21a      	sxth	r2, r3
 8002198:	4b30      	ldr	r3, [pc, #192]	; (800225c <main+0x1224>)
 800219a:	801a      	strh	r2, [r3, #0]
						error_velocity_prev = error_velocity;
 800219c:	4b25      	ldr	r3, [pc, #148]	; (8002234 <main+0x11fc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a25      	ldr	r2, [pc, #148]	; (8002238 <main+0x1200>)
 80021a2:	6013      	str	r3, [r2, #0]
				//				PWM_Out = PWM_Out_Pre - 5;
				//			}
				//		}

						//limitter pwm
						if (PWM_Out > 10000)
 80021a4:	4b2d      	ldr	r3, [pc, #180]	; (800225c <main+0x1224>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80021ae:	4293      	cmp	r3, r2
 80021b0:	dd04      	ble.n	80021bc <main+0x1184>
						{
							PWM_Out = 10000;
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <main+0x1224>)
 80021b4:	f242 7210 	movw	r2, #10000	; 0x2710
 80021b8:	801a      	strh	r2, [r3, #0]
 80021ba:	e009      	b.n	80021d0 <main+0x1198>
						}
						else if (PWM_Out < -10000)
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <main+0x1224>)
 80021be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c2:	4a27      	ldr	r2, [pc, #156]	; (8002260 <main+0x1228>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	da03      	bge.n	80021d0 <main+0x1198>
						{
							PWM_Out = -10000;
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <main+0x1224>)
 80021ca:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 80021ce:	801a      	strh	r2, [r3, #0]
				//				PWM_Out = -PWM_Out;
				//			}
				//		}

						//control motor direction
						if (PWM_Out < 0)
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <main+0x1224>)
 80021d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da11      	bge.n	80021fe <main+0x11c6>
//						if (angle_rad_start > angle_rad_stop)
						{
							__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <main+0x1224>)
 80021dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bfb8      	it	lt
 80021e4:	425b      	neglt	r3, r3
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <main+0x122c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f4:	481c      	ldr	r0, [pc, #112]	; (8002268 <main+0x1230>)
 80021f6:	f002 ff8f 	bl	8005118 <HAL_GPIO_WritePin>
 80021fa:	f7fe bf54 	b.w	80010a6 <main+0x6e>
						}
				//		else if (PWM_Out >= 0)
						else
						{
							__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <main+0x1224>)
 8002200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002204:	2b00      	cmp	r3, #0
 8002206:	bfb8      	it	lt
 8002208:	425b      	neglt	r3, r3
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b15      	ldr	r3, [pc, #84]	; (8002264 <main+0x122c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <main+0x1230>)
 800221a:	f002 ff7d 	bl	8005118 <HAL_GPIO_WritePin>
  {
 800221e:	f7fe bf42 	b.w	80010a6 <main+0x6e>
 8002222:	bf00      	nop
 8002224:	20000154 	.word	0x20000154
 8002228:	bf800000 	.word	0xbf800000
 800222c:	20000158 	.word	0x20000158
 8002230:	2000017c 	.word	0x2000017c
 8002234:	2000015c 	.word	0x2000015c
 8002238:	20000168 	.word	0x20000168
 800223c:	447a0000 	.word	0x447a0000
 8002240:	20000160 	.word	0x20000160
 8002244:	20000164 	.word	0x20000164
 8002248:	408f4000 	.word	0x408f4000
 800224c:	20000020 	.word	0x20000020
 8002250:	20000024 	.word	0x20000024
 8002254:	20000028 	.word	0x20000028
 8002258:	2000016c 	.word	0x2000016c
 800225c:	200000f0 	.word	0x200000f0
 8002260:	ffffd8f0 	.word	0xffffd8f0
 8002264:	2000031c 	.word	0x2000031c
 8002268:	40020400 	.word	0x40020400

0800226c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b094      	sub	sp, #80	; 0x50
 8002270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	2230      	movs	r2, #48	; 0x30
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f005 fe0a 	bl	8007e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <SystemClock_Config+0xc8>)
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <SystemClock_Config+0xc8>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800229e:	6413      	str	r3, [r2, #64]	; 0x40
 80022a0:	4b24      	ldr	r3, [pc, #144]	; (8002334 <SystemClock_Config+0xc8>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <SystemClock_Config+0xcc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <SystemClock_Config+0xcc>)
 80022b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <SystemClock_Config+0xcc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2310      	movs	r3, #16
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022dc:	2308      	movs	r3, #8
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022e0:	2364      	movs	r3, #100	; 0x64
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022e4:	2302      	movs	r3, #2
 80022e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022e8:	2304      	movs	r3, #4
 80022ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ec:	f107 0320 	add.w	r3, r7, #32
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 f893 	bl	800541c <HAL_RCC_OscConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80022fc:	f001 fd0c 	bl	8003d18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002300:	230f      	movs	r3, #15
 8002302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002304:	2302      	movs	r3, #2
 8002306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800230c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002316:	f107 030c 	add.w	r3, r7, #12
 800231a:	2103      	movs	r1, #3
 800231c:	4618      	mov	r0, r3
 800231e:	f003 faf5 	bl	800590c <HAL_RCC_ClockConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002328:	f001 fcf6 	bl	8003d18 <Error_Handler>
  }
}
 800232c:	bf00      	nop
 800232e:	3750      	adds	r7, #80	; 0x50
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	40007000 	.word	0x40007000

0800233c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_I2C1_Init+0x50>)
 8002342:	4a13      	ldr	r2, [pc, #76]	; (8002390 <MX_I2C1_Init+0x54>)
 8002344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_I2C1_Init+0x50>)
 8002348:	4a12      	ldr	r2, [pc, #72]	; (8002394 <MX_I2C1_Init+0x58>)
 800234a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_I2C1_Init+0x50>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_I2C1_Init+0x50>)
 8002354:	2200      	movs	r2, #0
 8002356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_I2C1_Init+0x50>)
 800235a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800235e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <MX_I2C1_Init+0x50>)
 8002362:	2200      	movs	r2, #0
 8002364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_I2C1_Init+0x50>)
 8002368:	2200      	movs	r2, #0
 800236a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <MX_I2C1_Init+0x50>)
 800236e:	2200      	movs	r2, #0
 8002370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_I2C1_Init+0x50>)
 8002374:	2200      	movs	r2, #0
 8002376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_I2C1_Init+0x50>)
 800237a:	f002 ff0b 	bl	8005194 <HAL_I2C_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002384:	f001 fcc8 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	200002c4 	.word	0x200002c4
 8002390:	40005400 	.word	0x40005400
 8002394:	000186a0 	.word	0x000186a0

08002398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08c      	sub	sp, #48	; 0x30
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f005 fd74 	bl	8007e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023b6:	4a23      	ldr	r2, [pc, #140]	; (8002444 <MX_TIM1_Init+0xac>)
 80023b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023c8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80023cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ce:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_TIM1_Init+0xa8>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023e0:	2303      	movs	r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023e4:	2300      	movs	r3, #0
 80023e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023e8:	2301      	movs	r3, #1
 80023ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023f4:	2300      	movs	r3, #0
 80023f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023f8:	2301      	movs	r3, #1
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4619      	mov	r1, r3
 800240a:	480d      	ldr	r0, [pc, #52]	; (8002440 <MX_TIM1_Init+0xa8>)
 800240c:	f003 fe90 	bl	8006130 <HAL_TIM_Encoder_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002416:	f001 fc7f 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <MX_TIM1_Init+0xa8>)
 8002428:	f004 fd34 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002432:	f001 fc71 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	200003cc 	.word	0x200003cc
 8002444:	40010000 	.word	0x40010000

08002448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244e:	f107 0308 	add.w	r3, r7, #8
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245c:	463b      	mov	r3, r7
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002464:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <MX_TIM2_Init+0xa0>)
 8002466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800246c:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_TIM2_Init+0xa0>)
 800246e:	2263      	movs	r2, #99	; 0x63
 8002470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <MX_TIM2_Init+0xa0>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002478:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <MX_TIM2_Init+0xa0>)
 800247a:	f04f 32ff 	mov.w	r2, #4294967295
 800247e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_TIM2_Init+0xa0>)
 8002482:	2200      	movs	r2, #0
 8002484:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <MX_TIM2_Init+0xa0>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800248c:	4816      	ldr	r0, [pc, #88]	; (80024e8 <MX_TIM2_Init+0xa0>)
 800248e:	f003 fc39 	bl	8005d04 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002498:	f001 fc3e 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800249c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024a2:	f107 0308 	add.w	r3, r7, #8
 80024a6:	4619      	mov	r1, r3
 80024a8:	480f      	ldr	r0, [pc, #60]	; (80024e8 <MX_TIM2_Init+0xa0>)
 80024aa:	f004 f93b 	bl	8006724 <HAL_TIM_ConfigClockSource>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80024b4:	f001 fc30 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b8:	2300      	movs	r3, #0
 80024ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	4619      	mov	r1, r3
 80024c4:	4808      	ldr	r0, [pc, #32]	; (80024e8 <MX_TIM2_Init+0xa0>)
 80024c6:	f004 fce5 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80024d0:	f001 fc22 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <MX_TIM2_Init+0xa0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0201 	mvn.w	r2, #1
 80024dc:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000418 	.word	0x20000418

080024ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08e      	sub	sp, #56	; 0x38
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]
 80024fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	f107 0320 	add.w	r3, r7, #32
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
 8002518:	615a      	str	r2, [r3, #20]
 800251a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800251e:	4a2d      	ldr	r2, [pc, #180]	; (80025d4 <MX_TIM3_Init+0xe8>)
 8002520:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800252e:	4b28      	ldr	r3, [pc, #160]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002530:	f242 7210 	movw	r2, #10000	; 0x2710
 8002534:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002538:	2200      	movs	r2, #0
 800253a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002542:	4823      	ldr	r0, [pc, #140]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002544:	f003 fbde 	bl	8005d04 <HAL_TIM_Base_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800254e:	f001 fbe3 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800255c:	4619      	mov	r1, r3
 800255e:	481c      	ldr	r0, [pc, #112]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002560:	f004 f8e0 	bl	8006724 <HAL_TIM_ConfigClockSource>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800256a:	f001 fbd5 	bl	8003d18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800256e:	4818      	ldr	r0, [pc, #96]	; (80025d0 <MX_TIM3_Init+0xe4>)
 8002570:	f003 fcd4 	bl	8005f1c <HAL_TIM_PWM_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800257a:	f001 fbcd 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002586:	f107 0320 	add.w	r3, r7, #32
 800258a:	4619      	mov	r1, r3
 800258c:	4810      	ldr	r0, [pc, #64]	; (80025d0 <MX_TIM3_Init+0xe4>)
 800258e:	f004 fc81 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002598:	f001 fbbe 	bl	8003d18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259c:	2360      	movs	r3, #96	; 0x60
 800259e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	220c      	movs	r2, #12
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <MX_TIM3_Init+0xe4>)
 80025b4:	f003 fff8 	bl	80065a8 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025be:	f001 fbab 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <MX_TIM3_Init+0xe4>)
 80025c4:	f001 fcc0 	bl	8003f48 <HAL_TIM_MspPostInit>

}
 80025c8:	bf00      	nop
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000031c 	.word	0x2000031c
 80025d4:	40000400 	.word	0x40000400

080025d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025de:	f107 0308 	add.w	r3, r7, #8
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	463b      	mov	r3, r7
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <MX_TIM4_Init+0x94>)
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <MX_TIM4_Init+0x98>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <MX_TIM4_Init+0x94>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <MX_TIM4_Init+0x94>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <MX_TIM4_Init+0x94>)
 8002608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800260c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b17      	ldr	r3, [pc, #92]	; (800266c <MX_TIM4_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <MX_TIM4_Init+0x94>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800261a:	4814      	ldr	r0, [pc, #80]	; (800266c <MX_TIM4_Init+0x94>)
 800261c:	f003 fb72 	bl	8005d04 <HAL_TIM_Base_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002626:	f001 fb77 	bl	8003d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800262a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4619      	mov	r1, r3
 8002636:	480d      	ldr	r0, [pc, #52]	; (800266c <MX_TIM4_Init+0x94>)
 8002638:	f004 f874 	bl	8006724 <HAL_TIM_ConfigClockSource>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002642:	f001 fb69 	bl	8003d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002646:	2300      	movs	r3, #0
 8002648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800264e:	463b      	mov	r3, r7
 8002650:	4619      	mov	r1, r3
 8002652:	4806      	ldr	r0, [pc, #24]	; (800266c <MX_TIM4_Init+0x94>)
 8002654:	f004 fc1e 	bl	8006e94 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800265e:	f001 fb5b 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002662:	bf00      	nop
 8002664:	3718      	adds	r7, #24
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000027c 	.word	0x2000027c
 8002670:	40000800 	.word	0x40000800

08002674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002678:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 800267a:	4a13      	ldr	r2, [pc, #76]	; (80026c8 <MX_USART2_UART_Init+0x54>)
 800267c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 8002680:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 8002684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002686:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 8002688:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800268c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800268e:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 8002696:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800269a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART2_UART_Init+0x50>)
 80026b0:	f004 fc72 	bl	8006f98 <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80026ba:	f001 fb2d 	bl	8003d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000460 	.word	0x20000460
 80026c8:	40004400 	.word	0x40004400

080026cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <MX_DMA_Init+0x4c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a0f      	ldr	r2, [pc, #60]	; (8002718 <MX_DMA_Init+0x4c>)
 80026dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <MX_DMA_Init+0x4c>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2100      	movs	r1, #0
 80026f2:	2010      	movs	r0, #16
 80026f4:	f001 ff3b 	bl	800456e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80026f8:	2010      	movs	r0, #16
 80026fa:	f001 ff54 	bl	80045a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2100      	movs	r1, #0
 8002702:	2011      	movs	r0, #17
 8002704:	f001 ff33 	bl	800456e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002708:	2011      	movs	r0, #17
 800270a:	f001 ff4c 	bl	80045a6 <HAL_NVIC_EnableIRQ>

}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
 8002730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <MX_GPIO_Init+0x138>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a46      	ldr	r2, [pc, #280]	; (8002854 <MX_GPIO_Init+0x138>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b44      	ldr	r3, [pc, #272]	; (8002854 <MX_GPIO_Init+0x138>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <MX_GPIO_Init+0x138>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a3f      	ldr	r2, [pc, #252]	; (8002854 <MX_GPIO_Init+0x138>)
 8002758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <MX_GPIO_Init+0x138>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <MX_GPIO_Init+0x138>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a38      	ldr	r2, [pc, #224]	; (8002854 <MX_GPIO_Init+0x138>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <MX_GPIO_Init+0x138>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <MX_GPIO_Init+0x138>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a31      	ldr	r2, [pc, #196]	; (8002854 <MX_GPIO_Init+0x138>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <MX_GPIO_Init+0x138>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2120      	movs	r1, #32
 80027a6:	482c      	ldr	r0, [pc, #176]	; (8002858 <MX_GPIO_Init+0x13c>)
 80027a8:	f002 fcb6 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80027ac:	2200      	movs	r2, #0
 80027ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027b2:	482a      	ldr	r0, [pc, #168]	; (800285c <MX_GPIO_Init+0x140>)
 80027b4:	f002 fcb0 	bl	8005118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027be:	4b28      	ldr	r3, [pc, #160]	; (8002860 <MX_GPIO_Init+0x144>)
 80027c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4825      	ldr	r0, [pc, #148]	; (8002864 <MX_GPIO_Init+0x148>)
 80027ce:	f002 fb07 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 80027d2:	2381      	movs	r3, #129	; 0x81
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	481f      	ldr	r0, [pc, #124]	; (8002864 <MX_GPIO_Init+0x148>)
 80027e6:	f002 fafb 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 80027ea:	2301      	movs	r3, #1
 80027ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4816      	ldr	r0, [pc, #88]	; (8002858 <MX_GPIO_Init+0x13c>)
 80027fe:	f002 faef 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002802:	2320      	movs	r3, #32
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0314 	add.w	r3, r7, #20
 8002816:	4619      	mov	r1, r3
 8002818:	480f      	ldr	r0, [pc, #60]	; (8002858 <MX_GPIO_Init+0x13c>)
 800281a:	f002 fae1 	bl	8004de0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800281e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	2301      	movs	r3, #1
 8002826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	4619      	mov	r1, r3
 8002836:	4809      	ldr	r0, [pc, #36]	; (800285c <MX_GPIO_Init+0x140>)
 8002838:	f002 fad2 	bl	8004de0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2100      	movs	r1, #0
 8002840:	2028      	movs	r0, #40	; 0x28
 8002842:	f001 fe94 	bl	800456e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002846:	2028      	movs	r0, #40	; 0x28
 8002848:	f001 fead 	bl	80045a6 <HAL_NVIC_EnableIRQ>

}
 800284c:	bf00      	nop
 800284e:	3728      	adds	r7, #40	; 0x28
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40020000 	.word	0x40020000
 800285c:	40020400 	.word	0x40020400
 8002860:	10210000 	.word	0x10210000
 8002864:	40020800 	.word	0x40020800

08002868 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	ed2d 8b02 	vpush	{d8}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
	static uint64_t EncoderLastTimestamp = 0;
//	static uint32_t EncoderLastOffset = 0;

	//read data
//	uint32_t EncoderNowPosition = htim1.Instance->CNT; //pulse
	uint32_t EncoderNowPosition = Encoder_Position_Update(); //use position from unwarp
 8002872:	f000 f84d 	bl	8002910 <Encoder_Position_Update>
 8002876:	eef0 7a40 	vmov.f32	s15, s0
 800287a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287e:	ee17 3a90 	vmov	r3, s15
 8002882:	61fb      	str	r3, [r7, #28]
	uint64_t EncoderNowTimestamp = micros();
 8002884:	f001 fa2e 	bl	8003ce4 <micros>
 8002888:	e9c7 0104 	strd	r0, r1, [r7, #16]
//	uint32_t EncoderNowOffset = 0;

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <Encoder_Velocity_Update+0x98>)
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002896:	1a84      	subs	r4, r0, r2
 8002898:	eb61 0503 	sbc.w	r5, r1, r3
 800289c:	e9c7 4502 	strd	r4, r5, [r7, #8]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <Encoder_Velocity_Update+0x9c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	607b      	str	r3, [r7, #4]
	if (clear_counter_velocity == 1)
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <Encoder_Velocity_Update+0xa0>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d107      	bne.n	80028c2 <Encoder_Velocity_Update+0x5a>
	{
		clear_counter_velocity = 0;
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <Encoder_Velocity_Update+0xa0>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
		EncoderNowPosition = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
		EncoderLastPosition = 0;
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <Encoder_Velocity_Update+0x9c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
////		EncoderPositionDiff = EncoderPositionDiff + EncoderNowOffset;
//		//EncoderPositionDiff += 57344;
//	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <Encoder_Velocity_Update+0x9c>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <Encoder_Velocity_Update+0x98>)
 80028ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028ce:	e9c1 2300 	strd	r2, r3, [r1]
//	EncoderLastOffset = EncoderNowOffset;

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <Encoder_Velocity_Update+0xa4>)
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	ee07 3a90 	vmov	s15, r3
 80028de:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80028e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028e6:	f7fe f9e5 	bl	8000cb4 <__aeabi_ul2f>
 80028ea:	ee07 0a10 	vmov	s14, r0
 80028ee:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 80028f2:	eeb0 0a67 	vmov.f32	s0, s15
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	ecbd 8b02 	vpop	{d8}
 80028fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002900:	200001f0 	.word	0x200001f0
 8002904:	200001f8 	.word	0x200001f8
 8002908:	200001d1 	.word	0x200001d1
 800290c:	000f4240 	.word	0x000f4240

08002910 <Encoder_Position_Update>:


float Encoder_Position_Update()  //Lecture code DON'T TOUCH!
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
	//Save Last state
	//read data
	static uint32_t EncoderPreviousPosition = 0;
	uint32_t EncoderCurrentPosition = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
	int32_t EncoderPositionDifferent;
	int32_t EncoderUnwrapPosition ;
	static uint32_t EncoderPreviousOffset = 0;
	static uint32_t EncoderCurrentOffset = 0;

	EncoderCurrentPosition = htim1.Instance->CNT; //pulse
 800291a:	4b2e      	ldr	r3, [pc, #184]	; (80029d4 <Encoder_Position_Update+0xc4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	60fb      	str	r3, [r7, #12]

	//delta position = current - previous
	EncoderPositionDifferent = EncoderCurrentPosition - EncoderPreviousPosition;
 8002922:	4b2d      	ldr	r3, [pc, #180]	; (80029d8 <Encoder_Position_Update+0xc8>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	60bb      	str	r3, [r7, #8]
	//signal = current + current offset
	EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <Encoder_Position_Update+0xcc>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	607b      	str	r3, [r7, #4]

	if (clear_counter_position == 1)
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <Encoder_Position_Update+0xd0>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d111      	bne.n	8002962 <Encoder_Position_Update+0x52>
	{
		clear_counter_position = 0;
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <Encoder_Position_Update+0xd0>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
		EncoderPreviousPosition = 0;
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <Encoder_Position_Update+0xc8>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
		EncoderCurrentPosition = 0;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
		EncoderPreviousOffset = 0;
 800294e:	4b25      	ldr	r3, [pc, #148]	; (80029e4 <Encoder_Position_Update+0xd4>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
		EncoderCurrentOffset = 0;
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <Encoder_Position_Update+0xcc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
		EncoderUnwrapPosition = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
		EncoderPositionDifferent = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
	}

	//compensate overflow and underflow
	if (EncoderPositionDifferent >= Encoder_Overflow)
 8002962:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <Encoder_Position_Update+0xd8>)
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4293      	cmp	r3, r2
 800296c:	db0c      	blt.n	8002988 <Encoder_Position_Update+0x78>
//		EncoderPositionDiff -= Encoder_Resolution;
//		EncoderUnwrapPosition = EncoderCurrentPosition - Encoder_Resolution;

//		write new unwrapping
		//current offset = previous offset - resolution of encoder max
		EncoderCurrentOffset = EncoderPreviousOffset - Encoder_Resolution;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <Encoder_Position_Update+0xd4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1e      	ldr	r2, [pc, #120]	; (80029ec <Encoder_Position_Update+0xdc>)
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	4a18      	ldr	r2, [pc, #96]	; (80029dc <Encoder_Position_Update+0xcc>)
 800297a:	6013      	str	r3, [r2, #0]
		//signal = current + current offset
		EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 800297c:	4b17      	ldr	r3, [pc, #92]	; (80029dc <Encoder_Position_Update+0xcc>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	e012      	b.n	80029ae <Encoder_Position_Update+0x9e>
//		EncoderPositionDiff -= 57344;
	}
	else if (-EncoderPositionDifferent >= Encoder_Overflow)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	425b      	negs	r3, r3
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <Encoder_Position_Update+0xd8>)
 800298e:	8812      	ldrh	r2, [r2, #0]
 8002990:	4293      	cmp	r3, r2
 8002992:	db0c      	blt.n	80029ae <Encoder_Position_Update+0x9e>
	{
//		EncoderPositionDiff += Encoder_Resolution;
//		EncoderUnwrapPosition = EncoderCurrentPosition + Encoder_Resolution;

//		write new unwrap
		EncoderCurrentOffset = EncoderPreviousOffset + Encoder_Resolution;
 8002994:	4b15      	ldr	r3, [pc, #84]	; (80029ec <Encoder_Position_Update+0xdc>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <Encoder_Position_Update+0xd4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <Encoder_Position_Update+0xcc>)
 80029a2:	6013      	str	r3, [r2, #0]
		EncoderUnwrapPosition = EncoderCurrentPosition + EncoderCurrentOffset;
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <Encoder_Position_Update+0xcc>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	607b      	str	r3, [r7, #4]
//		EncoderPositionDiff += 57344;
	}

	//Update Position and time
	EncoderPreviousPosition = EncoderCurrentPosition;
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <Encoder_Position_Update+0xc8>)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6013      	str	r3, [r2, #0]
	EncoderPreviousOffset = EncoderCurrentOffset;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <Encoder_Position_Update+0xcc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <Encoder_Position_Update+0xd4>)
 80029ba:	6013      	str	r3, [r2, #0]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return EncoderUnwrapPosition  ;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	200003cc 	.word	0x200003cc
 80029d8:	200001fc 	.word	0x200001fc
 80029dc:	20000200 	.word	0x20000200
 80029e0:	200001d2 	.word	0x200001d2
 80029e4:	20000204 	.word	0x20000204
 80029e8:	20000002 	.word	0x20000002
 80029ec:	20000000 	.word	0x20000000

080029f0 <quintic>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}

void quintic()
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	ed2d 8b02 	vpush	{d8}
 80029f6:	af00      	add	r7, sp, #0
	if (initial == 1 && angle_rad_stop - angle_rad_start != 0)
 80029f8:	4bc1      	ldr	r3, [pc, #772]	; (8002d00 <quintic+0x310>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 8106 	bne.w	8002c0e <quintic+0x21e>
 8002a02:	4bc0      	ldr	r3, [pc, #768]	; (8002d04 <quintic+0x314>)
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	4bbf      	ldr	r3, [pc, #764]	; (8002d08 <quintic+0x318>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1a:	f000 80f8 	beq.w	8002c0e <quintic+0x21e>
	{
		//calculate tau
		//short if condition
		tau_max = 15/8*(angle_rad_stop - angle_rad_start)/omega_max >= sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max)) ? 15/8*(angle_rad_stop - angle_rad_start)/omega_max : sqrtf(abs(((10*powf(3+sqrtf(3),1))-(5*powf(3+sqrtf(3),2))+(5*powf(3+sqrtf(3),3)/9))*(angle_rad_stop-angle_rad_start)/alpha_max));
 8002a1e:	4bb9      	ldr	r3, [pc, #740]	; (8002d04 <quintic+0x314>)
 8002a20:	ed93 7a00 	vldr	s14, [r3]
 8002a24:	4bb8      	ldr	r3, [pc, #736]	; (8002d08 <quintic+0x318>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a2e:	4bb7      	ldr	r3, [pc, #732]	; (8002d0c <quintic+0x31c>)
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002a38:	4bb2      	ldr	r3, [pc, #712]	; (8002d04 <quintic+0x314>)
 8002a3a:	ed93 7a00 	vldr	s14, [r3]
 8002a3e:	4bb2      	ldr	r3, [pc, #712]	; (8002d08 <quintic+0x318>)
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a48:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002d10 <quintic+0x320>
 8002a4c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a50:	4bb0      	ldr	r3, [pc, #704]	; (8002d14 <quintic+0x324>)
 8002a52:	ed93 7a00 	vldr	s14, [r3]
 8002a56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a5e:	ee17 3a90 	vmov	r3, s15
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a70:	eeb0 0a67 	vmov.f32	s0, s15
 8002a74:	f005 fb36 	bl	80080e4 <sqrtf>
 8002a78:	eef0 7a40 	vmov.f32	s15, s0
 8002a7c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	db0d      	blt.n	8002aa2 <quintic+0xb2>
 8002a86:	4b9f      	ldr	r3, [pc, #636]	; (8002d04 <quintic+0x314>)
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	4b9e      	ldr	r3, [pc, #632]	; (8002d08 <quintic+0x318>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a96:	4b9d      	ldr	r3, [pc, #628]	; (8002d0c <quintic+0x31c>)
 8002a98:	ed93 7a00 	vldr	s14, [r3]
 8002a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa0:	e021      	b.n	8002ae6 <quintic+0xf6>
 8002aa2:	4b98      	ldr	r3, [pc, #608]	; (8002d04 <quintic+0x314>)
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	4b97      	ldr	r3, [pc, #604]	; (8002d08 <quintic+0x318>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab2:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002d10 <quintic+0x320>
 8002ab6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002aba:	4b96      	ldr	r3, [pc, #600]	; (8002d14 <quintic+0x324>)
 8002abc:	ed93 7a00 	vldr	s14, [r3]
 8002ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac8:	ee17 3a90 	vmov	r3, s15
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bfb8      	it	lt
 8002ad0:	425b      	neglt	r3, r3
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	f005 fb01 	bl	80080e4 <sqrtf>
 8002ae2:	eef0 7a40 	vmov.f32	s15, s0
 8002ae6:	4b8c      	ldr	r3, [pc, #560]	; (8002d18 <quintic+0x328>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]

		//calculate coeffient
		c_0 = angle_rad_start;
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <quintic+0x318>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a8a      	ldr	r2, [pc, #552]	; (8002d1c <quintic+0x32c>)
 8002af2:	6013      	str	r3, [r2, #0]
		c_1 = 0;
 8002af4:	4b8a      	ldr	r3, [pc, #552]	; (8002d20 <quintic+0x330>)
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
		c_2 = 0;
 8002afc:	4b89      	ldr	r3, [pc, #548]	; (8002d24 <quintic+0x334>)
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
		c_3 = 10*((angle_rad_stop - angle_rad_start)/(powf(tau_max,3)));
 8002b04:	4b7f      	ldr	r3, [pc, #508]	; (8002d04 <quintic+0x314>)
 8002b06:	ed93 7a00 	vldr	s14, [r3]
 8002b0a:	4b7f      	ldr	r3, [pc, #508]	; (8002d08 <quintic+0x318>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <quintic+0x328>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	f005 fa47 	bl	8007fb4 <powf>
 8002b26:	eeb0 7a40 	vmov.f32	s14, s0
 8002b2a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002b2e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	4b7c      	ldr	r3, [pc, #496]	; (8002d28 <quintic+0x338>)
 8002b38:	edc3 7a00 	vstr	s15, [r3]
		c_4 = 15*((angle_rad_start - angle_rad_stop)/(powf(tau_max,4)));
 8002b3c:	4b72      	ldr	r3, [pc, #456]	; (8002d08 <quintic+0x318>)
 8002b3e:	ed93 7a00 	vldr	s14, [r3]
 8002b42:	4b70      	ldr	r3, [pc, #448]	; (8002d04 <quintic+0x314>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002b4c:	4b72      	ldr	r3, [pc, #456]	; (8002d18 <quintic+0x328>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002b56:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5a:	f005 fa2b 	bl	8007fb4 <powf>
 8002b5e:	eeb0 7a40 	vmov.f32	s14, s0
 8002b62:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002b66:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b6e:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <quintic+0x33c>)
 8002b70:	edc3 7a00 	vstr	s15, [r3]
		c_5 = 6*((angle_rad_stop - angle_rad_start)/(powf(tau_max,5)));
 8002b74:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <quintic+0x314>)
 8002b76:	ed93 7a00 	vldr	s14, [r3]
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <quintic+0x318>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee37 8a67 	vsub.f32	s16, s14, s15
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <quintic+0x328>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b92:	f005 fa0f 	bl	8007fb4 <powf>
 8002b96:	eeb0 7a40 	vmov.f32	s14, s0
 8002b9a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002b9e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba6:	4b62      	ldr	r3, [pc, #392]	; (8002d30 <quintic+0x340>)
 8002ba8:	edc3 7a00 	vstr	s15, [r3]
		//save initial time
		//change microsec to second
		time_initial = micros()/1000000.0;
 8002bac:	f001 f89a 	bl	8003ce4 <micros>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd fc94 	bl	80004e4 <__aeabi_ul2d>
 8002bbc:	a34e      	add	r3, pc, #312	; (adr r3, 8002cf8 <quintic+0x308>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fdef 	bl	80007a4 <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f7fd ff59 	bl	8000a84 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <quintic+0x344>)
 8002bd6:	6013      	str	r3, [r2, #0]
		initial = 0;
 8002bd8:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <quintic+0x310>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]

		//initial parameter in kalman filter
		theta_estimate = angle_rad_start;
 8002bde:	4b4a      	ldr	r3, [pc, #296]	; (8002d08 <quintic+0x318>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <quintic+0x348>)
 8002be4:	6013      	str	r3, [r2, #0]
		omega_estimate = 0;
 8002be6:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <quintic+0x34c>)
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
		p_estimate11 = 1 ;
 8002bee:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <quintic+0x350>)
 8002bf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002bf4:	601a      	str	r2, [r3, #0]
		p_estimate12 = 0 ;
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <quintic+0x354>)
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
		p_estimate21 = 0 ;
 8002bfe:	4b52      	ldr	r3, [pc, #328]	; (8002d48 <quintic+0x358>)
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
		p_estimate22 = 1 ;
 8002c06:	4b51      	ldr	r3, [pc, #324]	; (8002d4c <quintic+0x35c>)
 8002c08:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c0c:	601a      	str	r2, [r3, #0]

	}
	if (initial == 0 && angle_rad_stop - angle_rad_start != 0)
 8002c0e:	4b3c      	ldr	r3, [pc, #240]	; (8002d00 <quintic+0x310>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 818d 	bne.w	8002f32 <quintic+0x542>
 8002c18:	4b3a      	ldr	r3, [pc, #232]	; (8002d04 <quintic+0x314>)
 8002c1a:	ed93 7a00 	vldr	s14, [r3]
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	; (8002d08 <quintic+0x318>)
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	f000 817f 	beq.w	8002f32 <quintic+0x542>
	{
		//at the final point
		//tau = (micros()/1000000.0)-time_initial ; in second unit
		if ((micros()/1000000.0)-time_initial >= tau_max)
 8002c34:	f001 f856 	bl	8003ce4 <micros>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd fc50 	bl	80004e4 <__aeabi_ul2d>
 8002c44:	a32c      	add	r3, pc, #176	; (adr r3, 8002cf8 <quintic+0x308>)
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f7fd fdab 	bl	80007a4 <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4614      	mov	r4, r2
 8002c54:	461d      	mov	r5, r3
 8002c56:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <quintic+0x344>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc20 	bl	80004a0 <__aeabi_f2d>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd faba 	bl	80001e0 <__aeabi_dsub>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <quintic+0x328>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc11 	bl	80004a0 <__aeabi_f2d>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	4620      	mov	r0, r4
 8002c84:	4629      	mov	r1, r5
 8002c86:	f7fd fee9 	bl	8000a5c <__aeabi_dcmpge>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d073      	beq.n	8002d78 <quintic+0x388>
		{
			initial = 1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <quintic+0x310>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			angle_rad_start = angle_rad_stop;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <quintic+0x314>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	; (8002d08 <quintic+0x318>)
 8002c9c:	6013      	str	r3, [r2, #0]
			PWM_Out = 0;
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <quintic+0x360>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <quintic+0x360>)
 8002ca6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <quintic+0x364>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
			error_position = 0;
 8002cb0:	4b29      	ldr	r3, [pc, #164]	; (8002d58 <quintic+0x368>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
			error_position_diff = 0;
 8002cb8:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <quintic+0x36c>)
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
			error_position_int = 0;
 8002cc0:	4b27      	ldr	r3, [pc, #156]	; (8002d60 <quintic+0x370>)
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
			error_position_prev = 0;
 8002cc8:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <quintic+0x374>)
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
			error_velocity = 0;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <quintic+0x378>)
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
			error_velocity_diff = 0;
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <quintic+0x37c>)
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
			error_velocity_int = 0;
 8002ce0:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <quintic+0x380>)
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
			error_velocity_prev = 0;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <quintic+0x384>)
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]

			//cascade control
			cascade_control_with_feed_forward();
		}
	}
}
 8002cf0:	e11f      	b.n	8002f32 <quintic+0x542>
 8002cf2:	bf00      	nop
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	412e8480 	.word	0x412e8480
 8002d00:	20000018 	.word	0x20000018
 8002d04:	2000010c 	.word	0x2000010c
 8002d08:	20000108 	.word	0x20000108
 8002d0c:	20000010 	.word	0x20000010
 8002d10:	c0b8c078 	.word	0xc0b8c078
 8002d14:	20000014 	.word	0x20000014
 8002d18:	20000110 	.word	0x20000110
 8002d1c:	20000118 	.word	0x20000118
 8002d20:	2000011c 	.word	0x2000011c
 8002d24:	20000120 	.word	0x20000120
 8002d28:	20000124 	.word	0x20000124
 8002d2c:	20000128 	.word	0x20000128
 8002d30:	2000012c 	.word	0x2000012c
 8002d34:	20000114 	.word	0x20000114
 8002d38:	20000178 	.word	0x20000178
 8002d3c:	2000017c 	.word	0x2000017c
 8002d40:	2000002c 	.word	0x2000002c
 8002d44:	20000190 	.word	0x20000190
 8002d48:	20000194 	.word	0x20000194
 8002d4c:	20000030 	.word	0x20000030
 8002d50:	200000f0 	.word	0x200000f0
 8002d54:	2000031c 	.word	0x2000031c
 8002d58:	20000138 	.word	0x20000138
 8002d5c:	2000013c 	.word	0x2000013c
 8002d60:	20000140 	.word	0x20000140
 8002d64:	20000144 	.word	0x20000144
 8002d68:	2000015c 	.word	0x2000015c
 8002d6c:	20000160 	.word	0x20000160
 8002d70:	20000164 	.word	0x20000164
 8002d74:	20000168 	.word	0x20000168
			tau = micros()/1000000.0 - time_initial;
 8002d78:	f000 ffb4 	bl	8003ce4 <micros>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd fbae 	bl	80004e4 <__aeabi_ul2d>
 8002d88:	a378      	add	r3, pc, #480	; (adr r3, 8002f6c <quintic+0x57c>)
 8002d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8e:	f7fd fd09 	bl	80007a4 <__aeabi_ddiv>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4614      	mov	r4, r2
 8002d98:	461d      	mov	r5, r3
 8002d9a:	4b69      	ldr	r3, [pc, #420]	; (8002f40 <quintic+0x550>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fb7e 	bl	80004a0 <__aeabi_f2d>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4620      	mov	r0, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7fd fa18 	bl	80001e0 <__aeabi_dsub>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd fe64 	bl	8000a84 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4a61      	ldr	r2, [pc, #388]	; (8002f44 <quintic+0x554>)
 8002dc0:	6013      	str	r3, [r2, #0]
			desired_position = c_0*powf(tau,0) + c_1*powf(tau,1) + c_2*powf(tau,2) + c_3*powf(tau,3) + c_4*powf(tau,4) + c_5*powf(tau,5);
 8002dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <quintic+0x558>)
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002dd0:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <quintic+0x554>)
 8002dd2:	edd3 6a00 	vldr	s13, [r3]
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <quintic+0x55c>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002de0:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002de4:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <quintic+0x554>)
 8002de6:	edd3 7a00 	vldr	s15, [r3]
 8002dea:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	f005 f8df 	bl	8007fb4 <powf>
 8002df6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dfa:	4b55      	ldr	r3, [pc, #340]	; (8002f50 <quintic+0x560>)
 8002dfc:	edd3 7a00 	vldr	s15, [r3]
 8002e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e04:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002e08:	4b4e      	ldr	r3, [pc, #312]	; (8002f44 <quintic+0x554>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002e12:	eeb0 0a67 	vmov.f32	s0, s15
 8002e16:	f005 f8cd 	bl	8007fb4 <powf>
 8002e1a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e1e:	4b4d      	ldr	r3, [pc, #308]	; (8002f54 <quintic+0x564>)
 8002e20:	edd3 7a00 	vldr	s15, [r3]
 8002e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e28:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002e2c:	4b45      	ldr	r3, [pc, #276]	; (8002f44 <quintic+0x554>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	f005 f8bb 	bl	8007fb4 <powf>
 8002e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8002e42:	4b45      	ldr	r3, [pc, #276]	; (8002f58 <quintic+0x568>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <quintic+0x554>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	f005 f8a9 	bl	8007fb4 <powf>
 8002e62:	eeb0 7a40 	vmov.f32	s14, s0
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <quintic+0x56c>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e70:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e74:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <quintic+0x570>)
 8002e76:	edc3 7a00 	vstr	s15, [r3]
			desired_velocity = 0 + c_1 + 2*c_2*powf(tau,1) + 3*c_3*powf(tau,2) + 4*c_4*powf(tau,3) + 5*c_5*powf(tau,4);
 8002e7a:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <quintic+0x55c>)
 8002e7c:	edd3 7a00 	vldr	s15, [r3]
 8002e80:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002f64 <quintic+0x574>
 8002e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <quintic+0x560>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002e92:	4b2c      	ldr	r3, [pc, #176]	; (8002f44 <quintic+0x554>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <quintic+0x564>)
 8002ea2:	edd3 7a00 	vldr	s15, [r3]
 8002ea6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002eaa:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002eae:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <quintic+0x554>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebc:	f005 f87a 	bl	8007fb4 <powf>
 8002ec0:	eef0 7a40 	vmov.f32	s15, s0
 8002ec4:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002ec8:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002ecc:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <quintic+0x568>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002ed6:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <quintic+0x554>)
 8002edc:	edd3 7a00 	vldr	s15, [r3]
 8002ee0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002ee4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ee8:	f005 f864 	bl	8007fb4 <powf>
 8002eec:	eef0 7a40 	vmov.f32	s15, s0
 8002ef0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002ef4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <quintic+0x56c>)
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002f02:	ee67 8a87 	vmul.f32	s17, s15, s14
 8002f06:	4b0f      	ldr	r3, [pc, #60]	; (8002f44 <quintic+0x554>)
 8002f08:	edd3 7a00 	vldr	s15, [r3]
 8002f0c:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8002f10:	eeb0 0a67 	vmov.f32	s0, s15
 8002f14:	f005 f84e 	bl	8007fb4 <powf>
 8002f18:	eef0 7a40 	vmov.f32	s15, s0
 8002f1c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8002f20:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <quintic+0x578>)
 8002f26:	edc3 7a00 	vstr	s15, [r3]
			Kalman_Filter();
 8002f2a:	f000 f823 	bl	8002f74 <Kalman_Filter>
			cascade_control_with_feed_forward();
 8002f2e:	f000 f9fd 	bl	800332c <cascade_control_with_feed_forward>
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	ecbd 8b02 	vpop	{d8}
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	f3af 8000 	nop.w
 8002f40:	20000114 	.word	0x20000114
 8002f44:	20000130 	.word	0x20000130
 8002f48:	20000118 	.word	0x20000118
 8002f4c:	2000011c 	.word	0x2000011c
 8002f50:	20000120 	.word	0x20000120
 8002f54:	20000124 	.word	0x20000124
 8002f58:	20000128 	.word	0x20000128
 8002f5c:	2000012c 	.word	0x2000012c
 8002f60:	20000134 	.word	0x20000134
 8002f64:	00000000 	.word	0x00000000
 8002f68:	20000158 	.word	0x20000158
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	412e8480 	.word	0x412e8480

08002f74 <Kalman_Filter>:

void Kalman_Filter()
{
 8002f74:	b5b0      	push	{r4, r5, r7, lr}
 8002f76:	ed2d 8b02 	vpush	{d8}
 8002f7a:	af00      	add	r7, sp, #0
	//predict state
	//x_predict = A*x_estimate
	//x_predict = [theta_predict; omega_predict]
	//A = [1 dt; 0 1]
	//x_estimate = [theta_estimate; omega_estimate]
	theta_predict = theta_estimate + omega_estimate*CON_T;
 8002f7c:	4bd4      	ldr	r3, [pc, #848]	; (80032d0 <Kalman_Filter+0x35c>)
 8002f7e:	edd3 7a00 	vldr	s15, [r3]
 8002f82:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 80032d4 <Kalman_Filter+0x360>
 8002f86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f8a:	4bd3      	ldr	r3, [pc, #844]	; (80032d8 <Kalman_Filter+0x364>)
 8002f8c:	edd3 7a00 	vldr	s15, [r3]
 8002f90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f94:	4bd1      	ldr	r3, [pc, #836]	; (80032dc <Kalman_Filter+0x368>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	omega_predict = omega_estimate;
 8002f9a:	4bcd      	ldr	r3, [pc, #820]	; (80032d0 <Kalman_Filter+0x35c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4ad0      	ldr	r2, [pc, #832]	; (80032e0 <Kalman_Filter+0x36c>)
 8002fa0:	6013      	str	r3, [r2, #0]
	//p_predict = A*p_estimate*transpose(A) + G*Q*transpose(G)
	//p_predict = [p_predict11 p_predict12 ; p_predict21 p_predict22]
	//p_estimate = [p_estimate11 p_estimate12 ; p_estimate21 p_estimate22] -> initial [1 0; 0 1]
	//G = [0.5*dt^2 ; dt]
	//Q = Sigma_a^2
	Q = powf(Sigma_a,2);
 8002fa2:	4bd0      	ldr	r3, [pc, #832]	; (80032e4 <Kalman_Filter+0x370>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	f005 f800 	bl	8007fb4 <powf>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	4bcb      	ldr	r3, [pc, #812]	; (80032e8 <Kalman_Filter+0x374>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
	p_predict11 = p_estimate11 + (p_estimate12 + p_estimate21)*CON_T + p_estimate22*powf(CON_T,2)+powf(CON_T,4)*Q/4.0;
 8002fbe:	4bcb      	ldr	r3, [pc, #812]	; (80032ec <Kalman_Filter+0x378>)
 8002fc0:	ed93 7a00 	vldr	s14, [r3]
 8002fc4:	4bca      	ldr	r3, [pc, #808]	; (80032f0 <Kalman_Filter+0x37c>)
 8002fc6:	edd3 7a00 	vldr	s15, [r3]
 8002fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fce:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 80032d4 <Kalman_Filter+0x360>
 8002fd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fd6:	4bc7      	ldr	r3, [pc, #796]	; (80032f4 <Kalman_Filter+0x380>)
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002fe0:	eddf 7abc 	vldr	s15, [pc, #752]	; 80032d4 <Kalman_Filter+0x360>
 8002fe4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fec:	f004 ffe2 	bl	8007fb4 <powf>
 8002ff0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff4:	4bc0      	ldr	r3, [pc, #768]	; (80032f8 <Kalman_Filter+0x384>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003002:	ee17 0a90 	vmov	r0, s15
 8003006:	f7fd fa4b 	bl	80004a0 <__aeabi_f2d>
 800300a:	4604      	mov	r4, r0
 800300c:	460d      	mov	r5, r1
 800300e:	eddf 7ab1 	vldr	s15, [pc, #708]	; 80032d4 <Kalman_Filter+0x360>
 8003012:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003016:	eeb0 0a67 	vmov.f32	s0, s15
 800301a:	f004 ffcb 	bl	8007fb4 <powf>
 800301e:	eeb0 7a40 	vmov.f32	s14, s0
 8003022:	4bb1      	ldr	r3, [pc, #708]	; (80032e8 <Kalman_Filter+0x374>)
 8003024:	edd3 7a00 	vldr	s15, [r3]
 8003028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302c:	ee17 0a90 	vmov	r0, s15
 8003030:	f7fd fa36 	bl	80004a0 <__aeabi_f2d>
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	4bb0      	ldr	r3, [pc, #704]	; (80032fc <Kalman_Filter+0x388>)
 800303a:	f7fd fbb3 	bl	80007a4 <__aeabi_ddiv>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4620      	mov	r0, r4
 8003044:	4629      	mov	r1, r5
 8003046:	f7fd f8cd 	bl	80001e4 <__adddf3>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fd17 	bl	8000a84 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	4aa9      	ldr	r2, [pc, #676]	; (8003300 <Kalman_Filter+0x38c>)
 800305a:	6013      	str	r3, [r2, #0]
	p_predict12 = p_estimate12 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 800305c:	4ba6      	ldr	r3, [pc, #664]	; (80032f8 <Kalman_Filter+0x384>)
 800305e:	edd3 7a00 	vldr	s15, [r3]
 8003062:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80032d4 <Kalman_Filter+0x360>
 8003066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800306a:	4ba0      	ldr	r3, [pc, #640]	; (80032ec <Kalman_Filter+0x378>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	ee17 0a90 	vmov	r0, s15
 8003078:	f7fd fa12 	bl	80004a0 <__aeabi_f2d>
 800307c:	4604      	mov	r4, r0
 800307e:	460d      	mov	r5, r1
 8003080:	eddf 7a94 	vldr	s15, [pc, #592]	; 80032d4 <Kalman_Filter+0x360>
 8003084:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003088:	eeb0 0a67 	vmov.f32	s0, s15
 800308c:	f004 ff92 	bl	8007fb4 <powf>
 8003090:	eeb0 7a40 	vmov.f32	s14, s0
 8003094:	4b94      	ldr	r3, [pc, #592]	; (80032e8 <Kalman_Filter+0x374>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	ee17 0a90 	vmov	r0, s15
 80030a2:	f7fd f9fd 	bl	80004a0 <__aeabi_f2d>
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030ae:	f7fd fb79 	bl	80007a4 <__aeabi_ddiv>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4620      	mov	r0, r4
 80030b8:	4629      	mov	r1, r5
 80030ba:	f7fd f893 	bl	80001e4 <__adddf3>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	f7fd fcdd 	bl	8000a84 <__aeabi_d2f>
 80030ca:	4603      	mov	r3, r0
 80030cc:	4a8d      	ldr	r2, [pc, #564]	; (8003304 <Kalman_Filter+0x390>)
 80030ce:	6013      	str	r3, [r2, #0]
	p_predict21 = p_estimate21 + p_estimate22*CON_T + powf(CON_T,3)*Q/2.0;
 80030d0:	4b89      	ldr	r3, [pc, #548]	; (80032f8 <Kalman_Filter+0x384>)
 80030d2:	edd3 7a00 	vldr	s15, [r3]
 80030d6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80032d4 <Kalman_Filter+0x360>
 80030da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030de:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <Kalman_Filter+0x37c>)
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	ee17 0a90 	vmov	r0, s15
 80030ec:	f7fd f9d8 	bl	80004a0 <__aeabi_f2d>
 80030f0:	4604      	mov	r4, r0
 80030f2:	460d      	mov	r5, r1
 80030f4:	eddf 7a77 	vldr	s15, [pc, #476]	; 80032d4 <Kalman_Filter+0x360>
 80030f8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	f004 ff58 	bl	8007fb4 <powf>
 8003104:	eeb0 7a40 	vmov.f32	s14, s0
 8003108:	4b77      	ldr	r3, [pc, #476]	; (80032e8 <Kalman_Filter+0x374>)
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003112:	ee17 0a90 	vmov	r0, s15
 8003116:	f7fd f9c3 	bl	80004a0 <__aeabi_f2d>
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003122:	f7fd fb3f 	bl	80007a4 <__aeabi_ddiv>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4620      	mov	r0, r4
 800312c:	4629      	mov	r1, r5
 800312e:	f7fd f859 	bl	80001e4 <__adddf3>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4610      	mov	r0, r2
 8003138:	4619      	mov	r1, r3
 800313a:	f7fd fca3 	bl	8000a84 <__aeabi_d2f>
 800313e:	4603      	mov	r3, r0
 8003140:	4a71      	ldr	r2, [pc, #452]	; (8003308 <Kalman_Filter+0x394>)
 8003142:	6013      	str	r3, [r2, #0]
	p_predict22 = p_estimate22 + powf(CON_T,2)*Q;
 8003144:	eddf 7a63 	vldr	s15, [pc, #396]	; 80032d4 <Kalman_Filter+0x360>
 8003148:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800314c:	eeb0 0a67 	vmov.f32	s0, s15
 8003150:	f004 ff30 	bl	8007fb4 <powf>
 8003154:	eeb0 7a40 	vmov.f32	s14, s0
 8003158:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <Kalman_Filter+0x374>)
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003162:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <Kalman_Filter+0x384>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800316c:	4b67      	ldr	r3, [pc, #412]	; (800330c <Kalman_Filter+0x398>)
 800316e:	edc3 7a00 	vstr	s15, [r3]
	//update
	//z_predict = z - C*x_predict
	//z_predict = theta_error
	//z = sensor_theta_input
	//C = [0 1]
	z_predict = Velocity_Now_Rad - omega_predict;
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <Kalman_Filter+0x39c>)
 8003174:	ed93 7a00 	vldr	s14, [r3]
 8003178:	4b59      	ldr	r3, [pc, #356]	; (80032e0 <Kalman_Filter+0x36c>)
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003182:	4b64      	ldr	r3, [pc, #400]	; (8003314 <Kalman_Filter+0x3a0>)
 8003184:	edc3 7a00 	vstr	s15, [r3]

	//S = C*p_predict*transpose(C) + R
	//R = Sigma_w^2
	R = powf(Sigma_w,2);
 8003188:	4b63      	ldr	r3, [pc, #396]	; (8003318 <Kalman_Filter+0x3a4>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003192:	eeb0 0a67 	vmov.f32	s0, s15
 8003196:	f004 ff0d 	bl	8007fb4 <powf>
 800319a:	eef0 7a40 	vmov.f32	s15, s0
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <Kalman_Filter+0x3a8>)
 80031a0:	edc3 7a00 	vstr	s15, [r3]
	s = p_predict22 + R;
 80031a4:	4b59      	ldr	r3, [pc, #356]	; (800330c <Kalman_Filter+0x398>)
 80031a6:	ed93 7a00 	vldr	s14, [r3]
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <Kalman_Filter+0x3a8>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b4:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <Kalman_Filter+0x3ac>)
 80031b6:	edc3 7a00 	vstr	s15, [r3]

	//K = p_predict*transpose(C)*inv(S)
	//K = [k11;k21]
	k11 = p_predict12/s;
 80031ba:	4b52      	ldr	r3, [pc, #328]	; (8003304 <Kalman_Filter+0x390>)
 80031bc:	edd3 6a00 	vldr	s13, [r3]
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <Kalman_Filter+0x3ac>)
 80031c2:	ed93 7a00 	vldr	s14, [r3]
 80031c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ca:	4b56      	ldr	r3, [pc, #344]	; (8003324 <Kalman_Filter+0x3b0>)
 80031cc:	edc3 7a00 	vstr	s15, [r3]
	k21 = p_predict22/s;
 80031d0:	4b4e      	ldr	r3, [pc, #312]	; (800330c <Kalman_Filter+0x398>)
 80031d2:	edd3 6a00 	vldr	s13, [r3]
 80031d6:	4b52      	ldr	r3, [pc, #328]	; (8003320 <Kalman_Filter+0x3ac>)
 80031d8:	ed93 7a00 	vldr	s14, [r3]
 80031dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e0:	4b51      	ldr	r3, [pc, #324]	; (8003328 <Kalman_Filter+0x3b4>)
 80031e2:	edc3 7a00 	vstr	s15, [r3]

	//x_estimate = x_predict + K*z_predict
	theta_estimate = theta_predict + k11*z_predict;
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <Kalman_Filter+0x3b0>)
 80031e8:	ed93 7a00 	vldr	s14, [r3]
 80031ec:	4b49      	ldr	r3, [pc, #292]	; (8003314 <Kalman_Filter+0x3a0>)
 80031ee:	edd3 7a00 	vldr	s15, [r3]
 80031f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031f6:	4b39      	ldr	r3, [pc, #228]	; (80032dc <Kalman_Filter+0x368>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003200:	4b35      	ldr	r3, [pc, #212]	; (80032d8 <Kalman_Filter+0x364>)
 8003202:	edc3 7a00 	vstr	s15, [r3]
	omega_estimate = omega_predict + k21*z_predict;
 8003206:	4b48      	ldr	r3, [pc, #288]	; (8003328 <Kalman_Filter+0x3b4>)
 8003208:	ed93 7a00 	vldr	s14, [r3]
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <Kalman_Filter+0x3a0>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003216:	4b32      	ldr	r3, [pc, #200]	; (80032e0 <Kalman_Filter+0x36c>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <Kalman_Filter+0x35c>)
 8003222:	edc3 7a00 	vstr	s15, [r3]

	//p_estimate = (I - K*C)*p_predict
	//I = [1 0; 0 1]
	p_estimate11 = (p_predict11*(p_predict22+R)-p_predict12*p_predict21)/s;
 8003226:	4b39      	ldr	r3, [pc, #228]	; (800330c <Kalman_Filter+0x398>)
 8003228:	ed93 7a00 	vldr	s14, [r3]
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <Kalman_Filter+0x3a8>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003236:	4b32      	ldr	r3, [pc, #200]	; (8003300 <Kalman_Filter+0x38c>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <Kalman_Filter+0x390>)
 8003242:	edd3 6a00 	vldr	s13, [r3]
 8003246:	4b30      	ldr	r3, [pc, #192]	; (8003308 <Kalman_Filter+0x394>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003250:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <Kalman_Filter+0x3ac>)
 8003256:	ed93 7a00 	vldr	s14, [r3]
 800325a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <Kalman_Filter+0x380>)
 8003260:	edc3 7a00 	vstr	s15, [r3]
	p_estimate12 = p_predict12*R/s;
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <Kalman_Filter+0x390>)
 8003266:	ed93 7a00 	vldr	s14, [r3]
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <Kalman_Filter+0x3a8>)
 800326c:	edd3 7a00 	vldr	s15, [r3]
 8003270:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <Kalman_Filter+0x3ac>)
 8003276:	ed93 7a00 	vldr	s14, [r3]
 800327a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800327e:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <Kalman_Filter+0x378>)
 8003280:	edc3 7a00 	vstr	s15, [r3]
	p_estimate21 = p_predict21*R/s;
 8003284:	4b20      	ldr	r3, [pc, #128]	; (8003308 <Kalman_Filter+0x394>)
 8003286:	ed93 7a00 	vldr	s14, [r3]
 800328a:	4b24      	ldr	r3, [pc, #144]	; (800331c <Kalman_Filter+0x3a8>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003294:	4b22      	ldr	r3, [pc, #136]	; (8003320 <Kalman_Filter+0x3ac>)
 8003296:	ed93 7a00 	vldr	s14, [r3]
 800329a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <Kalman_Filter+0x37c>)
 80032a0:	edc3 7a00 	vstr	s15, [r3]
	p_estimate22 = p_predict22*R/s;
 80032a4:	4b19      	ldr	r3, [pc, #100]	; (800330c <Kalman_Filter+0x398>)
 80032a6:	ed93 7a00 	vldr	s14, [r3]
 80032aa:	4b1c      	ldr	r3, [pc, #112]	; (800331c <Kalman_Filter+0x3a8>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <Kalman_Filter+0x3ac>)
 80032b6:	ed93 7a00 	vldr	s14, [r3]
 80032ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032be:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <Kalman_Filter+0x384>)
 80032c0:	edc3 7a00 	vstr	s15, [r3]
//	p21 = -p21*(p22/(R+22)-1);
//	p22 = -p22*(p22/(R+22)-1);
//
//	Position_Kalman = Position_Kalman_New;
//	Velocity_Kalman = Velocity_Kalman_New;
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	ecbd 8b02 	vpop	{d8}
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	2000017c 	.word	0x2000017c
 80032d4:	3a83126f 	.word	0x3a83126f
 80032d8:	20000178 	.word	0x20000178
 80032dc:	20000170 	.word	0x20000170
 80032e0:	20000174 	.word	0x20000174
 80032e4:	20000008 	.word	0x20000008
 80032e8:	20000100 	.word	0x20000100
 80032ec:	20000190 	.word	0x20000190
 80032f0:	20000194 	.word	0x20000194
 80032f4:	2000002c 	.word	0x2000002c
 80032f8:	20000030 	.word	0x20000030
 80032fc:	40100000 	.word	0x40100000
 8003300:	20000180 	.word	0x20000180
 8003304:	20000184 	.word	0x20000184
 8003308:	20000188 	.word	0x20000188
 800330c:	2000018c 	.word	0x2000018c
 8003310:	200000f8 	.word	0x200000f8
 8003314:	20000198 	.word	0x20000198
 8003318:	2000000c 	.word	0x2000000c
 800331c:	20000104 	.word	0x20000104
 8003320:	2000019c 	.word	0x2000019c
 8003324:	200001a0 	.word	0x200001a0
 8003328:	200001a4 	.word	0x200001a4

0800332c <cascade_control_with_feed_forward>:

void cascade_control_with_feed_forward()
{
 800332c:	b5b0      	push	{r4, r5, r7, lr}
 800332e:	af00      	add	r7, sp, #0
	if (angle_rad_start < angle_rad_stop)
 8003330:	4baf      	ldr	r3, [pc, #700]	; (80035f0 <cascade_control_with_feed_forward+0x2c4>)
 8003332:	ed93 7a00 	vldr	s14, [r3]
 8003336:	4baf      	ldr	r3, [pc, #700]	; (80035f4 <cascade_control_with_feed_forward+0x2c8>)
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	d516      	bpl.n	8003374 <cascade_control_with_feed_forward+0x48>
	{
		position_kd = 0;
 8003346:	4bac      	ldr	r3, [pc, #688]	; (80035f8 <cascade_control_with_feed_forward+0x2cc>)
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
		position_ki = 0;
 800334e:	4bab      	ldr	r3, [pc, #684]	; (80035fc <cascade_control_with_feed_forward+0x2d0>)
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
		position_kp = 0.25;
 8003356:	4baa      	ldr	r3, [pc, #680]	; (8003600 <cascade_control_with_feed_forward+0x2d4>)
 8003358:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 800335c:	601a      	str	r2, [r3, #0]
		velocity_kd = 0;
 800335e:	4ba9      	ldr	r3, [pc, #676]	; (8003604 <cascade_control_with_feed_forward+0x2d8>)
 8003360:	f04f 0200 	mov.w	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
		velocity_ki = 6000;
 8003366:	4ba8      	ldr	r3, [pc, #672]	; (8003608 <cascade_control_with_feed_forward+0x2dc>)
 8003368:	4aa8      	ldr	r2, [pc, #672]	; (800360c <cascade_control_with_feed_forward+0x2e0>)
 800336a:	601a      	str	r2, [r3, #0]
		velocity_kp = 8000;
 800336c:	4ba8      	ldr	r3, [pc, #672]	; (8003610 <cascade_control_with_feed_forward+0x2e4>)
 800336e:	4aa9      	ldr	r2, [pc, #676]	; (8003614 <cascade_control_with_feed_forward+0x2e8>)
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e015      	b.n	80033a0 <cascade_control_with_feed_forward+0x74>
	}
	else
	{
		position_kd = 0;
 8003374:	4ba0      	ldr	r3, [pc, #640]	; (80035f8 <cascade_control_with_feed_forward+0x2cc>)
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
		position_ki = 0;
 800337c:	4b9f      	ldr	r3, [pc, #636]	; (80035fc <cascade_control_with_feed_forward+0x2d0>)
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
		position_kp = 0.5;
 8003384:	4b9e      	ldr	r3, [pc, #632]	; (8003600 <cascade_control_with_feed_forward+0x2d4>)
 8003386:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800338a:	601a      	str	r2, [r3, #0]
		velocity_kd = 0;
 800338c:	4b9d      	ldr	r3, [pc, #628]	; (8003604 <cascade_control_with_feed_forward+0x2d8>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
		velocity_ki = 1500;
 8003394:	4b9c      	ldr	r3, [pc, #624]	; (8003608 <cascade_control_with_feed_forward+0x2dc>)
 8003396:	4aa0      	ldr	r2, [pc, #640]	; (8003618 <cascade_control_with_feed_forward+0x2ec>)
 8003398:	601a      	str	r2, [r3, #0]
		velocity_kp = 3000;
 800339a:	4b9d      	ldr	r3, [pc, #628]	; (8003610 <cascade_control_with_feed_forward+0x2e4>)
 800339c:	4a9f      	ldr	r2, [pc, #636]	; (800361c <cascade_control_with_feed_forward+0x2f0>)
 800339e:	601a      	str	r2, [r3, #0]
	}

	//position control
	error_position = desired_position - Position_Now_Rad;
 80033a0:	4b9f      	ldr	r3, [pc, #636]	; (8003620 <cascade_control_with_feed_forward+0x2f4>)
 80033a2:	ed93 7a00 	vldr	s14, [r3]
 80033a6:	4b9f      	ldr	r3, [pc, #636]	; (8003624 <cascade_control_with_feed_forward+0x2f8>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b0:	4b9d      	ldr	r3, [pc, #628]	; (8003628 <cascade_control_with_feed_forward+0x2fc>)
 80033b2:	edc3 7a00 	vstr	s15, [r3]
	error_position_diff = (error_position - error_position_prev)*1000.0;
 80033b6:	4b9c      	ldr	r3, [pc, #624]	; (8003628 <cascade_control_with_feed_forward+0x2fc>)
 80033b8:	ed93 7a00 	vldr	s14, [r3]
 80033bc:	4b9b      	ldr	r3, [pc, #620]	; (800362c <cascade_control_with_feed_forward+0x300>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 8003630 <cascade_control_with_feed_forward+0x304>
 80033ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ce:	4b99      	ldr	r3, [pc, #612]	; (8003634 <cascade_control_with_feed_forward+0x308>)
 80033d0:	edc3 7a00 	vstr	s15, [r3]
	error_position_int = error_position_int + error_position/1000.0;
 80033d4:	4b98      	ldr	r3, [pc, #608]	; (8003638 <cascade_control_with_feed_forward+0x30c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f861 	bl	80004a0 <__aeabi_f2d>
 80033de:	4604      	mov	r4, r0
 80033e0:	460d      	mov	r5, r1
 80033e2:	4b91      	ldr	r3, [pc, #580]	; (8003628 <cascade_control_with_feed_forward+0x2fc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f85a 	bl	80004a0 <__aeabi_f2d>
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	4b92      	ldr	r3, [pc, #584]	; (800363c <cascade_control_with_feed_forward+0x310>)
 80033f2:	f7fd f9d7 	bl	80007a4 <__aeabi_ddiv>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4620      	mov	r0, r4
 80033fc:	4629      	mov	r1, r5
 80033fe:	f7fc fef1 	bl	80001e4 <__adddf3>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	4610      	mov	r0, r2
 8003408:	4619      	mov	r1, r3
 800340a:	f7fd fb3b 	bl	8000a84 <__aeabi_d2f>
 800340e:	4603      	mov	r3, r0
 8003410:	4a89      	ldr	r2, [pc, #548]	; (8003638 <cascade_control_with_feed_forward+0x30c>)
 8003412:	6013      	str	r3, [r2, #0]
	command_velocity = position_kp*error_position + position_ki*error_position_int + position_kd*error_position_diff + position_bias;
 8003414:	4b7a      	ldr	r3, [pc, #488]	; (8003600 <cascade_control_with_feed_forward+0x2d4>)
 8003416:	ed93 7a00 	vldr	s14, [r3]
 800341a:	4b83      	ldr	r3, [pc, #524]	; (8003628 <cascade_control_with_feed_forward+0x2fc>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <cascade_control_with_feed_forward+0x2d0>)
 8003426:	edd3 6a00 	vldr	s13, [r3]
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <cascade_control_with_feed_forward+0x30c>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003434:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <cascade_control_with_feed_forward+0x2cc>)
 800343a:	edd3 6a00 	vldr	s13, [r3]
 800343e:	4b7d      	ldr	r3, [pc, #500]	; (8003634 <cascade_control_with_feed_forward+0x308>)
 8003440:	edd3 7a00 	vldr	s15, [r3]
 8003444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800344c:	4b7c      	ldr	r3, [pc, #496]	; (8003640 <cascade_control_with_feed_forward+0x314>)
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003456:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 8003458:	edc3 7a00 	vstr	s15, [r3]
	error_position_prev = error_position;
 800345c:	4b72      	ldr	r3, [pc, #456]	; (8003628 <cascade_control_with_feed_forward+0x2fc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a72      	ldr	r2, [pc, #456]	; (800362c <cascade_control_with_feed_forward+0x300>)
 8003462:	6013      	str	r3, [r2, #0]

	//					limitter velocity
	if (command_velocity > 1)
 8003464:	4b77      	ldr	r3, [pc, #476]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 8003466:	edd3 7a00 	vldr	s15, [r3]
 800346a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800346e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	dd04      	ble.n	8003482 <cascade_control_with_feed_forward+0x156>
	{
		command_velocity = 1;
 8003478:	4b72      	ldr	r3, [pc, #456]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 800347a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	e00c      	b.n	800349c <cascade_control_with_feed_forward+0x170>
	}
	else if (command_velocity < -1)
 8003482:	4b70      	ldr	r3, [pc, #448]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 8003484:	edd3 7a00 	vldr	s15, [r3]
 8003488:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800348c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	d502      	bpl.n	800349c <cascade_control_with_feed_forward+0x170>
	{
		command_velocity = -1;
 8003496:	4b6b      	ldr	r3, [pc, #428]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 8003498:	4a6b      	ldr	r2, [pc, #428]	; (8003648 <cascade_control_with_feed_forward+0x31c>)
 800349a:	601a      	str	r2, [r3, #0]
	}

	//velocity control
	error_velocity = desired_velocity - omega_estimate + command_velocity;
 800349c:	4b6b      	ldr	r3, [pc, #428]	; (800364c <cascade_control_with_feed_forward+0x320>)
 800349e:	ed93 7a00 	vldr	s14, [r3]
 80034a2:	4b6b      	ldr	r3, [pc, #428]	; (8003650 <cascade_control_with_feed_forward+0x324>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80034ac:	4b65      	ldr	r3, [pc, #404]	; (8003644 <cascade_control_with_feed_forward+0x318>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b6:	4b67      	ldr	r3, [pc, #412]	; (8003654 <cascade_control_with_feed_forward+0x328>)
 80034b8:	edc3 7a00 	vstr	s15, [r3]
	error_velocity_diff = (error_velocity - error_velocity_prev)*1000.0;
 80034bc:	4b65      	ldr	r3, [pc, #404]	; (8003654 <cascade_control_with_feed_forward+0x328>)
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	4b65      	ldr	r3, [pc, #404]	; (8003658 <cascade_control_with_feed_forward+0x32c>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034cc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8003630 <cascade_control_with_feed_forward+0x304>
 80034d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d4:	4b61      	ldr	r3, [pc, #388]	; (800365c <cascade_control_with_feed_forward+0x330>)
 80034d6:	edc3 7a00 	vstr	s15, [r3]
	error_velocity_int = error_velocity_int + error_velocity/1000.0;
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <cascade_control_with_feed_forward+0x334>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fc ffde 	bl	80004a0 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	4b5a      	ldr	r3, [pc, #360]	; (8003654 <cascade_control_with_feed_forward+0x328>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fc ffd7 	bl	80004a0 <__aeabi_f2d>
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	4b51      	ldr	r3, [pc, #324]	; (800363c <cascade_control_with_feed_forward+0x310>)
 80034f8:	f7fd f954 	bl	80007a4 <__aeabi_ddiv>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fc fe6e 	bl	80001e4 <__adddf3>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f7fd fab8 	bl	8000a84 <__aeabi_d2f>
 8003514:	4603      	mov	r3, r0
 8003516:	4a52      	ldr	r2, [pc, #328]	; (8003660 <cascade_control_with_feed_forward+0x334>)
 8003518:	6013      	str	r3, [r2, #0]
	PWM_Out = velocity_kp*error_velocity + velocity_ki*error_velocity_int + velocity_kd*error_velocity_diff + velocity_bias;
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <cascade_control_with_feed_forward+0x2e4>)
 800351c:	ed93 7a00 	vldr	s14, [r3]
 8003520:	4b4c      	ldr	r3, [pc, #304]	; (8003654 <cascade_control_with_feed_forward+0x328>)
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352a:	4b37      	ldr	r3, [pc, #220]	; (8003608 <cascade_control_with_feed_forward+0x2dc>)
 800352c:	edd3 6a00 	vldr	s13, [r3]
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <cascade_control_with_feed_forward+0x334>)
 8003532:	edd3 7a00 	vldr	s15, [r3]
 8003536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800353e:	4b31      	ldr	r3, [pc, #196]	; (8003604 <cascade_control_with_feed_forward+0x2d8>)
 8003540:	edd3 6a00 	vldr	s13, [r3]
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <cascade_control_with_feed_forward+0x330>)
 8003546:	edd3 7a00 	vldr	s15, [r3]
 800354a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800354e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <cascade_control_with_feed_forward+0x338>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800355c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003560:	ee17 3a90 	vmov	r3, s15
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b40      	ldr	r3, [pc, #256]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 8003568:	801a      	strh	r2, [r3, #0]
	error_velocity_prev = error_velocity;
 800356a:	4b3a      	ldr	r3, [pc, #232]	; (8003654 <cascade_control_with_feed_forward+0x328>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a3a      	ldr	r2, [pc, #232]	; (8003658 <cascade_control_with_feed_forward+0x32c>)
 8003570:	6013      	str	r3, [r2, #0]

	//limitter pwm
	if (PWM_Out > 10000)
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 8003574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003578:	f242 7210 	movw	r2, #10000	; 0x2710
 800357c:	4293      	cmp	r3, r2
 800357e:	dd04      	ble.n	800358a <cascade_control_with_feed_forward+0x25e>
	{
		PWM_Out = 10000;
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 8003582:	f242 7210 	movw	r2, #10000	; 0x2710
 8003586:	801a      	strh	r2, [r3, #0]
 8003588:	e009      	b.n	800359e <cascade_control_with_feed_forward+0x272>
	}
	else if (PWM_Out < -10000)
 800358a:	4b37      	ldr	r3, [pc, #220]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	4a36      	ldr	r2, [pc, #216]	; (800366c <cascade_control_with_feed_forward+0x340>)
 8003592:	4293      	cmp	r3, r2
 8003594:	da03      	bge.n	800359e <cascade_control_with_feed_forward+0x272>
	{
		PWM_Out = -10000;
 8003596:	4b34      	ldr	r3, [pc, #208]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 8003598:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 800359c:	801a      	strh	r2, [r3, #0]
	}


	//control motor direction
	if (PWM_Out < 0)
 800359e:	4b32      	ldr	r3, [pc, #200]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 80035a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da10      	bge.n	80035ca <cascade_control_with_feed_forward+0x29e>
//	if (angle_rad_start > angle_rad_stop)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 80035a8:	4b2f      	ldr	r3, [pc, #188]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 80035aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bfb8      	it	lt
 80035b2:	425b      	neglt	r3, r3
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <cascade_control_with_feed_forward+0x344>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 80035bc:	2200      	movs	r2, #0
 80035be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035c2:	482c      	ldr	r0, [pc, #176]	; (8003674 <cascade_control_with_feed_forward+0x348>)
 80035c4:	f001 fda8 	bl	8005118 <HAL_GPIO_WritePin>
	else
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 80035c8:	e00f      	b.n	80035ea <cascade_control_with_feed_forward+0x2be>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, abs(PWM_Out));
 80035ca:	4b27      	ldr	r3, [pc, #156]	; (8003668 <cascade_control_with_feed_forward+0x33c>)
 80035cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bfb8      	it	lt
 80035d4:	425b      	neglt	r3, r3
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	4b25      	ldr	r3, [pc, #148]	; (8003670 <cascade_control_with_feed_forward+0x344>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 80035de:	2201      	movs	r2, #1
 80035e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035e4:	4823      	ldr	r0, [pc, #140]	; (8003674 <cascade_control_with_feed_forward+0x348>)
 80035e6:	f001 fd97 	bl	8005118 <HAL_GPIO_WritePin>
}
 80035ea:	bf00      	nop
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000108 	.word	0x20000108
 80035f4:	2000010c 	.word	0x2000010c
 80035f8:	2000014c 	.word	0x2000014c
 80035fc:	20000148 	.word	0x20000148
 8003600:	2000001c 	.word	0x2000001c
 8003604:	20000028 	.word	0x20000028
 8003608:	20000024 	.word	0x20000024
 800360c:	45bb8000 	.word	0x45bb8000
 8003610:	20000020 	.word	0x20000020
 8003614:	45fa0000 	.word	0x45fa0000
 8003618:	44bb8000 	.word	0x44bb8000
 800361c:	453b8000 	.word	0x453b8000
 8003620:	20000134 	.word	0x20000134
 8003624:	200000fc 	.word	0x200000fc
 8003628:	20000138 	.word	0x20000138
 800362c:	20000144 	.word	0x20000144
 8003630:	447a0000 	.word	0x447a0000
 8003634:	2000013c 	.word	0x2000013c
 8003638:	20000140 	.word	0x20000140
 800363c:	408f4000 	.word	0x408f4000
 8003640:	20000150 	.word	0x20000150
 8003644:	20000154 	.word	0x20000154
 8003648:	bf800000 	.word	0xbf800000
 800364c:	20000158 	.word	0x20000158
 8003650:	2000017c 	.word	0x2000017c
 8003654:	2000015c 	.word	0x2000015c
 8003658:	20000168 	.word	0x20000168
 800365c:	20000160 	.word	0x20000160
 8003660:	20000164 	.word	0x20000164
 8003664:	2000016c 	.word	0x2000016c
 8003668:	200000f0 	.word	0x200000f0
 800366c:	ffffd8f0 	.word	0xffffd8f0
 8003670:	2000031c 	.word	0x2000031c
 8003674:	40020400 	.word	0x40020400

08003678 <UARTInit>:
	}


}
void UARTInit(UARTStucrture *uart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8003680:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <UARTInit+0x4c>)
 8003682:	88db      	ldrh	r3, [r3, #6]
 8003684:	4619      	mov	r1, r3
 8003686:	2001      	movs	r0, #1
 8003688:	f004 fbc4 	bl	8007e14 <calloc>
 800368c:	4603      	mov	r3, r0
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <UARTInit+0x4c>)
 8003696:	889b      	ldrh	r3, [r3, #4]
 8003698:	4619      	mov	r1, r3
 800369a:	2001      	movs	r0, #1
 800369c:	f004 fbba 	bl	8007e14 <calloc>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	81da      	strh	r2, [r3, #14]

}
 80036ba:	bf00      	nop
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	200001d4 	.word	0x200001d4

080036c8 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6919      	ldr	r1, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	88db      	ldrh	r3, [r3, #6]
 80036dc:	461a      	mov	r2, r3
 80036de:	f003 fd15 	bl	800710c <HAL_UART_Receive_DMA>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	88db      	ldrh	r3, [r3, #6]
 80036f6:	461a      	mov	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	1ad3      	subs	r3, r2, r3
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 8003718:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800371c:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8a9b      	ldrh	r3, [r3, #20]
 8003722:	461c      	mov	r4, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ffe0 	bl	80036ea <UARTGetRxHead>
 800372a:	4603      	mov	r3, r0
 800372c:	429c      	cmp	r4, r3
 800372e:	d013      	beq.n	8003758 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	8a92      	ldrh	r2, [r2, #20]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8a9b      	ldrh	r3, [r3, #20]
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	88d2      	ldrh	r2, [r2, #6]
 8003748:	fb93 f1f2 	sdiv	r1, r3, r2
 800374c:	fb02 f201 	mul.w	r2, r2, r1
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	b29a      	uxth	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 8003758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bd90      	pop	{r4, r7, pc}

08003764 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	d13d      	bne.n	80037f6 <UARTTxDumpBuffer+0x92>
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <UARTTxDumpBuffer+0x9c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d139      	bne.n	80037f6 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <UARTTxDumpBuffer+0x9c>)
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	89da      	ldrh	r2, [r3, #14]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	899b      	ldrh	r3, [r3, #12]
 8003790:	429a      	cmp	r2, r3
 8003792:	d02d      	beq.n	80037f0 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	89da      	ldrh	r2, [r3, #14]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800379c:	429a      	cmp	r2, r3
 800379e:	d906      	bls.n	80037ae <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	89da      	ldrh	r2, [r3, #14]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	e005      	b.n	80037ba <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	889a      	ldrh	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	8992      	ldrh	r2, [r2, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	89fa      	ldrh	r2, [r7, #14]
 80037cc:	4619      	mov	r1, r3
 80037ce:	f003 fc31 	bl	8007034 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	899b      	ldrh	r3, [r3, #12]
 80037d6:	461a      	mov	r2, r3
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	4413      	add	r3, r2
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	8892      	ldrh	r2, [r2, #4]
 80037e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80037e4:	fb02 f201 	mul.w	r2, r2, r1
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <UARTTxDumpBuffer+0x9c>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
	}
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000208 	.word	0x20000208

08003804 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	4613      	mov	r3, r2
 8003810:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	889b      	ldrh	r3, [r3, #4]
 8003816:	88fa      	ldrh	r2, [r7, #6]
 8003818:	4293      	cmp	r3, r2
 800381a:	bf28      	it	cs
 800381c:	4613      	movcs	r3, r2
 800381e:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8003820:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	889b      	ldrh	r3, [r3, #4]
 8003826:	4619      	mov	r1, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	89db      	ldrh	r3, [r3, #14]
 800382c:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800382e:	4293      	cmp	r3, r2
 8003830:	bfa8      	it	ge
 8003832:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8003834:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	89d2      	ldrh	r2, [r2, #14]
 800383e:	4413      	add	r3, r2
 8003840:	8aba      	ldrh	r2, [r7, #20]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f004 fb17 	bl	8007e78 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	89db      	ldrh	r3, [r3, #14]
 800384e:	461a      	mov	r2, r3
 8003850:	8afb      	ldrh	r3, [r7, #22]
 8003852:	4413      	add	r3, r2
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	8892      	ldrh	r2, [r2, #4]
 8003858:	fb93 f1f2 	sdiv	r1, r3, r2
 800385c:	fb02 f201 	mul.w	r2, r2, r1
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8003868:	8afa      	ldrh	r2, [r7, #22]
 800386a:	8abb      	ldrh	r3, [r7, #20]
 800386c:	429a      	cmp	r2, r3
 800386e:	d00a      	beq.n	8003886 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6898      	ldr	r0, [r3, #8]
 8003874:	8abb      	ldrh	r3, [r7, #20]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 800387a:	8afa      	ldrh	r2, [r7, #22]
 800387c:	8abb      	ldrh	r3, [r7, #20]
 800387e:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8003880:	461a      	mov	r2, r3
 8003882:	f004 faf9 	bl	8007e78 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f7ff ff6c 	bl	8003764 <UARTTxDumpBuffer>

}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <UART_Protocol>:
void UART_Protocol(UARTStucrture *uart, int16_t dataIn)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	807b      	strh	r3, [r7, #2]

	switch (State)
 80038a0:	4baa      	ldr	r3, [pc, #680]	; (8003b4c <UART_Protocol+0x2b8>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	f200 817a 	bhi.w	8003b9e <UART_Protocol+0x30a>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_Protocol+0x1c>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038c1 	.word	0x080038c1
 80038b4:	08003a07 	.word	0x08003a07
 80038b8:	08003a17 	.word	0x08003a17
 80038bc:	08003a8b 	.word	0x08003a8b
	{
	case Start_Mode:
		Mode = dataIn;
 80038c0:	887b      	ldrh	r3, [r7, #2]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	4ba2      	ldr	r3, [pc, #648]	; (8003b50 <UART_Protocol+0x2bc>)
 80038c6:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 80038c8:	4ba1      	ldr	r3, [pc, #644]	; (8003b50 <UART_Protocol+0x2bc>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	3b91      	subs	r3, #145	; 0x91
 80038ce:	2b0d      	cmp	r3, #13
 80038d0:	f200 8082 	bhi.w	80039d8 <UART_Protocol+0x144>
 80038d4:	a201      	add	r2, pc, #4	; (adr r2, 80038dc <UART_Protocol+0x48>)
 80038d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038da:	bf00      	nop
 80038dc:	08003915 	.word	0x08003915
 80038e0:	08003923 	.word	0x08003923
 80038e4:	08003931 	.word	0x08003931
 80038e8:	0800393f 	.word	0x0800393f
 80038ec:	0800394d 	.word	0x0800394d
 80038f0:	0800395b 	.word	0x0800395b
 80038f4:	08003969 	.word	0x08003969
 80038f8:	08003977 	.word	0x08003977
 80038fc:	08003985 	.word	0x08003985
 8003900:	08003993 	.word	0x08003993
 8003904:	080039a1 	.word	0x080039a1
 8003908:	080039af 	.word	0x080039af
 800390c:	080039bd 	.word	0x080039bd
 8003910:	080039cb 	.word	0x080039cb
		{
		case Test_Command:
			Frame = 2;
 8003914:	4b8f      	ldr	r3, [pc, #572]	; (8003b54 <UART_Protocol+0x2c0>)
 8003916:	2202      	movs	r2, #2
 8003918:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 800391a:	4b8c      	ldr	r3, [pc, #560]	; (8003b4c <UART_Protocol+0x2b8>)
 800391c:	2202      	movs	r2, #2
 800391e:	701a      	strb	r2, [r3, #0]
			break;
 8003920:	e070      	b.n	8003a04 <UART_Protocol+0x170>
		case Connect_MCU:
			Frame = 1;
 8003922:	4b8c      	ldr	r3, [pc, #560]	; (8003b54 <UART_Protocol+0x2c0>)
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8003928:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <UART_Protocol+0x2b8>)
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]
			break;
 800392e:	e069      	b.n	8003a04 <UART_Protocol+0x170>
		case Disconnect_MCU:
			Frame = 1;
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <UART_Protocol+0x2c0>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <UART_Protocol+0x2b8>)
 8003938:	2203      	movs	r2, #3
 800393a:	701a      	strb	r2, [r3, #0]
			break;
 800393c:	e062      	b.n	8003a04 <UART_Protocol+0x170>
		case Velocity_Set:
			Frame = 2;
 800393e:	4b85      	ldr	r3, [pc, #532]	; (8003b54 <UART_Protocol+0x2c0>)
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8003944:	4b81      	ldr	r3, [pc, #516]	; (8003b4c <UART_Protocol+0x2b8>)
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
			break;
 800394a:	e05b      	b.n	8003a04 <UART_Protocol+0x170>
		case Position_Set:
			Frame = 2;
 800394c:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <UART_Protocol+0x2c0>)
 800394e:	2202      	movs	r2, #2
 8003950:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8003952:	4b7e      	ldr	r3, [pc, #504]	; (8003b4c <UART_Protocol+0x2b8>)
 8003954:	2202      	movs	r2, #2
 8003956:	701a      	strb	r2, [r3, #0]
			break;
 8003958:	e054      	b.n	8003a04 <UART_Protocol+0x170>
		case Goal_1_Set:
			Frame = 2;
 800395a:	4b7e      	ldr	r3, [pc, #504]	; (8003b54 <UART_Protocol+0x2c0>)
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]
			State = Data_Frame;
 8003960:	4b7a      	ldr	r3, [pc, #488]	; (8003b4c <UART_Protocol+0x2b8>)
 8003962:	2202      	movs	r2, #2
 8003964:	701a      	strb	r2, [r3, #0]
			break;
 8003966:	e04d      	b.n	8003a04 <UART_Protocol+0x170>
		case Goal_N_Set:
			Frame = 3;
 8003968:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <UART_Protocol+0x2c0>)
 800396a:	2203      	movs	r2, #3
 800396c:	701a      	strb	r2, [r3, #0]
			State = N_Station;
 800396e:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <UART_Protocol+0x2b8>)
 8003970:	2201      	movs	r2, #1
 8003972:	701a      	strb	r2, [r3, #0]
			break;
 8003974:	e046      	b.n	8003a04 <UART_Protocol+0x170>
		case Go_to_Goal:
			Frame = 1;
 8003976:	4b77      	ldr	r3, [pc, #476]	; (8003b54 <UART_Protocol+0x2c0>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800397c:	4b73      	ldr	r3, [pc, #460]	; (8003b4c <UART_Protocol+0x2b8>)
 800397e:	2203      	movs	r2, #3
 8003980:	701a      	strb	r2, [r3, #0]
			break;
 8003982:	e03f      	b.n	8003a04 <UART_Protocol+0x170>
		case Station_Request:
			Frame = 1;
 8003984:	4b73      	ldr	r3, [pc, #460]	; (8003b54 <UART_Protocol+0x2c0>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 800398a:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <UART_Protocol+0x2b8>)
 800398c:	2203      	movs	r2, #3
 800398e:	701a      	strb	r2, [r3, #0]
			break;
 8003990:	e038      	b.n	8003a04 <UART_Protocol+0x170>
		case Position_Request:
			Frame = 1;
 8003992:	4b70      	ldr	r3, [pc, #448]	; (8003b54 <UART_Protocol+0x2c0>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 8003998:	4b6c      	ldr	r3, [pc, #432]	; (8003b4c <UART_Protocol+0x2b8>)
 800399a:	2203      	movs	r2, #3
 800399c:	701a      	strb	r2, [r3, #0]
			break;
 800399e:	e031      	b.n	8003a04 <UART_Protocol+0x170>
		case Velocity_Request:
			Frame = 1;
 80039a0:	4b6c      	ldr	r3, [pc, #432]	; (8003b54 <UART_Protocol+0x2c0>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80039a6:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <UART_Protocol+0x2b8>)
 80039a8:	2203      	movs	r2, #3
 80039aa:	701a      	strb	r2, [r3, #0]
			break;
 80039ac:	e02a      	b.n	8003a04 <UART_Protocol+0x170>
		case Gripper_On:
			Frame = 1;
 80039ae:	4b69      	ldr	r3, [pc, #420]	; (8003b54 <UART_Protocol+0x2c0>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80039b4:	4b65      	ldr	r3, [pc, #404]	; (8003b4c <UART_Protocol+0x2b8>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	701a      	strb	r2, [r3, #0]
			break;
 80039ba:	e023      	b.n	8003a04 <UART_Protocol+0x170>
		case Gripper_Off:
			Frame = 1;
 80039bc:	4b65      	ldr	r3, [pc, #404]	; (8003b54 <UART_Protocol+0x2c0>)
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80039c2:	4b62      	ldr	r3, [pc, #392]	; (8003b4c <UART_Protocol+0x2b8>)
 80039c4:	2203      	movs	r2, #3
 80039c6:	701a      	strb	r2, [r3, #0]
			break;
 80039c8:	e01c      	b.n	8003a04 <UART_Protocol+0x170>
		case Home_Set:
			Frame = 1;
 80039ca:	4b62      	ldr	r3, [pc, #392]	; (8003b54 <UART_Protocol+0x2c0>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
			State = Check_Sum;
 80039d0:	4b5e      	ldr	r3, [pc, #376]	; (8003b4c <UART_Protocol+0x2b8>)
 80039d2:	2203      	movs	r2, #3
 80039d4:	701a      	strb	r2, [r3, #0]
			break;
 80039d6:	e015      	b.n	8003a04 <UART_Protocol+0x170>
		default:
			State = Start_Mode;
 80039d8:	4b5c      	ldr	r3, [pc, #368]	; (8003b4c <UART_Protocol+0x2b8>)
 80039da:	2200      	movs	r2, #0
 80039dc:	701a      	strb	r2, [r3, #0]
			Mode = 144;
 80039de:	4b5c      	ldr	r3, [pc, #368]	; (8003b50 <UART_Protocol+0x2bc>)
 80039e0:	2290      	movs	r2, #144	; 0x90
 80039e2:	701a      	strb	r2, [r3, #0]
			Frame = 0;
 80039e4:	4b5b      	ldr	r3, [pc, #364]	; (8003b54 <UART_Protocol+0x2c0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
			Data = 0;
 80039ea:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <UART_Protocol+0x2c4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
			Sum = 0;
 80039f0:	4b5a      	ldr	r3, [pc, #360]	; (8003b5c <UART_Protocol+0x2c8>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	701a      	strb	r2, [r3, #0]
			N = 0;
 80039f6:	4b5a      	ldr	r3, [pc, #360]	; (8003b60 <UART_Protocol+0x2cc>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
			len = 0;
 80039fc:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <UART_Protocol+0x2d0>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
			break;
 8003a02:	bf00      	nop
		break;
		}
		break;
 8003a04:	e0cb      	b.n	8003b9e <UART_Protocol+0x30a>
	case N_Station:
		N = dataIn;
 8003a06:	887b      	ldrh	r3, [r7, #2]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <UART_Protocol+0x2cc>)
 8003a0c:	701a      	strb	r2, [r3, #0]
		State = Data_Frame;
 8003a0e:	4b4f      	ldr	r3, [pc, #316]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
		break;
 8003a14:	e0c3      	b.n	8003b9e <UART_Protocol+0x30a>
	case Data_Frame:
		Data = dataIn;
 8003a16:	887b      	ldrh	r3, [r7, #2]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <UART_Protocol+0x2c4>)
 8003a1c:	701a      	strb	r2, [r3, #0]
		switch (Mode)
 8003a1e:	4b4c      	ldr	r3, [pc, #304]	; (8003b50 <UART_Protocol+0x2bc>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	3b91      	subs	r3, #145	; 0x91
 8003a24:	2b06      	cmp	r3, #6
 8003a26:	f200 80b9 	bhi.w	8003b9c <UART_Protocol+0x308>
 8003a2a:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <UART_Protocol+0x19c>)
 8003a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a30:	08003a4d 	.word	0x08003a4d
 8003a34:	08003b9d 	.word	0x08003b9d
 8003a38:	08003b9d 	.word	0x08003b9d
 8003a3c:	08003a55 	.word	0x08003a55
 8003a40:	08003a5d 	.word	0x08003a5d
 8003a44:	08003a65 	.word	0x08003a65
 8003a48:	08003a6d 	.word	0x08003a6d
		{
		case Test_Command:
			State = Check_Sum;
 8003a4c:	4b3f      	ldr	r3, [pc, #252]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a4e:	2203      	movs	r2, #3
 8003a50:	701a      	strb	r2, [r3, #0]
			break;
 8003a52:	e019      	b.n	8003a88 <UART_Protocol+0x1f4>
		case Velocity_Set:
			State = Check_Sum;
 8003a54:	4b3d      	ldr	r3, [pc, #244]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a56:	2203      	movs	r2, #3
 8003a58:	701a      	strb	r2, [r3, #0]
			break;
 8003a5a:	e015      	b.n	8003a88 <UART_Protocol+0x1f4>
		case Position_Set:
			State = Check_Sum;
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a5e:	2203      	movs	r2, #3
 8003a60:	701a      	strb	r2, [r3, #0]
			break;
 8003a62:	e011      	b.n	8003a88 <UART_Protocol+0x1f4>
		case Goal_1_Set:
			State = Check_Sum;
 8003a64:	4b39      	ldr	r3, [pc, #228]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a66:	2203      	movs	r2, #3
 8003a68:	701a      	strb	r2, [r3, #0]
			break;
 8003a6a:	e00d      	b.n	8003a88 <UART_Protocol+0x1f4>
		case Goal_N_Set:
			N -= 1;
 8003a6c:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <UART_Protocol+0x2cc>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b3a      	ldr	r3, [pc, #232]	; (8003b60 <UART_Protocol+0x2cc>)
 8003a76:	701a      	strb	r2, [r3, #0]
			if (N == 0)
 8003a78:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <UART_Protocol+0x2cc>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <UART_Protocol+0x1f2>
			{
				State = Check_Sum;
 8003a80:	4b32      	ldr	r3, [pc, #200]	; (8003b4c <UART_Protocol+0x2b8>)
 8003a82:	2203      	movs	r2, #3
 8003a84:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003a86:	bf00      	nop
		break;
		}

		break;
 8003a88:	e088      	b.n	8003b9c <UART_Protocol+0x308>
	case Check_Sum:
		Sum = dataIn;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <UART_Protocol+0x2c8>)
 8003a90:	701a      	strb	r2, [r3, #0]
		switch (Frame)
 8003a92:	4b30      	ldr	r3, [pc, #192]	; (8003b54 <UART_Protocol+0x2c0>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d04c      	beq.n	8003b34 <UART_Protocol+0x2a0>
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	dc7a      	bgt.n	8003b94 <UART_Protocol+0x300>
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d002      	beq.n	8003aa8 <UART_Protocol+0x214>
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d021      	beq.n	8003aea <UART_Protocol+0x256>
 8003aa6:	e075      	b.n	8003b94 <UART_Protocol+0x300>
		{
		case 1:
			if (Sum == (uint8_t)~Mode)
 8003aa8:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <UART_Protocol+0x2bc>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <UART_Protocol+0x2c8>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d102      	bne.n	8003abe <UART_Protocol+0x22a>
			{
				UART_Do_Command();
 8003ab8:	f000 f884 	bl	8003bc4 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8003abc:	e06a      	b.n	8003b94 <UART_Protocol+0x300>
				State = Start_Mode;
 8003abe:	4b23      	ldr	r3, [pc, #140]	; (8003b4c <UART_Protocol+0x2b8>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	; (8003b50 <UART_Protocol+0x2bc>)
 8003ac6:	2290      	movs	r2, #144	; 0x90
 8003ac8:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8003aca:	4b22      	ldr	r3, [pc, #136]	; (8003b54 <UART_Protocol+0x2c0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8003ad0:	4b21      	ldr	r3, [pc, #132]	; (8003b58 <UART_Protocol+0x2c4>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <UART_Protocol+0x2c8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
				N = 0;
 8003adc:	4b20      	ldr	r3, [pc, #128]	; (8003b60 <UART_Protocol+0x2cc>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
				len = 0;
 8003ae2:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <UART_Protocol+0x2d0>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
			break;
 8003ae8:	e054      	b.n	8003b94 <UART_Protocol+0x300>
		case 2:
			if (Sum == (uint8_t)~(Mode+Data))
 8003aea:	4b19      	ldr	r3, [pc, #100]	; (8003b50 <UART_Protocol+0x2bc>)
 8003aec:	781a      	ldrb	r2, [r3, #0]
 8003aee:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <UART_Protocol+0x2c4>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <UART_Protocol+0x2c8>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d102      	bne.n	8003b08 <UART_Protocol+0x274>
			{
				UART_Do_Command();
 8003b02:	f000 f85f 	bl	8003bc4 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8003b06:	e045      	b.n	8003b94 <UART_Protocol+0x300>
				State = Start_Mode;
 8003b08:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <UART_Protocol+0x2b8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <UART_Protocol+0x2bc>)
 8003b10:	2290      	movs	r2, #144	; 0x90
 8003b12:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8003b14:	4b0f      	ldr	r3, [pc, #60]	; (8003b54 <UART_Protocol+0x2c0>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <UART_Protocol+0x2c4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <UART_Protocol+0x2c8>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]
				N = 0;
 8003b26:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <UART_Protocol+0x2cc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
				len = 0;
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <UART_Protocol+0x2d0>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
			break;
 8003b32:	e02f      	b.n	8003b94 <UART_Protocol+0x300>
		case 3:

			if (Sum == (uint8_t)~(Mode))
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <UART_Protocol+0x2bc>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <UART_Protocol+0x2c8>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d111      	bne.n	8003b68 <UART_Protocol+0x2d4>
			{
				UART_Do_Command();
 8003b44:	f000 f83e 	bl	8003bc4 <UART_Do_Command>
				Data = 0;
				Sum = 0;
				N = 0;
				len = 0;
			}
			break;
 8003b48:	e023      	b.n	8003b92 <UART_Protocol+0x2fe>
 8003b4a:	bf00      	nop
 8003b4c:	200001ec 	.word	0x200001ec
 8003b50:	20000034 	.word	0x20000034
 8003b54:	20000318 	.word	0x20000318
 8003b58:	200003c8 	.word	0x200003c8
 8003b5c:	20000414 	.word	0x20000414
 8003b60:	20000218 	.word	0x20000218
 8003b64:	200004a4 	.word	0x200004a4
				State = Start_Mode;
 8003b68:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <UART_Protocol+0x314>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
				Mode = 144;
 8003b6e:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <UART_Protocol+0x318>)
 8003b70:	2290      	movs	r2, #144	; 0x90
 8003b72:	701a      	strb	r2, [r3, #0]
				Frame = 0;
 8003b74:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <UART_Protocol+0x31c>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
				Data = 0;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <UART_Protocol+0x320>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
				Sum = 0;
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <UART_Protocol+0x324>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
				N = 0;
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <UART_Protocol+0x328>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
				len = 0;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <UART_Protocol+0x32c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
			break;
 8003b92:	bf00      	nop
		break;
		}

		State = Start_Mode;
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <UART_Protocol+0x314>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
		break;
 8003b9a:	e000      	b.n	8003b9e <UART_Protocol+0x30a>
		break;
 8003b9c:	bf00      	nop

	break;
	}

}
 8003b9e:	bf00      	nop
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200001ec 	.word	0x200001ec
 8003bac:	20000034 	.word	0x20000034
 8003bb0:	20000318 	.word	0x20000318
 8003bb4:	200003c8 	.word	0x200003c8
 8003bb8:	20000414 	.word	0x20000414
 8003bbc:	20000218 	.word	0x20000218
 8003bc0:	200004a4 	.word	0x200004a4

08003bc4 <UART_Do_Command>:
void UART_Do_Command()
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
	if (Frame == 1)
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <UART_Do_Command+0xcc>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d113      	bne.n	8003bfa <UART_Do_Command+0x36>
	{
		uint8_t Test[] = {0, 0};
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	80bb      	strh	r3, [r7, #4]
		Test[0] = Mode;
 8003bd6:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <UART_Do_Command+0xd0>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	713b      	strb	r3, [r7, #4]
		Test[1] = Sum;
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <UART_Do_Command+0xd4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	717b      	strb	r3, [r7, #5]
		UARTTxWrite(&UART2, Test, len);
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <UART_Do_Command+0xd8>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	1d3b      	adds	r3, r7, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	482c      	ldr	r0, [pc, #176]	; (8003ca0 <UART_Do_Command+0xdc>)
 8003bee:	f7ff fe09 	bl	8003804 <UARTTxWrite>
		len = 0;
 8003bf2:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <UART_Do_Command+0xd8>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e01f      	b.n	8003c3a <UART_Do_Command+0x76>
	}
	else if (Frame == 2)
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <UART_Do_Command+0xcc>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d11b      	bne.n	8003c3a <UART_Do_Command+0x76>
	{
		uint8_t Test[] = {0, 0, 0};
 8003c02:	4a28      	ldr	r2, [pc, #160]	; (8003ca4 <UART_Do_Command+0xe0>)
 8003c04:	463b      	mov	r3, r7
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	4611      	mov	r1, r2
 8003c0a:	8019      	strh	r1, [r3, #0]
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	0c12      	lsrs	r2, r2, #16
 8003c10:	701a      	strb	r2, [r3, #0]
		Test[0] = Mode;
 8003c12:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <UART_Do_Command+0xd0>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	703b      	strb	r3, [r7, #0]
		Test[1] = Data;
 8003c18:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <UART_Do_Command+0xe4>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	707b      	strb	r3, [r7, #1]
		Test[2] = Sum;
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <UART_Do_Command+0xd4>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	70bb      	strb	r3, [r7, #2]
		UARTTxWrite(&UART2, Test, len);
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <UART_Do_Command+0xd8>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	481c      	ldr	r0, [pc, #112]	; (8003ca0 <UART_Do_Command+0xdc>)
 8003c30:	f7ff fde8 	bl	8003804 <UARTTxWrite>
		len = 0;
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <UART_Do_Command+0xd8>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	{


	}

	switch (Mode)
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <UART_Do_Command+0xd0>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	3b91      	subs	r3, #145	; 0x91
 8003c40:	2b0d      	cmp	r3, #13
 8003c42:	d820      	bhi.n	8003c86 <UART_Do_Command+0xc2>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_Do_Command+0x88>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c85 	.word	0x08003c85
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c85 	.word	0x08003c85
 8003c5c:	08003c85 	.word	0x08003c85
 8003c60:	08003c85 	.word	0x08003c85
 8003c64:	08003c85 	.word	0x08003c85
 8003c68:	08003c85 	.word	0x08003c85
 8003c6c:	08003c85 	.word	0x08003c85
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c85 	.word	0x08003c85
 8003c7c:	08003c85 	.word	0x08003c85
 8003c80:	08003c85 	.word	0x08003c85
	{
	case Test_Command:
		break;
 8003c84:	bf00      	nop
	}




}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000318 	.word	0x20000318
 8003c94:	20000034 	.word	0x20000034
 8003c98:	20000414 	.word	0x20000414
 8003c9c:	200004a4 	.word	0x200004a4
 8003ca0:	200001d4 	.word	0x200001d4
 8003ca4:	080088a0 	.word	0x080088a0
 8003ca8:	200003c8 	.word	0x200003c8

08003cac <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cac:	b4b0      	push	{r4, r5, r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a09      	ldr	r2, [pc, #36]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d109      	bne.n	8003cd0 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f112 34ff 	adds.w	r4, r2, #4294967295
 8003cc6:	f143 0500 	adc.w	r5, r3, #0
 8003cca:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003ccc:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bcb0      	pop	{r4, r5, r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000418 	.word	0x20000418
 8003ce0:	200000d0 	.word	0x200000d0

08003ce4 <micros>:
uint64_t micros()
{
 8003ce4:	b4b0      	push	{r4, r5, r7}
 8003ce6:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <micros+0x2c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <micros+0x30>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	1884      	adds	r4, r0, r2
 8003cfc:	eb41 0503 	adc.w	r5, r1, r3
 8003d00:	4622      	mov	r2, r4
 8003d02:	462b      	mov	r3, r5
}
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bcb0      	pop	{r4, r5, r7}
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	20000418 	.word	0x20000418
 8003d14:	200000d0 	.word	0x200000d0

08003d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1c:	b672      	cpsid	i
}
 8003d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d20:	e7fe      	b.n	8003d20 <Error_Handler+0x8>
	...

08003d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	4a0f      	ldr	r2, [pc, #60]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	; 0x44
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	4a08      	ldr	r2, [pc, #32]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	; 0x40
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_MspInit+0x4c>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003d62:	2007      	movs	r0, #7
 8003d64:	f000 fbf8 	bl	8004558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <HAL_I2C_MspInit+0x84>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d12c      	bne.n	8003df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	4a17      	ldr	r2, [pc, #92]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db8:	2312      	movs	r3, #18
 8003dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4619      	mov	r1, r3
 8003dce:	480c      	ldr	r0, [pc, #48]	; (8003e00 <HAL_I2C_MspInit+0x8c>)
 8003dd0:	f001 f806 	bl	8004de0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a07      	ldr	r2, [pc, #28]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003dde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <HAL_I2C_MspInit+0x88>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003df0:	bf00      	nop
 8003df2:	3728      	adds	r7, #40	; 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40005400 	.word	0x40005400
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40020400 	.word	0x40020400

08003e04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a19      	ldr	r2, [pc, #100]	; (8003e88 <HAL_TIM_Encoder_MspInit+0x84>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d12c      	bne.n	8003e80 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	4b18      	ldr	r3, [pc, #96]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e2e:	4a17      	ldr	r2, [pc, #92]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6453      	str	r3, [r2, #68]	; 0x44
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a10      	ldr	r2, [pc, #64]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <HAL_TIM_Encoder_MspInit+0x88>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8003e5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003e7c:	f000 ffb0 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003e80:	bf00      	nop
 8003e82:	3728      	adds	r7, #40	; 0x28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40010000 	.word	0x40010000
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	40020000 	.word	0x40020000

08003e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d116      	bne.n	8003ed4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a23      	ldr	r2, [pc, #140]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b21      	ldr	r3, [pc, #132]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	201c      	movs	r0, #28
 8003ec8:	f000 fb51 	bl	800456e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003ecc:	201c      	movs	r0, #28
 8003ece:	f000 fb6a 	bl	80045a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003ed2:	e02e      	b.n	8003f32 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_TIM_Base_MspInit+0xac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d10e      	bne.n	8003efc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	6413      	str	r3, [r2, #64]	; 0x40
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
}
 8003efa:	e01a      	b.n	8003f32 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a10      	ldr	r2, [pc, #64]	; (8003f44 <HAL_TIM_Base_MspInit+0xb0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d115      	bne.n	8003f32 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
 8003f0a:	4b0c      	ldr	r3, [pc, #48]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a0b      	ldr	r2, [pc, #44]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003f10:	f043 0304 	orr.w	r3, r3, #4
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b09      	ldr	r3, [pc, #36]	; (8003f3c <HAL_TIM_Base_MspInit+0xa8>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f22:	2200      	movs	r2, #0
 8003f24:	2100      	movs	r1, #0
 8003f26:	201e      	movs	r0, #30
 8003f28:	f000 fb21 	bl	800456e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f2c:	201e      	movs	r0, #30
 8003f2e:	f000 fb3a 	bl	80045a6 <HAL_NVIC_EnableIRQ>
}
 8003f32:	bf00      	nop
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40000400 	.word	0x40000400
 8003f44:	40000800 	.word	0x40000800

08003f48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <HAL_TIM_MspPostInit+0x68>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d11d      	bne.n	8003fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_TIM_MspPostInit+0x6c>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_TIM_MspPostInit+0x6c>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <HAL_TIM_MspPostInit+0x6c>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f86:	2302      	movs	r3, #2
 8003f88:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f96:	2302      	movs	r3, #2
 8003f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9a:	f107 030c 	add.w	r3, r7, #12
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4805      	ldr	r0, [pc, #20]	; (8003fb8 <HAL_TIM_MspPostInit+0x70>)
 8003fa2:	f000 ff1d 	bl	8004de0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fa6:	bf00      	nop
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40020400 	.word	0x40020400

08003fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a4c      	ldr	r2, [pc, #304]	; (800410c <HAL_UART_MspInit+0x150>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f040 8091 	bne.w	8004102 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	4b4a      	ldr	r3, [pc, #296]	; (8004110 <HAL_UART_MspInit+0x154>)
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	4a49      	ldr	r2, [pc, #292]	; (8004110 <HAL_UART_MspInit+0x154>)
 8003fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fee:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff0:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_UART_MspInit+0x154>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	4b43      	ldr	r3, [pc, #268]	; (8004110 <HAL_UART_MspInit+0x154>)
 8004002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004004:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_UART_MspInit+0x154>)
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6313      	str	r3, [r2, #48]	; 0x30
 800400c:	4b40      	ldr	r3, [pc, #256]	; (8004110 <HAL_UART_MspInit+0x154>)
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004018:	230c      	movs	r3, #12
 800401a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401c:	2302      	movs	r3, #2
 800401e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004024:	2303      	movs	r3, #3
 8004026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004028:	2307      	movs	r3, #7
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	4619      	mov	r1, r3
 8004032:	4838      	ldr	r0, [pc, #224]	; (8004114 <HAL_UART_MspInit+0x158>)
 8004034:	f000 fed4 	bl	8004de0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004038:	4b37      	ldr	r3, [pc, #220]	; (8004118 <HAL_UART_MspInit+0x15c>)
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <HAL_UART_MspInit+0x160>)
 800403c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800403e:	4b36      	ldr	r3, [pc, #216]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004040:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004044:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800404c:	4b32      	ldr	r3, [pc, #200]	; (8004118 <HAL_UART_MspInit+0x15c>)
 800404e:	2200      	movs	r2, #0
 8004050:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004052:	4b31      	ldr	r3, [pc, #196]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004058:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800405a:	4b2f      	ldr	r3, [pc, #188]	; (8004118 <HAL_UART_MspInit+0x15c>)
 800405c:	2200      	movs	r2, #0
 800405e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004060:	4b2d      	ldr	r3, [pc, #180]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004066:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800406e:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004074:	4b28      	ldr	r3, [pc, #160]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004076:	2200      	movs	r2, #0
 8004078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800407a:	4827      	ldr	r0, [pc, #156]	; (8004118 <HAL_UART_MspInit+0x15c>)
 800407c:	f000 faae 	bl	80045dc <HAL_DMA_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004086:	f7ff fe47 	bl	8003d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a22      	ldr	r2, [pc, #136]	; (8004118 <HAL_UART_MspInit+0x15c>)
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <HAL_UART_MspInit+0x15c>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_UART_MspInit+0x164>)
 8004098:	4a22      	ldr	r2, [pc, #136]	; (8004124 <HAL_UART_MspInit+0x168>)
 800409a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800409c:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_UART_MspInit+0x164>)
 800409e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80040a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040a4:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040aa:	4b1d      	ldr	r3, [pc, #116]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040b0:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040be:	4b18      	ldr	r3, [pc, #96]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80040c4:	4b16      	ldr	r3, [pc, #88]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040ca:	4b15      	ldr	r3, [pc, #84]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040d0:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80040d6:	4812      	ldr	r0, [pc, #72]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040d8:	f000 fa80 	bl	80045dc <HAL_DMA_Init>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80040e2:	f7ff fe19 	bl	8003d18 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040ea:	635a      	str	r2, [r3, #52]	; 0x34
 80040ec:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <HAL_UART_MspInit+0x164>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2026      	movs	r0, #38	; 0x26
 80040f8:	f000 fa39 	bl	800456e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80040fc:	2026      	movs	r0, #38	; 0x26
 80040fe:	f000 fa52 	bl	80045a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	; 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40004400 	.word	0x40004400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020000 	.word	0x40020000
 8004118:	2000021c 	.word	0x2000021c
 800411c:	40026088 	.word	0x40026088
 8004120:	20000368 	.word	0x20000368
 8004124:	400260a0 	.word	0x400260a0

08004128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800412c:	e7fe      	b.n	800412c <NMI_Handler+0x4>

0800412e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004132:	e7fe      	b.n	8004132 <HardFault_Handler+0x4>

08004134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004138:	e7fe      	b.n	8004138 <MemManage_Handler+0x4>

0800413a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800413a:	b480      	push	{r7}
 800413c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800413e:	e7fe      	b.n	800413e <BusFault_Handler+0x4>

08004140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004144:	e7fe      	b.n	8004144 <UsageFault_Handler+0x4>

08004146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004174:	f000 f900 	bl	8004378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}

0800417c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <DMA1_Stream5_IRQHandler+0x10>)
 8004182:	f000 fbc3 	bl	800490c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	2000021c 	.word	0x2000021c

08004190 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004194:	4802      	ldr	r0, [pc, #8]	; (80041a0 <DMA1_Stream6_IRQHandler+0x10>)
 8004196:	f000 fbb9 	bl	800490c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000368 	.word	0x20000368

080041a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80041a8:	4802      	ldr	r0, [pc, #8]	; (80041b4 <TIM2_IRQHandler+0x10>)
 80041aa:	f002 f8f5 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000418 	.word	0x20000418

080041b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80041bc:	4802      	ldr	r0, [pc, #8]	; (80041c8 <TIM4_IRQHandler+0x10>)
 80041be:	f002 f8eb 	bl	8006398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000027c 	.word	0x2000027c

080041cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041d0:	4802      	ldr	r0, [pc, #8]	; (80041dc <USART2_IRQHandler+0x10>)
 80041d2:	f002 ffcb 	bl	800716c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000460 	.word	0x20000460

080041e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80041e8:	f000 ffb0 	bl	800514c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041ec:	bf00      	nop
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041f8:	4a14      	ldr	r2, [pc, #80]	; (800424c <_sbrk+0x5c>)
 80041fa:	4b15      	ldr	r3, [pc, #84]	; (8004250 <_sbrk+0x60>)
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <_sbrk+0x64>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800420c:	4b11      	ldr	r3, [pc, #68]	; (8004254 <_sbrk+0x64>)
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <_sbrk+0x68>)
 8004210:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <_sbrk+0x64>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4413      	add	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	429a      	cmp	r2, r3
 800421e:	d207      	bcs.n	8004230 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004220:	f003 fe00 	bl	8007e24 <__errno>
 8004224:	4603      	mov	r3, r0
 8004226:	220c      	movs	r2, #12
 8004228:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	e009      	b.n	8004244 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <_sbrk+0x64>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004236:	4b07      	ldr	r3, [pc, #28]	; (8004254 <_sbrk+0x64>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	4a05      	ldr	r2, [pc, #20]	; (8004254 <_sbrk+0x64>)
 8004240:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	20020000 	.word	0x20020000
 8004250:	00000400 	.word	0x00000400
 8004254:	2000020c 	.word	0x2000020c
 8004258:	200004c0 	.word	0x200004c0

0800425c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <SystemInit+0x20>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	4a05      	ldr	r2, [pc, #20]	; (800427c <SystemInit+0x20>)
 8004268:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800426c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004284:	480d      	ldr	r0, [pc, #52]	; (80042bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004286:	490e      	ldr	r1, [pc, #56]	; (80042c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004288:	4a0e      	ldr	r2, [pc, #56]	; (80042c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800428a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800428c:	e002      	b.n	8004294 <LoopCopyDataInit>

0800428e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800428e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004292:	3304      	adds	r3, #4

08004294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004298:	d3f9      	bcc.n	800428e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800429a:	4a0b      	ldr	r2, [pc, #44]	; (80042c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800429c:	4c0b      	ldr	r4, [pc, #44]	; (80042cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800429e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042a0:	e001      	b.n	80042a6 <LoopFillZerobss>

080042a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042a4:	3204      	adds	r2, #4

080042a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042a8:	d3fb      	bcc.n	80042a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042aa:	f7ff ffd7 	bl	800425c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ae:	f003 fdbf 	bl	8007e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042b2:	f7fc fec1 	bl	8001038 <main>
  bx  lr    
 80042b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80042b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042c0:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80042c4:	080088f8 	.word	0x080088f8
  ldr r2, =_sbss
 80042c8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80042cc:	200004bc 	.word	0x200004bc

080042d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042d0:	e7fe      	b.n	80042d0 <ADC_IRQHandler>
	...

080042d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <HAL_Init+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0d      	ldr	r2, [pc, #52]	; (8004314 <HAL_Init+0x40>)
 80042de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042e4:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_Init+0x40>)
 80042ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042f0:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_Init+0x40>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a07      	ldr	r2, [pc, #28]	; (8004314 <HAL_Init+0x40>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042fc:	2003      	movs	r0, #3
 80042fe:	f000 f92b 	bl	8004558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004302:	2000      	movs	r0, #0
 8004304:	f000 f808 	bl	8004318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004308:	f7ff fd0c 	bl	8003d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40023c00 	.word	0x40023c00

08004318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004320:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_InitTick+0x54>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_InitTick+0x58>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	4619      	mov	r1, r3
 800432a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800432e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	4618      	mov	r0, r3
 8004338:	f000 f943 	bl	80045c2 <HAL_SYSTICK_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e00e      	b.n	8004364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b0f      	cmp	r3, #15
 800434a:	d80a      	bhi.n	8004362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800434c:	2200      	movs	r2, #0
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	f000 f90b 	bl	800456e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004358:	4a06      	ldr	r2, [pc, #24]	; (8004374 <HAL_InitTick+0x5c>)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
}
 8004364:	4618      	mov	r0, r3
 8004366:	3708      	adds	r7, #8
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000038 	.word	0x20000038
 8004370:	20000040 	.word	0x20000040
 8004374:	2000003c 	.word	0x2000003c

08004378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <HAL_IncTick+0x20>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_IncTick+0x24>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4413      	add	r3, r2
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <HAL_IncTick+0x24>)
 800438a:	6013      	str	r3, [r2, #0]
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000040 	.word	0x20000040
 800439c:	200004a8 	.word	0x200004a8

080043a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  return uwTick;
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <HAL_GetTick+0x14>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	200004a8 	.word	0x200004a8

080043b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <__NVIC_SetPriorityGrouping+0x44>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043d4:	4013      	ands	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ea:	4a04      	ldr	r2, [pc, #16]	; (80043fc <__NVIC_SetPriorityGrouping+0x44>)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	60d3      	str	r3, [r2, #12]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	e000ed00 	.word	0xe000ed00

08004400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <__NVIC_GetPriorityGrouping+0x18>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	f003 0307 	and.w	r3, r3, #7
}
 800440e:	4618      	mov	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442a:	2b00      	cmp	r3, #0
 800442c:	db0b      	blt.n	8004446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4907      	ldr	r1, [pc, #28]	; (8004454 <__NVIC_EnableIRQ+0x38>)
 8004436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	2001      	movs	r0, #1
 800443e:	fa00 f202 	lsl.w	r2, r0, r2
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000e100 	.word	0xe000e100

08004458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	6039      	str	r1, [r7, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	db0a      	blt.n	8004482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	b2da      	uxtb	r2, r3
 8004470:	490c      	ldr	r1, [pc, #48]	; (80044a4 <__NVIC_SetPriority+0x4c>)
 8004472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004476:	0112      	lsls	r2, r2, #4
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	440b      	add	r3, r1
 800447c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004480:	e00a      	b.n	8004498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	b2da      	uxtb	r2, r3
 8004486:	4908      	ldr	r1, [pc, #32]	; (80044a8 <__NVIC_SetPriority+0x50>)
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3b04      	subs	r3, #4
 8004490:	0112      	lsls	r2, r2, #4
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	440b      	add	r3, r1
 8004496:	761a      	strb	r2, [r3, #24]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	e000e100 	.word	0xe000e100
 80044a8:	e000ed00 	.word	0xe000ed00

080044ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b089      	sub	sp, #36	; 0x24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 0307 	and.w	r3, r3, #7
 80044be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f1c3 0307 	rsb	r3, r3, #7
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	bf28      	it	cs
 80044ca:	2304      	movcs	r3, #4
 80044cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3304      	adds	r3, #4
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d902      	bls.n	80044dc <NVIC_EncodePriority+0x30>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3b03      	subs	r3, #3
 80044da:	e000      	b.n	80044de <NVIC_EncodePriority+0x32>
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43da      	mvns	r2, r3
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	401a      	ands	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044f4:	f04f 31ff 	mov.w	r1, #4294967295
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	43d9      	mvns	r1, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004504:	4313      	orrs	r3, r2
         );
}
 8004506:	4618      	mov	r0, r3
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3b01      	subs	r3, #1
 8004520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004524:	d301      	bcc.n	800452a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004526:	2301      	movs	r3, #1
 8004528:	e00f      	b.n	800454a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800452a:	4a0a      	ldr	r2, [pc, #40]	; (8004554 <SysTick_Config+0x40>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3b01      	subs	r3, #1
 8004530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004532:	210f      	movs	r1, #15
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	f7ff ff8e 	bl	8004458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800453c:	4b05      	ldr	r3, [pc, #20]	; (8004554 <SysTick_Config+0x40>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004542:	4b04      	ldr	r3, [pc, #16]	; (8004554 <SysTick_Config+0x40>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	e000e010 	.word	0xe000e010

08004558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ff29 	bl	80043b8 <__NVIC_SetPriorityGrouping>
}
 8004566:	bf00      	nop
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800456e:	b580      	push	{r7, lr}
 8004570:	b086      	sub	sp, #24
 8004572:	af00      	add	r7, sp, #0
 8004574:	4603      	mov	r3, r0
 8004576:	60b9      	str	r1, [r7, #8]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004580:	f7ff ff3e 	bl	8004400 <__NVIC_GetPriorityGrouping>
 8004584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7ff ff8e 	bl	80044ac <NVIC_EncodePriority>
 8004590:	4602      	mov	r2, r0
 8004592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004596:	4611      	mov	r1, r2
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff ff5d 	bl	8004458 <__NVIC_SetPriority>
}
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b082      	sub	sp, #8
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	4603      	mov	r3, r0
 80045ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff31 	bl	800441c <__NVIC_EnableIRQ>
}
 80045ba:	bf00      	nop
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ffa2 	bl	8004514 <SysTick_Config>
 80045d0:	4603      	mov	r3, r0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff feda 	bl	80043a0 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e099      	b.n	800472c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004618:	e00f      	b.n	800463a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800461a:	f7ff fec1 	bl	80043a0 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b05      	cmp	r3, #5
 8004626:	d908      	bls.n	800463a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2203      	movs	r2, #3
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e078      	b.n	800472c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e8      	bne.n	800461a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4b38      	ldr	r3, [pc, #224]	; (8004734 <HAL_DMA_Init+0x158>)
 8004654:	4013      	ands	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004666:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004672:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800467e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b04      	cmp	r3, #4
 8004692:	d107      	bne.n	80046a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	4313      	orrs	r3, r2
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f023 0307 	bic.w	r3, r3, #7
 80046ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d117      	bne.n	80046fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00e      	beq.n	80046fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fb01 	bl	8004ce8 <DMA_CheckFifoParam>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046fa:	2301      	movs	r3, #1
 80046fc:	e016      	b.n	800472c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fab8 	bl	8004c7c <DMA_CalcBaseAndBitshift>
 800470c:	4603      	mov	r3, r0
 800470e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004714:	223f      	movs	r2, #63	; 0x3f
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	f010803f 	.word	0xf010803f

08004738 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_DMA_Start_IT+0x26>
 800475a:	2302      	movs	r3, #2
 800475c:	e040      	b.n	80047e0 <HAL_DMA_Start_IT+0xa8>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d12f      	bne.n	80047d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fa4a 	bl	8004c20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	223f      	movs	r2, #63	; 0x3f
 8004792:	409a      	lsls	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0216 	orr.w	r2, r2, #22
 80047a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d007      	beq.n	80047c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f042 0208 	orr.w	r2, r2, #8
 80047be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e005      	b.n	80047de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047da:	2302      	movs	r3, #2
 80047dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047de:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047f6:	f7ff fdd3 	bl	80043a0 <HAL_GetTick>
 80047fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d008      	beq.n	800481a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e052      	b.n	80048c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0216 	bic.w	r2, r2, #22
 8004828:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004838:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d103      	bne.n	800484a <HAL_DMA_Abort+0x62>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0208 	bic.w	r2, r2, #8
 8004858:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0201 	bic.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800486a:	e013      	b.n	8004894 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800486c:	f7ff fd98 	bl	80043a0 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b05      	cmp	r3, #5
 8004878:	d90c      	bls.n	8004894 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2203      	movs	r2, #3
 800488c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e015      	b.n	80048c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e4      	bne.n	800486c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a6:	223f      	movs	r2, #63	; 0x3f
 80048a8:	409a      	lsls	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d004      	beq.n	80048e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e00c      	b.n	8004900 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2205      	movs	r2, #5
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004918:	4b92      	ldr	r3, [pc, #584]	; (8004b64 <HAL_DMA_IRQHandler+0x258>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a92      	ldr	r2, [pc, #584]	; (8004b68 <HAL_DMA_IRQHandler+0x25c>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004936:	2208      	movs	r2, #8
 8004938:	409a      	lsls	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01a      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2208      	movs	r2, #8
 8004966:	409a      	lsls	r2, r3
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	f043 0201 	orr.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497c:	2201      	movs	r2, #1
 800497e:	409a      	lsls	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	2201      	movs	r2, #1
 800499c:	409a      	lsls	r2, r3
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b2:	2204      	movs	r2, #4
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2204      	movs	r2, #4
 80049d2:	409a      	lsls	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0204 	orr.w	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e8:	2210      	movs	r2, #16
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4013      	ands	r3, r2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d043      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0308 	and.w	r3, r3, #8
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03c      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	2210      	movs	r2, #16
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d018      	beq.n	8004a4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d108      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d024      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
 8004a3a:	e01f      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d01b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e016      	b.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d107      	bne.n	8004a6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0208 	bic.w	r2, r2, #8
 8004a6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	2220      	movs	r2, #32
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 808e 	beq.w	8004baa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8086 	beq.w	8004baa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d136      	bne.n	8004b24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 0216 	bic.w	r2, r2, #22
 8004ac4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	695a      	ldr	r2, [r3, #20]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ad4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x1da>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0208 	bic.w	r2, r2, #8
 8004af4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afa:	223f      	movs	r2, #63	; 0x3f
 8004afc:	409a      	lsls	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d07d      	beq.n	8004c16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
        }
        return;
 8004b22:	e078      	b.n	8004c16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01c      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d108      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d030      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
 8004b50:	e02b      	b.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d027      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	4798      	blx	r3
 8004b62:	e022      	b.n	8004baa <HAL_DMA_IRQHandler+0x29e>
 8004b64:	20000038 	.word	0x20000038
 8004b68:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0210 	bic.w	r2, r2, #16
 8004b88:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d032      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d307      	bcc.n	8004bf2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f2      	bne.n	8004bd6 <HAL_DMA_IRQHandler+0x2ca>
 8004bf0:	e000      	b.n	8004bf4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004bf2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	4798      	blx	r3
 8004c14:	e000      	b.n	8004c18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004c16:	bf00      	nop
    }
  }
}
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop

08004c20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d108      	bne.n	8004c60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c5e:	e007      	b.n	8004c70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	60da      	str	r2, [r3, #12]
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3b10      	subs	r3, #16
 8004c8c:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	091b      	lsrs	r3, r3, #4
 8004c94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c96:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d909      	bls.n	8004cbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	659a      	str	r2, [r3, #88]	; 0x58
 8004cbc:	e007      	b.n	8004cce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004cc6:	f023 0303 	bic.w	r3, r3, #3
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	aaaaaaab 	.word	0xaaaaaaab
 8004ce4:	080088bc 	.word	0x080088bc

08004ce8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d11f      	bne.n	8004d42 <DMA_CheckFifoParam+0x5a>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d856      	bhi.n	8004db6 <DMA_CheckFifoParam+0xce>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <DMA_CheckFifoParam+0x28>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d21 	.word	0x08004d21
 8004d14:	08004d33 	.word	0x08004d33
 8004d18:	08004d21 	.word	0x08004d21
 8004d1c:	08004db7 	.word	0x08004db7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d046      	beq.n	8004dba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d30:	e043      	b.n	8004dba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d3a:	d140      	bne.n	8004dbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d40:	e03d      	b.n	8004dbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4a:	d121      	bne.n	8004d90 <DMA_CheckFifoParam+0xa8>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d837      	bhi.n	8004dc2 <DMA_CheckFifoParam+0xda>
 8004d52:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <DMA_CheckFifoParam+0x70>)
 8004d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d58:	08004d69 	.word	0x08004d69
 8004d5c:	08004d6f 	.word	0x08004d6f
 8004d60:	08004d69 	.word	0x08004d69
 8004d64:	08004d81 	.word	0x08004d81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d6c:	e030      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d025      	beq.n	8004dc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7e:	e022      	b.n	8004dc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d88:	d11f      	bne.n	8004dca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d8e:	e01c      	b.n	8004dca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d903      	bls.n	8004d9e <DMA_CheckFifoParam+0xb6>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d003      	beq.n	8004da4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d9c:	e018      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	73fb      	strb	r3, [r7, #15]
      break;
 8004da2:	e015      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00e      	beq.n	8004dce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e00b      	b.n	8004dce <DMA_CheckFifoParam+0xe6>
      break;
 8004db6:	bf00      	nop
 8004db8:	e00a      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dba:	bf00      	nop
 8004dbc:	e008      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dbe:	bf00      	nop
 8004dc0:	e006      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc2:	bf00      	nop
 8004dc4:	e004      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dc6:	bf00      	nop
 8004dc8:	e002      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004dca:	bf00      	nop
 8004dcc:	e000      	b.n	8004dd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004dce:	bf00      	nop
    }
  } 
  
  return status; 
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop

08004de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b089      	sub	sp, #36	; 0x24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	e159      	b.n	80050b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	fa02 f303 	lsl.w	r3, r2, r3
 8004e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	f040 8148 	bne.w	80050aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d005      	beq.n	8004e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d130      	bne.n	8004e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e68:	2201      	movs	r2, #1
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 0201 	and.w	r2, r3, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	2b03      	cmp	r3, #3
 8004e9e:	d017      	beq.n	8004ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	2203      	movs	r2, #3
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d123      	bne.n	8004f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3208      	adds	r2, #8
 8004ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	220f      	movs	r2, #15
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	43db      	mvns	r3, r3
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	4013      	ands	r3, r2
 8004efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	08da      	lsrs	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3208      	adds	r2, #8
 8004f1e:	69b9      	ldr	r1, [r7, #24]
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f003 0203 	and.w	r2, r3, #3
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80a2 	beq.w	80050aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	2300      	movs	r3, #0
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <HAL_GPIO_Init+0x2e8>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4a56      	ldr	r2, [pc, #344]	; (80050c8 <HAL_GPIO_Init+0x2e8>)
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f74:	6453      	str	r3, [r2, #68]	; 0x44
 8004f76:	4b54      	ldr	r3, [pc, #336]	; (80050c8 <HAL_GPIO_Init+0x2e8>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	60fb      	str	r3, [r7, #12]
 8004f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f82:	4a52      	ldr	r2, [pc, #328]	; (80050cc <HAL_GPIO_Init+0x2ec>)
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	089b      	lsrs	r3, r3, #2
 8004f88:	3302      	adds	r3, #2
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	220f      	movs	r2, #15
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a49      	ldr	r2, [pc, #292]	; (80050d0 <HAL_GPIO_Init+0x2f0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d019      	beq.n	8004fe2 <HAL_GPIO_Init+0x202>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a48      	ldr	r2, [pc, #288]	; (80050d4 <HAL_GPIO_Init+0x2f4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_GPIO_Init+0x1fe>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <HAL_GPIO_Init+0x2f8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00d      	beq.n	8004fda <HAL_GPIO_Init+0x1fa>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a46      	ldr	r2, [pc, #280]	; (80050dc <HAL_GPIO_Init+0x2fc>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <HAL_GPIO_Init+0x1f6>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a45      	ldr	r2, [pc, #276]	; (80050e0 <HAL_GPIO_Init+0x300>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_GPIO_Init+0x1f2>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e008      	b.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fd2:	2307      	movs	r3, #7
 8004fd4:	e006      	b.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e004      	b.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e002      	b.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <HAL_GPIO_Init+0x204>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	f002 0203 	and.w	r2, r2, #3
 8004fea:	0092      	lsls	r2, r2, #2
 8004fec:	4093      	lsls	r3, r2
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ff4:	4935      	ldr	r1, [pc, #212]	; (80050cc <HAL_GPIO_Init+0x2ec>)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	089b      	lsrs	r3, r3, #2
 8004ffa:	3302      	adds	r3, #2
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005002:	4b38      	ldr	r3, [pc, #224]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	43db      	mvns	r3, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	4013      	ands	r3, r2
 8005010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005026:	4a2f      	ldr	r2, [pc, #188]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <HAL_GPIO_Init+0x304>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	43db      	mvns	r3, r3
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4013      	ands	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005048:	69ba      	ldr	r2, [r7, #24]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005056:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	43db      	mvns	r3, r3
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	4013      	ands	r3, r2
 8005064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800507a:	4a1a      	ldr	r2, [pc, #104]	; (80050e4 <HAL_GPIO_Init+0x304>)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005080:	4b18      	ldr	r3, [pc, #96]	; (80050e4 <HAL_GPIO_Init+0x304>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050a4:	4a0f      	ldr	r2, [pc, #60]	; (80050e4 <HAL_GPIO_Init+0x304>)
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3301      	adds	r3, #1
 80050ae:	61fb      	str	r3, [r7, #28]
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	2b0f      	cmp	r3, #15
 80050b4:	f67f aea2 	bls.w	8004dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050b8:	bf00      	nop
 80050ba:	bf00      	nop
 80050bc:	3724      	adds	r7, #36	; 0x24
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40013800 	.word	0x40013800
 80050d0:	40020000 	.word	0x40020000
 80050d4:	40020400 	.word	0x40020400
 80050d8:	40020800 	.word	0x40020800
 80050dc:	40020c00 	.word	0x40020c00
 80050e0:	40021000 	.word	0x40021000
 80050e4:	40013c00 	.word	0x40013c00

080050e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	887b      	ldrh	r3, [r7, #2]
 80050fa:	4013      	ands	r3, r2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
 8005104:	e001      	b.n	800510a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800510a:	7bfb      	ldrb	r3, [r7, #15]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	460b      	mov	r3, r1
 8005122:	807b      	strh	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005128:	787b      	ldrb	r3, [r7, #1]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800512e:	887a      	ldrh	r2, [r7, #2]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005134:	e003      	b.n	800513e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005136:	887b      	ldrh	r3, [r7, #2]
 8005138:	041a      	lsls	r2, r3, #16
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	619a      	str	r2, [r3, #24]
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	4603      	mov	r3, r0
 8005154:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005156:	4b08      	ldr	r3, [pc, #32]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	4013      	ands	r3, r2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d006      	beq.n	8005170 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005162:	4a05      	ldr	r2, [pc, #20]	; (8005178 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005168:	88fb      	ldrh	r3, [r7, #6]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f806 	bl	800517c <HAL_GPIO_EXTI_Callback>
  }
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40013c00 	.word	0x40013c00

0800517c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	4603      	mov	r3, r0
 8005184:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e12b      	b.n	80053fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fe fdda 	bl	8003d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0201 	bic.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051f8:	f000 fd5c 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 80051fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a81      	ldr	r2, [pc, #516]	; (8005408 <HAL_I2C_Init+0x274>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d807      	bhi.n	8005218 <HAL_I2C_Init+0x84>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a80      	ldr	r2, [pc, #512]	; (800540c <HAL_I2C_Init+0x278>)
 800520c:	4293      	cmp	r3, r2
 800520e:	bf94      	ite	ls
 8005210:	2301      	movls	r3, #1
 8005212:	2300      	movhi	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e006      	b.n	8005226 <HAL_I2C_Init+0x92>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a7d      	ldr	r2, [pc, #500]	; (8005410 <HAL_I2C_Init+0x27c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	bf94      	ite	ls
 8005220:	2301      	movls	r3, #1
 8005222:	2300      	movhi	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0e7      	b.n	80053fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	4a78      	ldr	r2, [pc, #480]	; (8005414 <HAL_I2C_Init+0x280>)
 8005232:	fba2 2303 	umull	r2, r3, r2, r3
 8005236:	0c9b      	lsrs	r3, r3, #18
 8005238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a6a      	ldr	r2, [pc, #424]	; (8005408 <HAL_I2C_Init+0x274>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d802      	bhi.n	8005268 <HAL_I2C_Init+0xd4>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3301      	adds	r3, #1
 8005266:	e009      	b.n	800527c <HAL_I2C_Init+0xe8>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800526e:	fb02 f303 	mul.w	r3, r2, r3
 8005272:	4a69      	ldr	r2, [pc, #420]	; (8005418 <HAL_I2C_Init+0x284>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	099b      	lsrs	r3, r3, #6
 800527a:	3301      	adds	r3, #1
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800528e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	495c      	ldr	r1, [pc, #368]	; (8005408 <HAL_I2C_Init+0x274>)
 8005298:	428b      	cmp	r3, r1
 800529a:	d819      	bhi.n	80052d0 <HAL_I2C_Init+0x13c>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	1e59      	subs	r1, r3, #1
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052b0:	400b      	ands	r3, r1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_I2C_Init+0x138>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	1e59      	subs	r1, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052c4:	3301      	adds	r3, #1
 80052c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ca:	e051      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052cc:	2304      	movs	r3, #4
 80052ce:	e04f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d111      	bne.n	80052fc <HAL_I2C_Init+0x168>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	1e58      	subs	r0, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6859      	ldr	r1, [r3, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	440b      	add	r3, r1
 80052e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ea:	3301      	adds	r3, #1
 80052ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bf0c      	ite	eq
 80052f4:	2301      	moveq	r3, #1
 80052f6:	2300      	movne	r3, #0
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	e012      	b.n	8005322 <HAL_I2C_Init+0x18e>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	1e58      	subs	r0, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6859      	ldr	r1, [r3, #4]
 8005304:	460b      	mov	r3, r1
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	0099      	lsls	r1, r3, #2
 800530c:	440b      	add	r3, r1
 800530e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005312:	3301      	adds	r3, #1
 8005314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005318:	2b00      	cmp	r3, #0
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Init+0x196>
 8005326:	2301      	movs	r3, #1
 8005328:	e022      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10e      	bne.n	8005350 <HAL_I2C_Init+0x1bc>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	1e58      	subs	r0, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6859      	ldr	r1, [r3, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	440b      	add	r3, r1
 8005340:	fbb0 f3f3 	udiv	r3, r0, r3
 8005344:	3301      	adds	r3, #1
 8005346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800534e:	e00f      	b.n	8005370 <HAL_I2C_Init+0x1dc>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	1e58      	subs	r0, r3, #1
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	440b      	add	r3, r1
 800535e:	0099      	lsls	r1, r3, #2
 8005360:	440b      	add	r3, r1
 8005362:	fbb0 f3f3 	udiv	r3, r0, r3
 8005366:	3301      	adds	r3, #1
 8005368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	6809      	ldr	r1, [r1, #0]
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800539e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6911      	ldr	r1, [r2, #16]
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	68d2      	ldr	r2, [r2, #12]
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2220      	movs	r2, #32
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	000186a0 	.word	0x000186a0
 800540c:	001e847f 	.word	0x001e847f
 8005410:	003d08ff 	.word	0x003d08ff
 8005414:	431bde83 	.word	0x431bde83
 8005418:	10624dd3 	.word	0x10624dd3

0800541c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e264      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d075      	beq.n	8005526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800543a:	4ba3      	ldr	r3, [pc, #652]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b04      	cmp	r3, #4
 8005444:	d00c      	beq.n	8005460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005446:	4ba0      	ldr	r3, [pc, #640]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800544e:	2b08      	cmp	r3, #8
 8005450:	d112      	bne.n	8005478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005452:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800545a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800545e:	d10b      	bne.n	8005478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005460:	4b99      	ldr	r3, [pc, #612]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d05b      	beq.n	8005524 <HAL_RCC_OscConfig+0x108>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d157      	bne.n	8005524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e23f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d106      	bne.n	8005490 <HAL_RCC_OscConfig+0x74>
 8005482:	4b91      	ldr	r3, [pc, #580]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a90      	ldr	r2, [pc, #576]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	e01d      	b.n	80054cc <HAL_RCC_OscConfig+0xb0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005498:	d10c      	bne.n	80054b4 <HAL_RCC_OscConfig+0x98>
 800549a:	4b8b      	ldr	r3, [pc, #556]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a8a      	ldr	r2, [pc, #552]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a4:	6013      	str	r3, [r2, #0]
 80054a6:	4b88      	ldr	r3, [pc, #544]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a87      	ldr	r2, [pc, #540]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b0:	6013      	str	r3, [r2, #0]
 80054b2:	e00b      	b.n	80054cc <HAL_RCC_OscConfig+0xb0>
 80054b4:	4b84      	ldr	r3, [pc, #528]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a83      	ldr	r2, [pc, #524]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054be:	6013      	str	r3, [r2, #0]
 80054c0:	4b81      	ldr	r3, [pc, #516]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a80      	ldr	r2, [pc, #512]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d013      	beq.n	80054fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d4:	f7fe ff64 	bl	80043a0 <HAL_GetTick>
 80054d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054dc:	f7fe ff60 	bl	80043a0 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b64      	cmp	r3, #100	; 0x64
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e204      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ee:	4b76      	ldr	r3, [pc, #472]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0xc0>
 80054fa:	e014      	b.n	8005526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fc:	f7fe ff50 	bl	80043a0 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005504:	f7fe ff4c 	bl	80043a0 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	; 0x64
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e1f0      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005516:	4b6c      	ldr	r3, [pc, #432]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0xe8>
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d063      	beq.n	80055fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005532:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 030c 	and.w	r3, r3, #12
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00b      	beq.n	8005556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800553e:	4b62      	ldr	r3, [pc, #392]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005546:	2b08      	cmp	r3, #8
 8005548:	d11c      	bne.n	8005584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800554a:	4b5f      	ldr	r3, [pc, #380]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d116      	bne.n	8005584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	4b5c      	ldr	r3, [pc, #368]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_RCC_OscConfig+0x152>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e1c4      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556e:	4b56      	ldr	r3, [pc, #344]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4952      	ldr	r1, [pc, #328]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	4313      	orrs	r3, r2
 8005580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005582:	e03a      	b.n	80055fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d020      	beq.n	80055ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800558c:	4b4f      	ldr	r3, [pc, #316]	; (80056cc <HAL_RCC_OscConfig+0x2b0>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fe ff05 	bl	80043a0 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800559a:	f7fe ff01 	bl	80043a0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e1a5      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ac:	4b46      	ldr	r3, [pc, #280]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b43      	ldr	r3, [pc, #268]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	4940      	ldr	r1, [pc, #256]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]
 80055cc:	e015      	b.n	80055fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ce:	4b3f      	ldr	r3, [pc, #252]	; (80056cc <HAL_RCC_OscConfig+0x2b0>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fe fee4 	bl	80043a0 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055dc:	f7fe fee0 	bl	80043a0 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e184      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ee:	4b36      	ldr	r3, [pc, #216]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d030      	beq.n	8005668 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800560e:	4b30      	ldr	r3, [pc, #192]	; (80056d0 <HAL_RCC_OscConfig+0x2b4>)
 8005610:	2201      	movs	r2, #1
 8005612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fe fec4 	bl	80043a0 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561c:	f7fe fec0 	bl	80043a0 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e164      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800562e:	4b26      	ldr	r3, [pc, #152]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x200>
 800563a:	e015      	b.n	8005668 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <HAL_RCC_OscConfig+0x2b4>)
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005642:	f7fe fead 	bl	80043a0 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800564a:	f7fe fea9 	bl	80043a0 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e14d      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800565c:	4b1a      	ldr	r3, [pc, #104]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800565e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80a0 	beq.w	80057b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005676:	2300      	movs	r3, #0
 8005678:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800567a:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005686:	2300      	movs	r3, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	4a0e      	ldr	r2, [pc, #56]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005694:	6413      	str	r3, [r2, #64]	; 0x40
 8005696:	4b0c      	ldr	r3, [pc, #48]	; (80056c8 <HAL_RCC_OscConfig+0x2ac>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569e:	60bb      	str	r3, [r7, #8]
 80056a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <HAL_RCC_OscConfig+0x2b8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d121      	bne.n	80056f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <HAL_RCC_OscConfig+0x2b8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <HAL_RCC_OscConfig+0x2b8>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056be:	f7fe fe6f 	bl	80043a0 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056c4:	e011      	b.n	80056ea <HAL_RCC_OscConfig+0x2ce>
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470000 	.word	0x42470000
 80056d0:	42470e80 	.word	0x42470e80
 80056d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fe fe62 	bl	80043a0 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e106      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b85      	ldr	r3, [pc, #532]	; (8005900 <HAL_RCC_OscConfig+0x4e4>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d106      	bne.n	800570c <HAL_RCC_OscConfig+0x2f0>
 80056fe:	4b81      	ldr	r3, [pc, #516]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a80      	ldr	r2, [pc, #512]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
 800570a:	e01c      	b.n	8005746 <HAL_RCC_OscConfig+0x32a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b05      	cmp	r3, #5
 8005712:	d10c      	bne.n	800572e <HAL_RCC_OscConfig+0x312>
 8005714:	4b7b      	ldr	r3, [pc, #492]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005718:	4a7a      	ldr	r2, [pc, #488]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800571a:	f043 0304 	orr.w	r3, r3, #4
 800571e:	6713      	str	r3, [r2, #112]	; 0x70
 8005720:	4b78      	ldr	r3, [pc, #480]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005724:	4a77      	ldr	r2, [pc, #476]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	6713      	str	r3, [r2, #112]	; 0x70
 800572c:	e00b      	b.n	8005746 <HAL_RCC_OscConfig+0x32a>
 800572e:	4b75      	ldr	r3, [pc, #468]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005732:	4a74      	ldr	r2, [pc, #464]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	6713      	str	r3, [r2, #112]	; 0x70
 800573a:	4b72      	ldr	r3, [pc, #456]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	4a71      	ldr	r2, [pc, #452]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005740:	f023 0304 	bic.w	r3, r3, #4
 8005744:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d015      	beq.n	800577a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574e:	f7fe fe27 	bl	80043a0 <HAL_GetTick>
 8005752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	e00a      	b.n	800576c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fe fe23 	bl	80043a0 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e0c5      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576c:	4b65      	ldr	r3, [pc, #404]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ee      	beq.n	8005756 <HAL_RCC_OscConfig+0x33a>
 8005778:	e014      	b.n	80057a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800577a:	f7fe fe11 	bl	80043a0 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fe fe0d 	bl	80043a0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e0af      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005798:	4b5a      	ldr	r3, [pc, #360]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ee      	bne.n	8005782 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a4:	7dfb      	ldrb	r3, [r7, #23]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d105      	bne.n	80057b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057aa:	4b56      	ldr	r3, [pc, #344]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	4a55      	ldr	r2, [pc, #340]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 80057b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 809b 	beq.w	80058f6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057c0:	4b50      	ldr	r3, [pc, #320]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d05c      	beq.n	8005886 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d141      	bne.n	8005858 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057d4:	4b4c      	ldr	r3, [pc, #304]	; (8005908 <HAL_RCC_OscConfig+0x4ec>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fe fde1 	bl	80043a0 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e2:	f7fe fddd 	bl	80043a0 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e081      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057f4:	4b43      	ldr	r3, [pc, #268]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1f0      	bne.n	80057e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	019b      	lsls	r3, r3, #6
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	085b      	lsrs	r3, r3, #1
 8005818:	3b01      	subs	r3, #1
 800581a:	041b      	lsls	r3, r3, #16
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	4937      	ldr	r1, [pc, #220]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005826:	4313      	orrs	r3, r2
 8005828:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800582a:	4b37      	ldr	r3, [pc, #220]	; (8005908 <HAL_RCC_OscConfig+0x4ec>)
 800582c:	2201      	movs	r2, #1
 800582e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005830:	f7fe fdb6 	bl	80043a0 <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005838:	f7fe fdb2 	bl	80043a0 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e056      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800584a:	4b2e      	ldr	r3, [pc, #184]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0x41c>
 8005856:	e04e      	b.n	80058f6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005858:	4b2b      	ldr	r3, [pc, #172]	; (8005908 <HAL_RCC_OscConfig+0x4ec>)
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585e:	f7fe fd9f 	bl	80043a0 <HAL_GetTick>
 8005862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005864:	e008      	b.n	8005878 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005866:	f7fe fd9b 	bl	80043a0 <HAL_GetTick>
 800586a:	4602      	mov	r2, r0
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d901      	bls.n	8005878 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e03f      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005878:	4b22      	ldr	r3, [pc, #136]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f0      	bne.n	8005866 <HAL_RCC_OscConfig+0x44a>
 8005884:	e037      	b.n	80058f6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e032      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <HAL_RCC_OscConfig+0x4e8>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d028      	beq.n	80058f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d121      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d11a      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80058c2:	4013      	ands	r3, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058c8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d111      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	3b01      	subs	r3, #1
 80058dc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058de:	429a      	cmp	r2, r3
 80058e0:	d107      	bne.n	80058f2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d001      	beq.n	80058f6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40007000 	.word	0x40007000
 8005904:	40023800 	.word	0x40023800
 8005908:	42470060 	.word	0x42470060

0800590c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e0cc      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005920:	4b68      	ldr	r3, [pc, #416]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d90c      	bls.n	8005948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592e:	4b65      	ldr	r3, [pc, #404]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	4b63      	ldr	r3, [pc, #396]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	429a      	cmp	r2, r3
 8005942:	d001      	beq.n	8005948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0b8      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b00      	cmp	r3, #0
 8005952:	d020      	beq.n	8005996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005960:	4b59      	ldr	r3, [pc, #356]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4a58      	ldr	r2, [pc, #352]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800596a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0308 	and.w	r3, r3, #8
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005978:	4b53      	ldr	r3, [pc, #332]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4a52      	ldr	r2, [pc, #328]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800597e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005984:	4b50      	ldr	r3, [pc, #320]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	494d      	ldr	r1, [pc, #308]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d044      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	4b47      	ldr	r3, [pc, #284]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d119      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e07f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d003      	beq.n	80059ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d107      	bne.n	80059da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ca:	4b3f      	ldr	r3, [pc, #252]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e06f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e067      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059ea:	4b37      	ldr	r3, [pc, #220]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 0203 	bic.w	r2, r3, #3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	4934      	ldr	r1, [pc, #208]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059fc:	f7fe fcd0 	bl	80043a0 <HAL_GetTick>
 8005a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a04:	f7fe fccc 	bl	80043a0 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04f      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a1a:	4b2b      	ldr	r3, [pc, #172]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 020c 	and.w	r2, r3, #12
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d1eb      	bne.n	8005a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a2c:	4b25      	ldr	r3, [pc, #148]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d20c      	bcs.n	8005a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0307 	and.w	r3, r3, #7
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d001      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e032      	b.n	8005aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a60:	4b19      	ldr	r3, [pc, #100]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	4916      	ldr	r1, [pc, #88]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	490e      	ldr	r1, [pc, #56]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a92:	f000 f821 	bl	8005ad8 <HAL_RCC_GetSysClockFreq>
 8005a96:	4602      	mov	r2, r0
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	091b      	lsrs	r3, r3, #4
 8005a9e:	f003 030f 	and.w	r3, r3, #15
 8005aa2:	490a      	ldr	r1, [pc, #40]	; (8005acc <HAL_RCC_ClockConfig+0x1c0>)
 8005aa4:	5ccb      	ldrb	r3, [r1, r3]
 8005aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8005aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aae:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fc30 	bl	8004318 <HAL_InitTick>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023c00 	.word	0x40023c00
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	080088a4 	.word	0x080088a4
 8005ad0:	20000038 	.word	0x20000038
 8005ad4:	2000003c 	.word	0x2000003c

08005ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ad8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	607b      	str	r3, [r7, #4]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005af0:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d00d      	beq.n	8005b18 <HAL_RCC_GetSysClockFreq+0x40>
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	f200 80bd 	bhi.w	8005c7c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d002      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x34>
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b0a:	e0b7      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b0c:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b0e:	60bb      	str	r3, [r7, #8]
       break;
 8005b10:	e0b7      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b12:	4b61      	ldr	r3, [pc, #388]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005b14:	60bb      	str	r3, [r7, #8]
      break;
 8005b16:	e0b4      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b18:	4b5d      	ldr	r3, [pc, #372]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b22:	4b5b      	ldr	r3, [pc, #364]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d04d      	beq.n	8005bca <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b2e:	4b58      	ldr	r3, [pc, #352]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	461a      	mov	r2, r3
 8005b36:	f04f 0300 	mov.w	r3, #0
 8005b3a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	ea02 0800 	and.w	r8, r2, r0
 8005b46:	ea03 0901 	and.w	r9, r3, r1
 8005b4a:	4640      	mov	r0, r8
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	014b      	lsls	r3, r1, #5
 8005b58:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005b5c:	0142      	lsls	r2, r0, #5
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	ebb0 0008 	subs.w	r0, r0, r8
 8005b66:	eb61 0109 	sbc.w	r1, r1, r9
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	018b      	lsls	r3, r1, #6
 8005b74:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005b78:	0182      	lsls	r2, r0, #6
 8005b7a:	1a12      	subs	r2, r2, r0
 8005b7c:	eb63 0301 	sbc.w	r3, r3, r1
 8005b80:	f04f 0000 	mov.w	r0, #0
 8005b84:	f04f 0100 	mov.w	r1, #0
 8005b88:	00d9      	lsls	r1, r3, #3
 8005b8a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b8e:	00d0      	lsls	r0, r2, #3
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	eb12 0208 	adds.w	r2, r2, r8
 8005b98:	eb43 0309 	adc.w	r3, r3, r9
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	0259      	lsls	r1, r3, #9
 8005ba6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005baa:	0250      	lsls	r0, r2, #9
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	f7fb f8c0 	bl	8000d40 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	e04a      	b.n	8005c60 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	ea02 0400 	and.w	r4, r2, r0
 8005be2:	ea03 0501 	and.w	r5, r3, r1
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	014b      	lsls	r3, r1, #5
 8005bf4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005bf8:	0142      	lsls	r2, r0, #5
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	1b00      	subs	r0, r0, r4
 8005c00:	eb61 0105 	sbc.w	r1, r1, r5
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	018b      	lsls	r3, r1, #6
 8005c0e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c12:	0182      	lsls	r2, r0, #6
 8005c14:	1a12      	subs	r2, r2, r0
 8005c16:	eb63 0301 	sbc.w	r3, r3, r1
 8005c1a:	f04f 0000 	mov.w	r0, #0
 8005c1e:	f04f 0100 	mov.w	r1, #0
 8005c22:	00d9      	lsls	r1, r3, #3
 8005c24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c28:	00d0      	lsls	r0, r2, #3
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	1912      	adds	r2, r2, r4
 8005c30:	eb45 0303 	adc.w	r3, r5, r3
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	f04f 0100 	mov.w	r1, #0
 8005c3c:	0299      	lsls	r1, r3, #10
 8005c3e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005c42:	0290      	lsls	r0, r2, #10
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4610      	mov	r0, r2
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	f7fb f874 	bl	8000d40 <__aeabi_uldivmod>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c60:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	60bb      	str	r3, [r7, #8]
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c7e:	60bb      	str	r3, [r7, #8]
      break;
 8005c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c82:	68bb      	ldr	r3, [r7, #8]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c8e:	bf00      	nop
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200

08005c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ca0:	4b03      	ldr	r3, [pc, #12]	; (8005cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	20000038 	.word	0x20000038

08005cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cb8:	f7ff fff0 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	0a9b      	lsrs	r3, r3, #10
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	4903      	ldr	r1, [pc, #12]	; (8005cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cca:	5ccb      	ldrb	r3, [r1, r3]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40023800 	.word	0x40023800
 8005cd8:	080088b4 	.word	0x080088b4

08005cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ce0:	f7ff ffdc 	bl	8005c9c <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b05      	ldr	r3, [pc, #20]	; (8005cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	0b5b      	lsrs	r3, r3, #13
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4903      	ldr	r1, [pc, #12]	; (8005d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	080088b4 	.word	0x080088b4

08005d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e041      	b.n	8005d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fe f8b2 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	3304      	adds	r3, #4
 8005d40:	4619      	mov	r1, r3
 8005d42:	4610      	mov	r0, r2
 8005d44:	f000 fdda 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d001      	beq.n	8005dbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e03c      	b.n	8005e36 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <HAL_TIM_Base_Start+0xa0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_TIM_Base_Start+0x5c>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd6:	d013      	beq.n	8005e00 <HAL_TIM_Base_Start+0x5c>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <HAL_TIM_Base_Start+0xa4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_TIM_Base_Start+0x5c>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a19      	ldr	r2, [pc, #100]	; (8005e4c <HAL_TIM_Base_Start+0xa8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_TIM_Base_Start+0x5c>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <HAL_TIM_Base_Start+0xac>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_TIM_Base_Start+0x5c>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a16      	ldr	r2, [pc, #88]	; (8005e54 <HAL_TIM_Base_Start+0xb0>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d111      	bne.n	8005e24 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b06      	cmp	r3, #6
 8005e10:	d010      	beq.n	8005e34 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f042 0201 	orr.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e22:	e007      	b.n	8005e34 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40010000 	.word	0x40010000
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	40000c00 	.word	0x40000c00
 8005e54:	40014000 	.word	0x40014000

08005e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d001      	beq.n	8005e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e044      	b.n	8005efa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f042 0201 	orr.w	r2, r2, #1
 8005e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1e      	ldr	r2, [pc, #120]	; (8005f08 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <HAL_TIM_Base_Start_IT+0xb4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a19      	ldr	r2, [pc, #100]	; (8005f10 <HAL_TIM_Base_Start_IT+0xb8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_TIM_Base_Start_IT+0xbc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a16      	ldr	r2, [pc, #88]	; (8005f18 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d111      	bne.n	8005ee8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 0307 	and.w	r3, r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d010      	beq.n	8005ef8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e007      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40010000 	.word	0x40010000
 8005f0c:	40000400 	.word	0x40000400
 8005f10:	40000800 	.word	0x40000800
 8005f14:	40000c00 	.word	0x40000c00
 8005f18:	40014000 	.word	0x40014000

08005f1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e041      	b.n	8005fb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f839 	bl	8005fba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4619      	mov	r1, r3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	f000 fcce 	bl	80068fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3708      	adds	r7, #8
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
	...

08005fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start+0x24>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e022      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d109      	bne.n	800600e <HAL_TIM_PWM_Start+0x3e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e015      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d109      	bne.n	8006028 <HAL_TIM_PWM_Start+0x58>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e008      	b.n	800603a <HAL_TIM_PWM_Start+0x6a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d001      	beq.n	8006042 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e068      	b.n	8006114 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <HAL_TIM_PWM_Start+0x82>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	e013      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d104      	bne.n	8006062 <HAL_TIM_PWM_Start+0x92>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006060:	e00b      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d104      	bne.n	8006072 <HAL_TIM_PWM_Start+0xa2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006070:	e003      	b.n	800607a <HAL_TIM_PWM_Start+0xaa>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	6839      	ldr	r1, [r7, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fee0 	bl	8006e48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_TIM_PWM_Start+0x14c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d107      	bne.n	80060a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_TIM_PWM_Start+0x14c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d018      	beq.n	80060de <HAL_TIM_PWM_Start+0x10e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b4:	d013      	beq.n	80060de <HAL_TIM_PWM_Start+0x10e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a19      	ldr	r2, [pc, #100]	; (8006120 <HAL_TIM_PWM_Start+0x150>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d00e      	beq.n	80060de <HAL_TIM_PWM_Start+0x10e>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a17      	ldr	r2, [pc, #92]	; (8006124 <HAL_TIM_PWM_Start+0x154>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d009      	beq.n	80060de <HAL_TIM_PWM_Start+0x10e>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a16      	ldr	r2, [pc, #88]	; (8006128 <HAL_TIM_PWM_Start+0x158>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d004      	beq.n	80060de <HAL_TIM_PWM_Start+0x10e>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a14      	ldr	r2, [pc, #80]	; (800612c <HAL_TIM_PWM_Start+0x15c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d111      	bne.n	8006102 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b06      	cmp	r3, #6
 80060ee:	d010      	beq.n	8006112 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006100:	e007      	b.n	8006112 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40014000 	.word	0x40014000

08006130 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e097      	b.n	8006274 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d106      	bne.n	800615e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7fd fe53 	bl	8003e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006174:	f023 0307 	bic.w	r3, r3, #7
 8006178:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f000 fbb9 	bl	80068fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	4313      	orrs	r3, r2
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80061d0:	f023 030c 	bic.w	r3, r3, #12
 80061d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	4313      	orrs	r3, r2
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	011a      	lsls	r2, r3, #4
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	031b      	lsls	r3, r3, #12
 8006200:	4313      	orrs	r3, r2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	4313      	orrs	r3, r2
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4313      	orrs	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800628c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006294:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800629c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d110      	bne.n	80062ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d102      	bne.n	80062b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80062b2:	7b7b      	ldrb	r3, [r7, #13]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e069      	b.n	8006390 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2202      	movs	r2, #2
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062cc:	e031      	b.n	8006332 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d110      	bne.n	80062f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062d4:	7bbb      	ldrb	r3, [r7, #14]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d102      	bne.n	80062e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80062da:	7b3b      	ldrb	r3, [r7, #12]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d001      	beq.n	80062e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e055      	b.n	8006390 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062f4:	e01d      	b.n	8006332 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80062f6:	7bfb      	ldrb	r3, [r7, #15]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d108      	bne.n	800630e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80062fc:	7bbb      	ldrb	r3, [r7, #14]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d105      	bne.n	800630e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006302:	7b7b      	ldrb	r3, [r7, #13]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d102      	bne.n	800630e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006308:	7b3b      	ldrb	r3, [r7, #12]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d001      	beq.n	8006312 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e03e      	b.n	8006390 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2202      	movs	r2, #2
 800632e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_TIM_Encoder_Start+0xc4>
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d008      	beq.n	8006350 <HAL_TIM_Encoder_Start+0xd4>
 800633e:	e00f      	b.n	8006360 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2201      	movs	r2, #1
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fd7d 	bl	8006e48 <TIM_CCxChannelCmd>
      break;
 800634e:	e016      	b.n	800637e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2201      	movs	r2, #1
 8006356:	2104      	movs	r1, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f000 fd75 	bl	8006e48 <TIM_CCxChannelCmd>
      break;
 800635e:	e00e      	b.n	800637e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2201      	movs	r2, #1
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fd6d 	bl	8006e48 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2201      	movs	r2, #1
 8006374:	2104      	movs	r1, #4
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fd66 	bl	8006e48 <TIM_CCxChannelCmd>
      break;
 800637c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d122      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11b      	bne.n	80063f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0202 	mvn.w	r2, #2
 80063c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa70 	bl	80068c0 <HAL_TIM_IC_CaptureCallback>
 80063e0:	e005      	b.n	80063ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa62 	bl	80068ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fa73 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d122      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d11b      	bne.n	8006448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f06f 0204 	mvn.w	r2, #4
 8006418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2202      	movs	r2, #2
 800641e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 fa46 	bl	80068c0 <HAL_TIM_IC_CaptureCallback>
 8006434:	e005      	b.n	8006442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa38 	bl	80068ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fa49 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b08      	cmp	r3, #8
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b08      	cmp	r3, #8
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0208 	mvn.w	r2, #8
 800646c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2204      	movs	r2, #4
 8006472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fa1c 	bl	80068c0 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa0e 	bl	80068ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fa1f 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0310 	and.w	r3, r3, #16
 80064a6:	2b10      	cmp	r3, #16
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b10      	cmp	r3, #16
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0210 	mvn.w	r2, #16
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2208      	movs	r2, #8
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69db      	ldr	r3, [r3, #28]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9f2 	bl	80068c0 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9e4 	bl	80068ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f9f5 	bl	80068d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d10e      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0201 	mvn.w	r2, #1
 8006514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7fd fbc8 	bl	8003cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d10e      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d107      	bne.n	8006548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fd1e 	bl	8006f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d10e      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b40      	cmp	r3, #64	; 0x40
 8006562:	d107      	bne.n	8006574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800656c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9ba 	bl	80068e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0320 	and.w	r3, r3, #32
 800658c:	2b20      	cmp	r3, #32
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0220 	mvn.w	r2, #32
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fce8 	bl	8006f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d101      	bne.n	80065c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065be:	2302      	movs	r3, #2
 80065c0:	e0ac      	b.n	800671c <HAL_TIM_PWM_ConfigChannel+0x174>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b0c      	cmp	r3, #12
 80065ce:	f200 809f 	bhi.w	8006710 <HAL_TIM_PWM_ConfigChannel+0x168>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	0800660d 	.word	0x0800660d
 80065dc:	08006711 	.word	0x08006711
 80065e0:	08006711 	.word	0x08006711
 80065e4:	08006711 	.word	0x08006711
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	08006711 	.word	0x08006711
 80065f0:	08006711 	.word	0x08006711
 80065f4:	08006711 	.word	0x08006711
 80065f8:	0800668f 	.word	0x0800668f
 80065fc:	08006711 	.word	0x08006711
 8006600:	08006711 	.word	0x08006711
 8006604:	08006711 	.word	0x08006711
 8006608:	080066cf 	.word	0x080066cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 f9f2 	bl	80069fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f042 0208 	orr.w	r2, r2, #8
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0204 	bic.w	r2, r2, #4
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	619a      	str	r2, [r3, #24]
      break;
 800664a:	e062      	b.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68b9      	ldr	r1, [r7, #8]
 8006652:	4618      	mov	r0, r3
 8006654:	f000 fa38 	bl	8006ac8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006666:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	699a      	ldr	r2, [r3, #24]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006676:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6999      	ldr	r1, [r3, #24]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	021a      	lsls	r2, r3, #8
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	619a      	str	r2, [r3, #24]
      break;
 800668c:	e041      	b.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fa83 	bl	8006ba0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f042 0208 	orr.w	r2, r2, #8
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0204 	bic.w	r2, r2, #4
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	61da      	str	r2, [r3, #28]
      break;
 80066cc:	e021      	b.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	4618      	mov	r0, r3
 80066d6:	f000 facd 	bl	8006c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	69da      	ldr	r2, [r3, #28]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69da      	ldr	r2, [r3, #28]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69d9      	ldr	r1, [r3, #28]
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	021a      	lsls	r2, r3, #8
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	61da      	str	r2, [r3, #28]
      break;
 800670e:	e000      	b.n	8006712 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006710:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_TIM_ConfigClockSource+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e0b3      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x180>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800675a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006762:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006774:	d03e      	beq.n	80067f4 <HAL_TIM_ConfigClockSource+0xd0>
 8006776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677a:	f200 8087 	bhi.w	800688c <HAL_TIM_ConfigClockSource+0x168>
 800677e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006782:	f000 8085 	beq.w	8006890 <HAL_TIM_ConfigClockSource+0x16c>
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678a:	d87f      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 800678c:	2b70      	cmp	r3, #112	; 0x70
 800678e:	d01a      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0xa2>
 8006790:	2b70      	cmp	r3, #112	; 0x70
 8006792:	d87b      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 8006794:	2b60      	cmp	r3, #96	; 0x60
 8006796:	d050      	beq.n	800683a <HAL_TIM_ConfigClockSource+0x116>
 8006798:	2b60      	cmp	r3, #96	; 0x60
 800679a:	d877      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 800679c:	2b50      	cmp	r3, #80	; 0x50
 800679e:	d03c      	beq.n	800681a <HAL_TIM_ConfigClockSource+0xf6>
 80067a0:	2b50      	cmp	r3, #80	; 0x50
 80067a2:	d873      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d058      	beq.n	800685a <HAL_TIM_ConfigClockSource+0x136>
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d86f      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 80067ac:	2b30      	cmp	r3, #48	; 0x30
 80067ae:	d064      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x156>
 80067b0:	2b30      	cmp	r3, #48	; 0x30
 80067b2:	d86b      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d060      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x156>
 80067b8:	2b20      	cmp	r3, #32
 80067ba:	d867      	bhi.n	800688c <HAL_TIM_ConfigClockSource+0x168>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d05c      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x156>
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d05a      	beq.n	800687a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067c4:	e062      	b.n	800688c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6899      	ldr	r1, [r3, #8]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f000 fb17 	bl	8006e08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	609a      	str	r2, [r3, #8]
      break;
 80067f2:	e04e      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	6899      	ldr	r1, [r3, #8]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685a      	ldr	r2, [r3, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f000 fb00 	bl	8006e08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006816:	609a      	str	r2, [r3, #8]
      break;
 8006818:	e03b      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	6859      	ldr	r1, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	461a      	mov	r2, r3
 8006828:	f000 fa74 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2150      	movs	r1, #80	; 0x50
 8006832:	4618      	mov	r0, r3
 8006834:	f000 facd 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006838:	e02b      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6818      	ldr	r0, [r3, #0]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6859      	ldr	r1, [r3, #4]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	461a      	mov	r2, r3
 8006848:	f000 fa93 	bl	8006d72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2160      	movs	r1, #96	; 0x60
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fabd 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006858:	e01b      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6859      	ldr	r1, [r3, #4]
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	461a      	mov	r2, r3
 8006868:	f000 fa54 	bl	8006d14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2140      	movs	r1, #64	; 0x40
 8006872:	4618      	mov	r0, r3
 8006874:	f000 faad 	bl	8006dd2 <TIM_ITRx_SetConfig>
      break;
 8006878:	e00b      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f000 faa4 	bl	8006dd2 <TIM_ITRx_SetConfig>
        break;
 800688a:	e002      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800688c:	bf00      	nop
 800688e:	e000      	b.n	8006892 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006890:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a34      	ldr	r2, [pc, #208]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a31      	ldr	r2, [pc, #196]	; (80069e4 <TIM_Base_SetConfig+0xe8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a30      	ldr	r2, [pc, #192]	; (80069e8 <TIM_Base_SetConfig+0xec>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <TIM_Base_SetConfig+0xf0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <TIM_Base_SetConfig+0xe8>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a21      	ldr	r2, [pc, #132]	; (80069e8 <TIM_Base_SetConfig+0xec>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a20      	ldr	r2, [pc, #128]	; (80069ec <TIM_Base_SetConfig+0xf0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1f      	ldr	r2, [pc, #124]	; (80069f0 <TIM_Base_SetConfig+0xf4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1e      	ldr	r2, [pc, #120]	; (80069f4 <TIM_Base_SetConfig+0xf8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1d      	ldr	r2, [pc, #116]	; (80069f8 <TIM_Base_SetConfig+0xfc>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <TIM_Base_SetConfig+0xe4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800

080069fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a1b      	ldr	r3, [r3, #32]
 8006a0a:	f023 0201 	bic.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f023 0302 	bic.w	r3, r3, #2
 8006a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <TIM_OC1_SetConfig+0xc8>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d10c      	bne.n	8006a72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0308 	bic.w	r3, r3, #8
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a13      	ldr	r2, [pc, #76]	; (8006ac4 <TIM_OC1_SetConfig+0xc8>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d111      	bne.n	8006a9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4313      	orrs	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	621a      	str	r2, [r3, #32]
}
 8006ab8:	bf00      	nop
 8006aba:	371c      	adds	r7, #28
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	40010000 	.word	0x40010000

08006ac8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	f023 0210 	bic.w	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	021b      	lsls	r3, r3, #8
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <TIM_OC2_SetConfig+0xd4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d10d      	bne.n	8006b44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	011b      	lsls	r3, r3, #4
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <TIM_OC2_SetConfig+0xd4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40010000 	.word	0x40010000

08006ba0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <TIM_OC3_SetConfig+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d10d      	bne.n	8006c1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <TIM_OC3_SetConfig+0xd0>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d113      	bne.n	8006c4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	40010000 	.word	0x40010000

08006c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	021b      	lsls	r3, r3, #8
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	031b      	lsls	r3, r3, #12
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <TIM_OC4_SetConfig+0x9c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d109      	bne.n	8006ce8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	019b      	lsls	r3, r3, #6
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	621a      	str	r2, [r3, #32]
}
 8006d02:	bf00      	nop
 8006d04:	371c      	adds	r7, #28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	40010000 	.word	0x40010000

08006d14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0201 	bic.w	r2, r3, #1
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 030a 	bic.w	r3, r3, #10
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	621a      	str	r2, [r3, #32]
}
 8006d66:	bf00      	nop
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0210 	bic.w	r2, r3, #16
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	031b      	lsls	r3, r3, #12
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	f043 0307 	orr.w	r3, r3, #7
 8006df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	021a      	lsls	r2, r3, #8
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	609a      	str	r2, [r3, #8]
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1a      	ldr	r2, [r3, #32]
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	43db      	mvns	r3, r3
 8006e6a:	401a      	ands	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a1a      	ldr	r2, [r3, #32]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	6879      	ldr	r1, [r7, #4]
 8006e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e80:	431a      	orrs	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d101      	bne.n	8006eac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	e050      	b.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2202      	movs	r2, #2
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d018      	beq.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef8:	d013      	beq.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a18      	ldr	r2, [pc, #96]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a16      	ldr	r2, [pc, #88]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d009      	beq.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d004      	beq.n	8006f22 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10c      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40000400 	.word	0x40000400
 8006f64:	40000800 	.word	0x40000800
 8006f68:	40000c00 	.word	0x40000c00
 8006f6c:	40014000 	.word	0x40014000

08006f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e03f      	b.n	800702a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fc fffc 	bl	8003fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	; 0x24
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fd51 	bl	8007a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695a      	ldr	r2, [r3, #20]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	4613      	mov	r3, r2
 8007040:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b20      	cmp	r3, #32
 800704c:	d153      	bne.n	80070f6 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d002      	beq.n	800705a <HAL_UART_Transmit_DMA+0x26>
 8007054:	88fb      	ldrh	r3, [r7, #6]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e04c      	b.n	80070f8 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007064:	2b01      	cmp	r3, #1
 8007066:	d101      	bne.n	800706c <HAL_UART_Transmit_DMA+0x38>
 8007068:	2302      	movs	r3, #2
 800706a:	e045      	b.n	80070f8 <HAL_UART_Transmit_DMA+0xc4>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	88fa      	ldrh	r2, [r7, #6]
 800707e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	88fa      	ldrh	r2, [r7, #6]
 8007084:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2221      	movs	r2, #33	; 0x21
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007098:	4a19      	ldr	r2, [pc, #100]	; (8007100 <HAL_UART_Transmit_DMA+0xcc>)
 800709a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a0:	4a18      	ldr	r2, [pc, #96]	; (8007104 <HAL_UART_Transmit_DMA+0xd0>)
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	4a17      	ldr	r2, [pc, #92]	; (8007108 <HAL_UART_Transmit_DMA+0xd4>)
 80070aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b0:	2200      	movs	r2, #0
 80070b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80070b4:	f107 0308 	add.w	r3, r7, #8
 80070b8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3304      	adds	r3, #4
 80070c8:	461a      	mov	r2, r3
 80070ca:	88fb      	ldrh	r3, [r7, #6]
 80070cc:	f7fd fb34 	bl	8004738 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80070d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695a      	ldr	r2, [r3, #20]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070f0:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	08007541 	.word	0x08007541
 8007104:	08007593 	.word	0x08007593
 8007108:	0800767b 	.word	0x0800767b

0800710c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b20      	cmp	r3, #32
 8007124:	d11d      	bne.n	8007162 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_UART_Receive_DMA+0x26>
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e016      	b.n	8007164 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800713c:	2b01      	cmp	r3, #1
 800713e:	d101      	bne.n	8007144 <HAL_UART_Receive_DMA+0x38>
 8007140:	2302      	movs	r3, #2
 8007142:	e00f      	b.n	8007164 <HAL_UART_Receive_DMA+0x58>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007152:	88fb      	ldrh	r3, [r7, #6]
 8007154:	461a      	mov	r2, r3
 8007156:	68b9      	ldr	r1, [r7, #8]
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 fad9 	bl	8007710 <UART_Start_Receive_DMA>
 800715e:	4603      	mov	r3, r0
 8007160:	e000      	b.n	8007164 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007162:	2302      	movs	r3, #2
  }
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	; 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007190:	2300      	movs	r3, #0
 8007192:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10d      	bne.n	80071be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <HAL_UART_IRQHandler+0x52>
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fbcd 	bl	8007956 <UART_Receive_IT>
      return;
 80071bc:	e17c      	b.n	80074b8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80b1 	beq.w	8007328 <HAL_UART_IRQHandler+0x1bc>
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d105      	bne.n	80071dc <HAL_UART_IRQHandler+0x70>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 80a6 	beq.w	8007328 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_UART_IRQHandler+0x90>
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	f043 0201 	orr.w	r2, r3, #1
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_UART_IRQHandler+0xb0>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	f043 0202 	orr.w	r2, r3, #2
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721e:	f003 0302 	and.w	r3, r3, #2
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <HAL_UART_IRQHandler+0xd0>
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	f043 0204 	orr.w	r2, r3, #4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	f003 0308 	and.w	r3, r3, #8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <HAL_UART_IRQHandler+0xfa>
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d104      	bne.n	800725a <HAL_UART_IRQHandler+0xee>
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725e:	f043 0208 	orr.w	r2, r3, #8
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 811f 	beq.w	80074ae <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007272:	f003 0320 	and.w	r3, r3, #32
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <HAL_UART_IRQHandler+0x11e>
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fb66 	bl	8007956 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b40      	cmp	r3, #64	; 0x40
 8007296:	bf0c      	ite	eq
 8007298:	2301      	moveq	r3, #1
 800729a:	2300      	movne	r3, #0
 800729c:	b2db      	uxtb	r3, r3
 800729e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <HAL_UART_IRQHandler+0x146>
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d031      	beq.n	8007316 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 faa6 	bl	8007804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c2:	2b40      	cmp	r3, #64	; 0x40
 80072c4:	d123      	bne.n	800730e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	695a      	ldr	r2, [r3, #20]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d013      	beq.n	8007306 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	4a77      	ldr	r2, [pc, #476]	; (80074c0 <HAL_UART_IRQHandler+0x354>)
 80072e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fd faec 	bl	80048c8 <HAL_DMA_Abort_IT>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d016      	beq.n	8007324 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e00e      	b.n	8007324 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f904 	bl	8007514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730c:	e00a      	b.n	8007324 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f900 	bl	8007514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	e006      	b.n	8007324 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8fc 	bl	8007514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007322:	e0c4      	b.n	80074ae <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007324:	bf00      	nop
    return;
 8007326:	e0c2      	b.n	80074ae <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732c:	2b01      	cmp	r3, #1
 800732e:	f040 80a2 	bne.w	8007476 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 809c 	beq.w	8007476 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	f003 0310 	and.w	r3, r3, #16
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8096 	beq.w	8007476 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695b      	ldr	r3, [r3, #20]
 8007366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d14f      	bne.n	800740e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007378:	8a3b      	ldrh	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8099 	beq.w	80074b2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007384:	8a3a      	ldrh	r2, [r7, #16]
 8007386:	429a      	cmp	r2, r3
 8007388:	f080 8093 	bcs.w	80074b2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8a3a      	ldrh	r2, [r7, #16]
 8007390:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739c:	d02b      	beq.n	80073f6 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68da      	ldr	r2, [r3, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073ac:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	695a      	ldr	r2, [r3, #20]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073cc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0210 	bic.w	r2, r2, #16
 80073ea:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd f9f9 	bl	80047e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	b29b      	uxth	r3, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 f88e 	bl	8007528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800740c:	e051      	b.n	80074b2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007416:	b29b      	uxth	r3, r3
 8007418:	1ad3      	subs	r3, r2, r3
 800741a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d047      	beq.n	80074b6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007426:	8a7b      	ldrh	r3, [r7, #18]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d044      	beq.n	80074b6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68da      	ldr	r2, [r3, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800743a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	695a      	ldr	r2, [r3, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68da      	ldr	r2, [r3, #12]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 0210 	bic.w	r2, r2, #16
 8007468:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800746a:	8a7b      	ldrh	r3, [r7, #18]
 800746c:	4619      	mov	r1, r3
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f85a 	bl	8007528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007474:	e01f      	b.n	80074b6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800747c:	2b00      	cmp	r3, #0
 800747e:	d008      	beq.n	8007492 <HAL_UART_IRQHandler+0x326>
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9fb 	bl	8007886 <UART_Transmit_IT>
    return;
 8007490:	e012      	b.n	80074b8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00d      	beq.n	80074b8 <HAL_UART_IRQHandler+0x34c>
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d008      	beq.n	80074b8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fa3d 	bl	8007926 <UART_EndTransmit_IT>
    return;
 80074ac:	e004      	b.n	80074b8 <HAL_UART_IRQHandler+0x34c>
    return;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <HAL_UART_IRQHandler+0x34c>
      return;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_UART_IRQHandler+0x34c>
      return;
 80074b6:	bf00      	nop
  }
}
 80074b8:	3728      	adds	r7, #40	; 0x28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	0800785f 	.word	0x0800785f

080074c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007558:	2b00      	cmp	r3, #0
 800755a:	d113      	bne.n	8007584 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695a      	ldr	r2, [r3, #20]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007570:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68da      	ldr	r2, [r3, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007580:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007582:	e002      	b.n	800758a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f7ff ff9d 	bl	80074c4 <HAL_UART_TxCpltCallback>
}
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f7ff ff99 	bl	80074d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075a6:	bf00      	nop
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ba:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d12a      	bne.n	8007620 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075de:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0201 	bic.w	r2, r2, #1
 80075ee:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	695a      	ldr	r2, [r3, #20]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075fe:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2220      	movs	r2, #32
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760c:	2b01      	cmp	r3, #1
 800760e:	d107      	bne.n	8007620 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0210 	bic.w	r2, r2, #16
 800761e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	2b01      	cmp	r3, #1
 8007626:	d106      	bne.n	8007636 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800762c:	4619      	mov	r1, r3
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff ff7a 	bl	8007528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007634:	e002      	b.n	800763c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007636:	68f8      	ldr	r0, [r7, #12]
 8007638:	f7ff ff58 	bl	80074ec <HAL_UART_RxCpltCallback>
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	2b01      	cmp	r3, #1
 8007658:	d108      	bne.n	800766c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800765e:	085b      	lsrs	r3, r3, #1
 8007660:	b29b      	uxth	r3, r3
 8007662:	4619      	mov	r1, r3
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff ff5f 	bl	8007528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800766a:	e002      	b.n	8007672 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff ff47 	bl	8007500 <HAL_UART_RxHalfCpltCallback>
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	695b      	ldr	r3, [r3, #20]
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	bf0c      	ite	eq
 800769a:	2301      	moveq	r3, #1
 800769c:	2300      	movne	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b21      	cmp	r3, #33	; 0x21
 80076ac:	d108      	bne.n	80076c0 <UART_DMAError+0x46>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d005      	beq.n	80076c0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80076ba:	68b8      	ldr	r0, [r7, #8]
 80076bc:	f000 f88c 	bl	80077d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	bf0c      	ite	eq
 80076ce:	2301      	moveq	r3, #1
 80076d0:	2300      	movne	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b22      	cmp	r3, #34	; 0x22
 80076e0:	d108      	bne.n	80076f4 <UART_DMAError+0x7a>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80076ee:	68b8      	ldr	r0, [r7, #8]
 80076f0:	f000 f888 	bl	8007804 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	f043 0210 	orr.w	r2, r3, #16
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007700:	68b8      	ldr	r0, [r7, #8]
 8007702:	f7ff ff07 	bl	8007514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	88fa      	ldrh	r2, [r7, #6]
 8007728:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2222      	movs	r2, #34	; 0x22
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	4a23      	ldr	r2, [pc, #140]	; (80077cc <UART_Start_Receive_DMA+0xbc>)
 800773e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007744:	4a22      	ldr	r2, [pc, #136]	; (80077d0 <UART_Start_Receive_DMA+0xc0>)
 8007746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800774c:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <UART_Start_Receive_DMA+0xc4>)
 800774e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	2200      	movs	r2, #0
 8007756:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007758:	f107 0308 	add.w	r3, r7, #8
 800775c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	88fb      	ldrh	r3, [r7, #6]
 8007770:	f7fc ffe2 	bl	8004738 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007774:	2300      	movs	r3, #0
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	613b      	str	r3, [r7, #16]
 8007788:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	695a      	ldr	r2, [r3, #20]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	695a      	ldr	r2, [r3, #20]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	080075af 	.word	0x080075af
 80077d0:	08007645 	.word	0x08007645
 80077d4:	0800767b 	.word	0x0800767b

080077d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80077ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800781a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0201 	bic.w	r2, r2, #1
 800782a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007830:	2b01      	cmp	r3, #1
 8007832:	d107      	bne.n	8007844 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f022 0210 	bic.w	r2, r2, #16
 8007842:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff fe4b 	bl	8007514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b21      	cmp	r3, #33	; 0x21
 8007898:	d13e      	bne.n	8007918 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	d114      	bne.n	80078ce <UART_Transmit_IT+0x48>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d110      	bne.n	80078ce <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	881b      	ldrh	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	1c9a      	adds	r2, r3, #2
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	621a      	str	r2, [r3, #32]
 80078cc:	e008      	b.n	80078e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	1c59      	adds	r1, r3, #1
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	6211      	str	r1, [r2, #32]
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	3b01      	subs	r3, #1
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4619      	mov	r1, r3
 80078ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10f      	bne.n	8007914 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68da      	ldr	r2, [r3, #12]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007902:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68da      	ldr	r2, [r3, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007912:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68da      	ldr	r2, [r3, #12]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7ff fdbc 	bl	80074c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b22      	cmp	r3, #34	; 0x22
 8007968:	f040 8087 	bne.w	8007a7a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007974:	d117      	bne.n	80079a6 <UART_Receive_IT+0x50>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d113      	bne.n	80079a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007994:	b29a      	uxth	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799e:	1c9a      	adds	r2, r3, #2
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28
 80079a4:	e026      	b.n	80079f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d007      	beq.n	80079ca <UART_Receive_IT+0x74>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <UART_Receive_IT+0x82>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e008      	b.n	80079ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ee:	1c5a      	adds	r2, r3, #1
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4619      	mov	r1, r3
 8007a02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d136      	bne.n	8007a76 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f022 0220 	bic.w	r2, r2, #32
 8007a16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	695a      	ldr	r2, [r3, #20]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0201 	bic.w	r2, r2, #1
 8007a36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d10e      	bne.n	8007a66 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0210 	bic.w	r2, r2, #16
 8007a56:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7ff fd62 	bl	8007528 <HAL_UARTEx_RxEventCallback>
 8007a64:	e002      	b.n	8007a6c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fd40 	bl	80074ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	e002      	b.n	8007a7c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e000      	b.n	8007a7c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
  }
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	b09f      	sub	sp, #124	; 0x7c
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9a:	68d9      	ldr	r1, [r3, #12]
 8007a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	ea40 0301 	orr.w	r3, r0, r1
 8007aa4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007ac8:	f021 010c 	bic.w	r1, r1, #12
 8007acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae2:	6999      	ldr	r1, [r3, #24]
 8007ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	ea40 0301 	orr.w	r3, r0, r1
 8007aec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	4bc5      	ldr	r3, [pc, #788]	; (8007e08 <UART_SetConfig+0x384>)
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d004      	beq.n	8007b02 <UART_SetConfig+0x7e>
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	4bc3      	ldr	r3, [pc, #780]	; (8007e0c <UART_SetConfig+0x388>)
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d103      	bne.n	8007b0a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b02:	f7fe f8eb 	bl	8005cdc <HAL_RCC_GetPCLK2Freq>
 8007b06:	6778      	str	r0, [r7, #116]	; 0x74
 8007b08:	e002      	b.n	8007b10 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b0a:	f7fe f8d3 	bl	8005cb4 <HAL_RCC_GetPCLK1Freq>
 8007b0e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b18:	f040 80b6 	bne.w	8007c88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b1e:	461c      	mov	r4, r3
 8007b20:	f04f 0500 	mov.w	r5, #0
 8007b24:	4622      	mov	r2, r4
 8007b26:	462b      	mov	r3, r5
 8007b28:	1891      	adds	r1, r2, r2
 8007b2a:	6439      	str	r1, [r7, #64]	; 0x40
 8007b2c:	415b      	adcs	r3, r3
 8007b2e:	647b      	str	r3, [r7, #68]	; 0x44
 8007b30:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b34:	1912      	adds	r2, r2, r4
 8007b36:	eb45 0303 	adc.w	r3, r5, r3
 8007b3a:	f04f 0000 	mov.w	r0, #0
 8007b3e:	f04f 0100 	mov.w	r1, #0
 8007b42:	00d9      	lsls	r1, r3, #3
 8007b44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b48:	00d0      	lsls	r0, r2, #3
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	1911      	adds	r1, r2, r4
 8007b50:	6639      	str	r1, [r7, #96]	; 0x60
 8007b52:	416b      	adcs	r3, r5
 8007b54:	667b      	str	r3, [r7, #100]	; 0x64
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f04f 0300 	mov.w	r3, #0
 8007b60:	1891      	adds	r1, r2, r2
 8007b62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b64:	415b      	adcs	r3, r3
 8007b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007b70:	f7f9 f8e6 	bl	8000d40 <__aeabi_uldivmod>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	4ba5      	ldr	r3, [pc, #660]	; (8007e10 <UART_SetConfig+0x38c>)
 8007b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	011e      	lsls	r6, r3, #4
 8007b82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b84:	461c      	mov	r4, r3
 8007b86:	f04f 0500 	mov.w	r5, #0
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	1891      	adds	r1, r2, r2
 8007b90:	6339      	str	r1, [r7, #48]	; 0x30
 8007b92:	415b      	adcs	r3, r3
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
 8007b96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b9a:	1912      	adds	r2, r2, r4
 8007b9c:	eb45 0303 	adc.w	r3, r5, r3
 8007ba0:	f04f 0000 	mov.w	r0, #0
 8007ba4:	f04f 0100 	mov.w	r1, #0
 8007ba8:	00d9      	lsls	r1, r3, #3
 8007baa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bae:	00d0      	lsls	r0, r2, #3
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	1911      	adds	r1, r2, r4
 8007bb6:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bb8:	416b      	adcs	r3, r5
 8007bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	f04f 0300 	mov.w	r3, #0
 8007bc6:	1891      	adds	r1, r2, r2
 8007bc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8007bca:	415b      	adcs	r3, r3
 8007bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bd2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007bd6:	f7f9 f8b3 	bl	8000d40 <__aeabi_uldivmod>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	4b8c      	ldr	r3, [pc, #560]	; (8007e10 <UART_SetConfig+0x38c>)
 8007be0:	fba3 1302 	umull	r1, r3, r3, r2
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	2164      	movs	r1, #100	; 0x64
 8007be8:	fb01 f303 	mul.w	r3, r1, r3
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	3332      	adds	r3, #50	; 0x32
 8007bf2:	4a87      	ldr	r2, [pc, #540]	; (8007e10 <UART_SetConfig+0x38c>)
 8007bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c00:	441e      	add	r6, r3
 8007c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c04:	4618      	mov	r0, r3
 8007c06:	f04f 0100 	mov.w	r1, #0
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	1894      	adds	r4, r2, r2
 8007c10:	623c      	str	r4, [r7, #32]
 8007c12:	415b      	adcs	r3, r3
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
 8007c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c1a:	1812      	adds	r2, r2, r0
 8007c1c:	eb41 0303 	adc.w	r3, r1, r3
 8007c20:	f04f 0400 	mov.w	r4, #0
 8007c24:	f04f 0500 	mov.w	r5, #0
 8007c28:	00dd      	lsls	r5, r3, #3
 8007c2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c2e:	00d4      	lsls	r4, r2, #3
 8007c30:	4622      	mov	r2, r4
 8007c32:	462b      	mov	r3, r5
 8007c34:	1814      	adds	r4, r2, r0
 8007c36:	653c      	str	r4, [r7, #80]	; 0x50
 8007c38:	414b      	adcs	r3, r1
 8007c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	1891      	adds	r1, r2, r2
 8007c48:	61b9      	str	r1, [r7, #24]
 8007c4a:	415b      	adcs	r3, r3
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007c56:	f7f9 f873 	bl	8000d40 <__aeabi_uldivmod>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4b6c      	ldr	r3, [pc, #432]	; (8007e10 <UART_SetConfig+0x38c>)
 8007c60:	fba3 1302 	umull	r1, r3, r3, r2
 8007c64:	095b      	lsrs	r3, r3, #5
 8007c66:	2164      	movs	r1, #100	; 0x64
 8007c68:	fb01 f303 	mul.w	r3, r1, r3
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	3332      	adds	r3, #50	; 0x32
 8007c72:	4a67      	ldr	r2, [pc, #412]	; (8007e10 <UART_SetConfig+0x38c>)
 8007c74:	fba2 2303 	umull	r2, r3, r2, r3
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	f003 0207 	and.w	r2, r3, #7
 8007c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4432      	add	r2, r6
 8007c84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c86:	e0b9      	b.n	8007dfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c8a:	461c      	mov	r4, r3
 8007c8c:	f04f 0500 	mov.w	r5, #0
 8007c90:	4622      	mov	r2, r4
 8007c92:	462b      	mov	r3, r5
 8007c94:	1891      	adds	r1, r2, r2
 8007c96:	6139      	str	r1, [r7, #16]
 8007c98:	415b      	adcs	r3, r3
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ca0:	1912      	adds	r2, r2, r4
 8007ca2:	eb45 0303 	adc.w	r3, r5, r3
 8007ca6:	f04f 0000 	mov.w	r0, #0
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	00d9      	lsls	r1, r3, #3
 8007cb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cb4:	00d0      	lsls	r0, r2, #3
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	eb12 0804 	adds.w	r8, r2, r4
 8007cbe:	eb43 0905 	adc.w	r9, r3, r5
 8007cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f04f 0100 	mov.w	r1, #0
 8007ccc:	f04f 0200 	mov.w	r2, #0
 8007cd0:	f04f 0300 	mov.w	r3, #0
 8007cd4:	008b      	lsls	r3, r1, #2
 8007cd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cda:	0082      	lsls	r2, r0, #2
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f9 f82e 	bl	8000d40 <__aeabi_uldivmod>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	4b49      	ldr	r3, [pc, #292]	; (8007e10 <UART_SetConfig+0x38c>)
 8007cea:	fba3 2302 	umull	r2, r3, r3, r2
 8007cee:	095b      	lsrs	r3, r3, #5
 8007cf0:	011e      	lsls	r6, r3, #4
 8007cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	1894      	adds	r4, r2, r2
 8007d00:	60bc      	str	r4, [r7, #8]
 8007d02:	415b      	adcs	r3, r3
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d0a:	1812      	adds	r2, r2, r0
 8007d0c:	eb41 0303 	adc.w	r3, r1, r3
 8007d10:	f04f 0400 	mov.w	r4, #0
 8007d14:	f04f 0500 	mov.w	r5, #0
 8007d18:	00dd      	lsls	r5, r3, #3
 8007d1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d1e:	00d4      	lsls	r4, r2, #3
 8007d20:	4622      	mov	r2, r4
 8007d22:	462b      	mov	r3, r5
 8007d24:	1814      	adds	r4, r2, r0
 8007d26:	64bc      	str	r4, [r7, #72]	; 0x48
 8007d28:	414b      	adcs	r3, r1
 8007d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f04f 0100 	mov.w	r1, #0
 8007d36:	f04f 0200 	mov.w	r2, #0
 8007d3a:	f04f 0300 	mov.w	r3, #0
 8007d3e:	008b      	lsls	r3, r1, #2
 8007d40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007d44:	0082      	lsls	r2, r0, #2
 8007d46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007d4a:	f7f8 fff9 	bl	8000d40 <__aeabi_uldivmod>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4b2f      	ldr	r3, [pc, #188]	; (8007e10 <UART_SetConfig+0x38c>)
 8007d54:	fba3 1302 	umull	r1, r3, r3, r2
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	2164      	movs	r1, #100	; 0x64
 8007d5c:	fb01 f303 	mul.w	r3, r1, r3
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	3332      	adds	r3, #50	; 0x32
 8007d66:	4a2a      	ldr	r2, [pc, #168]	; (8007e10 <UART_SetConfig+0x38c>)
 8007d68:	fba2 2303 	umull	r2, r3, r2, r3
 8007d6c:	095b      	lsrs	r3, r3, #5
 8007d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d72:	441e      	add	r6, r3
 8007d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d76:	4618      	mov	r0, r3
 8007d78:	f04f 0100 	mov.w	r1, #0
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	1894      	adds	r4, r2, r2
 8007d82:	603c      	str	r4, [r7, #0]
 8007d84:	415b      	adcs	r3, r3
 8007d86:	607b      	str	r3, [r7, #4]
 8007d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d8c:	1812      	adds	r2, r2, r0
 8007d8e:	eb41 0303 	adc.w	r3, r1, r3
 8007d92:	f04f 0400 	mov.w	r4, #0
 8007d96:	f04f 0500 	mov.w	r5, #0
 8007d9a:	00dd      	lsls	r5, r3, #3
 8007d9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007da0:	00d4      	lsls	r4, r2, #3
 8007da2:	4622      	mov	r2, r4
 8007da4:	462b      	mov	r3, r5
 8007da6:	eb12 0a00 	adds.w	sl, r2, r0
 8007daa:	eb43 0b01 	adc.w	fp, r3, r1
 8007dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f04f 0100 	mov.w	r1, #0
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	008b      	lsls	r3, r1, #2
 8007dc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dc6:	0082      	lsls	r2, r0, #2
 8007dc8:	4650      	mov	r0, sl
 8007dca:	4659      	mov	r1, fp
 8007dcc:	f7f8 ffb8 	bl	8000d40 <__aeabi_uldivmod>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <UART_SetConfig+0x38c>)
 8007dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	2164      	movs	r1, #100	; 0x64
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	011b      	lsls	r3, r3, #4
 8007de6:	3332      	adds	r3, #50	; 0x32
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <UART_SetConfig+0x38c>)
 8007dea:	fba2 2303 	umull	r2, r3, r2, r3
 8007dee:	095b      	lsrs	r3, r3, #5
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4432      	add	r2, r6
 8007dfa:	609a      	str	r2, [r3, #8]
}
 8007dfc:	bf00      	nop
 8007dfe:	377c      	adds	r7, #124	; 0x7c
 8007e00:	46bd      	mov	sp, r7
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	bf00      	nop
 8007e08:	40011000 	.word	0x40011000
 8007e0c:	40011400 	.word	0x40011400
 8007e10:	51eb851f 	.word	0x51eb851f

08007e14 <calloc>:
 8007e14:	4b02      	ldr	r3, [pc, #8]	; (8007e20 <calloc+0xc>)
 8007e16:	460a      	mov	r2, r1
 8007e18:	4601      	mov	r1, r0
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	f000 b842 	b.w	8007ea4 <_calloc_r>
 8007e20:	20000044 	.word	0x20000044

08007e24 <__errno>:
 8007e24:	4b01      	ldr	r3, [pc, #4]	; (8007e2c <__errno+0x8>)
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000044 	.word	0x20000044

08007e30 <__libc_init_array>:
 8007e30:	b570      	push	{r4, r5, r6, lr}
 8007e32:	4d0d      	ldr	r5, [pc, #52]	; (8007e68 <__libc_init_array+0x38>)
 8007e34:	4c0d      	ldr	r4, [pc, #52]	; (8007e6c <__libc_init_array+0x3c>)
 8007e36:	1b64      	subs	r4, r4, r5
 8007e38:	10a4      	asrs	r4, r4, #2
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	42a6      	cmp	r6, r4
 8007e3e:	d109      	bne.n	8007e54 <__libc_init_array+0x24>
 8007e40:	4d0b      	ldr	r5, [pc, #44]	; (8007e70 <__libc_init_array+0x40>)
 8007e42:	4c0c      	ldr	r4, [pc, #48]	; (8007e74 <__libc_init_array+0x44>)
 8007e44:	f000 fd20 	bl	8008888 <_init>
 8007e48:	1b64      	subs	r4, r4, r5
 8007e4a:	10a4      	asrs	r4, r4, #2
 8007e4c:	2600      	movs	r6, #0
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	d105      	bne.n	8007e5e <__libc_init_array+0x2e>
 8007e52:	bd70      	pop	{r4, r5, r6, pc}
 8007e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e58:	4798      	blx	r3
 8007e5a:	3601      	adds	r6, #1
 8007e5c:	e7ee      	b.n	8007e3c <__libc_init_array+0xc>
 8007e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e62:	4798      	blx	r3
 8007e64:	3601      	adds	r6, #1
 8007e66:	e7f2      	b.n	8007e4e <__libc_init_array+0x1e>
 8007e68:	080088f0 	.word	0x080088f0
 8007e6c:	080088f0 	.word	0x080088f0
 8007e70:	080088f0 	.word	0x080088f0
 8007e74:	080088f4 	.word	0x080088f4

08007e78 <memcpy>:
 8007e78:	440a      	add	r2, r1
 8007e7a:	4291      	cmp	r1, r2
 8007e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e80:	d100      	bne.n	8007e84 <memcpy+0xc>
 8007e82:	4770      	bx	lr
 8007e84:	b510      	push	{r4, lr}
 8007e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	d1f9      	bne.n	8007e86 <memcpy+0xe>
 8007e92:	bd10      	pop	{r4, pc}

08007e94 <memset>:
 8007e94:	4402      	add	r2, r0
 8007e96:	4603      	mov	r3, r0
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d100      	bne.n	8007e9e <memset+0xa>
 8007e9c:	4770      	bx	lr
 8007e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007ea2:	e7f9      	b.n	8007e98 <memset+0x4>

08007ea4 <_calloc_r>:
 8007ea4:	b513      	push	{r0, r1, r4, lr}
 8007ea6:	434a      	muls	r2, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	9201      	str	r2, [sp, #4]
 8007eac:	f000 f80a 	bl	8007ec4 <_malloc_r>
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	b118      	cbz	r0, 8007ebc <_calloc_r+0x18>
 8007eb4:	9a01      	ldr	r2, [sp, #4]
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f7ff ffec 	bl	8007e94 <memset>
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	b002      	add	sp, #8
 8007ec0:	bd10      	pop	{r4, pc}
	...

08007ec4 <_malloc_r>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	1ccd      	adds	r5, r1, #3
 8007ec8:	f025 0503 	bic.w	r5, r5, #3
 8007ecc:	3508      	adds	r5, #8
 8007ece:	2d0c      	cmp	r5, #12
 8007ed0:	bf38      	it	cc
 8007ed2:	250c      	movcc	r5, #12
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	db01      	blt.n	8007ede <_malloc_r+0x1a>
 8007eda:	42a9      	cmp	r1, r5
 8007edc:	d903      	bls.n	8007ee6 <_malloc_r+0x22>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	6033      	str	r3, [r6, #0]
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ee6:	f000 f857 	bl	8007f98 <__malloc_lock>
 8007eea:	4921      	ldr	r1, [pc, #132]	; (8007f70 <_malloc_r+0xac>)
 8007eec:	680a      	ldr	r2, [r1, #0]
 8007eee:	4614      	mov	r4, r2
 8007ef0:	b99c      	cbnz	r4, 8007f1a <_malloc_r+0x56>
 8007ef2:	4f20      	ldr	r7, [pc, #128]	; (8007f74 <_malloc_r+0xb0>)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	b923      	cbnz	r3, 8007f02 <_malloc_r+0x3e>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	4630      	mov	r0, r6
 8007efc:	f000 f83c 	bl	8007f78 <_sbrk_r>
 8007f00:	6038      	str	r0, [r7, #0]
 8007f02:	4629      	mov	r1, r5
 8007f04:	4630      	mov	r0, r6
 8007f06:	f000 f837 	bl	8007f78 <_sbrk_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d123      	bne.n	8007f56 <_malloc_r+0x92>
 8007f0e:	230c      	movs	r3, #12
 8007f10:	6033      	str	r3, [r6, #0]
 8007f12:	4630      	mov	r0, r6
 8007f14:	f000 f846 	bl	8007fa4 <__malloc_unlock>
 8007f18:	e7e3      	b.n	8007ee2 <_malloc_r+0x1e>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	1b5b      	subs	r3, r3, r5
 8007f1e:	d417      	bmi.n	8007f50 <_malloc_r+0x8c>
 8007f20:	2b0b      	cmp	r3, #11
 8007f22:	d903      	bls.n	8007f2c <_malloc_r+0x68>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	441c      	add	r4, r3
 8007f28:	6025      	str	r5, [r4, #0]
 8007f2a:	e004      	b.n	8007f36 <_malloc_r+0x72>
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	42a2      	cmp	r2, r4
 8007f30:	bf0c      	ite	eq
 8007f32:	600b      	streq	r3, [r1, #0]
 8007f34:	6053      	strne	r3, [r2, #4]
 8007f36:	4630      	mov	r0, r6
 8007f38:	f000 f834 	bl	8007fa4 <__malloc_unlock>
 8007f3c:	f104 000b 	add.w	r0, r4, #11
 8007f40:	1d23      	adds	r3, r4, #4
 8007f42:	f020 0007 	bic.w	r0, r0, #7
 8007f46:	1ac2      	subs	r2, r0, r3
 8007f48:	d0cc      	beq.n	8007ee4 <_malloc_r+0x20>
 8007f4a:	1a1b      	subs	r3, r3, r0
 8007f4c:	50a3      	str	r3, [r4, r2]
 8007f4e:	e7c9      	b.n	8007ee4 <_malloc_r+0x20>
 8007f50:	4622      	mov	r2, r4
 8007f52:	6864      	ldr	r4, [r4, #4]
 8007f54:	e7cc      	b.n	8007ef0 <_malloc_r+0x2c>
 8007f56:	1cc4      	adds	r4, r0, #3
 8007f58:	f024 0403 	bic.w	r4, r4, #3
 8007f5c:	42a0      	cmp	r0, r4
 8007f5e:	d0e3      	beq.n	8007f28 <_malloc_r+0x64>
 8007f60:	1a21      	subs	r1, r4, r0
 8007f62:	4630      	mov	r0, r6
 8007f64:	f000 f808 	bl	8007f78 <_sbrk_r>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d1dd      	bne.n	8007f28 <_malloc_r+0x64>
 8007f6c:	e7cf      	b.n	8007f0e <_malloc_r+0x4a>
 8007f6e:	bf00      	nop
 8007f70:	20000210 	.word	0x20000210
 8007f74:	20000214 	.word	0x20000214

08007f78 <_sbrk_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	4d06      	ldr	r5, [pc, #24]	; (8007f94 <_sbrk_r+0x1c>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	4604      	mov	r4, r0
 8007f80:	4608      	mov	r0, r1
 8007f82:	602b      	str	r3, [r5, #0]
 8007f84:	f7fc f934 	bl	80041f0 <_sbrk>
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d102      	bne.n	8007f92 <_sbrk_r+0x1a>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	b103      	cbz	r3, 8007f92 <_sbrk_r+0x1a>
 8007f90:	6023      	str	r3, [r4, #0]
 8007f92:	bd38      	pop	{r3, r4, r5, pc}
 8007f94:	200004ac 	.word	0x200004ac

08007f98 <__malloc_lock>:
 8007f98:	4801      	ldr	r0, [pc, #4]	; (8007fa0 <__malloc_lock+0x8>)
 8007f9a:	f000 b809 	b.w	8007fb0 <__retarget_lock_acquire_recursive>
 8007f9e:	bf00      	nop
 8007fa0:	200004b4 	.word	0x200004b4

08007fa4 <__malloc_unlock>:
 8007fa4:	4801      	ldr	r0, [pc, #4]	; (8007fac <__malloc_unlock+0x8>)
 8007fa6:	f000 b804 	b.w	8007fb2 <__retarget_lock_release_recursive>
 8007faa:	bf00      	nop
 8007fac:	200004b4 	.word	0x200004b4

08007fb0 <__retarget_lock_acquire_recursive>:
 8007fb0:	4770      	bx	lr

08007fb2 <__retarget_lock_release_recursive>:
 8007fb2:	4770      	bx	lr

08007fb4 <powf>:
 8007fb4:	b508      	push	{r3, lr}
 8007fb6:	ed2d 8b04 	vpush	{d8-d9}
 8007fba:	eeb0 9a40 	vmov.f32	s18, s0
 8007fbe:	eef0 8a60 	vmov.f32	s17, s1
 8007fc2:	f000 f8b5 	bl	8008130 <__ieee754_powf>
 8007fc6:	4b43      	ldr	r3, [pc, #268]	; (80080d4 <powf+0x120>)
 8007fc8:	f993 3000 	ldrsb.w	r3, [r3]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	eeb0 8a40 	vmov.f32	s16, s0
 8007fd2:	d012      	beq.n	8007ffa <powf+0x46>
 8007fd4:	eef4 8a68 	vcmp.f32	s17, s17
 8007fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fdc:	d60d      	bvs.n	8007ffa <powf+0x46>
 8007fde:	eeb4 9a49 	vcmp.f32	s18, s18
 8007fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe6:	d70d      	bvc.n	8008004 <powf+0x50>
 8007fe8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ff4:	bf08      	it	eq
 8007ff6:	eeb0 8a67 	vmoveq.f32	s16, s15
 8007ffa:	eeb0 0a48 	vmov.f32	s0, s16
 8007ffe:	ecbd 8b04 	vpop	{d8-d9}
 8008002:	bd08      	pop	{r3, pc}
 8008004:	eddf 9a34 	vldr	s19, [pc, #208]	; 80080d8 <powf+0x124>
 8008008:	eeb4 9a69 	vcmp.f32	s18, s19
 800800c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008010:	d116      	bne.n	8008040 <powf+0x8c>
 8008012:	eef4 8a69 	vcmp.f32	s17, s19
 8008016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801a:	d057      	beq.n	80080cc <powf+0x118>
 800801c:	eeb0 0a68 	vmov.f32	s0, s17
 8008020:	f000 fb50 	bl	80086c4 <finitef>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0e8      	beq.n	8007ffa <powf+0x46>
 8008028:	eef4 8ae9 	vcmpe.f32	s17, s19
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d5e3      	bpl.n	8007ffa <powf+0x46>
 8008032:	f7ff fef7 	bl	8007e24 <__errno>
 8008036:	2321      	movs	r3, #33	; 0x21
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 80080dc <powf+0x128>
 800803e:	e7dc      	b.n	8007ffa <powf+0x46>
 8008040:	f000 fb40 	bl	80086c4 <finitef>
 8008044:	bb50      	cbnz	r0, 800809c <powf+0xe8>
 8008046:	eeb0 0a49 	vmov.f32	s0, s18
 800804a:	f000 fb3b 	bl	80086c4 <finitef>
 800804e:	b328      	cbz	r0, 800809c <powf+0xe8>
 8008050:	eeb0 0a68 	vmov.f32	s0, s17
 8008054:	f000 fb36 	bl	80086c4 <finitef>
 8008058:	b300      	cbz	r0, 800809c <powf+0xe8>
 800805a:	eeb4 8a48 	vcmp.f32	s16, s16
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008062:	d706      	bvc.n	8008072 <powf+0xbe>
 8008064:	f7ff fede 	bl	8007e24 <__errno>
 8008068:	2321      	movs	r3, #33	; 0x21
 800806a:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800806e:	6003      	str	r3, [r0, #0]
 8008070:	e7c3      	b.n	8007ffa <powf+0x46>
 8008072:	f7ff fed7 	bl	8007e24 <__errno>
 8008076:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800807a:	2322      	movs	r3, #34	; 0x22
 800807c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008080:	6003      	str	r3, [r0, #0]
 8008082:	d508      	bpl.n	8008096 <powf+0xe2>
 8008084:	eeb0 0a68 	vmov.f32	s0, s17
 8008088:	f000 fb30 	bl	80086ec <rintf>
 800808c:	eeb4 0a68 	vcmp.f32	s0, s17
 8008090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008094:	d1d1      	bne.n	800803a <powf+0x86>
 8008096:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80080e0 <powf+0x12c>
 800809a:	e7ae      	b.n	8007ffa <powf+0x46>
 800809c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80080a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a4:	d1a9      	bne.n	8007ffa <powf+0x46>
 80080a6:	eeb0 0a49 	vmov.f32	s0, s18
 80080aa:	f000 fb0b 	bl	80086c4 <finitef>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d0a3      	beq.n	8007ffa <powf+0x46>
 80080b2:	eeb0 0a68 	vmov.f32	s0, s17
 80080b6:	f000 fb05 	bl	80086c4 <finitef>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d09d      	beq.n	8007ffa <powf+0x46>
 80080be:	f7ff feb1 	bl	8007e24 <__errno>
 80080c2:	2322      	movs	r3, #34	; 0x22
 80080c4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80080d8 <powf+0x124>
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	e796      	b.n	8007ffa <powf+0x46>
 80080cc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80080d0:	e793      	b.n	8007ffa <powf+0x46>
 80080d2:	bf00      	nop
 80080d4:	200000a8 	.word	0x200000a8
 80080d8:	00000000 	.word	0x00000000
 80080dc:	ff800000 	.word	0xff800000
 80080e0:	7f800000 	.word	0x7f800000

080080e4 <sqrtf>:
 80080e4:	b508      	push	{r3, lr}
 80080e6:	ed2d 8b02 	vpush	{d8}
 80080ea:	eeb0 8a40 	vmov.f32	s16, s0
 80080ee:	f000 fadf 	bl	80086b0 <__ieee754_sqrtf>
 80080f2:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <sqrtf+0x44>)
 80080f4:	f993 3000 	ldrsb.w	r3, [r3]
 80080f8:	3301      	adds	r3, #1
 80080fa:	d011      	beq.n	8008120 <sqrtf+0x3c>
 80080fc:	eeb4 8a48 	vcmp.f32	s16, s16
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	d60c      	bvs.n	8008120 <sqrtf+0x3c>
 8008106:	eddf 8a09 	vldr	s17, [pc, #36]	; 800812c <sqrtf+0x48>
 800810a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800810e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008112:	d505      	bpl.n	8008120 <sqrtf+0x3c>
 8008114:	f7ff fe86 	bl	8007e24 <__errno>
 8008118:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800811c:	2321      	movs	r3, #33	; 0x21
 800811e:	6003      	str	r3, [r0, #0]
 8008120:	ecbd 8b02 	vpop	{d8}
 8008124:	bd08      	pop	{r3, pc}
 8008126:	bf00      	nop
 8008128:	200000a8 	.word	0x200000a8
 800812c:	00000000 	.word	0x00000000

08008130 <__ieee754_powf>:
 8008130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008134:	ee10 5a90 	vmov	r5, s1
 8008138:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800813c:	ed2d 8b02 	vpush	{d8}
 8008140:	eeb0 8a40 	vmov.f32	s16, s0
 8008144:	eef0 8a60 	vmov.f32	s17, s1
 8008148:	f000 8291 	beq.w	800866e <__ieee754_powf+0x53e>
 800814c:	ee10 8a10 	vmov	r8, s0
 8008150:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8008154:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008158:	dc06      	bgt.n	8008168 <__ieee754_powf+0x38>
 800815a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800815e:	dd0a      	ble.n	8008176 <__ieee754_powf+0x46>
 8008160:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8008164:	f000 8283 	beq.w	800866e <__ieee754_powf+0x53e>
 8008168:	ecbd 8b02 	vpop	{d8}
 800816c:	48d8      	ldr	r0, [pc, #864]	; (80084d0 <__ieee754_powf+0x3a0>)
 800816e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008172:	f000 bab5 	b.w	80086e0 <nanf>
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	da1f      	bge.n	80081bc <__ieee754_powf+0x8c>
 800817c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8008180:	da2e      	bge.n	80081e0 <__ieee754_powf+0xb0>
 8008182:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8008186:	f2c0 827b 	blt.w	8008680 <__ieee754_powf+0x550>
 800818a:	15fb      	asrs	r3, r7, #23
 800818c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8008190:	fa47 f603 	asr.w	r6, r7, r3
 8008194:	fa06 f303 	lsl.w	r3, r6, r3
 8008198:	42bb      	cmp	r3, r7
 800819a:	f040 8271 	bne.w	8008680 <__ieee754_powf+0x550>
 800819e:	f006 0601 	and.w	r6, r6, #1
 80081a2:	f1c6 0602 	rsb	r6, r6, #2
 80081a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80081aa:	d120      	bne.n	80081ee <__ieee754_powf+0xbe>
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	f280 8264 	bge.w	800867a <__ieee754_powf+0x54a>
 80081b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80081b6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80081ba:	e00d      	b.n	80081d8 <__ieee754_powf+0xa8>
 80081bc:	2600      	movs	r6, #0
 80081be:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80081c2:	d1f0      	bne.n	80081a6 <__ieee754_powf+0x76>
 80081c4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80081c8:	f000 8251 	beq.w	800866e <__ieee754_powf+0x53e>
 80081cc:	dd0a      	ble.n	80081e4 <__ieee754_powf+0xb4>
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	f280 8250 	bge.w	8008674 <__ieee754_powf+0x544>
 80081d4:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80084d4 <__ieee754_powf+0x3a4>
 80081d8:	ecbd 8b02 	vpop	{d8}
 80081dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e0:	2602      	movs	r6, #2
 80081e2:	e7ec      	b.n	80081be <__ieee754_powf+0x8e>
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	daf5      	bge.n	80081d4 <__ieee754_powf+0xa4>
 80081e8:	eeb1 0a68 	vneg.f32	s0, s17
 80081ec:	e7f4      	b.n	80081d8 <__ieee754_powf+0xa8>
 80081ee:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80081f2:	d102      	bne.n	80081fa <__ieee754_powf+0xca>
 80081f4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80081f8:	e7ee      	b.n	80081d8 <__ieee754_powf+0xa8>
 80081fa:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80081fe:	eeb0 0a48 	vmov.f32	s0, s16
 8008202:	d108      	bne.n	8008216 <__ieee754_powf+0xe6>
 8008204:	f1b8 0f00 	cmp.w	r8, #0
 8008208:	db05      	blt.n	8008216 <__ieee754_powf+0xe6>
 800820a:	ecbd 8b02 	vpop	{d8}
 800820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	f000 ba4d 	b.w	80086b0 <__ieee754_sqrtf>
 8008216:	f000 fa4e 	bl	80086b6 <fabsf>
 800821a:	b124      	cbz	r4, 8008226 <__ieee754_powf+0xf6>
 800821c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8008220:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8008224:	d117      	bne.n	8008256 <__ieee754_powf+0x126>
 8008226:	2d00      	cmp	r5, #0
 8008228:	bfbc      	itt	lt
 800822a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800822e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8008232:	f1b8 0f00 	cmp.w	r8, #0
 8008236:	dacf      	bge.n	80081d8 <__ieee754_powf+0xa8>
 8008238:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800823c:	ea54 0306 	orrs.w	r3, r4, r6
 8008240:	d104      	bne.n	800824c <__ieee754_powf+0x11c>
 8008242:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008246:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800824a:	e7c5      	b.n	80081d8 <__ieee754_powf+0xa8>
 800824c:	2e01      	cmp	r6, #1
 800824e:	d1c3      	bne.n	80081d8 <__ieee754_powf+0xa8>
 8008250:	eeb1 0a40 	vneg.f32	s0, s0
 8008254:	e7c0      	b.n	80081d8 <__ieee754_powf+0xa8>
 8008256:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800825a:	3801      	subs	r0, #1
 800825c:	ea56 0300 	orrs.w	r3, r6, r0
 8008260:	d104      	bne.n	800826c <__ieee754_powf+0x13c>
 8008262:	ee38 8a48 	vsub.f32	s16, s16, s16
 8008266:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800826a:	e7b5      	b.n	80081d8 <__ieee754_powf+0xa8>
 800826c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8008270:	dd6b      	ble.n	800834a <__ieee754_powf+0x21a>
 8008272:	4b99      	ldr	r3, [pc, #612]	; (80084d8 <__ieee754_powf+0x3a8>)
 8008274:	429c      	cmp	r4, r3
 8008276:	dc06      	bgt.n	8008286 <__ieee754_powf+0x156>
 8008278:	2d00      	cmp	r5, #0
 800827a:	daab      	bge.n	80081d4 <__ieee754_powf+0xa4>
 800827c:	ed9f 0a97 	vldr	s0, [pc, #604]	; 80084dc <__ieee754_powf+0x3ac>
 8008280:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008284:	e7a8      	b.n	80081d8 <__ieee754_powf+0xa8>
 8008286:	4b96      	ldr	r3, [pc, #600]	; (80084e0 <__ieee754_powf+0x3b0>)
 8008288:	429c      	cmp	r4, r3
 800828a:	dd02      	ble.n	8008292 <__ieee754_powf+0x162>
 800828c:	2d00      	cmp	r5, #0
 800828e:	dcf5      	bgt.n	800827c <__ieee754_powf+0x14c>
 8008290:	e7a0      	b.n	80081d4 <__ieee754_powf+0xa4>
 8008292:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008296:	ee30 0a67 	vsub.f32	s0, s0, s15
 800829a:	eddf 6a92 	vldr	s13, [pc, #584]	; 80084e4 <__ieee754_powf+0x3b4>
 800829e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80082a2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80082a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80082aa:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80082ae:	ee20 7a00 	vmul.f32	s14, s0, s0
 80082b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082b6:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80084e8 <__ieee754_powf+0x3b8>
 80082ba:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80082be:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80084ec <__ieee754_powf+0x3bc>
 80082c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80082c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80084f0 <__ieee754_powf+0x3c0>
 80082ca:	eef0 6a67 	vmov.f32	s13, s15
 80082ce:	eee0 6a07 	vfma.f32	s13, s0, s14
 80082d2:	ee16 3a90 	vmov	r3, s13
 80082d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80082da:	f023 030f 	bic.w	r3, r3, #15
 80082de:	ee00 3a90 	vmov	s1, r3
 80082e2:	eee0 0a47 	vfms.f32	s1, s0, s14
 80082e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80082ea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80082ee:	f025 050f 	bic.w	r5, r5, #15
 80082f2:	ee07 5a10 	vmov	s14, r5
 80082f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80082fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80082fe:	ee07 3a90 	vmov	s15, r3
 8008302:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008306:	3e01      	subs	r6, #1
 8008308:	ea56 0200 	orrs.w	r2, r6, r0
 800830c:	ee07 5a10 	vmov	s14, r5
 8008310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008314:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008318:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800831c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008320:	ee17 4a10 	vmov	r4, s14
 8008324:	bf08      	it	eq
 8008326:	eeb0 8a40 	vmoveq.f32	s16, s0
 800832a:	2c00      	cmp	r4, #0
 800832c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008330:	f340 8184 	ble.w	800863c <__ieee754_powf+0x50c>
 8008334:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8008338:	f340 80fc 	ble.w	8008534 <__ieee754_powf+0x404>
 800833c:	eddf 7a67 	vldr	s15, [pc, #412]	; 80084dc <__ieee754_powf+0x3ac>
 8008340:	ee28 0a27 	vmul.f32	s0, s16, s15
 8008344:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008348:	e746      	b.n	80081d8 <__ieee754_powf+0xa8>
 800834a:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800834e:	bf01      	itttt	eq
 8008350:	eddf 7a68 	vldreq	s15, [pc, #416]	; 80084f4 <__ieee754_powf+0x3c4>
 8008354:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8008358:	f06f 0217 	mvneq.w	r2, #23
 800835c:	ee17 4a90 	vmoveq	r4, s15
 8008360:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8008364:	bf18      	it	ne
 8008366:	2200      	movne	r2, #0
 8008368:	3b7f      	subs	r3, #127	; 0x7f
 800836a:	4413      	add	r3, r2
 800836c:	4a62      	ldr	r2, [pc, #392]	; (80084f8 <__ieee754_powf+0x3c8>)
 800836e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008372:	4294      	cmp	r4, r2
 8008374:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8008378:	dd06      	ble.n	8008388 <__ieee754_powf+0x258>
 800837a:	4a60      	ldr	r2, [pc, #384]	; (80084fc <__ieee754_powf+0x3cc>)
 800837c:	4294      	cmp	r4, r2
 800837e:	f340 80a4 	ble.w	80084ca <__ieee754_powf+0x39a>
 8008382:	3301      	adds	r3, #1
 8008384:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8008388:	2400      	movs	r4, #0
 800838a:	4a5d      	ldr	r2, [pc, #372]	; (8008500 <__ieee754_powf+0x3d0>)
 800838c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008390:	ee07 1a90 	vmov	s15, r1
 8008394:	ed92 7a00 	vldr	s14, [r2]
 8008398:	4a5a      	ldr	r2, [pc, #360]	; (8008504 <__ieee754_powf+0x3d4>)
 800839a:	ee37 6a27 	vadd.f32	s12, s14, s15
 800839e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80083a2:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80083a6:	1049      	asrs	r1, r1, #1
 80083a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80083ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80083b0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 80083b4:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80083b8:	ee06 1a10 	vmov	s12, r1
 80083bc:	ee65 4a26 	vmul.f32	s9, s10, s13
 80083c0:	ee36 7a47 	vsub.f32	s14, s12, s14
 80083c4:	ee14 7a90 	vmov	r7, s9
 80083c8:	4017      	ands	r7, r2
 80083ca:	ee05 7a90 	vmov	s11, r7
 80083ce:	eea5 5ac6 	vfms.f32	s10, s11, s12
 80083d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80083d6:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8008508 <__ieee754_powf+0x3d8>
 80083da:	eea5 5ae7 	vfms.f32	s10, s11, s15
 80083de:	ee64 7aa4 	vmul.f32	s15, s9, s9
 80083e2:	ee25 6a26 	vmul.f32	s12, s10, s13
 80083e6:	eddf 6a49 	vldr	s13, [pc, #292]	; 800850c <__ieee754_powf+0x3dc>
 80083ea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80083ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008510 <__ieee754_powf+0x3e0>
 80083f2:	eee7 6a27 	vfma.f32	s13, s14, s15
 80083f6:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80084e4 <__ieee754_powf+0x3b4>
 80083fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083fe:	eddf 6a45 	vldr	s13, [pc, #276]	; 8008514 <__ieee754_powf+0x3e4>
 8008402:	eee7 6a27 	vfma.f32	s13, s14, s15
 8008406:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8008518 <__ieee754_powf+0x3e8>
 800840a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800840e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8008412:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8008416:	ee66 6a86 	vmul.f32	s13, s13, s12
 800841a:	eee5 6a07 	vfma.f32	s13, s10, s14
 800841e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008422:	eef0 7a45 	vmov.f32	s15, s10
 8008426:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800842a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800842e:	ee17 1a90 	vmov	r1, s15
 8008432:	4011      	ands	r1, r2
 8008434:	ee07 1a90 	vmov	s15, r1
 8008438:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800843c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8008440:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008444:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008448:	eea6 7a27 	vfma.f32	s14, s12, s15
 800844c:	eeb0 6a47 	vmov.f32	s12, s14
 8008450:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008454:	ee16 1a10 	vmov	r1, s12
 8008458:	4011      	ands	r1, r2
 800845a:	ee06 1a90 	vmov	s13, r1
 800845e:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8008462:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800851c <__ieee754_powf+0x3ec>
 8008466:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008520 <__ieee754_powf+0x3f0>
 800846a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800846e:	ee06 1a10 	vmov	s12, r1
 8008472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008476:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008524 <__ieee754_powf+0x3f4>
 800847a:	492b      	ldr	r1, [pc, #172]	; (8008528 <__ieee754_powf+0x3f8>)
 800847c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8008480:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008484:	edd1 7a00 	vldr	s15, [r1]
 8008488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800848c:	ee07 3a90 	vmov	s15, r3
 8008490:	4b26      	ldr	r3, [pc, #152]	; (800852c <__ieee754_powf+0x3fc>)
 8008492:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008496:	eef0 7a47 	vmov.f32	s15, s14
 800849a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800849e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084a2:	edd4 0a00 	vldr	s1, [r4]
 80084a6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80084aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ae:	ee17 3a90 	vmov	r3, s15
 80084b2:	4013      	ands	r3, r2
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80084bc:	ee76 6ae0 	vsub.f32	s13, s13, s1
 80084c0:	eee6 6a65 	vfms.f32	s13, s12, s11
 80084c4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80084c8:	e70f      	b.n	80082ea <__ieee754_powf+0x1ba>
 80084ca:	2401      	movs	r4, #1
 80084cc:	e75d      	b.n	800838a <__ieee754_powf+0x25a>
 80084ce:	bf00      	nop
 80084d0:	080088c4 	.word	0x080088c4
 80084d4:	00000000 	.word	0x00000000
 80084d8:	3f7ffff7 	.word	0x3f7ffff7
 80084dc:	7149f2ca 	.word	0x7149f2ca
 80084e0:	3f800007 	.word	0x3f800007
 80084e4:	3eaaaaab 	.word	0x3eaaaaab
 80084e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80084ec:	36eca570 	.word	0x36eca570
 80084f0:	3fb8aa00 	.word	0x3fb8aa00
 80084f4:	4b800000 	.word	0x4b800000
 80084f8:	001cc471 	.word	0x001cc471
 80084fc:	005db3d6 	.word	0x005db3d6
 8008500:	080088c8 	.word	0x080088c8
 8008504:	fffff000 	.word	0xfffff000
 8008508:	3e6c3255 	.word	0x3e6c3255
 800850c:	3e53f142 	.word	0x3e53f142
 8008510:	3e8ba305 	.word	0x3e8ba305
 8008514:	3edb6db7 	.word	0x3edb6db7
 8008518:	3f19999a 	.word	0x3f19999a
 800851c:	3f76384f 	.word	0x3f76384f
 8008520:	3f763800 	.word	0x3f763800
 8008524:	369dc3a0 	.word	0x369dc3a0
 8008528:	080088d8 	.word	0x080088d8
 800852c:	080088d0 	.word	0x080088d0
 8008530:	3338aa3c 	.word	0x3338aa3c
 8008534:	f040 8092 	bne.w	800865c <__ieee754_powf+0x52c>
 8008538:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8008530 <__ieee754_powf+0x400>
 800853c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008540:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8008544:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800854c:	f73f aef6 	bgt.w	800833c <__ieee754_powf+0x20c>
 8008550:	15db      	asrs	r3, r3, #23
 8008552:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008556:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800855a:	4103      	asrs	r3, r0
 800855c:	4423      	add	r3, r4
 800855e:	4949      	ldr	r1, [pc, #292]	; (8008684 <__ieee754_powf+0x554>)
 8008560:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008564:	3a7f      	subs	r2, #127	; 0x7f
 8008566:	4111      	asrs	r1, r2
 8008568:	ea23 0101 	bic.w	r1, r3, r1
 800856c:	ee07 1a10 	vmov	s14, r1
 8008570:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8008574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008578:	f1c2 0217 	rsb	r2, r2, #23
 800857c:	4110      	asrs	r0, r2
 800857e:	2c00      	cmp	r4, #0
 8008580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008584:	bfb8      	it	lt
 8008586:	4240      	neglt	r0, r0
 8008588:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800858c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8008688 <__ieee754_powf+0x558>
 8008590:	ee17 3a10 	vmov	r3, s14
 8008594:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008598:	f023 030f 	bic.w	r3, r3, #15
 800859c:	ee07 3a10 	vmov	s14, r3
 80085a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80085a8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800868c <__ieee754_powf+0x55c>
 80085ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80085b4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8008690 <__ieee754_powf+0x560>
 80085b8:	eeb0 0a67 	vmov.f32	s0, s15
 80085bc:	eea7 0a26 	vfma.f32	s0, s14, s13
 80085c0:	eeb0 6a40 	vmov.f32	s12, s0
 80085c4:	eea7 6a66 	vfms.f32	s12, s14, s13
 80085c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80085cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80085d0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8008694 <__ieee754_powf+0x564>
 80085d4:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8008698 <__ieee754_powf+0x568>
 80085d8:	eea7 6a26 	vfma.f32	s12, s14, s13
 80085dc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800869c <__ieee754_powf+0x56c>
 80085e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80085e4:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80086a0 <__ieee754_powf+0x570>
 80085e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 80085ec:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80086a4 <__ieee754_powf+0x574>
 80085f0:	eee6 6a07 	vfma.f32	s13, s12, s14
 80085f4:	eeb0 6a40 	vmov.f32	s12, s0
 80085f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80085fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008600:	eeb0 7a46 	vmov.f32	s14, s12
 8008604:	ee77 6a66 	vsub.f32	s13, s14, s13
 8008608:	ee20 6a06 	vmul.f32	s12, s0, s12
 800860c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008610:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008618:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800861c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008620:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008624:	ee10 3a10 	vmov	r3, s0
 8008628:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800862c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008630:	da1a      	bge.n	8008668 <__ieee754_powf+0x538>
 8008632:	f000 f8b7 	bl	80087a4 <scalbnf>
 8008636:	ee20 0a08 	vmul.f32	s0, s0, s16
 800863a:	e5cd      	b.n	80081d8 <__ieee754_powf+0xa8>
 800863c:	4a1a      	ldr	r2, [pc, #104]	; (80086a8 <__ieee754_powf+0x578>)
 800863e:	4293      	cmp	r3, r2
 8008640:	dd02      	ble.n	8008648 <__ieee754_powf+0x518>
 8008642:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80086ac <__ieee754_powf+0x57c>
 8008646:	e67b      	b.n	8008340 <__ieee754_powf+0x210>
 8008648:	d108      	bne.n	800865c <__ieee754_powf+0x52c>
 800864a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800864e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8008652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008656:	f6ff af7b 	blt.w	8008550 <__ieee754_powf+0x420>
 800865a:	e7f2      	b.n	8008642 <__ieee754_powf+0x512>
 800865c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008660:	f73f af76 	bgt.w	8008550 <__ieee754_powf+0x420>
 8008664:	2000      	movs	r0, #0
 8008666:	e78f      	b.n	8008588 <__ieee754_powf+0x458>
 8008668:	ee00 3a10 	vmov	s0, r3
 800866c:	e7e3      	b.n	8008636 <__ieee754_powf+0x506>
 800866e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008672:	e5b1      	b.n	80081d8 <__ieee754_powf+0xa8>
 8008674:	eeb0 0a68 	vmov.f32	s0, s17
 8008678:	e5ae      	b.n	80081d8 <__ieee754_powf+0xa8>
 800867a:	eeb0 0a48 	vmov.f32	s0, s16
 800867e:	e5ab      	b.n	80081d8 <__ieee754_powf+0xa8>
 8008680:	2600      	movs	r6, #0
 8008682:	e590      	b.n	80081a6 <__ieee754_powf+0x76>
 8008684:	007fffff 	.word	0x007fffff
 8008688:	3f317218 	.word	0x3f317218
 800868c:	35bfbe8c 	.word	0x35bfbe8c
 8008690:	3f317200 	.word	0x3f317200
 8008694:	3331bb4c 	.word	0x3331bb4c
 8008698:	b5ddea0e 	.word	0xb5ddea0e
 800869c:	388ab355 	.word	0x388ab355
 80086a0:	bb360b61 	.word	0xbb360b61
 80086a4:	3e2aaaab 	.word	0x3e2aaaab
 80086a8:	43160000 	.word	0x43160000
 80086ac:	0da24260 	.word	0x0da24260

080086b0 <__ieee754_sqrtf>:
 80086b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80086b4:	4770      	bx	lr

080086b6 <fabsf>:
 80086b6:	ee10 3a10 	vmov	r3, s0
 80086ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086be:	ee00 3a10 	vmov	s0, r3
 80086c2:	4770      	bx	lr

080086c4 <finitef>:
 80086c4:	b082      	sub	sp, #8
 80086c6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80086ca:	9801      	ldr	r0, [sp, #4]
 80086cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80086d0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80086d4:	bfac      	ite	ge
 80086d6:	2000      	movge	r0, #0
 80086d8:	2001      	movlt	r0, #1
 80086da:	b002      	add	sp, #8
 80086dc:	4770      	bx	lr
	...

080086e0 <nanf>:
 80086e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086e8 <nanf+0x8>
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	7fc00000 	.word	0x7fc00000

080086ec <rintf>:
 80086ec:	ee10 2a10 	vmov	r2, s0
 80086f0:	b513      	push	{r0, r1, r4, lr}
 80086f2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80086f6:	397f      	subs	r1, #127	; 0x7f
 80086f8:	2916      	cmp	r1, #22
 80086fa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80086fe:	dc47      	bgt.n	8008790 <rintf+0xa4>
 8008700:	b32b      	cbz	r3, 800874e <rintf+0x62>
 8008702:	2900      	cmp	r1, #0
 8008704:	ee10 3a10 	vmov	r3, s0
 8008708:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800870c:	da21      	bge.n	8008752 <rintf+0x66>
 800870e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8008712:	425b      	negs	r3, r3
 8008714:	4921      	ldr	r1, [pc, #132]	; (800879c <rintf+0xb0>)
 8008716:	0a5b      	lsrs	r3, r3, #9
 8008718:	0d12      	lsrs	r2, r2, #20
 800871a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800871e:	0512      	lsls	r2, r2, #20
 8008720:	4313      	orrs	r3, r2
 8008722:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8008726:	ee07 3a90 	vmov	s15, r3
 800872a:	edd1 6a00 	vldr	s13, [r1]
 800872e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8008732:	ed8d 7a01 	vstr	s14, [sp, #4]
 8008736:	eddd 7a01 	vldr	s15, [sp, #4]
 800873a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800873e:	ee17 3a90 	vmov	r3, s15
 8008742:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008746:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800874a:	ee00 3a10 	vmov	s0, r3
 800874e:	b002      	add	sp, #8
 8008750:	bd10      	pop	{r4, pc}
 8008752:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <rintf+0xb4>)
 8008754:	410a      	asrs	r2, r1
 8008756:	4213      	tst	r3, r2
 8008758:	d0f9      	beq.n	800874e <rintf+0x62>
 800875a:	0854      	lsrs	r4, r2, #1
 800875c:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8008760:	d006      	beq.n	8008770 <rintf+0x84>
 8008762:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008766:	ea23 0304 	bic.w	r3, r3, r4
 800876a:	fa42 f101 	asr.w	r1, r2, r1
 800876e:	430b      	orrs	r3, r1
 8008770:	4a0a      	ldr	r2, [pc, #40]	; (800879c <rintf+0xb0>)
 8008772:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8008776:	ed90 7a00 	vldr	s14, [r0]
 800877a:	ee07 3a90 	vmov	s15, r3
 800877e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008782:	edcd 7a01 	vstr	s15, [sp, #4]
 8008786:	ed9d 0a01 	vldr	s0, [sp, #4]
 800878a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800878e:	e7de      	b.n	800874e <rintf+0x62>
 8008790:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008794:	d3db      	bcc.n	800874e <rintf+0x62>
 8008796:	ee30 0a00 	vadd.f32	s0, s0, s0
 800879a:	e7d8      	b.n	800874e <rintf+0x62>
 800879c:	080088e0 	.word	0x080088e0
 80087a0:	007fffff 	.word	0x007fffff

080087a4 <scalbnf>:
 80087a4:	ee10 3a10 	vmov	r3, s0
 80087a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80087ac:	d025      	beq.n	80087fa <scalbnf+0x56>
 80087ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80087b2:	d302      	bcc.n	80087ba <scalbnf+0x16>
 80087b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80087b8:	4770      	bx	lr
 80087ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80087be:	d122      	bne.n	8008806 <scalbnf+0x62>
 80087c0:	4b2a      	ldr	r3, [pc, #168]	; (800886c <scalbnf+0xc8>)
 80087c2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8008870 <scalbnf+0xcc>
 80087c6:	4298      	cmp	r0, r3
 80087c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80087cc:	db16      	blt.n	80087fc <scalbnf+0x58>
 80087ce:	ee10 3a10 	vmov	r3, s0
 80087d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80087d6:	3a19      	subs	r2, #25
 80087d8:	4402      	add	r2, r0
 80087da:	2afe      	cmp	r2, #254	; 0xfe
 80087dc:	dd15      	ble.n	800880a <scalbnf+0x66>
 80087de:	ee10 3a10 	vmov	r3, s0
 80087e2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8008874 <scalbnf+0xd0>
 80087e6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008878 <scalbnf+0xd4>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	eeb0 7a67 	vmov.f32	s14, s15
 80087f0:	bfb8      	it	lt
 80087f2:	eef0 7a66 	vmovlt.f32	s15, s13
 80087f6:	ee27 0a27 	vmul.f32	s0, s14, s15
 80087fa:	4770      	bx	lr
 80087fc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800887c <scalbnf+0xd8>
 8008800:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008804:	4770      	bx	lr
 8008806:	0dd2      	lsrs	r2, r2, #23
 8008808:	e7e6      	b.n	80087d8 <scalbnf+0x34>
 800880a:	2a00      	cmp	r2, #0
 800880c:	dd06      	ble.n	800881c <scalbnf+0x78>
 800880e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008812:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008816:	ee00 3a10 	vmov	s0, r3
 800881a:	4770      	bx	lr
 800881c:	f112 0f16 	cmn.w	r2, #22
 8008820:	da1a      	bge.n	8008858 <scalbnf+0xb4>
 8008822:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008826:	4298      	cmp	r0, r3
 8008828:	ee10 3a10 	vmov	r3, s0
 800882c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008830:	dd0a      	ble.n	8008848 <scalbnf+0xa4>
 8008832:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8008874 <scalbnf+0xd0>
 8008836:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8008878 <scalbnf+0xd4>
 800883a:	eef0 7a40 	vmov.f32	s15, s0
 800883e:	2b00      	cmp	r3, #0
 8008840:	bf18      	it	ne
 8008842:	eeb0 0a47 	vmovne.f32	s0, s14
 8008846:	e7db      	b.n	8008800 <scalbnf+0x5c>
 8008848:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800887c <scalbnf+0xd8>
 800884c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8008880 <scalbnf+0xdc>
 8008850:	eef0 7a40 	vmov.f32	s15, s0
 8008854:	2b00      	cmp	r3, #0
 8008856:	e7f3      	b.n	8008840 <scalbnf+0x9c>
 8008858:	3219      	adds	r2, #25
 800885a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800885e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8008862:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008884 <scalbnf+0xe0>
 8008866:	ee07 3a10 	vmov	s14, r3
 800886a:	e7c4      	b.n	80087f6 <scalbnf+0x52>
 800886c:	ffff3cb0 	.word	0xffff3cb0
 8008870:	4c000000 	.word	0x4c000000
 8008874:	7149f2ca 	.word	0x7149f2ca
 8008878:	f149f2ca 	.word	0xf149f2ca
 800887c:	0da24260 	.word	0x0da24260
 8008880:	8da24260 	.word	0x8da24260
 8008884:	33000000 	.word	0x33000000

08008888 <_init>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr

08008894 <_fini>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr
