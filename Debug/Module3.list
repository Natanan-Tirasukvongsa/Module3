
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004964  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004afc  08004afc  00014afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b38  08004b38  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b40  08004b40  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00014b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b44  08004b44  00014b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000090  08004bd8  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004bd8  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bfd6  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196d  00000000  00000000  0002c096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e83  00000000  00000000  0002f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb3d  00000000  00000000  00044fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d62b  00000000  00000000  00050ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de10b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  000de160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004ae4 	.word	0x08004ae4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08004ae4 	.word	0x08004ae4

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006f0:	ed2d 8b02 	vpush	{d8}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 fa3f 	bl	8001b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f8f3 	bl	80008e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 faa3 	bl	8000c48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fa77 	bl	8000bf4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000706:	f000 f955 	bl	80009b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800070a:	f000 f9fd 	bl	8000b08 <MX_TIM3_Init>
  MX_TIM2_Init();
 800070e:	f000 f9a9 	bl	8000a64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000712:	4862      	ldr	r0, [pc, #392]	; (800089c <main+0x1b0>)
 8000714:	f002 fa94 	bl	8002c40 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000718:	213c      	movs	r1, #60	; 0x3c
 800071a:	4861      	ldr	r0, [pc, #388]	; (80008a0 <main+0x1b4>)
 800071c:	f002 fca2 	bl	8003064 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 8000720:	4860      	ldr	r0, [pc, #384]	; (80008a4 <main+0x1b8>)
 8000722:	f002 fa33 	bl	8002b8c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000726:	210c      	movs	r1, #12
 8000728:	485e      	ldr	r0, [pc, #376]	; (80008a4 <main+0x1b8>)
 800072a:	f002 fb45 	bl	8002db8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (micros() - Time_Velocity_Stamp >= 100)
 800072e:	f001 f85d 	bl	80017ec <micros>
 8000732:	4b5d      	ldr	r3, [pc, #372]	; (80008a8 <main+0x1bc>)
 8000734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0503 	sbc.w	r5, r1, r3
 800073e:	2d00      	cmp	r5, #0
 8000740:	bf08      	it	eq
 8000742:	2c64      	cmpeq	r4, #100	; 0x64
 8000744:	d31a      	bcc.n	800077c <main+0x90>
	  {
		  Time_Velocity_Stamp = micros();
 8000746:	f001 f851 	bl	80017ec <micros>
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	4956      	ldr	r1, [pc, #344]	; (80008a8 <main+0x1bc>)
 8000750:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Encoder = (Velocity_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 8000754:	4b55      	ldr	r3, [pc, #340]	; (80008ac <main+0x1c0>)
 8000756:	edd3 7a00 	vldr	s15, [r3]
 800075a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80008b0 <main+0x1c4>
 800075e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000762:	f000 fb29 	bl	8000db8 <Encoder_Velocity_Update>
 8000766:	eef0 7a40 	vmov.f32	s15, s0
 800076a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800076e:	eddf 6a51 	vldr	s13, [pc, #324]	; 80008b4 <main+0x1c8>
 8000772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000776:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <main+0x1c0>)
 8000778:	edc3 7a00 	vstr	s15, [r3]

	  }
	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 800077c:	f001 f836 	bl	80017ec <micros>
 8000780:	4b4d      	ldr	r3, [pc, #308]	; (80008b8 <main+0x1cc>)
 8000782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000786:	ebb0 0802 	subs.w	r8, r0, r2
 800078a:	eb61 0903 	sbc.w	r9, r1, r3
 800078e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	454b      	cmp	r3, r9
 8000798:	bf08      	it	eq
 800079a:	4542      	cmpeq	r2, r8
 800079c:	d2c7      	bcs.n	800072e <main+0x42>
	  {

			Time_Sampling_Stamp = micros();
 800079e:	f001 f825 	bl	80017ec <micros>
 80007a2:	4602      	mov	r2, r0
 80007a4:	460b      	mov	r3, r1
 80007a6:	4944      	ldr	r1, [pc, #272]	; (80008b8 <main+0x1cc>)
 80007a8:	e9c1 2300 	strd	r2, r3, [r1]
			Position_Encoder = htim1.Instance->CNT; //Read Encoder
 80007ac:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <main+0x1b4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ba:	4b40      	ldr	r3, [pc, #256]	; (80008bc <main+0x1d0>)
 80007bc:	edc3 7a00 	vstr	s15, [r3]
			Position_Now_Degree = (Position_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 80007c0:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <main+0x1d0>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80008c0 <main+0x1d4>
 80007ca:	ee67 6a87 	vmul.f32	s13, s15, s14
 80007ce:	4b3d      	ldr	r3, [pc, #244]	; (80008c4 <main+0x1d8>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007de:	4b3a      	ldr	r3, [pc, #232]	; (80008c8 <main+0x1dc>)
 80007e0:	edc3 7a00 	vstr	s15, [r3]
			if (Distance_Calculated == 0) //Distance not calculated and not arrive at next station
 80007e4:	4b39      	ldr	r3, [pc, #228]	; (80008cc <main+0x1e0>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <main+0x106>
			{
				Distance_Calculation();		//Calculate distance
 80007ec:	f000 fc42 	bl	8001074 <Distance_Calculation>
 80007f0:	e02d      	b.n	800084e <main+0x162>
			}
			else if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree) && (Trajectory_Flag < 5)) //Distance calculated and not arrive at next station
 80007f2:	4b36      	ldr	r3, [pc, #216]	; (80008cc <main+0x1e0>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d129      	bne.n	800084e <main+0x162>
 80007fa:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <main+0x1dc>)
 80007fc:	ed93 7a00 	vldr	s14, [r3]
 8000800:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <main+0x1e4>)
 8000802:	edd3 7a00 	vldr	s15, [r3]
 8000806:	eeb4 7a67 	vcmp.f32	s14, s15
 800080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080e:	d01e      	beq.n	800084e <main+0x162>
 8000810:	4b30      	ldr	r3, [pc, #192]	; (80008d4 <main+0x1e8>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2b04      	cmp	r3, #4
 8000816:	d81a      	bhi.n	800084e <main+0x162>
			{
				Trajectory_Generation();	//Get Velocity_Want_RPM
 8000818:	f000 fd66 	bl	80012e8 <Trajectory_Generation>
				Velocity_Control();
 800081c:	f000 fb72 	bl	8000f04 <Velocity_Control>
				Motor_Drive_PWM();			//Drive
 8000820:	f000 fb2a 	bl	8000e78 <Motor_Drive_PWM>

				if(Trajectory_Flag == 4)
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <main+0x1e8>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2b04      	cmp	r3, #4
 800082a:	d110      	bne.n	800084e <main+0x162>
				{
					if(Distance_Length == 0)
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <main+0x1ec>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d103      	bne.n	800083c <main+0x150>
					{
						Trajectory_Flag = 5;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <main+0x1e8>)
 8000836:	2205      	movs	r2, #5
 8000838:	801a      	strh	r2, [r3, #0]
 800083a:	e008      	b.n	800084e <main+0x162>
					}
					else if (Distance_Length == 1)
 800083c:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <main+0x1ec>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d104      	bne.n	800084e <main+0x162>
					{
						Distance_Calculation();
 8000844:	f000 fc16 	bl	8001074 <Distance_Calculation>
						Trajectory_Flag = 0;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <main+0x1e8>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]


			}


			if (Trajectory_Flag == 5)		//Reach next station
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <main+0x1e8>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	2b05      	cmp	r3, #5
 8000854:	d11c      	bne.n	8000890 <main+0x1a4>
			{
				if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <main+0x1f0>)
 8000858:	ed93 7a00 	vldr	s14, [r3]
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <main+0x1e4>)
 800085e:	edd3 7a00 	vldr	s15, [r3]
 8000862:	eeb4 7a67 	vcmp.f32	s14, s15
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	d009      	beq.n	8000880 <main+0x194>
				{
					Trajectory_Flag = 0;	//Reset flag
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <main+0x1e8>)
 800086e:	2200      	movs	r2, #0
 8000870:	801a      	strh	r2, [r3, #0]
					Distance_Calculated = 0;//Reset distance
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <main+0x1e0>)
 8000874:	2200      	movs	r2, #0
 8000876:	801a      	strh	r2, [r3, #0]
					Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 8000878:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <main+0x1f4>)
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
				}
				Velocity_Want_RPM = 0;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <main+0x1f4>)
 8000882:	f04f 0200 	mov.w	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
				Velocity_Control();
 8000888:	f000 fb3c 	bl	8000f04 <Velocity_Control>
				Motor_Drive_PWM();			//Drive
 800088c:	f000 faf4 	bl	8000e78 <Motor_Drive_PWM>

			}
			Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <main+0x1e4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <main+0x1f0>)
 8000896:	6013      	str	r3, [r2, #0]
	  if (micros() - Time_Velocity_Stamp >= 100)
 8000898:	e749      	b.n	800072e <main+0x42>
 800089a:	bf00      	nop
 800089c:	200001fc 	.word	0x200001fc
 80008a0:	200001b4 	.word	0x200001b4
 80008a4:	2000016c 	.word	0x2000016c
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	200000d4 	.word	0x200000d4
 80008b0:	461c3c00 	.word	0x461c3c00
 80008b4:	461c4000 	.word	0x461c4000
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	200000f4 	.word	0x200000f4
 80008c0:	43b40000 	.word	0x43b40000
 80008c4:	20000000 	.word	0x20000000
 80008c8:	200000f8 	.word	0x200000f8
 80008cc:	200000d2 	.word	0x200000d2
 80008d0:	20000014 	.word	0x20000014
 80008d4:	2000014c 	.word	0x2000014c
 80008d8:	200000d0 	.word	0x200000d0
 80008dc:	200000fc 	.word	0x200000fc
 80008e0:	20000008 	.word	0x20000008

080008e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b094      	sub	sp, #80	; 0x50
 80008e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2230      	movs	r2, #48	; 0x30
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 fc84 	bl	8004200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <SystemClock_Config+0xc8>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	4a26      	ldr	r2, [pc, #152]	; (80009ac <SystemClock_Config+0xc8>)
 8000912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000916:	6413      	str	r3, [r2, #64]	; 0x40
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <SystemClock_Config+0xc8>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <SystemClock_Config+0xcc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a20      	ldr	r2, [pc, #128]	; (80009b0 <SystemClock_Config+0xcc>)
 800092e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000932:	6013      	str	r3, [r2, #0]
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <SystemClock_Config+0xcc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2310      	movs	r3, #16
 800094a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000954:	2308      	movs	r3, #8
 8000956:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000958:	2364      	movs	r3, #100	; 0x64
 800095a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800095c:	2302      	movs	r3, #2
 800095e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4618      	mov	r0, r3
 800096a:	f001 fc4b 	bl	8002204 <HAL_RCC_OscConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000974:	f000 ff54 	bl	8001820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000978:	230f      	movs	r3, #15
 800097a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097c:	2302      	movs	r3, #2
 800097e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2103      	movs	r1, #3
 8000994:	4618      	mov	r0, r3
 8000996:	f001 fead 	bl	80026f4 <HAL_RCC_ClockConfig>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009a0:	f000 ff3e 	bl	8001820 <Error_Handler>
  }
}
 80009a4:	bf00      	nop
 80009a6:	3750      	adds	r7, #80	; 0x50
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009ba:	f107 030c 	add.w	r3, r7, #12
 80009be:	2224      	movs	r2, #36	; 0x24
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fc1c 	bl	8004200 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009d2:	4a23      	ldr	r2, [pc, #140]	; (8000a60 <MX_TIM1_Init+0xac>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80009e2:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009e4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80009e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009f0:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <MX_TIM1_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009fc:	2303      	movs	r3, #3
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a04:	2301      	movs	r3, #1
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a14:	2301      	movs	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_TIM1_Init+0xa8>)
 8000a28:	f002 fa76 	bl	8002f18 <HAL_TIM_Encoder_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a32:	f000 fef5 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	4619      	mov	r1, r3
 8000a42:	4806      	ldr	r0, [pc, #24]	; (8000a5c <MX_TIM1_Init+0xa8>)
 8000a44:	f003 f91a 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a4e:	f000 fee7 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	; 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200001b4 	.word	0x200001b4
 8000a60:	40010000 	.word	0x40010000

08000a64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000a82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000a8a:	2263      	movs	r2, #99	; 0x63
 8000a8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000a96:	f04f 32ff 	mov.w	r2, #4294967295
 8000a9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aa8:	4816      	ldr	r0, [pc, #88]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000aaa:	f002 f81f 	bl	8002aec <HAL_TIM_Base_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ab4:	f000 feb4 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480f      	ldr	r0, [pc, #60]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000ac6:	f002 fd21 	bl	800350c <HAL_TIM_ConfigClockSource>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad0:	f000 fea6 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000ae2:	f003 f8cb 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aec:	f000 fe98 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <MX_TIM2_Init+0xa0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f06f 0201 	mvn.w	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200001fc 	.word	0x200001fc

08000b08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1c:	f107 0320 	add.w	r3, r7, #32
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b38:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b3a:	4a2d      	ldr	r2, [pc, #180]	; (8000bf0 <MX_TIM3_Init+0xe8>)
 8000b3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b29      	ldr	r3, [pc, #164]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b5e:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b60:	f001 ffc4 	bl	8002aec <HAL_TIM_Base_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b6a:	f000 fe59 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	481c      	ldr	r0, [pc, #112]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b7c:	f002 fcc6 	bl	800350c <HAL_TIM_ConfigClockSource>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b86:	f000 fe4b 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000b8c:	f002 f8ba 	bl	8002d04 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b96:	f000 fe43 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000baa:	f003 f867 	bl	8003c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bb4:	f000 fe34 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb8:	2360      	movs	r3, #96	; 0x60
 8000bba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	220c      	movs	r2, #12
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000bd0:	f002 fbde 	bl	8003390 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000bda:	f000 fe21 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM3_Init+0xe4>)
 8000be0:	f000 fed0 	bl	8001984 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3738      	adds	r7, #56	; 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000016c 	.word	0x2000016c
 8000bf0:	40000400 	.word	0x40000400

08000bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART2_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART2_UART_Init+0x4c>)
 8000c2c:	f003 f8a8 	bl	8003d80 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 fdf3 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000244 	.word	0x20000244
 8000c44:	40004400 	.word	0x40004400

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a4f      	ldr	r2, [pc, #316]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a48      	ldr	r2, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b46      	ldr	r3, [pc, #280]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
 8000cb6:	4b3b      	ldr	r3, [pc, #236]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a3a      	ldr	r2, [pc, #232]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x15c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2120      	movs	r1, #32
 8000cd2:	4835      	ldr	r0, [pc, #212]	; (8000da8 <MX_GPIO_Init+0x160>)
 8000cd4:	f001 fa58 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cde:	4833      	ldr	r0, [pc, #204]	; (8000dac <MX_GPIO_Init+0x164>)
 8000ce0:	f001 fa52 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <MX_GPIO_Init+0x168>)
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482e      	ldr	r0, [pc, #184]	; (8000db4 <MX_GPIO_Init+0x16c>)
 8000cfa:	f001 f8c1 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000cfe:	2381      	movs	r3, #129	; 0x81
 8000d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4828      	ldr	r0, [pc, #160]	; (8000db4 <MX_GPIO_Init+0x16c>)
 8000d12:	f001 f8b5 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000d16:	2301      	movs	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	481f      	ldr	r0, [pc, #124]	; (8000da8 <MX_GPIO_Init+0x160>)
 8000d2a:	f001 f8a9 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2e:	2320      	movs	r3, #32
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_GPIO_Init+0x160>)
 8000d46:	f001 f89b 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <MX_GPIO_Init+0x164>)
 8000d64:	f001 f88c 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6e:	2312      	movs	r3, #18
 8000d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_GPIO_Init+0x164>)
 8000d86:	f001 f87b 	bl	8001e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2028      	movs	r0, #40	; 0x28
 8000d90:	f001 f83f 	bl	8001e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d94:	2028      	movs	r0, #40	; 0x28
 8000d96:	f001 f858 	bl	8001e4a <HAL_NVIC_EnableIRQ>

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	10210000 	.word	0x10210000
 8000db4:	40020800 	.word	0x40020800

08000db8 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	ed2d 8b02 	vpush	{d8}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <Encoder_Velocity_Update+0xa8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dc8:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000dca:	f000 fd0f 	bl	80017ec <micros>
 8000dce:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <Encoder_Velocity_Update+0xac>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0503 	sbc.w	r5, r1, r3
 8000de2:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000de6:	4b20      	ldr	r3, [pc, #128]	; (8000e68 <Encoder_Velocity_Update+0xb0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <Encoder_Velocity_Update+0xb4>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	db06      	blt.n	8000e0a <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <Encoder_Velocity_Update+0xb8>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	461a      	mov	r2, r3
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	e00b      	b.n	8000e22 <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	425b      	negs	r3, r3
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <Encoder_Velocity_Update+0xb4>)
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	4293      	cmp	r3, r2
 8000e14:	db05      	blt.n	8000e22 <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <Encoder_Velocity_Update+0xb8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	4413      	add	r3, r2
 8000e20:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000e22:	4a11      	ldr	r2, [pc, #68]	; (8000e68 <Encoder_Velocity_Update+0xb0>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000e28:	490e      	ldr	r1, [pc, #56]	; (8000e64 <Encoder_Velocity_Update+0xac>)
 8000e2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	4a0f      	ldr	r2, [pc, #60]	; (8000e74 <Encoder_Velocity_Update+0xbc>)
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e46:	f7ff fa8f 	bl	8000368 <__aeabi_ul2f>
 8000e4a:	ee07 0a10 	vmov	s14, r0
 8000e4e:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8000e52:	eeb0 0a67 	vmov.f32	s0, s15
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	ecbd 8b02 	vpop	{d8}
 8000e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e60:	200001b4 	.word	0x200001b4
 8000e64:	20000160 	.word	0x20000160
 8000e68:	20000168 	.word	0x20000168
 8000e6c:	20000002 	.word	0x20000002
 8000e70:	20000000 	.word	0x20000000
 8000e74:	000f4240 	.word	0x000f4240

08000e78 <Motor_Drive_PWM>:

#define PWM_CHANNEL TIM_CHANNEL_4			//Set channel for PWM
#define GPIO_PIN_DIRECTION GPIO_PIN_10		//Set pin for direction
void Motor_Drive_PWM()	//Motor drive
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	if (PWM_Out > 10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e86:	4293      	cmp	r3, r2
 8000e88:	dd04      	ble.n	8000e94 <Motor_Drive_PWM+0x1c>
	{
		PWM_Out = 10000;		//Run with Velocity_Max_RPM
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000e8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e90:	801a      	strh	r2, [r3, #0]
 8000e92:	e009      	b.n	8000ea8 <Motor_Drive_PWM+0x30>
	}
	else if (PWM_Out < -10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <Motor_Drive_PWM+0x80>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	da03      	bge.n	8000ea8 <Motor_Drive_PWM+0x30>
	{
		PWM_Out = -10000;		//Run with Velocity_Max_RPM
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000ea2:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8000ea6:	801a      	strh	r2, [r3, #0]
	}

	if (PWM_Out < 0)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	da0d      	bge.n	8000ece <Motor_Drive_PWM+0x56>
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, -PWM_Out);
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	425a      	negs	r2, r3
 8000eba:	4b10      	ldr	r3, [pc, #64]	; (8000efc <Motor_Drive_PWM+0x84>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ec6:	480e      	ldr	r0, [pc, #56]	; (8000f00 <Motor_Drive_PWM+0x88>)
 8000ec8:	f001 f95e 	bl	8002188 <HAL_GPIO_WritePin>
	else if (PWM_Out >= 0)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 8000ecc:	e010      	b.n	8000ef0 <Motor_Drive_PWM+0x78>
	else if (PWM_Out >= 0)
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000ed0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0b      	blt.n	8000ef0 <Motor_Drive_PWM+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <Motor_Drive_PWM+0x7c>)
 8000eda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <Motor_Drive_PWM+0x84>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eea:	4805      	ldr	r0, [pc, #20]	; (8000f00 <Motor_Drive_PWM+0x88>)
 8000eec:	f001 f94c 	bl	8002188 <HAL_GPIO_WritePin>
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	200000f0 	.word	0x200000f0
 8000ef8:	ffffd8f0 	.word	0xffffd8f0
 8000efc:	2000016c 	.word	0x2000016c
 8000f00:	40020400 	.word	0x40020400

08000f04 <Velocity_Control>:
void Velocity_Control()  //Velocity Control PID
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

	Velocity_Now_RPM = (Velocity_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Encoder (Encoder's velocity at the moment) to RPM
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <Velocity_Control+0x130>)
 8000f0a:	edd3 7a00 	vldr	s15, [r3]
 8000f0e:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001038 <Velocity_Control+0x134>
 8000f12:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <Velocity_Control+0x138>)
 8000f18:	881b      	ldrh	r3, [r3, #0]
 8000f1a:	ee07 3a90 	vmov	s15, r3
 8000f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f26:	4b46      	ldr	r3, [pc, #280]	; (8001040 <Velocity_Control+0x13c>)
 8000f28:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8000f2c:	4b44      	ldr	r3, [pc, #272]	; (8001040 <Velocity_Control+0x13c>)
 8000f2e:	edd3 7a00 	vldr	s15, [r3]
 8000f32:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f36:	4b43      	ldr	r3, [pc, #268]	; (8001044 <Velocity_Control+0x140>)
 8000f38:	edd3 7a00 	vldr	s15, [r3]
 8000f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f40:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001038 <Velocity_Control+0x134>
 8000f44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <Velocity_Control+0x144>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f4e:	4b3f      	ldr	r3, [pc, #252]	; (800104c <Velocity_Control+0x148>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <Velocity_Control+0x14c>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd04      	ble.n	8000f6e <Velocity_Control+0x6a>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <Velocity_Control+0x14c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a38      	ldr	r2, [pc, #224]	; (800104c <Velocity_Control+0x148>)
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	e014      	b.n	8000f98 <Velocity_Control+0x94>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <Velocity_Control+0x14c>)
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eeb1 7a67 	vneg.f32	s14, s15
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <Velocity_Control+0x148>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	dd07      	ble.n	8000f98 <Velocity_Control+0x94>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f88:	4b31      	ldr	r3, [pc, #196]	; (8001050 <Velocity_Control+0x14c>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	eef1 7a67 	vneg.f32	s15, s15
 8000f92:	4b2e      	ldr	r3, [pc, #184]	; (800104c <Velocity_Control+0x148>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <Velocity_Control+0x148>)
 8000f9a:	ed93 7a00 	vldr	s14, [r3]
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <Velocity_Control+0x13c>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	; (8001054 <Velocity_Control+0x150>)
 8000faa:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <Velocity_Control+0x154>)
 8000fb0:	ed93 7a00 	vldr	s14, [r3]
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <Velocity_Control+0x150>)
 8000fb6:	edd3 7a00 	vldr	s15, [r3]
 8000fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <Velocity_Control+0x154>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	; (8001054 <Velocity_Control+0x150>)
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <Velocity_Control+0x158>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <Velocity_Control+0x15c>)
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	; (8001054 <Velocity_Control+0x150>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <Velocity_Control+0x158>)
 8000fe0:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <Velocity_Control+0x160>)
 8000fe4:	ed93 7a00 	vldr	s14, [r3]
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <Velocity_Control+0x150>)
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <Velocity_Control+0x164>)
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <Velocity_Control+0x154>)
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <Velocity_Control+0x168>)
 8001008:	edd3 6a00 	vldr	s13, [r3]
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <Velocity_Control+0x15c>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <Velocity_Control+0x16c>)
 8001026:	801a      	strh	r2, [r3, #0]

}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200000d4 	.word	0x200000d4
 8001038:	42700000 	.word	0x42700000
 800103c:	20000000 	.word	0x20000000
 8001040:	200000d8 	.word	0x200000d8
 8001044:	20000004 	.word	0x20000004
 8001048:	20000100 	.word	0x20000100
 800104c:	20000008 	.word	0x20000008
 8001050:	20000018 	.word	0x20000018
 8001054:	200000e0 	.word	0x200000e0
 8001058:	200000e4 	.word	0x200000e4
 800105c:	200000ec 	.word	0x200000ec
 8001060:	200000e8 	.word	0x200000e8
 8001064:	2000000c 	.word	0x2000000c
 8001068:	20000010 	.word	0x20000010
 800106c:	200000dc 	.word	0x200000dc
 8001070:	200000f0 	.word	0x200000f0

08001074 <Distance_Calculation>:
void Distance_Calculation()	//Calculate that distance is short or long
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 8001078:	4b84      	ldr	r3, [pc, #528]	; (800128c <Distance_Calculation+0x218>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	4b84      	ldr	r3, [pc, #528]	; (8001290 <Distance_Calculation+0x21c>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001088:	4b82      	ldr	r3, [pc, #520]	; (8001294 <Distance_Calculation+0x220>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 800108e:	4b81      	ldr	r3, [pc, #516]	; (8001294 <Distance_Calculation+0x220>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d509      	bpl.n	80010b2 <Distance_Calculation+0x3e>
	{
		Distance_Degree_Set += 360;
 800109e:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <Distance_Calculation+0x220>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001298 <Distance_Calculation+0x224>
 80010a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010ac:	4b79      	ldr	r3, [pc, #484]	; (8001294 <Distance_Calculation+0x220>)
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 80010b2:	4b78      	ldr	r3, [pc, #480]	; (8001294 <Distance_Calculation+0x220>)
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b78      	ldr	r3, [pc, #480]	; (800129c <Distance_Calculation+0x228>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	eddf 6a77 	vldr	s13, [pc, #476]	; 80012a0 <Distance_Calculation+0x22c>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <Distance_Calculation+0x230>)
 80010cc:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 80010d0:	4b75      	ldr	r3, [pc, #468]	; (80012a8 <Distance_Calculation+0x234>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010da:	4b70      	ldr	r3, [pc, #448]	; (800129c <Distance_Calculation+0x228>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e4:	eddf 6a71 	vldr	s13, [pc, #452]	; 80012ac <Distance_Calculation+0x238>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <Distance_Calculation+0x23c>)
 80010ee:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 80010f2:	4b6f      	ldr	r3, [pc, #444]	; (80012b0 <Distance_Calculation+0x23c>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010fc:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <Distance_Calculation+0x240>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 8001102:	4b6c      	ldr	r3, [pc, #432]	; (80012b4 <Distance_Calculation+0x240>)
 8001104:	edd3 7a00 	vldr	s15, [r3]
 8001108:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80012b8 <Distance_Calculation+0x244>
 800110c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001110:	4b6a      	ldr	r3, [pc, #424]	; (80012bc <Distance_Calculation+0x248>)
 8001112:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 8001116:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <Distance_Calculation+0x23c>)
 8001118:	edd3 7a00 	vldr	s15, [r3]
 800111c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001120:	eeb0 0a67 	vmov.f32	s0, s15
 8001124:	f003 f874 	bl	8004210 <powf>
 8001128:	eef0 7a40 	vmov.f32	s15, s0
 800112c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <Distance_Calculation+0x24c>)
 8001132:	edc3 7a00 	vstr	s15, [r3]


	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 8001136:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <Distance_Calculation+0x24c>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001140:	4b58      	ldr	r3, [pc, #352]	; (80012a4 <Distance_Calculation+0x230>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d53c      	bpl.n	80011ca <Distance_Calculation+0x156>
	{
		Distance_Length = LONG;
 8001150:	4b5c      	ldr	r3, [pc, #368]	; (80012c4 <Distance_Calculation+0x250>)
 8001152:	2201      	movs	r2, #1
 8001154:	801a      	strh	r2, [r3, #0]
		Distance_Center = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 8001156:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <Distance_Calculation+0x230>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	4b58      	ldr	r3, [pc, #352]	; (80012c0 <Distance_Calculation+0x24c>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <Distance_Calculation+0x254>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
		Time_Center = Distance_Center/Velocity_Max_Rad;
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <Distance_Calculation+0x254>)
 8001172:	edd3 6a00 	vldr	s13, [r3]
 8001176:	4b4e      	ldr	r3, [pc, #312]	; (80012b0 <Distance_Calculation+0x23c>)
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001180:	4b52      	ldr	r3, [pc, #328]	; (80012cc <Distance_Calculation+0x258>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
		Time_Center_Micro = Time_Center*1000000;
 8001186:	4b51      	ldr	r3, [pc, #324]	; (80012cc <Distance_Calculation+0x258>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80012b8 <Distance_Calculation+0x244>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	4b4e      	ldr	r3, [pc, #312]	; (80012d0 <Distance_Calculation+0x25c>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend) + (Time_Center);//Time use to reach next station
 800119a:	4b46      	ldr	r3, [pc, #280]	; (80012b4 <Distance_Calculation+0x240>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011a4:	4b49      	ldr	r3, [pc, #292]	; (80012cc <Distance_Calculation+0x258>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ae:	4b49      	ldr	r3, [pc, #292]	; (80012d4 <Distance_Calculation+0x260>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 80011b4:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <Distance_Calculation+0x260>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80012b8 <Distance_Calculation+0x244>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <Distance_Calculation+0x264>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]
 80011c8:	e05a      	b.n	8001280 <Distance_Calculation+0x20c>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 80011ca:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <Distance_Calculation+0x24c>)
 80011cc:	edd3 7a00 	vldr	s15, [r3]
 80011d0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <Distance_Calculation+0x230>)
 80011d6:	edd3 7a00 	vldr	s15, [r3]
 80011da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	db4d      	blt.n	8001280 <Distance_Calculation+0x20c>
	{
		Distance_Length = SHORT;
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <Distance_Calculation+0x250>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <Distance_Calculation+0x230>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f4:	eeb0 0a67 	vmov.f32	s0, s15
 80011f8:	f003 f8a2 	bl	8004340 <sqrtf>
 80011fc:	eef0 7a40 	vmov.f32	s15, s0
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <Distance_Calculation+0x240>)
 8001202:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <Distance_Calculation+0x240>)
 8001208:	edd3 7a00 	vldr	s15, [r3]
 800120c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012b8 <Distance_Calculation+0x244>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <Distance_Calculation+0x248>)
 8001216:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <Distance_Calculation+0x240>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001224:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <Distance_Calculation+0x260>)
 8001226:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 800122a:	4b2a      	ldr	r3, [pc, #168]	; (80012d4 <Distance_Calculation+0x260>)
 800122c:	edd3 7a00 	vldr	s15, [r3]
 8001230:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80012b8 <Distance_Calculation+0x244>
 8001234:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <Distance_Calculation+0x264>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <Distance_Calculation+0x230>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001248:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800124c:	eeb0 0a47 	vmov.f32	s0, s14
 8001250:	f003 f876 	bl	8004340 <sqrtf>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <Distance_Calculation+0x268>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <Distance_Calculation+0x268>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80012ac <Distance_Calculation+0x238>
 8001268:	ee67 6a87 	vmul.f32	s13, s15, s14
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <Distance_Calculation+0x228>)
 800126e:	edd3 7a00 	vldr	s15, [r3]
 8001272:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <Distance_Calculation+0x26c>)
 800127c:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <Distance_Calculation+0x270>)
 8001282:	2201      	movs	r2, #1
 8001284:	801a      	strh	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000014 	.word	0x20000014
 8001290:	200000f8 	.word	0x200000f8
 8001294:	20000110 	.word	0x20000110
 8001298:	43b40000 	.word	0x43b40000
 800129c:	20000004 	.word	0x20000004
 80012a0:	43340000 	.word	0x43340000
 80012a4:	20000114 	.word	0x20000114
 80012a8:	20000018 	.word	0x20000018
 80012ac:	42700000 	.word	0x42700000
 80012b0:	20000104 	.word	0x20000104
 80012b4:	20000128 	.word	0x20000128
 80012b8:	49742400 	.word	0x49742400
 80012bc:	20000140 	.word	0x20000140
 80012c0:	20000118 	.word	0x20000118
 80012c4:	200000d0 	.word	0x200000d0
 80012c8:	2000011c 	.word	0x2000011c
 80012cc:	20000130 	.word	0x20000130
 80012d0:	20000148 	.word	0x20000148
 80012d4:	2000012c 	.word	0x2000012c
 80012d8:	20000144 	.word	0x20000144
 80012dc:	2000010c 	.word	0x2000010c
 80012e0:	20000108 	.word	0x20000108
 80012e4:	200000d2 	.word	0x200000d2

080012e8 <Trajectory_Generation>:

	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}
void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 80012e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ec:	ed2d 8b02 	vpush	{d8}
 80012f0:	b096      	sub	sp, #88	; 0x58
 80012f2:	af00      	add	r7, sp, #0

	Position_Encoder = htim1.Instance->CNT;
 80012f4:	4bb2      	ldr	r3, [pc, #712]	; (80015c0 <Trajectory_Generation+0x2d8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001302:	4bb0      	ldr	r3, [pc, #704]	; (80015c4 <Trajectory_Generation+0x2dc>)
 8001304:	edc3 7a00 	vstr	s15, [r3]
	Position_Rad  = (Position_Encoder*2*pi)/Encoder_Resolution;  //radian
 8001308:	4bae      	ldr	r3, [pc, #696]	; (80015c4 <Trajectory_Generation+0x2dc>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001312:	4bad      	ldr	r3, [pc, #692]	; (80015c8 <Trajectory_Generation+0x2e0>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee67 6a27 	vmul.f32	s13, s14, s15
 800131c:	4bab      	ldr	r3, [pc, #684]	; (80015cc <Trajectory_Generation+0x2e4>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	4ba8      	ldr	r3, [pc, #672]	; (80015d0 <Trajectory_Generation+0x2e8>)
 800132e:	edc3 7a00 	vstr	s15, [r3]
	if (Trajectory_Flag == 0)
 8001332:	4ba8      	ldr	r3, [pc, #672]	; (80015d4 <Trajectory_Generation+0x2ec>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10d      	bne.n	8001356 <Trajectory_Generation+0x6e>
	{
		Time_Start = micros();
 800133a:	f000 fa57 	bl	80017ec <micros>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	49a5      	ldr	r1, [pc, #660]	; (80015d8 <Trajectory_Generation+0x2f0>)
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Rad;
 8001348:	4ba1      	ldr	r3, [pc, #644]	; (80015d0 <Trajectory_Generation+0x2e8>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4ba3      	ldr	r3, [pc, #652]	; (80015dc <Trajectory_Generation+0x2f4>)
 800134e:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 8001350:	4aa0      	ldr	r2, [pc, #640]	; (80015d4 <Trajectory_Generation+0x2ec>)
 8001352:	2301      	movs	r3, #1
 8001354:	8013      	strh	r3, [r2, #0]
	}
	Time_Trajectory_Stamp = micros();
 8001356:	f000 fa49 	bl	80017ec <micros>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	49a0      	ldr	r1, [pc, #640]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001360:	e9c1 2300 	strd	r2, r3, [r1]
	Distance_Traveled = Position_Rad-Position_Start;
 8001364:	4b9a      	ldr	r3, [pc, #616]	; (80015d0 <Trajectory_Generation+0x2e8>)
 8001366:	ed93 7a00 	vldr	s14, [r3]
 800136a:	4b9c      	ldr	r3, [pc, #624]	; (80015dc <Trajectory_Generation+0x2f4>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001374:	4b9b      	ldr	r3, [pc, #620]	; (80015e4 <Trajectory_Generation+0x2fc>)
 8001376:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Length == LONG)
 800137a:	4b9b      	ldr	r3, [pc, #620]	; (80015e8 <Trajectory_Generation+0x300>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	f040 8142 	bne.w	8001608 <Trajectory_Generation+0x320>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001384:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001386:	e9d3 0100 	ldrd	r0, r1, [r3]
 800138a:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <Trajectory_Generation+0x2f0>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	1a84      	subs	r4, r0, r2
 8001392:	653c      	str	r4, [r7, #80]	; 0x50
 8001394:	eb61 0303 	sbc.w	r3, r1, r3
 8001398:	657b      	str	r3, [r7, #84]	; 0x54
 800139a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800139e:	f7fe ffe3 	bl	8000368 <__aeabi_ul2f>
 80013a2:	ee07 0a10 	vmov	s14, r0
 80013a6:	4b91      	ldr	r3, [pc, #580]	; (80015ec <Trajectory_Generation+0x304>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	d825      	bhi.n	8001402 <Trajectory_Generation+0x11a>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 80013b6:	4b8a      	ldr	r3, [pc, #552]	; (80015e0 <Trajectory_Generation+0x2f8>)
 80013b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013bc:	4b86      	ldr	r3, [pc, #536]	; (80015d8 <Trajectory_Generation+0x2f0>)
 80013be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c2:	1a84      	subs	r4, r0, r2
 80013c4:	64bc      	str	r4, [r7, #72]	; 0x48
 80013c6:	eb61 0303 	sbc.w	r3, r1, r3
 80013ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013d0:	f7fe ffca 	bl	8000368 <__aeabi_ul2f>
 80013d4:	ee06 0a90 	vmov	s13, r0
 80013d8:	4b84      	ldr	r3, [pc, #528]	; (80015ec <Trajectory_Generation+0x304>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e2:	4b83      	ldr	r3, [pc, #524]	; (80015f0 <Trajectory_Generation+0x308>)
 80013e4:	edd3 7a00 	vldr	s15, [r3]
 80013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ec:	4b81      	ldr	r3, [pc, #516]	; (80015f4 <Trajectory_Generation+0x30c>)
 80013ee:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 80013f2:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <Trajectory_Generation+0x2ec>)
 80013f4:	2202      	movs	r2, #2
 80013f6:	801a      	strh	r2, [r3, #0]
			P1 = Distance_Traveled;
 80013f8:	4b7a      	ldr	r3, [pc, #488]	; (80015e4 <Trajectory_Generation+0x2fc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a7e      	ldr	r2, [pc, #504]	; (80015f8 <Trajectory_Generation+0x310>)
 80013fe:	6013      	str	r3, [r2, #0]
			Trajectory_Flag = 4;
		}
	}


}
 8001400:	e1c3      	b.n	800178a <Trajectory_Generation+0x4a2>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Blend_Micro) )
 8001402:	4b77      	ldr	r3, [pc, #476]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001408:	4b73      	ldr	r3, [pc, #460]	; (80015d8 <Trajectory_Generation+0x2f0>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	1a84      	subs	r4, r0, r2
 8001410:	643c      	str	r4, [r7, #64]	; 0x40
 8001412:	eb61 0303 	sbc.w	r3, r1, r3
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
 8001418:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800141c:	f7fe ffa4 	bl	8000368 <__aeabi_ul2f>
 8001420:	ee07 0a10 	vmov	s14, r0
 8001424:	4b71      	ldr	r3, [pc, #452]	; (80015ec <Trajectory_Generation+0x304>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	dd2d      	ble.n	8001490 <Trajectory_Generation+0x1a8>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 8001434:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001436:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143a:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <Trajectory_Generation+0x2f0>)
 800143c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001440:	1a84      	subs	r4, r0, r2
 8001442:	63bc      	str	r4, [r7, #56]	; 0x38
 8001444:	eb61 0303 	sbc.w	r3, r1, r3
 8001448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800144a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800144e:	f7fe ff8b 	bl	8000368 <__aeabi_ul2f>
 8001452:	ee06 0a90 	vmov	s13, r0
 8001456:	4b69      	ldr	r3, [pc, #420]	; (80015fc <Trajectory_Generation+0x314>)
 8001458:	ed93 7a00 	vldr	s14, [r3]
 800145c:	4b63      	ldr	r3, [pc, #396]	; (80015ec <Trajectory_Generation+0x304>)
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001466:	eef4 6ae7 	vcmpe.f32	s13, s15
 800146a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146e:	d50f      	bpl.n	8001490 <Trajectory_Generation+0x1a8>
			Velocity_Want_RPM = Velocity_Max_RPM;
 8001470:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <Trajectory_Generation+0x308>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a5f      	ldr	r2, [pc, #380]	; (80015f4 <Trajectory_Generation+0x30c>)
 8001476:	6013      	str	r3, [r2, #0]
			P2 = Distance_Traveled-P1;
 8001478:	4b5a      	ldr	r3, [pc, #360]	; (80015e4 <Trajectory_Generation+0x2fc>)
 800147a:	ed93 7a00 	vldr	s14, [r3]
 800147e:	4b5e      	ldr	r3, [pc, #376]	; (80015f8 <Trajectory_Generation+0x310>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <Trajectory_Generation+0x318>)
 800148a:	edc3 7a00 	vstr	s15, [r3]
 800148e:	e17c      	b.n	800178a <Trajectory_Generation+0x4a2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001492:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <Trajectory_Generation+0x2f0>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	1a84      	subs	r4, r0, r2
 800149e:	633c      	str	r4, [r7, #48]	; 0x30
 80014a0:	eb61 0303 	sbc.w	r3, r1, r3
 80014a4:	637b      	str	r3, [r7, #52]	; 0x34
 80014a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014aa:	f7fe ff5d 	bl	8000368 <__aeabi_ul2f>
 80014ae:	ee06 0a90 	vmov	s13, r0
 80014b2:	4b52      	ldr	r3, [pc, #328]	; (80015fc <Trajectory_Generation+0x314>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <Trajectory_Generation+0x304>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80014c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ca:	db5a      	blt.n	8001582 <Trajectory_Generation+0x29a>
				&& (Time_Trajectory_Stamp-Time_Start <= Time_All_Micro) )
 80014cc:	4b44      	ldr	r3, [pc, #272]	; (80015e0 <Trajectory_Generation+0x2f8>)
 80014ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <Trajectory_Generation+0x2f0>)
 80014d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d8:	1a84      	subs	r4, r0, r2
 80014da:	62bc      	str	r4, [r7, #40]	; 0x28
 80014dc:	eb61 0303 	sbc.w	r3, r1, r3
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014e6:	f7fe ff3f 	bl	8000368 <__aeabi_ul2f>
 80014ea:	ee07 0a10 	vmov	s14, r0
 80014ee:	4b43      	ldr	r3, [pc, #268]	; (80015fc <Trajectory_Generation+0x314>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fc:	d841      	bhi.n	8001582 <Trajectory_Generation+0x29a>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <Trajectory_Generation+0x308>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb1 8a67 	vneg.f32	s16, s15
 8001508:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <Trajectory_Generation+0x2f8>)
 800150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <Trajectory_Generation+0x2f0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	1a84      	subs	r4, r0, r2
 8001516:	623c      	str	r4, [r7, #32]
 8001518:	eb61 0303 	sbc.w	r3, r1, r3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
 800151e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001522:	f7fe ff21 	bl	8000368 <__aeabi_ul2f>
 8001526:	ee06 0a90 	vmov	s13, r0
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <Trajectory_Generation+0x314>)
 800152c:	ed93 7a00 	vldr	s14, [r3]
 8001530:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <Trajectory_Generation+0x304>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <Trajectory_Generation+0x304>)
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800154c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001550:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <Trajectory_Generation+0x30c>)
 8001556:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <Trajectory_Generation+0x2ec>)
 800155c:	2203      	movs	r2, #3
 800155e:	801a      	strh	r2, [r3, #0]
			P3 = Distance_Traveled-P2-P1;
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <Trajectory_Generation+0x2fc>)
 8001562:	ed93 7a00 	vldr	s14, [r3]
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <Trajectory_Generation+0x318>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001570:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <Trajectory_Generation+0x310>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <Trajectory_Generation+0x31c>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
 8001580:	e103      	b.n	800178a <Trajectory_Generation+0x4a2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 8001582:	4b17      	ldr	r3, [pc, #92]	; (80015e0 <Trajectory_Generation+0x2f8>)
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <Trajectory_Generation+0x2f0>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	1a84      	subs	r4, r0, r2
 8001590:	61bc      	str	r4, [r7, #24]
 8001592:	eb61 0303 	sbc.w	r3, r1, r3
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800159c:	f7fe fee4 	bl	8000368 <__aeabi_ul2f>
 80015a0:	ee07 0a10 	vmov	s14, r0
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <Trajectory_Generation+0x314>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	da00      	bge.n	80015b6 <Trajectory_Generation+0x2ce>
}
 80015b4:	e0e9      	b.n	800178a <Trajectory_Generation+0x4a2>
			Trajectory_Flag = 4;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <Trajectory_Generation+0x2ec>)
 80015b8:	2204      	movs	r2, #4
 80015ba:	801a      	strh	r2, [r3, #0]
}
 80015bc:	e0e5      	b.n	800178a <Trajectory_Generation+0x4a2>
 80015be:	bf00      	nop
 80015c0:	200001b4 	.word	0x200001b4
 80015c4:	200000f4 	.word	0x200000f4
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000124 	.word	0x20000124
 80015d4:	2000014c 	.word	0x2000014c
 80015d8:	20000138 	.word	0x20000138
 80015dc:	20000120 	.word	0x20000120
 80015e0:	200000c8 	.word	0x200000c8
 80015e4:	2000015c 	.word	0x2000015c
 80015e8:	200000d0 	.word	0x200000d0
 80015ec:	20000140 	.word	0x20000140
 80015f0:	20000018 	.word	0x20000018
 80015f4:	20000008 	.word	0x20000008
 80015f8:	20000150 	.word	0x20000150
 80015fc:	20000144 	.word	0x20000144
 8001600:	20000154 	.word	0x20000154
 8001604:	20000158 	.word	0x20000158
	else if (Distance_Length == SHORT)
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <Trajectory_Generation+0x4b0>)
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f040 80bc 	bne.w	800178a <Trajectory_Generation+0x4a2>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001612:	4b62      	ldr	r3, [pc, #392]	; (800179c <Trajectory_Generation+0x4b4>)
 8001614:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001618:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <Trajectory_Generation+0x4b8>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	1a84      	subs	r4, r0, r2
 8001620:	eb61 0503 	sbc.w	r5, r1, r3
 8001624:	4620      	mov	r0, r4
 8001626:	4629      	mov	r1, r5
 8001628:	f7fe fe9e 	bl	8000368 <__aeabi_ul2f>
 800162c:	ee07 0a10 	vmov	s14, r0
 8001630:	4b5c      	ldr	r3, [pc, #368]	; (80017a4 <Trajectory_Generation+0x4bc>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d821      	bhi.n	8001684 <Trajectory_Generation+0x39c>
			Velocity_Want_RPM = Velocity_Achieve_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001640:	4b56      	ldr	r3, [pc, #344]	; (800179c <Trajectory_Generation+0x4b4>)
 8001642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001646:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <Trajectory_Generation+0x4b8>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	1a84      	subs	r4, r0, r2
 800164e:	613c      	str	r4, [r7, #16]
 8001650:	eb61 0303 	sbc.w	r3, r1, r3
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800165a:	f7fe fe85 	bl	8000368 <__aeabi_ul2f>
 800165e:	ee06 0a90 	vmov	s13, r0
 8001662:	4b50      	ldr	r3, [pc, #320]	; (80017a4 <Trajectory_Generation+0x4bc>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800166c:	4b4e      	ldr	r3, [pc, #312]	; (80017a8 <Trajectory_Generation+0x4c0>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001676:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <Trajectory_Generation+0x4c4>)
 8001678:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 800167c:	4b4c      	ldr	r3, [pc, #304]	; (80017b0 <Trajectory_Generation+0x4c8>)
 800167e:	2202      	movs	r2, #2
 8001680:	801a      	strh	r2, [r3, #0]
}
 8001682:	e082      	b.n	800178a <Trajectory_Generation+0x4a2>
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <Trajectory_Generation+0x4b4>)
 8001686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800168a:	4b45      	ldr	r3, [pc, #276]	; (80017a0 <Trajectory_Generation+0x4b8>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	1a84      	subs	r4, r0, r2
 8001692:	60bc      	str	r4, [r7, #8]
 8001694:	eb61 0303 	sbc.w	r3, r1, r3
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800169e:	f7fe fe63 	bl	8000368 <__aeabi_ul2f>
 80016a2:	ee07 0a10 	vmov	s14, r0
 80016a6:	4b3f      	ldr	r3, [pc, #252]	; (80017a4 <Trajectory_Generation+0x4bc>)
 80016a8:	edd3 7a00 	vldr	s15, [r3]
 80016ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	db46      	blt.n	8001744 <Trajectory_Generation+0x45c>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <Trajectory_Generation+0x4b4>)
 80016b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016bc:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <Trajectory_Generation+0x4b8>)
 80016be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c2:	1a84      	subs	r4, r0, r2
 80016c4:	603c      	str	r4, [r7, #0]
 80016c6:	eb61 0303 	sbc.w	r3, r1, r3
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016d0:	f7fe fe4a 	bl	8000368 <__aeabi_ul2f>
 80016d4:	ee07 0a10 	vmov	s14, r0
 80016d8:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <Trajectory_Generation+0x4bc>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d52b      	bpl.n	8001744 <Trajectory_Generation+0x45c>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <Trajectory_Generation+0x4c0>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eeb1 8a67 	vneg.f32	s16, s15
 80016f6:	4b29      	ldr	r3, [pc, #164]	; (800179c <Trajectory_Generation+0x4b4>)
 80016f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fc:	4b28      	ldr	r3, [pc, #160]	; (80017a0 <Trajectory_Generation+0x4b8>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	ebb0 0a02 	subs.w	sl, r0, r2
 8001706:	eb61 0b03 	sbc.w	fp, r1, r3
 800170a:	4650      	mov	r0, sl
 800170c:	4659      	mov	r1, fp
 800170e:	f7fe fe2b 	bl	8000368 <__aeabi_ul2f>
 8001712:	ee07 0a10 	vmov	s14, r0
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <Trajectory_Generation+0x4bc>)
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001720:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <Trajectory_Generation+0x4bc>)
 8001722:	ed93 7a00 	vldr	s14, [r3]
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800172e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001732:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <Trajectory_Generation+0x4c4>)
 8001738:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 800173c:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <Trajectory_Generation+0x4c8>)
 800173e:	2203      	movs	r2, #3
 8001740:	801a      	strh	r2, [r3, #0]
 8001742:	e022      	b.n	800178a <Trajectory_Generation+0x4a2>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <Trajectory_Generation+0x4b4>)
 8001746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <Trajectory_Generation+0x4b8>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	ebb0 0802 	subs.w	r8, r0, r2
 8001754:	eb61 0903 	sbc.w	r9, r1, r3
 8001758:	4640      	mov	r0, r8
 800175a:	4649      	mov	r1, r9
 800175c:	f7fe fe04 	bl	8000368 <__aeabi_ul2f>
 8001760:	ee07 0a10 	vmov	s14, r0
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <Trajectory_Generation+0x4bc>)
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800176e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	da00      	bge.n	800177a <Trajectory_Generation+0x492>
}
 8001778:	e007      	b.n	800178a <Trajectory_Generation+0x4a2>
			Velocity_Want_RPM = 0;
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <Trajectory_Generation+0x4c4>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001782:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <Trajectory_Generation+0x4c8>)
 8001784:	2204      	movs	r2, #4
 8001786:	801a      	strh	r2, [r3, #0]
}
 8001788:	e7ff      	b.n	800178a <Trajectory_Generation+0x4a2>
 800178a:	bf00      	nop
 800178c:	3758      	adds	r7, #88	; 0x58
 800178e:	46bd      	mov	sp, r7
 8001790:	ecbd 8b02 	vpop	{d8}
 8001794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001798:	200000d0 	.word	0x200000d0
 800179c:	200000c8 	.word	0x200000c8
 80017a0:	20000138 	.word	0x20000138
 80017a4:	20000140 	.word	0x20000140
 80017a8:	20000108 	.word	0x20000108
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000014c 	.word	0x2000014c

080017b4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b4b0      	push	{r4, r5, r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d109      	bne.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ca:	f112 34ff 	adds.w	r4, r2, #4294967295
 80017ce:	f143 0500 	adc.w	r5, r3, #0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017d4:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bcb0      	pop	{r4, r5, r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200001fc 	.word	0x200001fc
 80017e8:	200000b0 	.word	0x200000b0

080017ec <micros>:
uint64_t micros()
{
 80017ec:	b4b0      	push	{r4, r5, r7}
 80017ee:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <micros+0x2c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	4618      	mov	r0, r3
 80017f8:	f04f 0100 	mov.w	r1, #0
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <micros+0x30>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	1884      	adds	r4, r0, r2
 8001804:	eb41 0503 	adc.w	r5, r1, r3
 8001808:	4622      	mov	r2, r4
 800180a:	462b      	mov	r3, r5
}
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bcb0      	pop	{r4, r5, r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200001fc 	.word	0x200001fc
 800181c:	200000b0 	.word	0x200000b0

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a0f      	ldr	r2, [pc, #60]	; (8001878 <HAL_MspInit+0x4c>)
 800183c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_MspInit+0x4c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_MspInit+0x4c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_MspInit+0x4c>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_MspInit+0x4c>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800186a:	2007      	movs	r0, #7
 800186c:	f000 fac6 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_TIM_Encoder_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12c      	bne.n	80018f8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6453      	str	r3, [r2, #68]	; 0x44
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_TIM_Encoder_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 80018d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018f4:	f000 fac4 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	3728      	adds	r7, #40	; 0x28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40010000 	.word	0x40010000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191c:	d116      	bne.n	800194c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201c      	movs	r0, #28
 8001940:	f000 fa67 	bl	8001e12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001944:	201c      	movs	r0, #28
 8001946:	f000 fa80 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800194a:	e012      	b.n	8001972 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_TIM_Base_MspInit+0x74>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10d      	bne.n	8001972 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_TIM_Base_MspInit+0x70>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40000400 	.word	0x40000400

08001984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 030c 	add.w	r3, r7, #12
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a12      	ldr	r2, [pc, #72]	; (80019ec <HAL_TIM_MspPostInit+0x68>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d11d      	bne.n	80019e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	6313      	str	r3, [r2, #48]	; 0x30
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <HAL_TIM_MspPostInit+0x6c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019c2:	2302      	movs	r3, #2
 80019c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019d2:	2302      	movs	r3, #2
 80019d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d6:	f107 030c 	add.w	r3, r7, #12
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	; (80019f4 <HAL_TIM_MspPostInit+0x70>)
 80019de:	f000 fa4f 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019e2:	bf00      	nop
 80019e4:	3720      	adds	r7, #32
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020400 	.word	0x40020400

080019f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_UART_MspInit+0x84>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d12b      	bne.n	8001a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_UART_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a52:	230c      	movs	r3, #12
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a62:	2307      	movs	r3, #7
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_UART_MspInit+0x8c>)
 8001a6e:	f000 fa07 	bl	8001e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40004400 	.word	0x40004400
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020000 	.word	0x40020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f8a2 	bl	8001c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <TIM2_IRQHandler+0x10>)
 8001ae2:	f001 fb4d 	bl	8003180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200001fc 	.word	0x200001fc

08001af0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001af4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001af8:	f000 fb60 	bl	80021bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <SystemInit+0x20>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <SystemInit+0x20>)
 8001b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b28:	480d      	ldr	r0, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b40:	4c0b      	ldr	r4, [pc, #44]	; (8001b70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4e:	f7ff ffd7 	bl	8001b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b52:	f002 fb31 	bl	80041b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b56:	f7fe fdc9 	bl	80006ec <main>
  bx  lr    
 8001b5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b64:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001b68:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 8001b6c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001b70:	2000028c 	.word	0x2000028c

08001b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b74:	e7fe      	b.n	8001b74 <ADC_IRQHandler>
	...

08001b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <HAL_Init+0x40>)
 8001b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <HAL_Init+0x40>)
 8001b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <HAL_Init+0x40>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a07      	ldr	r2, [pc, #28]	; (8001bb8 <HAL_Init+0x40>)
 8001b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f000 f92b 	bl	8001dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f000 f808 	bl	8001bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bac:	f7ff fe3e 	bl	800182c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023c00 	.word	0x40023c00

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc4:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_InitTick+0x54>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_InitTick+0x58>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f943 	bl	8001e66 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f90b 	bl	8001e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <HAL_InitTick+0x5c>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2000001c 	.word	0x2000001c
 8001c14:	20000024 	.word	0x20000024
 8001c18:	20000020 	.word	0x20000020

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	; (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000024 	.word	0x20000024
 8001c40:	20000288 	.word	0x20000288

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	; (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000288 	.word	0x20000288

08001c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
         );
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc8:	d301      	bcc.n	8001dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00f      	b.n	8001dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <SysTick_Config+0x40>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd6:	210f      	movs	r1, #15
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f7ff ff8e 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <SysTick_Config+0x40>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Config+0x40>)
 8001de8:	2207      	movs	r2, #7
 8001dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	e000e010 	.word	0xe000e010

08001dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff29 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e24:	f7ff ff3e 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	6978      	ldr	r0, [r7, #20]
 8001e30:	f7ff ff8e 	bl	8001d50 <NVIC_EncodePriority>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>
}
 8001e42:	bf00      	nop
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff31 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffa2 	bl	8001db8 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e159      	b.n	8002150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8148 	bne.w	800214a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a2 	beq.w	800214a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b57      	ldr	r3, [pc, #348]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x2e8>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a52      	ldr	r2, [pc, #328]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	; (8002170 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x202>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	; (8002174 <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1fe>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1fa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	; (800217c <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1f6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a45      	ldr	r2, [pc, #276]	; (8002180 <HAL_GPIO_Init+0x300>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1f2>
 800206e:	2304      	movs	r3, #4
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002072:	2307      	movs	r3, #7
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002082:	2300      	movs	r3, #0
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002094:	4935      	ldr	r1, [pc, #212]	; (800216c <HAL_GPIO_Init+0x2ec>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c6:	4a2f      	ldr	r2, [pc, #188]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_GPIO_Init+0x304>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002120:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002144:	4a0f      	ldr	r2, [pc, #60]	; (8002184 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	f67f aea2 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d006      	beq.n	80021e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021d2:	4a05      	ldr	r2, [pc, #20]	; (80021e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f806 	bl	80021ec <HAL_GPIO_EXTI_Callback>
  }
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e264      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d075      	beq.n	800230e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002222:	4ba3      	ldr	r3, [pc, #652]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d00c      	beq.n	8002248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222e:	4ba0      	ldr	r3, [pc, #640]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002236:	2b08      	cmp	r3, #8
 8002238:	d112      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800223a:	4b9d      	ldr	r3, [pc, #628]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002246:	d10b      	bne.n	8002260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002248:	4b99      	ldr	r3, [pc, #612]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d05b      	beq.n	800230c <HAL_RCC_OscConfig+0x108>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d157      	bne.n	800230c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e23f      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002268:	d106      	bne.n	8002278 <HAL_RCC_OscConfig+0x74>
 800226a:	4b91      	ldr	r3, [pc, #580]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a90      	ldr	r2, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e01d      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b8b      	ldr	r3, [pc, #556]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b88      	ldr	r3, [pc, #544]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a87      	ldr	r2, [pc, #540]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0xb0>
 800229c:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a83      	ldr	r2, [pc, #524]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a80      	ldr	r2, [pc, #512]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff fcc2 	bl	8001c44 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fcbe 	bl	8001c44 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e204      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0xc0>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fcae 	bl	8001c44 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fcaa 	bl	8001c44 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e1f0      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	4b6c      	ldr	r3, [pc, #432]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0xe8>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d063      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231a:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 030c 	and.w	r3, r3, #12
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002326:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800232e:	2b08      	cmp	r3, #8
 8002330:	d11c      	bne.n	800236c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d116      	bne.n	800236c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	4b5c      	ldr	r3, [pc, #368]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_RCC_OscConfig+0x152>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d001      	beq.n	8002356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e1c4      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002356:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4952      	ldr	r1, [pc, #328]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	e03a      	b.n	80023e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002374:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_RCC_OscConfig+0x2b0>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7ff fc63 	bl	8001c44 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002382:	f7ff fc5f 	bl	8001c44 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e1a5      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	4b46      	ldr	r3, [pc, #280]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4940      	ldr	r1, [pc, #256]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
 80023b4:	e015      	b.n	80023e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b3f      	ldr	r3, [pc, #252]	; (80024b4 <HAL_RCC_OscConfig+0x2b0>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023bc:	f7ff fc42 	bl	8001c44 <HAL_GetTick>
 80023c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	e008      	b.n	80023d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023c4:	f7ff fc3e 	bl	8001c44 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e184      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	4b36      	ldr	r3, [pc, #216]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d030      	beq.n	8002450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d016      	beq.n	8002424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <HAL_RCC_OscConfig+0x2b4>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff fc22 	bl	8001c44 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff fc1e 	bl	8001c44 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e164      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0x200>
 8002422:	e015      	b.n	8002450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x2b4>)
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7ff fc0b 	bl	8001c44 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002432:	f7ff fc07 	bl	8001c44 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e14d      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f0      	bne.n	8002432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a0 	beq.w	800259e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCC_OscConfig+0x2ac>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_OscConfig+0x2b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d121      	bne.n	80024de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_RCC_OscConfig+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_RCC_OscConfig+0x2b8>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fbcd 	bl	8001c44 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	e011      	b.n	80024d2 <HAL_RCC_OscConfig+0x2ce>
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	42470000 	.word	0x42470000
 80024b8:	42470e80 	.word	0x42470e80
 80024bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c0:	f7ff fbc0 	bl	8001c44 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e106      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d2:	4b85      	ldr	r3, [pc, #532]	; (80026e8 <HAL_RCC_OscConfig+0x4e4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0f0      	beq.n	80024c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
 80024e6:	4b81      	ldr	r3, [pc, #516]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a80      	ldr	r2, [pc, #512]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	e01c      	b.n	800252e <HAL_RCC_OscConfig+0x32a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d10c      	bne.n	8002516 <HAL_RCC_OscConfig+0x312>
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002502:	f043 0304 	orr.w	r3, r3, #4
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	4b78      	ldr	r3, [pc, #480]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
 8002514:	e00b      	b.n	800252e <HAL_RCC_OscConfig+0x32a>
 8002516:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	4a74      	ldr	r2, [pc, #464]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	6713      	str	r3, [r2, #112]	; 0x70
 8002522:	4b72      	ldr	r3, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a71      	ldr	r2, [pc, #452]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d015      	beq.n	8002562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002536:	f7ff fb85 	bl	8001c44 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253c:	e00a      	b.n	8002554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800253e:	f7ff fb81 	bl	8001c44 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	f241 3288 	movw	r2, #5000	; 0x1388
 800254c:	4293      	cmp	r3, r2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e0c5      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002554:	4b65      	ldr	r3, [pc, #404]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ee      	beq.n	800253e <HAL_RCC_OscConfig+0x33a>
 8002560:	e014      	b.n	800258c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7ff fb6f 	bl	8001c44 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7ff fb6b 	bl	8001c44 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0af      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002580:	4b5a      	ldr	r3, [pc, #360]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1ee      	bne.n	800256a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258c:	7dfb      	ldrb	r3, [r7, #23]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002592:	4b56      	ldr	r3, [pc, #344]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a55      	ldr	r2, [pc, #340]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 809b 	beq.w	80026de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d05c      	beq.n	800266e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d141      	bne.n	8002640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025bc:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x4ec>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7ff fb3f 	bl	8001c44 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ca:	f7ff fb3b 	bl	8001c44 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e081      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025dc:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69da      	ldr	r2, [r3, #28]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f6:	019b      	lsls	r3, r3, #6
 80025f8:	431a      	orrs	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	3b01      	subs	r3, #1
 8002602:	041b      	lsls	r3, r3, #16
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	061b      	lsls	r3, r3, #24
 800260c:	4937      	ldr	r1, [pc, #220]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HAL_RCC_OscConfig+0x4ec>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002618:	f7ff fb14 	bl	8001c44 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff fb10 	bl	8001c44 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e056      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	4b2e      	ldr	r3, [pc, #184]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x41c>
 800263e:	e04e      	b.n	80026de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002640:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_RCC_OscConfig+0x4ec>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7ff fafd 	bl	8001c44 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7ff faf9 	bl	8001c44 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e03f      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x44a>
 800266c:	e037      	b.n	80026de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e032      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800267a:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <HAL_RCC_OscConfig+0x4e8>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d028      	beq.n	80026da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d121      	bne.n	80026da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d11a      	bne.n	80026da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026aa:	4013      	ands	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d111      	bne.n	80026da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d107      	bne.n	80026da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d001      	beq.n	80026de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40007000 	.word	0x40007000
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470060 	.word	0x42470060

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0cc      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d90c      	bls.n	8002730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b65      	ldr	r3, [pc, #404]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b63      	ldr	r3, [pc, #396]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e0b8      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	d005      	beq.n	8002754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002748:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4a58      	ldr	r2, [pc, #352]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800274e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002760:	4b53      	ldr	r3, [pc, #332]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	4a52      	ldr	r2, [pc, #328]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800276a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800276c:	4b50      	ldr	r3, [pc, #320]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	494d      	ldr	r1, [pc, #308]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d044      	beq.n	8002814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d107      	bne.n	80027a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	4b47      	ldr	r3, [pc, #284]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d119      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e07f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b2:	4b3f      	ldr	r3, [pc, #252]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e06f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c2:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e067      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d2:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f023 0203 	bic.w	r2, r3, #3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4934      	ldr	r1, [pc, #208]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e4:	f7ff fa2e 	bl	8001c44 <HAL_GetTick>
 80027e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ec:	f7ff fa2a 	bl	8001c44 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e04f      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 020c 	and.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	429a      	cmp	r2, r3
 8002812:	d1eb      	bne.n	80027ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002814:	4b25      	ldr	r3, [pc, #148]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d20c      	bcs.n	800283c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002822:	4b22      	ldr	r3, [pc, #136]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b20      	ldr	r3, [pc, #128]	; (80028ac <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e032      	b.n	80028a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4916      	ldr	r1, [pc, #88]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	4313      	orrs	r3, r2
 8002858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d009      	beq.n	800287a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	490e      	ldr	r1, [pc, #56]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800287a:	f000 f821 	bl	80028c0 <HAL_RCC_GetSysClockFreq>
 800287e:	4602      	mov	r2, r0
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	490a      	ldr	r1, [pc, #40]	; (80028b4 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	5ccb      	ldrb	r3, [r1, r3]
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	4a09      	ldr	r2, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff f98e 	bl	8001bbc <HAL_InitTick>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00
 80028b0:	40023800 	.word	0x40023800
 80028b4:	08004afc 	.word	0x08004afc
 80028b8:	2000001c 	.word	0x2000001c
 80028bc:	20000020 	.word	0x20000020

080028c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	607b      	str	r3, [r7, #4]
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	2300      	movs	r3, #0
 80028d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d00d      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x40>
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	f200 80bd 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_GetSysClockFreq+0x34>
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d003      	beq.n	80028fa <HAL_RCC_GetSysClockFreq+0x3a>
 80028f2:	e0b7      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028f6:	60bb      	str	r3, [r7, #8]
       break;
 80028f8:	e0b7      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028fc:	60bb      	str	r3, [r7, #8]
      break;
 80028fe:	e0b4      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002900:	4b5d      	ldr	r3, [pc, #372]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002908:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800290a:	4b5b      	ldr	r3, [pc, #364]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d04d      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002916:	4b58      	ldr	r3, [pc, #352]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	099b      	lsrs	r3, r3, #6
 800291c:	461a      	mov	r2, r3
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	ea02 0800 	and.w	r8, r2, r0
 800292e:	ea03 0901 	and.w	r9, r3, r1
 8002932:	4640      	mov	r0, r8
 8002934:	4649      	mov	r1, r9
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	014b      	lsls	r3, r1, #5
 8002940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002944:	0142      	lsls	r2, r0, #5
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	ebb0 0008 	subs.w	r0, r0, r8
 800294e:	eb61 0109 	sbc.w	r1, r1, r9
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	018b      	lsls	r3, r1, #6
 800295c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002960:	0182      	lsls	r2, r0, #6
 8002962:	1a12      	subs	r2, r2, r0
 8002964:	eb63 0301 	sbc.w	r3, r3, r1
 8002968:	f04f 0000 	mov.w	r0, #0
 800296c:	f04f 0100 	mov.w	r1, #0
 8002970:	00d9      	lsls	r1, r3, #3
 8002972:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002976:	00d0      	lsls	r0, r2, #3
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	eb12 0208 	adds.w	r2, r2, r8
 8002980:	eb43 0309 	adc.w	r3, r3, r9
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0259      	lsls	r1, r3, #9
 800298e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002992:	0250      	lsls	r0, r2, #9
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	461a      	mov	r2, r3
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	f7fd fd26 	bl	80003f4 <__aeabi_uldivmod>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4613      	mov	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	e04a      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b2:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	099b      	lsrs	r3, r3, #6
 80029b8:	461a      	mov	r2, r3
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	ea02 0400 	and.w	r4, r2, r0
 80029ca:	ea03 0501 	and.w	r5, r3, r1
 80029ce:	4620      	mov	r0, r4
 80029d0:	4629      	mov	r1, r5
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	014b      	lsls	r3, r1, #5
 80029dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029e0:	0142      	lsls	r2, r0, #5
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	1b00      	subs	r0, r0, r4
 80029e8:	eb61 0105 	sbc.w	r1, r1, r5
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	018b      	lsls	r3, r1, #6
 80029f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029fa:	0182      	lsls	r2, r0, #6
 80029fc:	1a12      	subs	r2, r2, r0
 80029fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	00d9      	lsls	r1, r3, #3
 8002a0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a10:	00d0      	lsls	r0, r2, #3
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	1912      	adds	r2, r2, r4
 8002a18:	eb45 0303 	adc.w	r3, r5, r3
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0299      	lsls	r1, r3, #10
 8002a26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a2a:	0290      	lsls	r0, r2, #10
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	f7fd fcda 	bl	80003f4 <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	60bb      	str	r3, [r7, #8]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a66:	60bb      	str	r3, [r7, #8]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000001c 	.word	0x2000001c

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	08004b0c 	.word	0x08004b0c

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	; (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08004b0c 	.word	0x08004b0c

08002aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e041      	b.n	8002b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fe fefa 	bl	800190c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3304      	adds	r3, #4
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	f000 fdda 	bl	80036e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d001      	beq.n	8002ba4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e03c      	b.n	8002c1e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	; (8002c2c <HAL_TIM_Base_Start+0xa0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d018      	beq.n	8002be8 <HAL_TIM_Base_Start+0x5c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbe:	d013      	beq.n	8002be8 <HAL_TIM_Base_Start+0x5c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <HAL_TIM_Base_Start+0xa4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00e      	beq.n	8002be8 <HAL_TIM_Base_Start+0x5c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <HAL_TIM_Base_Start+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d009      	beq.n	8002be8 <HAL_TIM_Base_Start+0x5c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a17      	ldr	r2, [pc, #92]	; (8002c38 <HAL_TIM_Base_Start+0xac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d004      	beq.n	8002be8 <HAL_TIM_Base_Start+0x5c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_TIM_Base_Start+0xb0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d111      	bne.n	8002c0c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d010      	beq.n	8002c1c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0201 	orr.w	r2, r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c0a:	e007      	b.n	8002c1c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40014000 	.word	0x40014000

08002c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d001      	beq.n	8002c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e044      	b.n	8002ce2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d018      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c82:	d013      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a1a      	ldr	r2, [pc, #104]	; (8002cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a19      	ldr	r2, [pc, #100]	; (8002cf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x6c>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d111      	bne.n	8002cd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d010      	beq.n	8002ce0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cce:	e007      	b.n	8002ce0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40014000 	.word	0x40014000

08002d04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f839 	bl	8002da2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fcce 	bl	80036e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_TIM_PWM_Start+0x24>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	bf14      	ite	ne
 8002dd4:	2301      	movne	r3, #1
 8002dd6:	2300      	moveq	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e022      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d109      	bne.n	8002df6 <HAL_TIM_PWM_Start+0x3e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	bf14      	ite	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	2300      	moveq	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	e015      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d109      	bne.n	8002e10 <HAL_TIM_PWM_Start+0x58>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e008      	b.n	8002e22 <HAL_TIM_PWM_Start+0x6a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e068      	b.n	8002efc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x82>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e38:	e013      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b04      	cmp	r3, #4
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x92>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e48:	e00b      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_PWM_Start+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e58:	e003      	b.n	8002e62 <HAL_TIM_PWM_Start+0xaa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2201      	movs	r2, #1
 8002e68:	6839      	ldr	r1, [r7, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fee0 	bl	8003c30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a23      	ldr	r2, [pc, #140]	; (8002f04 <HAL_TIM_PWM_Start+0x14c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <HAL_TIM_PWM_Start+0x14c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d018      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9c:	d013      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_TIM_PWM_Start+0x150>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00e      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_TIM_PWM_Start+0x154>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d009      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <HAL_TIM_PWM_Start+0x158>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_TIM_PWM_Start+0x10e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a14      	ldr	r2, [pc, #80]	; (8002f14 <HAL_TIM_PWM_Start+0x15c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d111      	bne.n	8002eea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b06      	cmp	r3, #6
 8002ed6:	d010      	beq.n	8002efa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	e007      	b.n	8002efa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f042 0201 	orr.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e097      	b.n	800305c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7fe fc9b 	bl	800187c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f5c:	f023 0307 	bic.w	r3, r3, #7
 8002f60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f000 fbb9 	bl	80036e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	4313      	orrs	r3, r2
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002fb8:	f023 030c 	bic.w	r3, r3, #12
 8002fbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	021b      	lsls	r3, r3, #8
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	011a      	lsls	r2, r3, #4
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	031b      	lsls	r3, r3, #12
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002ffe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	4313      	orrs	r3, r2
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003074:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800307c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003084:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800308c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d110      	bne.n	80030b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d102      	bne.n	80030a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800309a:	7b7b      	ldrb	r3, [r7, #13]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d001      	beq.n	80030a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e069      	b.n	8003178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b4:	e031      	b.n	800311a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b04      	cmp	r3, #4
 80030ba:	d110      	bne.n	80030de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030bc:	7bbb      	ldrb	r3, [r7, #14]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030c2:	7b3b      	ldrb	r3, [r7, #12]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d001      	beq.n	80030cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e055      	b.n	8003178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2202      	movs	r2, #2
 80030d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030dc:	e01d      	b.n	800311a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d108      	bne.n	80030f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80030e4:	7bbb      	ldrb	r3, [r7, #14]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030ea:	7b7b      	ldrb	r3, [r7, #13]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d102      	bne.n	80030f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030f0:	7b3b      	ldrb	r3, [r7, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d001      	beq.n	80030fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03e      	b.n	8003178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2202      	movs	r2, #2
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2202      	movs	r2, #2
 8003106:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2202      	movs	r2, #2
 800310e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_TIM_Encoder_Start+0xc4>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	2b04      	cmp	r3, #4
 8003124:	d008      	beq.n	8003138 <HAL_TIM_Encoder_Start+0xd4>
 8003126:	e00f      	b.n	8003148 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd7d 	bl	8003c30 <TIM_CCxChannelCmd>
      break;
 8003136:	e016      	b.n	8003166 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2201      	movs	r2, #1
 800313e:	2104      	movs	r1, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fd75 	bl	8003c30 <TIM_CCxChannelCmd>
      break;
 8003146:	e00e      	b.n	8003166 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2201      	movs	r2, #1
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f000 fd6d 	bl	8003c30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2104      	movs	r1, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fd66 	bl	8003c30 <TIM_CCxChannelCmd>
      break;
 8003164:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d122      	bne.n	80031dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d11b      	bne.n	80031dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0202 	mvn.w	r2, #2
 80031ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa70 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa62 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fa73 	bl	80036bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d122      	bne.n	8003230 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b04      	cmp	r3, #4
 80031f6:	d11b      	bne.n	8003230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0204 	mvn.w	r2, #4
 8003200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa46 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa38 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fa49 	bl	80036bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b08      	cmp	r3, #8
 800323c:	d122      	bne.n	8003284 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b08      	cmp	r3, #8
 800324a:	d11b      	bne.n	8003284 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0208 	mvn.w	r2, #8
 8003254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2204      	movs	r2, #4
 800325a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 fa1c 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 8003270:	e005      	b.n	800327e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa0e 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fa1f 	bl	80036bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0310 	and.w	r3, r3, #16
 800328e:	2b10      	cmp	r3, #16
 8003290:	d122      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b10      	cmp	r3, #16
 800329e:	d11b      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0210 	mvn.w	r2, #16
 80032a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2208      	movs	r2, #8
 80032ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9f2 	bl	80036a8 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f9e4 	bl	8003694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f9f5 	bl	80036bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0201 	mvn.w	r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe fa58 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330e:	2b80      	cmp	r3, #128	; 0x80
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b80      	cmp	r3, #128	; 0x80
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 fd1e 	bl	8003d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333a:	2b40      	cmp	r3, #64	; 0x40
 800333c:	d10e      	bne.n	800335c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003348:	2b40      	cmp	r3, #64	; 0x40
 800334a:	d107      	bne.n	800335c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9ba 	bl	80036d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b20      	cmp	r3, #32
 8003368:	d10e      	bne.n	8003388 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b20      	cmp	r3, #32
 8003376:	d107      	bne.n	8003388 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f06f 0220 	mvn.w	r2, #32
 8003380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fce8 	bl	8003d58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0ac      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x174>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	f200 809f 	bhi.w	80034f8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80033ba:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80033bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c0:	080033f5 	.word	0x080033f5
 80033c4:	080034f9 	.word	0x080034f9
 80033c8:	080034f9 	.word	0x080034f9
 80033cc:	080034f9 	.word	0x080034f9
 80033d0:	08003435 	.word	0x08003435
 80033d4:	080034f9 	.word	0x080034f9
 80033d8:	080034f9 	.word	0x080034f9
 80033dc:	080034f9 	.word	0x080034f9
 80033e0:	08003477 	.word	0x08003477
 80033e4:	080034f9 	.word	0x080034f9
 80033e8:	080034f9 	.word	0x080034f9
 80033ec:	080034f9 	.word	0x080034f9
 80033f0:	080034b7 	.word	0x080034b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68b9      	ldr	r1, [r7, #8]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f9f2 	bl	80037e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0208 	orr.w	r2, r2, #8
 800340e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699a      	ldr	r2, [r3, #24]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6999      	ldr	r1, [r3, #24]
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	619a      	str	r2, [r3, #24]
      break;
 8003432:	e062      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa38 	bl	80038b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800344e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	699a      	ldr	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800345e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6999      	ldr	r1, [r3, #24]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	021a      	lsls	r2, r3, #8
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	619a      	str	r2, [r3, #24]
      break;
 8003474:	e041      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68b9      	ldr	r1, [r7, #8]
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fa83 	bl	8003988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0208 	orr.w	r2, r2, #8
 8003490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	69da      	ldr	r2, [r3, #28]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0204 	bic.w	r2, r2, #4
 80034a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	69d9      	ldr	r1, [r3, #28]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	61da      	str	r2, [r3, #28]
      break;
 80034b4:	e021      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68b9      	ldr	r1, [r7, #8]
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 facd 	bl	8003a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69da      	ldr	r2, [r3, #28]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	69da      	ldr	r2, [r3, #28]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	021a      	lsls	r2, r3, #8
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	61da      	str	r2, [r3, #28]
      break;
 80034f6:	e000      	b.n	80034fa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80034f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_TIM_ConfigClockSource+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e0b3      	b.n	800368c <HAL_TIM_ConfigClockSource+0x180>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003542:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800354a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d03e      	beq.n	80035dc <HAL_TIM_ConfigClockSource+0xd0>
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	f200 8087 	bhi.w	8003674 <HAL_TIM_ConfigClockSource+0x168>
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	f000 8085 	beq.w	8003678 <HAL_TIM_ConfigClockSource+0x16c>
 800356e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003572:	d87f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 8003574:	2b70      	cmp	r3, #112	; 0x70
 8003576:	d01a      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xa2>
 8003578:	2b70      	cmp	r3, #112	; 0x70
 800357a:	d87b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 800357c:	2b60      	cmp	r3, #96	; 0x60
 800357e:	d050      	beq.n	8003622 <HAL_TIM_ConfigClockSource+0x116>
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d877      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 8003584:	2b50      	cmp	r3, #80	; 0x50
 8003586:	d03c      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xf6>
 8003588:	2b50      	cmp	r3, #80	; 0x50
 800358a:	d873      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 800358c:	2b40      	cmp	r3, #64	; 0x40
 800358e:	d058      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0x136>
 8003590:	2b40      	cmp	r3, #64	; 0x40
 8003592:	d86f      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 8003594:	2b30      	cmp	r3, #48	; 0x30
 8003596:	d064      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x156>
 8003598:	2b30      	cmp	r3, #48	; 0x30
 800359a:	d86b      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d060      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x156>
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d867      	bhi.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d05c      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x156>
 80035a8:	2b10      	cmp	r3, #16
 80035aa:	d05a      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035ac:	e062      	b.n	8003674 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f000 fb17 	bl	8003bf0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80035d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	609a      	str	r2, [r3, #8]
      break;
 80035da:	e04e      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	6899      	ldr	r1, [r3, #8]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f000 fb00 	bl	8003bf0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035fe:	609a      	str	r2, [r3, #8]
      break;
 8003600:	e03b      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	461a      	mov	r2, r3
 8003610:	f000 fa74 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2150      	movs	r1, #80	; 0x50
 800361a:	4618      	mov	r0, r3
 800361c:	f000 facd 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003620:	e02b      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	461a      	mov	r2, r3
 8003630:	f000 fa93 	bl	8003b5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2160      	movs	r1, #96	; 0x60
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fabd 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003640:	e01b      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	461a      	mov	r2, r3
 8003650:	f000 fa54 	bl	8003afc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2140      	movs	r1, #64	; 0x40
 800365a:	4618      	mov	r0, r3
 800365c:	f000 faad 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003660:	e00b      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4619      	mov	r1, r3
 800366c:	4610      	mov	r0, r2
 800366e:	f000 faa4 	bl	8003bba <TIM_ITRx_SetConfig>
        break;
 8003672:	e002      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003674:	bf00      	nop
 8003676:	e000      	b.n	800367a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003678:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a34      	ldr	r2, [pc, #208]	; (80037c8 <TIM_Base_SetConfig+0xe4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00f      	beq.n	800371c <TIM_Base_SetConfig+0x38>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003702:	d00b      	beq.n	800371c <TIM_Base_SetConfig+0x38>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a31      	ldr	r2, [pc, #196]	; (80037cc <TIM_Base_SetConfig+0xe8>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d007      	beq.n	800371c <TIM_Base_SetConfig+0x38>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a30      	ldr	r2, [pc, #192]	; (80037d0 <TIM_Base_SetConfig+0xec>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <TIM_Base_SetConfig+0x38>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a2f      	ldr	r2, [pc, #188]	; (80037d4 <TIM_Base_SetConfig+0xf0>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d108      	bne.n	800372e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	4313      	orrs	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a25      	ldr	r2, [pc, #148]	; (80037c8 <TIM_Base_SetConfig+0xe4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d01b      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373c:	d017      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <TIM_Base_SetConfig+0xe8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <TIM_Base_SetConfig+0xec>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00f      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a20      	ldr	r2, [pc, #128]	; (80037d4 <TIM_Base_SetConfig+0xf0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00b      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a1f      	ldr	r2, [pc, #124]	; (80037d8 <TIM_Base_SetConfig+0xf4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <TIM_Base_SetConfig+0xf8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d003      	beq.n	800376e <TIM_Base_SetConfig+0x8a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_Base_SetConfig+0xfc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d108      	bne.n	8003780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <TIM_Base_SetConfig+0xe4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	691a      	ldr	r2, [r3, #16]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	615a      	str	r2, [r3, #20]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40000400 	.word	0x40000400
 80037d0:	40000800 	.word	0x40000800
 80037d4:	40000c00 	.word	0x40000c00
 80037d8:	40014000 	.word	0x40014000
 80037dc:	40014400 	.word	0x40014400
 80037e0:	40014800 	.word	0x40014800

080037e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	f023 0201 	bic.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f023 0302 	bic.w	r3, r3, #2
 800382c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	4a1c      	ldr	r2, [pc, #112]	; (80038ac <TIM_OC1_SetConfig+0xc8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d10c      	bne.n	800385a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	f023 0308 	bic.w	r3, r3, #8
 8003846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <TIM_OC1_SetConfig+0xc8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4313      	orrs	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	621a      	str	r2, [r3, #32]
}
 80038a0:	bf00      	nop
 80038a2:	371c      	adds	r7, #28
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40010000 	.word	0x40010000

080038b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0210 	bic.w	r2, r3, #16
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0320 	bic.w	r3, r3, #32
 80038fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <TIM_OC2_SetConfig+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10d      	bne.n	800392c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a15      	ldr	r2, [pc, #84]	; (8003984 <TIM_OC2_SetConfig+0xd4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d113      	bne.n	800395c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800393a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	621a      	str	r2, [r3, #32]
}
 8003976:	bf00      	nop
 8003978:	371c      	adds	r7, #28
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40010000 	.word	0x40010000

08003988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003988:	b480      	push	{r7}
 800398a:	b087      	sub	sp, #28
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f023 0303 	bic.w	r3, r3, #3
 80039be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80039d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	697a      	ldr	r2, [r7, #20]
 80039da:	4313      	orrs	r3, r2
 80039dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1d      	ldr	r2, [pc, #116]	; (8003a58 <TIM_OC3_SetConfig+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10d      	bne.n	8003a02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a14      	ldr	r2, [pc, #80]	; (8003a58 <TIM_OC3_SetConfig+0xd0>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d113      	bne.n	8003a32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	621a      	str	r2, [r3, #32]
}
 8003a4c:	bf00      	nop
 8003a4e:	371c      	adds	r7, #28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	40010000 	.word	0x40010000

08003a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	021b      	lsls	r3, r3, #8
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	031b      	lsls	r3, r3, #12
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a10      	ldr	r2, [pc, #64]	; (8003af8 <TIM_OC4_SetConfig+0x9c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d109      	bne.n	8003ad0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ac2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	019b      	lsls	r3, r3, #6
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	621a      	str	r2, [r3, #32]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40010000 	.word	0x40010000

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0210 	bic.w	r2, r3, #16
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	031b      	lsls	r3, r3, #12
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f043 0307 	orr.w	r3, r3, #7
 8003bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	021a      	lsls	r2, r3, #8
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	609a      	str	r2, [r3, #8]
}
 8003c24:	bf00      	nop
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f003 031f 	and.w	r3, r3, #31
 8003c42:	2201      	movs	r2, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1a      	ldr	r2, [r3, #32]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	401a      	ands	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1a      	ldr	r2, [r3, #32]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 031f 	and.w	r3, r3, #31
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	fa01 f303 	lsl.w	r3, r1, r3
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
}
 8003c6e:	bf00      	nop
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
	...

08003c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e050      	b.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d018      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce0:	d013      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a18      	ldr	r2, [pc, #96]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00e      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a15      	ldr	r2, [pc, #84]	; (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d004      	beq.n	8003d0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10c      	bne.n	8003d24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40000400 	.word	0x40000400
 8003d4c:	40000800 	.word	0x40000800
 8003d50:	40000c00 	.word	0x40000c00
 8003d54:	40014000 	.word	0x40014000

08003d58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e03f      	b.n	8003e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd fe26 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	; 0x24
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f829 	bl	8003e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	b09f      	sub	sp, #124	; 0x7c
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	ea40 0301 	orr.w	r3, r0, r1
 8003e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e60:	f021 010c 	bic.w	r1, r1, #12
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	6999      	ldr	r1, [r3, #24]
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	ea40 0301 	orr.w	r3, r0, r1
 8003e84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4bc5      	ldr	r3, [pc, #788]	; (80041a0 <UART_SetConfig+0x384>)
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d004      	beq.n	8003e9a <UART_SetConfig+0x7e>
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4bc3      	ldr	r3, [pc, #780]	; (80041a4 <UART_SetConfig+0x388>)
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d103      	bne.n	8003ea2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e9a:	f7fe fe13 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 8003e9e:	6778      	str	r0, [r7, #116]	; 0x74
 8003ea0:	e002      	b.n	8003ea8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ea2:	f7fe fdfb 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 8003ea6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	69db      	ldr	r3, [r3, #28]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb0:	f040 80b6 	bne.w	8004020 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb6:	461c      	mov	r4, r3
 8003eb8:	f04f 0500 	mov.w	r5, #0
 8003ebc:	4622      	mov	r2, r4
 8003ebe:	462b      	mov	r3, r5
 8003ec0:	1891      	adds	r1, r2, r2
 8003ec2:	6439      	str	r1, [r7, #64]	; 0x40
 8003ec4:	415b      	adcs	r3, r3
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ecc:	1912      	adds	r2, r2, r4
 8003ece:	eb45 0303 	adc.w	r3, r5, r3
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f04f 0100 	mov.w	r1, #0
 8003eda:	00d9      	lsls	r1, r3, #3
 8003edc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ee0:	00d0      	lsls	r0, r2, #3
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	1911      	adds	r1, r2, r4
 8003ee8:	6639      	str	r1, [r7, #96]	; 0x60
 8003eea:	416b      	adcs	r3, r5
 8003eec:	667b      	str	r3, [r7, #100]	; 0x64
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003efc:	415b      	adcs	r3, r3
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f04:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f08:	f7fc fa74 	bl	80003f4 <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4ba5      	ldr	r3, [pc, #660]	; (80041a8 <UART_SetConfig+0x38c>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011e      	lsls	r6, r3, #4
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	461c      	mov	r4, r3
 8003f1e:	f04f 0500 	mov.w	r5, #0
 8003f22:	4622      	mov	r2, r4
 8003f24:	462b      	mov	r3, r5
 8003f26:	1891      	adds	r1, r2, r2
 8003f28:	6339      	str	r1, [r7, #48]	; 0x30
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f32:	1912      	adds	r2, r2, r4
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	f04f 0000 	mov.w	r0, #0
 8003f3c:	f04f 0100 	mov.w	r1, #0
 8003f40:	00d9      	lsls	r1, r3, #3
 8003f42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f46:	00d0      	lsls	r0, r2, #3
 8003f48:	4602      	mov	r2, r0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	1911      	adds	r1, r2, r4
 8003f4e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f50:	416b      	adcs	r3, r5
 8003f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f62:	415b      	adcs	r3, r3
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f6a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f6e:	f7fc fa41 	bl	80003f4 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4b8c      	ldr	r3, [pc, #560]	; (80041a8 <UART_SetConfig+0x38c>)
 8003f78:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	2164      	movs	r1, #100	; 0x64
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	3332      	adds	r3, #50	; 0x32
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <UART_SetConfig+0x38c>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f98:	441e      	add	r6, r3
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	1894      	adds	r4, r2, r2
 8003fa8:	623c      	str	r4, [r7, #32]
 8003faa:	415b      	adcs	r3, r3
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fb2:	1812      	adds	r2, r2, r0
 8003fb4:	eb41 0303 	adc.w	r3, r1, r3
 8003fb8:	f04f 0400 	mov.w	r4, #0
 8003fbc:	f04f 0500 	mov.w	r5, #0
 8003fc0:	00dd      	lsls	r5, r3, #3
 8003fc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc6:	00d4      	lsls	r4, r2, #3
 8003fc8:	4622      	mov	r2, r4
 8003fca:	462b      	mov	r3, r5
 8003fcc:	1814      	adds	r4, r2, r0
 8003fce:	653c      	str	r4, [r7, #80]	; 0x50
 8003fd0:	414b      	adcs	r3, r1
 8003fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	1891      	adds	r1, r2, r2
 8003fe0:	61b9      	str	r1, [r7, #24]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fee:	f7fc fa01 	bl	80003f4 <__aeabi_uldivmod>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <UART_SetConfig+0x38c>)
 8003ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	2164      	movs	r1, #100	; 0x64
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	3332      	adds	r3, #50	; 0x32
 800400a:	4a67      	ldr	r2, [pc, #412]	; (80041a8 <UART_SetConfig+0x38c>)
 800400c:	fba2 2303 	umull	r2, r3, r2, r3
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	f003 0207 	and.w	r2, r3, #7
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4432      	add	r2, r6
 800401c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800401e:	e0b9      	b.n	8004194 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004022:	461c      	mov	r4, r3
 8004024:	f04f 0500 	mov.w	r5, #0
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	1891      	adds	r1, r2, r2
 800402e:	6139      	str	r1, [r7, #16]
 8004030:	415b      	adcs	r3, r3
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004038:	1912      	adds	r2, r2, r4
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	00d9      	lsls	r1, r3, #3
 8004048:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800404c:	00d0      	lsls	r0, r2, #3
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	eb12 0804 	adds.w	r8, r2, r4
 8004056:	eb43 0905 	adc.w	r9, r3, r5
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	f04f 0100 	mov.w	r1, #0
 8004064:	f04f 0200 	mov.w	r2, #0
 8004068:	f04f 0300 	mov.w	r3, #0
 800406c:	008b      	lsls	r3, r1, #2
 800406e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004072:	0082      	lsls	r2, r0, #2
 8004074:	4640      	mov	r0, r8
 8004076:	4649      	mov	r1, r9
 8004078:	f7fc f9bc 	bl	80003f4 <__aeabi_uldivmod>
 800407c:	4602      	mov	r2, r0
 800407e:	460b      	mov	r3, r1
 8004080:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <UART_SetConfig+0x38c>)
 8004082:	fba3 2302 	umull	r2, r3, r3, r2
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	011e      	lsls	r6, r3, #4
 800408a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408c:	4618      	mov	r0, r3
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	1894      	adds	r4, r2, r2
 8004098:	60bc      	str	r4, [r7, #8]
 800409a:	415b      	adcs	r3, r3
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040a2:	1812      	adds	r2, r2, r0
 80040a4:	eb41 0303 	adc.w	r3, r1, r3
 80040a8:	f04f 0400 	mov.w	r4, #0
 80040ac:	f04f 0500 	mov.w	r5, #0
 80040b0:	00dd      	lsls	r5, r3, #3
 80040b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040b6:	00d4      	lsls	r4, r2, #3
 80040b8:	4622      	mov	r2, r4
 80040ba:	462b      	mov	r3, r5
 80040bc:	1814      	adds	r4, r2, r0
 80040be:	64bc      	str	r4, [r7, #72]	; 0x48
 80040c0:	414b      	adcs	r3, r1
 80040c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f04f 0100 	mov.w	r1, #0
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	008b      	lsls	r3, r1, #2
 80040d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040dc:	0082      	lsls	r2, r0, #2
 80040de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040e2:	f7fc f987 	bl	80003f4 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <UART_SetConfig+0x38c>)
 80040ec:	fba3 1302 	umull	r1, r3, r3, r2
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	2164      	movs	r1, #100	; 0x64
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	3332      	adds	r3, #50	; 0x32
 80040fe:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <UART_SetConfig+0x38c>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800410a:	441e      	add	r6, r3
 800410c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800410e:	4618      	mov	r0, r3
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	1894      	adds	r4, r2, r2
 800411a:	603c      	str	r4, [r7, #0]
 800411c:	415b      	adcs	r3, r3
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004124:	1812      	adds	r2, r2, r0
 8004126:	eb41 0303 	adc.w	r3, r1, r3
 800412a:	f04f 0400 	mov.w	r4, #0
 800412e:	f04f 0500 	mov.w	r5, #0
 8004132:	00dd      	lsls	r5, r3, #3
 8004134:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004138:	00d4      	lsls	r4, r2, #3
 800413a:	4622      	mov	r2, r4
 800413c:	462b      	mov	r3, r5
 800413e:	eb12 0a00 	adds.w	sl, r2, r0
 8004142:	eb43 0b01 	adc.w	fp, r3, r1
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	008b      	lsls	r3, r1, #2
 800415a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800415e:	0082      	lsls	r2, r0, #2
 8004160:	4650      	mov	r0, sl
 8004162:	4659      	mov	r1, fp
 8004164:	f7fc f946 	bl	80003f4 <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <UART_SetConfig+0x38c>)
 800416e:	fba3 1302 	umull	r1, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2164      	movs	r1, #100	; 0x64
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <UART_SetConfig+0x38c>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4432      	add	r2, r6
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	bf00      	nop
 8004196:	377c      	adds	r7, #124	; 0x7c
 8004198:	46bd      	mov	sp, r7
 800419a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800419e:	bf00      	nop
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40011400 	.word	0x40011400
 80041a8:	51eb851f 	.word	0x51eb851f

080041ac <__errno>:
 80041ac:	4b01      	ldr	r3, [pc, #4]	; (80041b4 <__errno+0x8>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20000028 	.word	0x20000028

080041b8 <__libc_init_array>:
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	4d0d      	ldr	r5, [pc, #52]	; (80041f0 <__libc_init_array+0x38>)
 80041bc:	4c0d      	ldr	r4, [pc, #52]	; (80041f4 <__libc_init_array+0x3c>)
 80041be:	1b64      	subs	r4, r4, r5
 80041c0:	10a4      	asrs	r4, r4, #2
 80041c2:	2600      	movs	r6, #0
 80041c4:	42a6      	cmp	r6, r4
 80041c6:	d109      	bne.n	80041dc <__libc_init_array+0x24>
 80041c8:	4d0b      	ldr	r5, [pc, #44]	; (80041f8 <__libc_init_array+0x40>)
 80041ca:	4c0c      	ldr	r4, [pc, #48]	; (80041fc <__libc_init_array+0x44>)
 80041cc:	f000 fc8a 	bl	8004ae4 <_init>
 80041d0:	1b64      	subs	r4, r4, r5
 80041d2:	10a4      	asrs	r4, r4, #2
 80041d4:	2600      	movs	r6, #0
 80041d6:	42a6      	cmp	r6, r4
 80041d8:	d105      	bne.n	80041e6 <__libc_init_array+0x2e>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e0:	4798      	blx	r3
 80041e2:	3601      	adds	r6, #1
 80041e4:	e7ee      	b.n	80041c4 <__libc_init_array+0xc>
 80041e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ea:	4798      	blx	r3
 80041ec:	3601      	adds	r6, #1
 80041ee:	e7f2      	b.n	80041d6 <__libc_init_array+0x1e>
 80041f0:	08004b40 	.word	0x08004b40
 80041f4:	08004b40 	.word	0x08004b40
 80041f8:	08004b40 	.word	0x08004b40
 80041fc:	08004b44 	.word	0x08004b44

08004200 <memset>:
 8004200:	4402      	add	r2, r0
 8004202:	4603      	mov	r3, r0
 8004204:	4293      	cmp	r3, r2
 8004206:	d100      	bne.n	800420a <memset+0xa>
 8004208:	4770      	bx	lr
 800420a:	f803 1b01 	strb.w	r1, [r3], #1
 800420e:	e7f9      	b.n	8004204 <memset+0x4>

08004210 <powf>:
 8004210:	b508      	push	{r3, lr}
 8004212:	ed2d 8b04 	vpush	{d8-d9}
 8004216:	eeb0 9a40 	vmov.f32	s18, s0
 800421a:	eef0 8a60 	vmov.f32	s17, s1
 800421e:	f000 f8b5 	bl	800438c <__ieee754_powf>
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <powf+0x120>)
 8004224:	f993 3000 	ldrsb.w	r3, [r3]
 8004228:	3301      	adds	r3, #1
 800422a:	eeb0 8a40 	vmov.f32	s16, s0
 800422e:	d012      	beq.n	8004256 <powf+0x46>
 8004230:	eef4 8a68 	vcmp.f32	s17, s17
 8004234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004238:	d60d      	bvs.n	8004256 <powf+0x46>
 800423a:	eeb4 9a49 	vcmp.f32	s18, s18
 800423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004242:	d70d      	bvc.n	8004260 <powf+0x50>
 8004244:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004250:	bf08      	it	eq
 8004252:	eeb0 8a67 	vmoveq.f32	s16, s15
 8004256:	eeb0 0a48 	vmov.f32	s0, s16
 800425a:	ecbd 8b04 	vpop	{d8-d9}
 800425e:	bd08      	pop	{r3, pc}
 8004260:	eddf 9a34 	vldr	s19, [pc, #208]	; 8004334 <powf+0x124>
 8004264:	eeb4 9a69 	vcmp.f32	s18, s19
 8004268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800426c:	d116      	bne.n	800429c <powf+0x8c>
 800426e:	eef4 8a69 	vcmp.f32	s17, s19
 8004272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004276:	d057      	beq.n	8004328 <powf+0x118>
 8004278:	eeb0 0a68 	vmov.f32	s0, s17
 800427c:	f000 fb50 	bl	8004920 <finitef>
 8004280:	2800      	cmp	r0, #0
 8004282:	d0e8      	beq.n	8004256 <powf+0x46>
 8004284:	eef4 8ae9 	vcmpe.f32	s17, s19
 8004288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428c:	d5e3      	bpl.n	8004256 <powf+0x46>
 800428e:	f7ff ff8d 	bl	80041ac <__errno>
 8004292:	2321      	movs	r3, #33	; 0x21
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8004338 <powf+0x128>
 800429a:	e7dc      	b.n	8004256 <powf+0x46>
 800429c:	f000 fb40 	bl	8004920 <finitef>
 80042a0:	bb50      	cbnz	r0, 80042f8 <powf+0xe8>
 80042a2:	eeb0 0a49 	vmov.f32	s0, s18
 80042a6:	f000 fb3b 	bl	8004920 <finitef>
 80042aa:	b328      	cbz	r0, 80042f8 <powf+0xe8>
 80042ac:	eeb0 0a68 	vmov.f32	s0, s17
 80042b0:	f000 fb36 	bl	8004920 <finitef>
 80042b4:	b300      	cbz	r0, 80042f8 <powf+0xe8>
 80042b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	d706      	bvc.n	80042ce <powf+0xbe>
 80042c0:	f7ff ff74 	bl	80041ac <__errno>
 80042c4:	2321      	movs	r3, #33	; 0x21
 80042c6:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80042ca:	6003      	str	r3, [r0, #0]
 80042cc:	e7c3      	b.n	8004256 <powf+0x46>
 80042ce:	f7ff ff6d 	bl	80041ac <__errno>
 80042d2:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80042d6:	2322      	movs	r3, #34	; 0x22
 80042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042dc:	6003      	str	r3, [r0, #0]
 80042de:	d508      	bpl.n	80042f2 <powf+0xe2>
 80042e0:	eeb0 0a68 	vmov.f32	s0, s17
 80042e4:	f000 fb30 	bl	8004948 <rintf>
 80042e8:	eeb4 0a68 	vcmp.f32	s0, s17
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d1d1      	bne.n	8004296 <powf+0x86>
 80042f2:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800433c <powf+0x12c>
 80042f6:	e7ae      	b.n	8004256 <powf+0x46>
 80042f8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	d1a9      	bne.n	8004256 <powf+0x46>
 8004302:	eeb0 0a49 	vmov.f32	s0, s18
 8004306:	f000 fb0b 	bl	8004920 <finitef>
 800430a:	2800      	cmp	r0, #0
 800430c:	d0a3      	beq.n	8004256 <powf+0x46>
 800430e:	eeb0 0a68 	vmov.f32	s0, s17
 8004312:	f000 fb05 	bl	8004920 <finitef>
 8004316:	2800      	cmp	r0, #0
 8004318:	d09d      	beq.n	8004256 <powf+0x46>
 800431a:	f7ff ff47 	bl	80041ac <__errno>
 800431e:	2322      	movs	r3, #34	; 0x22
 8004320:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8004334 <powf+0x124>
 8004324:	6003      	str	r3, [r0, #0]
 8004326:	e796      	b.n	8004256 <powf+0x46>
 8004328:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800432c:	e793      	b.n	8004256 <powf+0x46>
 800432e:	bf00      	nop
 8004330:	2000008c 	.word	0x2000008c
 8004334:	00000000 	.word	0x00000000
 8004338:	ff800000 	.word	0xff800000
 800433c:	7f800000 	.word	0x7f800000

08004340 <sqrtf>:
 8004340:	b508      	push	{r3, lr}
 8004342:	ed2d 8b02 	vpush	{d8}
 8004346:	eeb0 8a40 	vmov.f32	s16, s0
 800434a:	f000 fadf 	bl	800490c <__ieee754_sqrtf>
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <sqrtf+0x44>)
 8004350:	f993 3000 	ldrsb.w	r3, [r3]
 8004354:	3301      	adds	r3, #1
 8004356:	d011      	beq.n	800437c <sqrtf+0x3c>
 8004358:	eeb4 8a48 	vcmp.f32	s16, s16
 800435c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004360:	d60c      	bvs.n	800437c <sqrtf+0x3c>
 8004362:	eddf 8a09 	vldr	s17, [pc, #36]	; 8004388 <sqrtf+0x48>
 8004366:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436e:	d505      	bpl.n	800437c <sqrtf+0x3c>
 8004370:	f7ff ff1c 	bl	80041ac <__errno>
 8004374:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8004378:	2321      	movs	r3, #33	; 0x21
 800437a:	6003      	str	r3, [r0, #0]
 800437c:	ecbd 8b02 	vpop	{d8}
 8004380:	bd08      	pop	{r3, pc}
 8004382:	bf00      	nop
 8004384:	2000008c 	.word	0x2000008c
 8004388:	00000000 	.word	0x00000000

0800438c <__ieee754_powf>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	ee10 5a90 	vmov	r5, s1
 8004394:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004398:	ed2d 8b02 	vpush	{d8}
 800439c:	eeb0 8a40 	vmov.f32	s16, s0
 80043a0:	eef0 8a60 	vmov.f32	s17, s1
 80043a4:	f000 8291 	beq.w	80048ca <__ieee754_powf+0x53e>
 80043a8:	ee10 8a10 	vmov	r8, s0
 80043ac:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80043b0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80043b4:	dc06      	bgt.n	80043c4 <__ieee754_powf+0x38>
 80043b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80043ba:	dd0a      	ble.n	80043d2 <__ieee754_powf+0x46>
 80043bc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80043c0:	f000 8283 	beq.w	80048ca <__ieee754_powf+0x53e>
 80043c4:	ecbd 8b02 	vpop	{d8}
 80043c8:	48d8      	ldr	r0, [pc, #864]	; (800472c <__ieee754_powf+0x3a0>)
 80043ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	f000 bab5 	b.w	800493c <nanf>
 80043d2:	f1b8 0f00 	cmp.w	r8, #0
 80043d6:	da1f      	bge.n	8004418 <__ieee754_powf+0x8c>
 80043d8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80043dc:	da2e      	bge.n	800443c <__ieee754_powf+0xb0>
 80043de:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80043e2:	f2c0 827b 	blt.w	80048dc <__ieee754_powf+0x550>
 80043e6:	15fb      	asrs	r3, r7, #23
 80043e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80043ec:	fa47 f603 	asr.w	r6, r7, r3
 80043f0:	fa06 f303 	lsl.w	r3, r6, r3
 80043f4:	42bb      	cmp	r3, r7
 80043f6:	f040 8271 	bne.w	80048dc <__ieee754_powf+0x550>
 80043fa:	f006 0601 	and.w	r6, r6, #1
 80043fe:	f1c6 0602 	rsb	r6, r6, #2
 8004402:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004406:	d120      	bne.n	800444a <__ieee754_powf+0xbe>
 8004408:	2d00      	cmp	r5, #0
 800440a:	f280 8264 	bge.w	80048d6 <__ieee754_powf+0x54a>
 800440e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004412:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004416:	e00d      	b.n	8004434 <__ieee754_powf+0xa8>
 8004418:	2600      	movs	r6, #0
 800441a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800441e:	d1f0      	bne.n	8004402 <__ieee754_powf+0x76>
 8004420:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004424:	f000 8251 	beq.w	80048ca <__ieee754_powf+0x53e>
 8004428:	dd0a      	ble.n	8004440 <__ieee754_powf+0xb4>
 800442a:	2d00      	cmp	r5, #0
 800442c:	f280 8250 	bge.w	80048d0 <__ieee754_powf+0x544>
 8004430:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8004730 <__ieee754_powf+0x3a4>
 8004434:	ecbd 8b02 	vpop	{d8}
 8004438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800443c:	2602      	movs	r6, #2
 800443e:	e7ec      	b.n	800441a <__ieee754_powf+0x8e>
 8004440:	2d00      	cmp	r5, #0
 8004442:	daf5      	bge.n	8004430 <__ieee754_powf+0xa4>
 8004444:	eeb1 0a68 	vneg.f32	s0, s17
 8004448:	e7f4      	b.n	8004434 <__ieee754_powf+0xa8>
 800444a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800444e:	d102      	bne.n	8004456 <__ieee754_powf+0xca>
 8004450:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004454:	e7ee      	b.n	8004434 <__ieee754_powf+0xa8>
 8004456:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800445a:	eeb0 0a48 	vmov.f32	s0, s16
 800445e:	d108      	bne.n	8004472 <__ieee754_powf+0xe6>
 8004460:	f1b8 0f00 	cmp.w	r8, #0
 8004464:	db05      	blt.n	8004472 <__ieee754_powf+0xe6>
 8004466:	ecbd 8b02 	vpop	{d8}
 800446a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446e:	f000 ba4d 	b.w	800490c <__ieee754_sqrtf>
 8004472:	f000 fa4e 	bl	8004912 <fabsf>
 8004476:	b124      	cbz	r4, 8004482 <__ieee754_powf+0xf6>
 8004478:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800447c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004480:	d117      	bne.n	80044b2 <__ieee754_powf+0x126>
 8004482:	2d00      	cmp	r5, #0
 8004484:	bfbc      	itt	lt
 8004486:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800448a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800448e:	f1b8 0f00 	cmp.w	r8, #0
 8004492:	dacf      	bge.n	8004434 <__ieee754_powf+0xa8>
 8004494:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004498:	ea54 0306 	orrs.w	r3, r4, r6
 800449c:	d104      	bne.n	80044a8 <__ieee754_powf+0x11c>
 800449e:	ee70 7a40 	vsub.f32	s15, s0, s0
 80044a2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80044a6:	e7c5      	b.n	8004434 <__ieee754_powf+0xa8>
 80044a8:	2e01      	cmp	r6, #1
 80044aa:	d1c3      	bne.n	8004434 <__ieee754_powf+0xa8>
 80044ac:	eeb1 0a40 	vneg.f32	s0, s0
 80044b0:	e7c0      	b.n	8004434 <__ieee754_powf+0xa8>
 80044b2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80044b6:	3801      	subs	r0, #1
 80044b8:	ea56 0300 	orrs.w	r3, r6, r0
 80044bc:	d104      	bne.n	80044c8 <__ieee754_powf+0x13c>
 80044be:	ee38 8a48 	vsub.f32	s16, s16, s16
 80044c2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80044c6:	e7b5      	b.n	8004434 <__ieee754_powf+0xa8>
 80044c8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80044cc:	dd6b      	ble.n	80045a6 <__ieee754_powf+0x21a>
 80044ce:	4b99      	ldr	r3, [pc, #612]	; (8004734 <__ieee754_powf+0x3a8>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	dc06      	bgt.n	80044e2 <__ieee754_powf+0x156>
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	daab      	bge.n	8004430 <__ieee754_powf+0xa4>
 80044d8:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004738 <__ieee754_powf+0x3ac>
 80044dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80044e0:	e7a8      	b.n	8004434 <__ieee754_powf+0xa8>
 80044e2:	4b96      	ldr	r3, [pc, #600]	; (800473c <__ieee754_powf+0x3b0>)
 80044e4:	429c      	cmp	r4, r3
 80044e6:	dd02      	ble.n	80044ee <__ieee754_powf+0x162>
 80044e8:	2d00      	cmp	r5, #0
 80044ea:	dcf5      	bgt.n	80044d8 <__ieee754_powf+0x14c>
 80044ec:	e7a0      	b.n	8004430 <__ieee754_powf+0xa4>
 80044ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80044f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80044f6:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004740 <__ieee754_powf+0x3b4>
 80044fa:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80044fe:	eee0 6a67 	vfms.f32	s13, s0, s15
 8004502:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004506:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800450a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800450e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004512:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8004744 <__ieee754_powf+0x3b8>
 8004516:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800451a:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004748 <__ieee754_powf+0x3bc>
 800451e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004522:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800474c <__ieee754_powf+0x3c0>
 8004526:	eef0 6a67 	vmov.f32	s13, s15
 800452a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800452e:	ee16 3a90 	vmov	r3, s13
 8004532:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004536:	f023 030f 	bic.w	r3, r3, #15
 800453a:	ee00 3a90 	vmov	s1, r3
 800453e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8004542:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004546:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800454a:	f025 050f 	bic.w	r5, r5, #15
 800454e:	ee07 5a10 	vmov	s14, r5
 8004552:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004556:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004562:	3e01      	subs	r6, #1
 8004564:	ea56 0200 	orrs.w	r2, r6, r0
 8004568:	ee07 5a10 	vmov	s14, r5
 800456c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004570:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004574:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004578:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800457c:	ee17 4a10 	vmov	r4, s14
 8004580:	bf08      	it	eq
 8004582:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004586:	2c00      	cmp	r4, #0
 8004588:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800458c:	f340 8184 	ble.w	8004898 <__ieee754_powf+0x50c>
 8004590:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004594:	f340 80fc 	ble.w	8004790 <__ieee754_powf+0x404>
 8004598:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004738 <__ieee754_powf+0x3ac>
 800459c:	ee28 0a27 	vmul.f32	s0, s16, s15
 80045a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80045a4:	e746      	b.n	8004434 <__ieee754_powf+0xa8>
 80045a6:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80045aa:	bf01      	itttt	eq
 80045ac:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8004750 <__ieee754_powf+0x3c4>
 80045b0:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80045b4:	f06f 0217 	mvneq.w	r2, #23
 80045b8:	ee17 4a90 	vmoveq	r4, s15
 80045bc:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80045c0:	bf18      	it	ne
 80045c2:	2200      	movne	r2, #0
 80045c4:	3b7f      	subs	r3, #127	; 0x7f
 80045c6:	4413      	add	r3, r2
 80045c8:	4a62      	ldr	r2, [pc, #392]	; (8004754 <__ieee754_powf+0x3c8>)
 80045ca:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80045ce:	4294      	cmp	r4, r2
 80045d0:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80045d4:	dd06      	ble.n	80045e4 <__ieee754_powf+0x258>
 80045d6:	4a60      	ldr	r2, [pc, #384]	; (8004758 <__ieee754_powf+0x3cc>)
 80045d8:	4294      	cmp	r4, r2
 80045da:	f340 80a4 	ble.w	8004726 <__ieee754_powf+0x39a>
 80045de:	3301      	adds	r3, #1
 80045e0:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80045e4:	2400      	movs	r4, #0
 80045e6:	4a5d      	ldr	r2, [pc, #372]	; (800475c <__ieee754_powf+0x3d0>)
 80045e8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80045ec:	ee07 1a90 	vmov	s15, r1
 80045f0:	ed92 7a00 	vldr	s14, [r2]
 80045f4:	4a5a      	ldr	r2, [pc, #360]	; (8004760 <__ieee754_powf+0x3d4>)
 80045f6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80045fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80045fe:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8004602:	1049      	asrs	r1, r1, #1
 8004604:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004608:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800460c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004610:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004614:	ee06 1a10 	vmov	s12, r1
 8004618:	ee65 4a26 	vmul.f32	s9, s10, s13
 800461c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004620:	ee14 7a90 	vmov	r7, s9
 8004624:	4017      	ands	r7, r2
 8004626:	ee05 7a90 	vmov	s11, r7
 800462a:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800462e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004632:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004764 <__ieee754_powf+0x3d8>
 8004636:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800463a:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800463e:	ee25 6a26 	vmul.f32	s12, s10, s13
 8004642:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004768 <__ieee754_powf+0x3dc>
 8004646:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800464a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800476c <__ieee754_powf+0x3e0>
 800464e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004652:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004740 <__ieee754_powf+0x3b4>
 8004656:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800465a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004770 <__ieee754_powf+0x3e4>
 800465e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8004662:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8004774 <__ieee754_powf+0x3e8>
 8004666:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800466a:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800466e:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8004672:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004676:	eee5 6a07 	vfma.f32	s13, s10, s14
 800467a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800467e:	eef0 7a45 	vmov.f32	s15, s10
 8004682:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee17 1a90 	vmov	r1, s15
 800468e:	4011      	ands	r1, r2
 8004690:	ee07 1a90 	vmov	s15, r1
 8004694:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8004698:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800469c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80046a0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80046a4:	eea6 7a27 	vfma.f32	s14, s12, s15
 80046a8:	eeb0 6a47 	vmov.f32	s12, s14
 80046ac:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80046b0:	ee16 1a10 	vmov	r1, s12
 80046b4:	4011      	ands	r1, r2
 80046b6:	ee06 1a90 	vmov	s13, r1
 80046ba:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80046be:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8004778 <__ieee754_powf+0x3ec>
 80046c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800477c <__ieee754_powf+0x3f0>
 80046c6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80046ca:	ee06 1a10 	vmov	s12, r1
 80046ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004780 <__ieee754_powf+0x3f4>
 80046d6:	492b      	ldr	r1, [pc, #172]	; (8004784 <__ieee754_powf+0x3f8>)
 80046d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80046dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80046e0:	edd1 7a00 	vldr	s15, [r1]
 80046e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	4b26      	ldr	r3, [pc, #152]	; (8004788 <__ieee754_powf+0x3fc>)
 80046ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046f2:	eef0 7a47 	vmov.f32	s15, s14
 80046f6:	eee6 7a25 	vfma.f32	s15, s12, s11
 80046fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80046fe:	edd4 0a00 	vldr	s1, [r4]
 8004702:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8004706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470a:	ee17 3a90 	vmov	r3, s15
 800470e:	4013      	ands	r3, r2
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004718:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800471c:	eee6 6a65 	vfms.f32	s13, s12, s11
 8004720:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004724:	e70f      	b.n	8004546 <__ieee754_powf+0x1ba>
 8004726:	2401      	movs	r4, #1
 8004728:	e75d      	b.n	80045e6 <__ieee754_powf+0x25a>
 800472a:	bf00      	nop
 800472c:	08004b14 	.word	0x08004b14
 8004730:	00000000 	.word	0x00000000
 8004734:	3f7ffff7 	.word	0x3f7ffff7
 8004738:	7149f2ca 	.word	0x7149f2ca
 800473c:	3f800007 	.word	0x3f800007
 8004740:	3eaaaaab 	.word	0x3eaaaaab
 8004744:	3fb8aa3b 	.word	0x3fb8aa3b
 8004748:	36eca570 	.word	0x36eca570
 800474c:	3fb8aa00 	.word	0x3fb8aa00
 8004750:	4b800000 	.word	0x4b800000
 8004754:	001cc471 	.word	0x001cc471
 8004758:	005db3d6 	.word	0x005db3d6
 800475c:	08004b18 	.word	0x08004b18
 8004760:	fffff000 	.word	0xfffff000
 8004764:	3e6c3255 	.word	0x3e6c3255
 8004768:	3e53f142 	.word	0x3e53f142
 800476c:	3e8ba305 	.word	0x3e8ba305
 8004770:	3edb6db7 	.word	0x3edb6db7
 8004774:	3f19999a 	.word	0x3f19999a
 8004778:	3f76384f 	.word	0x3f76384f
 800477c:	3f763800 	.word	0x3f763800
 8004780:	369dc3a0 	.word	0x369dc3a0
 8004784:	08004b28 	.word	0x08004b28
 8004788:	08004b20 	.word	0x08004b20
 800478c:	3338aa3c 	.word	0x3338aa3c
 8004790:	f040 8092 	bne.w	80048b8 <__ieee754_powf+0x52c>
 8004794:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800478c <__ieee754_powf+0x400>
 8004798:	ee37 7a67 	vsub.f32	s14, s14, s15
 800479c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80047a0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80047a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a8:	f73f aef6 	bgt.w	8004598 <__ieee754_powf+0x20c>
 80047ac:	15db      	asrs	r3, r3, #23
 80047ae:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80047b2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80047b6:	4103      	asrs	r3, r0
 80047b8:	4423      	add	r3, r4
 80047ba:	4949      	ldr	r1, [pc, #292]	; (80048e0 <__ieee754_powf+0x554>)
 80047bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80047c0:	3a7f      	subs	r2, #127	; 0x7f
 80047c2:	4111      	asrs	r1, r2
 80047c4:	ea23 0101 	bic.w	r1, r3, r1
 80047c8:	ee07 1a10 	vmov	s14, r1
 80047cc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80047d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80047d4:	f1c2 0217 	rsb	r2, r2, #23
 80047d8:	4110      	asrs	r0, r2
 80047da:	2c00      	cmp	r4, #0
 80047dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047e0:	bfb8      	it	lt
 80047e2:	4240      	neglt	r0, r0
 80047e4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80047e8:	eddf 6a3e 	vldr	s13, [pc, #248]	; 80048e4 <__ieee754_powf+0x558>
 80047ec:	ee17 3a10 	vmov	r3, s14
 80047f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80047f4:	f023 030f 	bic.w	r3, r3, #15
 80047f8:	ee07 3a10 	vmov	s14, r3
 80047fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004800:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004804:	eddf 7a38 	vldr	s15, [pc, #224]	; 80048e8 <__ieee754_powf+0x55c>
 8004808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800480c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004810:	eddf 6a36 	vldr	s13, [pc, #216]	; 80048ec <__ieee754_powf+0x560>
 8004814:	eeb0 0a67 	vmov.f32	s0, s15
 8004818:	eea7 0a26 	vfma.f32	s0, s14, s13
 800481c:	eeb0 6a40 	vmov.f32	s12, s0
 8004820:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004824:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004828:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800482c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80048f0 <__ieee754_powf+0x564>
 8004830:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80048f4 <__ieee754_powf+0x568>
 8004834:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004838:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80048f8 <__ieee754_powf+0x56c>
 800483c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004840:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80048fc <__ieee754_powf+0x570>
 8004844:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004848:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004900 <__ieee754_powf+0x574>
 800484c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004850:	eeb0 6a40 	vmov.f32	s12, s0
 8004854:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004858:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800485c:	eeb0 7a46 	vmov.f32	s14, s12
 8004860:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004864:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004868:	eee0 7a27 	vfma.f32	s15, s0, s15
 800486c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004874:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004878:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800487c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004880:	ee10 3a10 	vmov	r3, s0
 8004884:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004888:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800488c:	da1a      	bge.n	80048c4 <__ieee754_powf+0x538>
 800488e:	f000 f8b7 	bl	8004a00 <scalbnf>
 8004892:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004896:	e5cd      	b.n	8004434 <__ieee754_powf+0xa8>
 8004898:	4a1a      	ldr	r2, [pc, #104]	; (8004904 <__ieee754_powf+0x578>)
 800489a:	4293      	cmp	r3, r2
 800489c:	dd02      	ble.n	80048a4 <__ieee754_powf+0x518>
 800489e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004908 <__ieee754_powf+0x57c>
 80048a2:	e67b      	b.n	800459c <__ieee754_powf+0x210>
 80048a4:	d108      	bne.n	80048b8 <__ieee754_powf+0x52c>
 80048a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048aa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	f6ff af7b 	blt.w	80047ac <__ieee754_powf+0x420>
 80048b6:	e7f2      	b.n	800489e <__ieee754_powf+0x512>
 80048b8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80048bc:	f73f af76 	bgt.w	80047ac <__ieee754_powf+0x420>
 80048c0:	2000      	movs	r0, #0
 80048c2:	e78f      	b.n	80047e4 <__ieee754_powf+0x458>
 80048c4:	ee00 3a10 	vmov	s0, r3
 80048c8:	e7e3      	b.n	8004892 <__ieee754_powf+0x506>
 80048ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048ce:	e5b1      	b.n	8004434 <__ieee754_powf+0xa8>
 80048d0:	eeb0 0a68 	vmov.f32	s0, s17
 80048d4:	e5ae      	b.n	8004434 <__ieee754_powf+0xa8>
 80048d6:	eeb0 0a48 	vmov.f32	s0, s16
 80048da:	e5ab      	b.n	8004434 <__ieee754_powf+0xa8>
 80048dc:	2600      	movs	r6, #0
 80048de:	e590      	b.n	8004402 <__ieee754_powf+0x76>
 80048e0:	007fffff 	.word	0x007fffff
 80048e4:	3f317218 	.word	0x3f317218
 80048e8:	35bfbe8c 	.word	0x35bfbe8c
 80048ec:	3f317200 	.word	0x3f317200
 80048f0:	3331bb4c 	.word	0x3331bb4c
 80048f4:	b5ddea0e 	.word	0xb5ddea0e
 80048f8:	388ab355 	.word	0x388ab355
 80048fc:	bb360b61 	.word	0xbb360b61
 8004900:	3e2aaaab 	.word	0x3e2aaaab
 8004904:	43160000 	.word	0x43160000
 8004908:	0da24260 	.word	0x0da24260

0800490c <__ieee754_sqrtf>:
 800490c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004910:	4770      	bx	lr

08004912 <fabsf>:
 8004912:	ee10 3a10 	vmov	r3, s0
 8004916:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800491a:	ee00 3a10 	vmov	s0, r3
 800491e:	4770      	bx	lr

08004920 <finitef>:
 8004920:	b082      	sub	sp, #8
 8004922:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004926:	9801      	ldr	r0, [sp, #4]
 8004928:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800492c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004930:	bfac      	ite	ge
 8004932:	2000      	movge	r0, #0
 8004934:	2001      	movlt	r0, #1
 8004936:	b002      	add	sp, #8
 8004938:	4770      	bx	lr
	...

0800493c <nanf>:
 800493c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004944 <nanf+0x8>
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	7fc00000 	.word	0x7fc00000

08004948 <rintf>:
 8004948:	ee10 2a10 	vmov	r2, s0
 800494c:	b513      	push	{r0, r1, r4, lr}
 800494e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004952:	397f      	subs	r1, #127	; 0x7f
 8004954:	2916      	cmp	r1, #22
 8004956:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800495a:	dc47      	bgt.n	80049ec <rintf+0xa4>
 800495c:	b32b      	cbz	r3, 80049aa <rintf+0x62>
 800495e:	2900      	cmp	r1, #0
 8004960:	ee10 3a10 	vmov	r3, s0
 8004964:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8004968:	da21      	bge.n	80049ae <rintf+0x66>
 800496a:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800496e:	425b      	negs	r3, r3
 8004970:	4921      	ldr	r1, [pc, #132]	; (80049f8 <rintf+0xb0>)
 8004972:	0a5b      	lsrs	r3, r3, #9
 8004974:	0d12      	lsrs	r2, r2, #20
 8004976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497a:	0512      	lsls	r2, r2, #20
 800497c:	4313      	orrs	r3, r2
 800497e:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	edd1 6a00 	vldr	s13, [r1]
 800498a:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800498e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004992:	eddd 7a01 	vldr	s15, [sp, #4]
 8004996:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800499a:	ee17 3a90 	vmov	r3, s15
 800499e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049a2:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80049a6:	ee00 3a10 	vmov	s0, r3
 80049aa:	b002      	add	sp, #8
 80049ac:	bd10      	pop	{r4, pc}
 80049ae:	4a13      	ldr	r2, [pc, #76]	; (80049fc <rintf+0xb4>)
 80049b0:	410a      	asrs	r2, r1
 80049b2:	4213      	tst	r3, r2
 80049b4:	d0f9      	beq.n	80049aa <rintf+0x62>
 80049b6:	0854      	lsrs	r4, r2, #1
 80049b8:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80049bc:	d006      	beq.n	80049cc <rintf+0x84>
 80049be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80049c2:	ea23 0304 	bic.w	r3, r3, r4
 80049c6:	fa42 f101 	asr.w	r1, r2, r1
 80049ca:	430b      	orrs	r3, r1
 80049cc:	4a0a      	ldr	r2, [pc, #40]	; (80049f8 <rintf+0xb0>)
 80049ce:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80049d2:	ed90 7a00 	vldr	s14, [r0]
 80049d6:	ee07 3a90 	vmov	s15, r3
 80049da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049de:	edcd 7a01 	vstr	s15, [sp, #4]
 80049e2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80049e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80049ea:	e7de      	b.n	80049aa <rintf+0x62>
 80049ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80049f0:	d3db      	bcc.n	80049aa <rintf+0x62>
 80049f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80049f6:	e7d8      	b.n	80049aa <rintf+0x62>
 80049f8:	08004b30 	.word	0x08004b30
 80049fc:	007fffff 	.word	0x007fffff

08004a00 <scalbnf>:
 8004a00:	ee10 3a10 	vmov	r3, s0
 8004a04:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004a08:	d025      	beq.n	8004a56 <scalbnf+0x56>
 8004a0a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004a0e:	d302      	bcc.n	8004a16 <scalbnf+0x16>
 8004a10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004a14:	4770      	bx	lr
 8004a16:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004a1a:	d122      	bne.n	8004a62 <scalbnf+0x62>
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <scalbnf+0xc8>)
 8004a1e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004acc <scalbnf+0xcc>
 8004a22:	4298      	cmp	r0, r3
 8004a24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a28:	db16      	blt.n	8004a58 <scalbnf+0x58>
 8004a2a:	ee10 3a10 	vmov	r3, s0
 8004a2e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004a32:	3a19      	subs	r2, #25
 8004a34:	4402      	add	r2, r0
 8004a36:	2afe      	cmp	r2, #254	; 0xfe
 8004a38:	dd15      	ble.n	8004a66 <scalbnf+0x66>
 8004a3a:	ee10 3a10 	vmov	r3, s0
 8004a3e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004ad0 <scalbnf+0xd0>
 8004a42:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004ad4 <scalbnf+0xd4>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	eeb0 7a67 	vmov.f32	s14, s15
 8004a4c:	bfb8      	it	lt
 8004a4e:	eef0 7a66 	vmovlt.f32	s15, s13
 8004a52:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004a56:	4770      	bx	lr
 8004a58:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004ad8 <scalbnf+0xd8>
 8004a5c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a60:	4770      	bx	lr
 8004a62:	0dd2      	lsrs	r2, r2, #23
 8004a64:	e7e6      	b.n	8004a34 <scalbnf+0x34>
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	dd06      	ble.n	8004a78 <scalbnf+0x78>
 8004a6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a6e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004a72:	ee00 3a10 	vmov	s0, r3
 8004a76:	4770      	bx	lr
 8004a78:	f112 0f16 	cmn.w	r2, #22
 8004a7c:	da1a      	bge.n	8004ab4 <scalbnf+0xb4>
 8004a7e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a82:	4298      	cmp	r0, r3
 8004a84:	ee10 3a10 	vmov	r3, s0
 8004a88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a8c:	dd0a      	ble.n	8004aa4 <scalbnf+0xa4>
 8004a8e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004ad0 <scalbnf+0xd0>
 8004a92:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004ad4 <scalbnf+0xd4>
 8004a96:	eef0 7a40 	vmov.f32	s15, s0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf18      	it	ne
 8004a9e:	eeb0 0a47 	vmovne.f32	s0, s14
 8004aa2:	e7db      	b.n	8004a5c <scalbnf+0x5c>
 8004aa4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004ad8 <scalbnf+0xd8>
 8004aa8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004adc <scalbnf+0xdc>
 8004aac:	eef0 7a40 	vmov.f32	s15, s0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	e7f3      	b.n	8004a9c <scalbnf+0x9c>
 8004ab4:	3219      	adds	r2, #25
 8004ab6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004aba:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004abe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004ae0 <scalbnf+0xe0>
 8004ac2:	ee07 3a10 	vmov	s14, r3
 8004ac6:	e7c4      	b.n	8004a52 <scalbnf+0x52>
 8004ac8:	ffff3cb0 	.word	0xffff3cb0
 8004acc:	4c000000 	.word	0x4c000000
 8004ad0:	7149f2ca 	.word	0x7149f2ca
 8004ad4:	f149f2ca 	.word	0xf149f2ca
 8004ad8:	0da24260 	.word	0x0da24260
 8004adc:	8da24260 	.word	0x8da24260
 8004ae0:	33000000 	.word	0x33000000

08004ae4 <_init>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr

08004af0 <_fini>:
 8004af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af2:	bf00      	nop
 8004af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af6:	bc08      	pop	{r3}
 8004af8:	469e      	mov	lr, r3
 8004afa:	4770      	bx	lr
