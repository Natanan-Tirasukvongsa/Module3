
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006210  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063ec  080063ec  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f4  080063f4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080063fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  20000080  0800647c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  0800647c  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001090c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000207d  00000000  00000000  000309bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00032a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  000339e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e8b  00000000  00000000  00034900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011181  00000000  00000000  0004b78b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917d3  00000000  00000000  0005c90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ee0df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004780  00000000  00000000  000ee134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006390 	.word	0x08006390

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006390 	.word	0x08006390

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 fc48 	bl	8001f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f83e 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 fa98 	bl	8000c2c <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 fa6e 	bl	8000bdc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000700:	f000 fa42 	bl	8000b88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000704:	f000 f8cc 	bl	80008a0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000708:	f000 f974 	bl	80009f4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800070c:	f000 f920 	bl	8000950 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000710:	f000 f898 	bl	8000844 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000714:	f000 f9e4 	bl	8000ae0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <main+0x70>)
 800071a:	f003 f9dd 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);					//Control loop
 800071e:	4810      	ldr	r0, [pc, #64]	; (8000760 <main+0x74>)
 8000720:	f003 f9da 	bl	8003ad8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000724:	213c      	movs	r1, #60	; 0x3c
 8000726:	480f      	ldr	r0, [pc, #60]	; (8000764 <main+0x78>)
 8000728:	f003 fbe8 	bl	8003efc <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800072c:	480e      	ldr	r0, [pc, #56]	; (8000768 <main+0x7c>)
 800072e:	f003 f979 	bl	8003a24 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000732:	210c      	movs	r1, #12
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x7c>)
 8000736:	f003 fa8b 	bl	8003c50 <HAL_TIM_PWM_Start>

  UART2.huart = &huart2;
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <main+0x80>)
 800073c:	4a0c      	ldr	r2, [pc, #48]	; (8000770 <main+0x84>)
 800073e:	601a      	str	r2, [r3, #0]
  UART2.RxLen = 255;
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <main+0x80>)
 8000742:	22ff      	movs	r2, #255	; 0xff
 8000744:	80da      	strh	r2, [r3, #6]
  UART2.TxLen = 255;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <main+0x80>)
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	809a      	strh	r2, [r3, #4]
  UARTInit(&UART2);
 800074c:	4807      	ldr	r0, [pc, #28]	; (800076c <main+0x80>)
 800074e:	f001 f8e7 	bl	8001920 <UARTInit>
  UARTResetStart(&UART2);
 8000752:	4806      	ldr	r0, [pc, #24]	; (800076c <main+0x80>)
 8000754:	f001 f90c 	bl	8001970 <UARTResetStart>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x6c>
 800075a:	bf00      	nop
 800075c:	20000364 	.word	0x20000364
 8000760:	200001d8 	.word	0x200001d8
 8000764:	2000031c 	.word	0x2000031c
 8000768:	20000274 	.word	0x20000274
 800076c:	20000148 	.word	0x20000148
 8000770:	200003ac 	.word	0x200003ac

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	; 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f005 f90a 	bl	800599c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <SystemClock_Config+0xc8>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a26      	ldr	r2, [pc, #152]	; (800083c <SystemClock_Config+0xc8>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <SystemClock_Config+0xc8>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <SystemClock_Config+0xcc>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <SystemClock_Config+0xcc>)
 80007be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <SystemClock_Config+0xcc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007e8:	2364      	movs	r3, #100	; 0x64
 80007ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f4:	f107 0320 	add.w	r3, r7, #32
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fc4f 	bl	800309c <HAL_RCC_OscConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000804:	f001 f8e0 	bl	80019c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000808:	230f      	movs	r3, #15
 800080a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800080c:	2302      	movs	r3, #2
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2103      	movs	r1, #3
 8000824:	4618      	mov	r0, r3
 8000826:	f002 feb1 	bl	800358c <HAL_RCC_ClockConfig>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000830:	f001 f8ca 	bl	80019c8 <Error_Handler>
  }
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40007000 	.word	0x40007000

08000844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C1_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_I2C1_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_I2C1_Init+0x50>)
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0x58>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_I2C1_Init+0x50>)
 8000862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_I2C1_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_I2C1_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C1_Init+0x50>)
 8000882:	f002 fac7 	bl	8002e14 <HAL_I2C_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800088c:	f001 f89c 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000220 	.word	0x20000220
 8000898:	40005400 	.word	0x40005400
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2224      	movs	r2, #36	; 0x24
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f005 f874 	bl	800599c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008be:	4a23      	ldr	r2, [pc, #140]	; (800094c <MX_TIM1_Init+0xac>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c8:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008d0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80008d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_TIM1_Init+0xa8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e8:	2303      	movs	r3, #3
 80008ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800090c:	f107 030c 	add.w	r3, r7, #12
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_TIM1_Init+0xa8>)
 8000914:	f003 fa4c 	bl	8003db0 <HAL_TIM_Encoder_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800091e:	f001 f853 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <MX_TIM1_Init+0xa8>)
 8000930:	f004 f8f0 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800093a:	f001 f845 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	3730      	adds	r7, #48	; 0x30
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000031c 	.word	0x2000031c
 800094c:	40010000 	.word	0x40010000

08000950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <MX_TIM2_Init+0xa0>)
 800096e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_TIM2_Init+0xa0>)
 8000976:	2263      	movs	r2, #99	; 0x63
 8000978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM2_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM2_Init+0xa0>)
 8000982:	f04f 32ff 	mov.w	r2, #4294967295
 8000986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_TIM2_Init+0xa0>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM2_Init+0xa0>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000994:	4816      	ldr	r0, [pc, #88]	; (80009f0 <MX_TIM2_Init+0xa0>)
 8000996:	f002 fff5 	bl	8003984 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009a0:	f001 f812 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <MX_TIM2_Init+0xa0>)
 80009b2:	f003 fcf7 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009bc:	f001 f804 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_TIM2_Init+0xa0>)
 80009ce:	f004 f8a1 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d8:	f000 fff6 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80009dc:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <MX_TIM2_Init+0xa0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f06f 0201 	mvn.w	r2, #1
 80009e4:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000364 	.word	0x20000364

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]
 8000a20:	615a      	str	r2, [r3, #20]
 8000a22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a24:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <MX_TIM3_Init+0xe8>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a36:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a38:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a44:	4b24      	ldr	r3, [pc, #144]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4a:	4823      	ldr	r0, [pc, #140]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a4c:	f002 ff9a 	bl	8003984 <HAL_TIM_Base_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a56:	f000 ffb7 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a64:	4619      	mov	r1, r3
 8000a66:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a68:	f003 fc9c 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a72:	f000 ffa9 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a76:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a78:	f003 f890 	bl	8003b9c <HAL_TIM_PWM_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a82:	f000 ffa1 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	4619      	mov	r1, r3
 8000a94:	4810      	ldr	r0, [pc, #64]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000a96:	f004 f83d 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000aa0:	f000 ff92 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	2360      	movs	r3, #96	; 0x60
 8000aa6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4807      	ldr	r0, [pc, #28]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000abc:	f003 fbb4 	bl	8004228 <HAL_TIM_PWM_ConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ac6:	f000 ff7f 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <MX_TIM3_Init+0xe4>)
 8000acc:	f001 f894 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000274 	.word	0x20000274
 8000adc:	40000400 	.word	0x40000400

08000ae0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	463b      	mov	r3, r7
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000afe:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <MX_TIM4_Init+0xa0>)
 8000b00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b02:	4b1e      	ldr	r3, [pc, #120]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b08:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b22:	4816      	ldr	r0, [pc, #88]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b24:	f002 ff2e 	bl	8003984 <HAL_TIM_Base_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b2e:	f000 ff4b 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480f      	ldr	r0, [pc, #60]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b40:	f003 fc30 	bl	80043a4 <HAL_TIM_ConfigClockSource>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 ff3d 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b56:	463b      	mov	r3, r7
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <MX_TIM4_Init+0x9c>)
 8000b5c:	f003 ffda 	bl	8004b14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b66:	f000 ff2f 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000b6a:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_TIM4_Init+0xa4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f06f 0201 	mvn.w	r2, #1
 8000b72:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	40000800 	.word	0x40000800
 8000b84:	20000364 	.word	0x20000364

08000b88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART2_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	f004 f82a 	bl	8004c18 <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f000 fefd 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200003ac 	.word	0x200003ac
 8000bd8:	40004400 	.word	0x40004400

08000bdc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a0f      	ldr	r2, [pc, #60]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_DMA_Init+0x4c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	2010      	movs	r0, #16
 8000c04:	f001 fb0b 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c08:	2010      	movs	r0, #16
 8000c0a:	f001 fb24 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2011      	movs	r0, #17
 8000c14:	f001 fb03 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c18:	2011      	movs	r0, #17
 8000c1a:	f001 fb1c 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a46      	ldr	r2, [pc, #280]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c4c:	f043 0304 	orr.w	r3, r3, #4
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b44      	ldr	r3, [pc, #272]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0304 	and.w	r3, r3, #4
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b36      	ldr	r3, [pc, #216]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b32      	ldr	r3, [pc, #200]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a31      	ldr	r2, [pc, #196]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <MX_GPIO_Init+0x138>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	482c      	ldr	r0, [pc, #176]	; (8000d68 <MX_GPIO_Init+0x13c>)
 8000cb8:	f002 f86e 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cc2:	482a      	ldr	r0, [pc, #168]	; (8000d6c <MX_GPIO_Init+0x140>)
 8000cc4:	f002 f868 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ccc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_GPIO_Init+0x144>)
 8000cd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4825      	ldr	r0, [pc, #148]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000cde:	f001 fed7 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000ce2:	2381      	movs	r3, #129	; 0x81
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	481f      	ldr	r0, [pc, #124]	; (8000d74 <MX_GPIO_Init+0x148>)
 8000cf6:	f001 fecb 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4816      	ldr	r0, [pc, #88]	; (8000d68 <MX_GPIO_Init+0x13c>)
 8000d0e:	f001 febf 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d12:	2320      	movs	r3, #32
 8000d14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480f      	ldr	r0, [pc, #60]	; (8000d68 <MX_GPIO_Init+0x13c>)
 8000d2a:	f001 feb1 	bl	8002a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	4809      	ldr	r0, [pc, #36]	; (8000d6c <MX_GPIO_Init+0x140>)
 8000d48:	f001 fea2 	bl	8002a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2028      	movs	r0, #40	; 0x28
 8000d52:	f001 fa64 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d56:	2028      	movs	r0, #40	; 0x28
 8000d58:	f001 fa7d 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	; 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020000 	.word	0x40020000
 8000d6c:	40020400 	.word	0x40020400
 8000d70:	10210000 	.word	0x10210000
 8000d74:	40020800 	.word	0x40020800

08000d78 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8000d78:	b5b0      	push	{r4, r5, r7, lr}
 8000d7a:	ed2d 8b02 	vpush	{d8}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <Encoder_Velocity_Update+0xa8>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000d8a:	f000 fe03 	bl	8001994 <micros>
 8000d8e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <Encoder_Velocity_Update+0xac>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0503 	sbc.w	r5, r1, r3
 8000da2:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <Encoder_Velocity_Update+0xb0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8000db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000db4:	461a      	mov	r2, r3
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	4293      	cmp	r3, r2
 8000dba:	db06      	blt.n	8000dca <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8000dbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00b      	b.n	8000de2 <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	425b      	negs	r3, r3
 8000dce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	db05      	blt.n	8000de2 <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	461a      	mov	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	4413      	add	r3, r2
 8000de0:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000de2:	4a11      	ldr	r2, [pc, #68]	; (8000e28 <Encoder_Velocity_Update+0xb0>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000de8:	490e      	ldr	r1, [pc, #56]	; (8000e24 <Encoder_Velocity_Update+0xac>)
 8000dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dee:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <Encoder_Velocity_Update+0xb4>)
 8000df6:	fb02 f303 	mul.w	r3, r2, r3
 8000dfa:	ee07 3a90 	vmov	s15, r3
 8000dfe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e06:	f7ff faaf 	bl	8000368 <__aeabi_ul2f>
 8000e0a:	ee07 0a10 	vmov	s14, r0
 8000e0e:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8000e12:	eeb0 0a67 	vmov.f32	s0, s15
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	ecbd 8b02 	vpop	{d8}
 8000e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e20:	2000031c 	.word	0x2000031c
 8000e24:	20000160 	.word	0x20000160
 8000e28:	20000168 	.word	0x20000168
 8000e2c:	000f4240 	.word	0x000f4240

08000e30 <Motor_Drive_PWM>:
void Motor_Drive_PWM()	//Motor drive
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	if (PWM_Out >= 0)
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	db17      	blt.n	8000e6e <Motor_Drive_PWM+0x3e>
	{
		if (PWM_Out > 10000)
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	dd03      	ble.n	8000e54 <Motor_Drive_PWM+0x24>
		{
			PWM_Out = 10000;
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e4e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e52:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM_Out);
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <Motor_Drive_PWM+0x80>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000e60:	2201      	movs	r2, #1
 8000e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e66:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <Motor_Drive_PWM+0x84>)
 8000e68:	f001 ff96 	bl	8002d98 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}


}
 8000e6c:	e01b      	b.n	8000ea6 <Motor_Drive_PWM+0x76>
	else if (PWM_Out < 0)
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da16      	bge.n	8000ea6 <Motor_Drive_PWM+0x76>
		if (PWM_Out < -10000)
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <Motor_Drive_PWM+0x88>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	da03      	bge.n	8000e8c <Motor_Drive_PWM+0x5c>
			PWM_Out = -10000;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e86:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8000e8a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -PWM_Out);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e92:	425a      	negs	r2, r3
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <Motor_Drive_PWM+0x80>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <Motor_Drive_PWM+0x84>)
 8000ea2:	f001 ff79 	bl	8002d98 <HAL_GPIO_WritePin>
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000d8 	.word	0x200000d8
 8000eb0:	20000274 	.word	0x20000274
 8000eb4:	40020400 	.word	0x40020400
 8000eb8:	ffffd8f0 	.word	0xffffd8f0

08000ebc <Velocity_Control>:

void Velocity_Control()  //Velocity Control PID
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

	Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8000ec0:	4b49      	ldr	r3, [pc, #292]	; (8000fe8 <Velocity_Control+0x12c>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000fec <Velocity_Control+0x130>
 8000eca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000ece:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ede:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <Velocity_Control+0x134>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8000ee4:	4b42      	ldr	r3, [pc, #264]	; (8000ff0 <Velocity_Control+0x134>)
 8000ee6:	edd3 7a00 	vldr	s15, [r3]
 8000eea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eee:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000ff4 <Velocity_Control+0x138>
 8000ef2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ef6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fec <Velocity_Control+0x130>
 8000efa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000efe:	4b3e      	ldr	r3, [pc, #248]	; (8000ff8 <Velocity_Control+0x13c>)
 8000f00:	edc3 7a00 	vstr	s15, [r3]

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f04:	4b3d      	ldr	r3, [pc, #244]	; (8000ffc <Velocity_Control+0x140>)
 8000f06:	ed93 7a00 	vldr	s14, [r3]
 8000f0a:	4b3d      	ldr	r3, [pc, #244]	; (8001000 <Velocity_Control+0x144>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd04      	ble.n	8000f24 <Velocity_Control+0x68>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f1a:	4b39      	ldr	r3, [pc, #228]	; (8001000 <Velocity_Control+0x144>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a37      	ldr	r2, [pc, #220]	; (8000ffc <Velocity_Control+0x140>)
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	e014      	b.n	8000f4e <Velocity_Control+0x92>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)	//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <Velocity_Control+0x144>)
 8000f26:	edd3 7a00 	vldr	s15, [r3]
 8000f2a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <Velocity_Control+0x140>)
 8000f30:	edd3 7a00 	vldr	s15, [r3]
 8000f34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3c:	dd07      	ble.n	8000f4e <Velocity_Control+0x92>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f3e:	4b30      	ldr	r3, [pc, #192]	; (8001000 <Velocity_Control+0x144>)
 8000f40:	edd3 7a00 	vldr	s15, [r3]
 8000f44:	eef1 7a67 	vneg.f32	s15, s15
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <Velocity_Control+0x140>)
 8000f4a:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <Velocity_Control+0x140>)
 8000f50:	ed93 7a00 	vldr	s14, [r3]
 8000f54:	4b26      	ldr	r3, [pc, #152]	; (8000ff0 <Velocity_Control+0x134>)
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	4b29      	ldr	r3, [pc, #164]	; (8001004 <Velocity_Control+0x148>)
 8000f60:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <Velocity_Control+0x14c>)
 8000f66:	ed93 7a00 	vldr	s14, [r3]
 8000f6a:	4b26      	ldr	r3, [pc, #152]	; (8001004 <Velocity_Control+0x148>)
 8000f6c:	edd3 7a00 	vldr	s15, [r3]
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <Velocity_Control+0x14c>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <Velocity_Control+0x148>)
 8000f7c:	ed93 7a00 	vldr	s14, [r3]
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <Velocity_Control+0x150>)
 8000f82:	edd3 7a00 	vldr	s15, [r3]
 8000f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <Velocity_Control+0x154>)
 8000f8c:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <Velocity_Control+0x148>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <Velocity_Control+0x150>)
 8000f96:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 8000f98:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <Velocity_Control+0x158>)
 8000f9a:	ed93 7a00 	vldr	s14, [r3]
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <Velocity_Control+0x148>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <Velocity_Control+0x15c>)
 8000faa:	edd3 6a00 	vldr	s13, [r3]
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <Velocity_Control+0x14c>)
 8000fb0:	edd3 7a00 	vldr	s15, [r3]
 8000fb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <Velocity_Control+0x160>)
 8000fbe:	edd3 6a00 	vldr	s13, [r3]
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <Velocity_Control+0x154>)
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd4:	ee17 3a90 	vmov	r3, s15
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <Velocity_Control+0x164>)
 8000fdc:	801a      	strh	r2, [r3, #0]

}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	200000b8 	.word	0x200000b8
 8000fec:	42700000 	.word	0x42700000
 8000ff0:	200000bc 	.word	0x200000bc
 8000ff4:	40490fdb 	.word	0x40490fdb
 8000ff8:	200000ec 	.word	0x200000ec
 8000ffc:	200000c0 	.word	0x200000c0
 8001000:	20000008 	.word	0x20000008
 8001004:	200000c8 	.word	0x200000c8
 8001008:	200000cc 	.word	0x200000cc
 800100c:	200000d4 	.word	0x200000d4
 8001010:	200000d0 	.word	0x200000d0
 8001014:	20000000 	.word	0x20000000
 8001018:	20000004 	.word	0x20000004
 800101c:	200000c4 	.word	0x200000c4
 8001020:	200000d8 	.word	0x200000d8

08001024 <Distance_Calculation>:

void Distance_Calculation()	//Calculate that distance is short or long
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
#ifdef NO_KALMAN
	Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution;  //degree
 8001028:	4b8b      	ldr	r3, [pc, #556]	; (8001258 <Distance_Calculation+0x234>)
 800102a:	edd3 7a00 	vldr	s15, [r3]
 800102e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800125c <Distance_Calculation+0x238>
 8001032:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001046:	4b86      	ldr	r3, [pc, #536]	; (8001260 <Distance_Calculation+0x23c>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
#else
	Position_Now_Degree = Position_Now_Rad*180/pi;
#endif
	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 800104c:	4b85      	ldr	r3, [pc, #532]	; (8001264 <Distance_Calculation+0x240>)
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4b83      	ldr	r3, [pc, #524]	; (8001260 <Distance_Calculation+0x23c>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	4b82      	ldr	r3, [pc, #520]	; (8001268 <Distance_Calculation+0x244>)
 800105e:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 8001062:	4b81      	ldr	r3, [pc, #516]	; (8001268 <Distance_Calculation+0x244>)
 8001064:	edd3 7a00 	vldr	s15, [r3]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d509      	bpl.n	8001086 <Distance_Calculation+0x62>
	{
		Distance_Degree_Set += 360;
 8001072:	4b7d      	ldr	r3, [pc, #500]	; (8001268 <Distance_Calculation+0x244>)
 8001074:	edd3 7a00 	vldr	s15, [r3]
 8001078:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800125c <Distance_Calculation+0x238>
 800107c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001080:	4b79      	ldr	r3, [pc, #484]	; (8001268 <Distance_Calculation+0x244>)
 8001082:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 8001086:	4b78      	ldr	r3, [pc, #480]	; (8001268 <Distance_Calculation+0x244>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800126c <Distance_Calculation+0x248>
 8001090:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001094:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001270 <Distance_Calculation+0x24c>
 8001098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <Distance_Calculation+0x250>)
 800109e:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 80010a2:	4b75      	ldr	r3, [pc, #468]	; (8001278 <Distance_Calculation+0x254>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ac:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800126c <Distance_Calculation+0x248>
 80010b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010b4:	eddf 6a71 	vldr	s13, [pc, #452]	; 800127c <Distance_Calculation+0x258>
 80010b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010bc:	4b70      	ldr	r3, [pc, #448]	; (8001280 <Distance_Calculation+0x25c>)
 80010be:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <Distance_Calculation+0x25c>)
 80010c4:	edd3 7a00 	vldr	s15, [r3]
 80010c8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010cc:	4b6d      	ldr	r3, [pc, #436]	; (8001284 <Distance_Calculation+0x260>)
 80010ce:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <Distance_Calculation+0x260>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001288 <Distance_Calculation+0x264>
 80010dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <Distance_Calculation+0x268>)
 80010e2:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 80010e6:	4b66      	ldr	r3, [pc, #408]	; (8001280 <Distance_Calculation+0x25c>)
 80010e8:	edd3 7a00 	vldr	s15, [r3]
 80010ec:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f004 fce2 	bl	8005abc <powf>
 80010f8:	eef0 7a40 	vmov.f32	s15, s0
 80010fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001100:	4b63      	ldr	r3, [pc, #396]	; (8001290 <Distance_Calculation+0x26c>)
 8001102:	edc3 7a00 	vstr	s15, [r3]


	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 8001106:	4b62      	ldr	r3, [pc, #392]	; (8001290 <Distance_Calculation+0x26c>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001110:	4b58      	ldr	r3, [pc, #352]	; (8001274 <Distance_Calculation+0x250>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111e:	d53c      	bpl.n	800119a <Distance_Calculation+0x176>
	{
		Distance_Length = 1;
 8001120:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <Distance_Calculation+0x270>)
 8001122:	2201      	movs	r2, #1
 8001124:	801a      	strh	r2, [r3, #0]
		Distance_Steady = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <Distance_Calculation+0x250>)
 8001128:	ed93 7a00 	vldr	s14, [r3]
 800112c:	4b58      	ldr	r3, [pc, #352]	; (8001290 <Distance_Calculation+0x26c>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <Distance_Calculation+0x274>)
 800113c:	edc3 7a00 	vstr	s15, [r3]
		Time_Steady = Distance_Steady/Velocity_Max_Rad;
 8001140:	4b55      	ldr	r3, [pc, #340]	; (8001298 <Distance_Calculation+0x274>)
 8001142:	edd3 6a00 	vldr	s13, [r3]
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <Distance_Calculation+0x25c>)
 8001148:	ed93 7a00 	vldr	s14, [r3]
 800114c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001150:	4b52      	ldr	r3, [pc, #328]	; (800129c <Distance_Calculation+0x278>)
 8001152:	edc3 7a00 	vstr	s15, [r3]
		Time_Steady_Micro = Time_Steady*1000000;
 8001156:	4b51      	ldr	r3, [pc, #324]	; (800129c <Distance_Calculation+0x278>)
 8001158:	edd3 7a00 	vldr	s15, [r3]
 800115c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001288 <Distance_Calculation+0x264>
 8001160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <Distance_Calculation+0x27c>)
 8001166:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend) + (Time_Steady);//Time use to reach next station
 800116a:	4b46      	ldr	r3, [pc, #280]	; (8001284 <Distance_Calculation+0x260>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001174:	4b49      	ldr	r3, [pc, #292]	; (800129c <Distance_Calculation+0x278>)
 8001176:	edd3 7a00 	vldr	s15, [r3]
 800117a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117e:	4b49      	ldr	r3, [pc, #292]	; (80012a4 <Distance_Calculation+0x280>)
 8001180:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 8001184:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <Distance_Calculation+0x280>)
 8001186:	edd3 7a00 	vldr	s15, [r3]
 800118a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001288 <Distance_Calculation+0x264>
 800118e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001192:	4b45      	ldr	r3, [pc, #276]	; (80012a8 <Distance_Calculation+0x284>)
 8001194:	edc3 7a00 	vstr	s15, [r3]
 8001198:	e059      	b.n	800124e <Distance_Calculation+0x22a>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 800119a:	4b3d      	ldr	r3, [pc, #244]	; (8001290 <Distance_Calculation+0x26c>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <Distance_Calculation+0x250>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	db4c      	blt.n	800124e <Distance_Calculation+0x22a>
	{
		Distance_Length = 0;
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <Distance_Calculation+0x270>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <Distance_Calculation+0x250>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f004 fd10 	bl	8005bec <sqrtf>
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <Distance_Calculation+0x260>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 80011d6:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <Distance_Calculation+0x260>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001288 <Distance_Calculation+0x264>
 80011e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011e4:	4b29      	ldr	r3, [pc, #164]	; (800128c <Distance_Calculation+0x268>)
 80011e6:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <Distance_Calculation+0x260>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <Distance_Calculation+0x280>)
 80011f6:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	; (80012a4 <Distance_Calculation+0x280>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001288 <Distance_Calculation+0x264>
 8001204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <Distance_Calculation+0x284>)
 800120a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <Distance_Calculation+0x250>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800121c:	eeb0 0a47 	vmov.f32	s0, s14
 8001220:	f004 fce4 	bl	8005bec <sqrtf>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <Distance_Calculation+0x288>)
 800122a:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <Distance_Calculation+0x288>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800127c <Distance_Calculation+0x258>
 8001238:	ee67 6a87 	vmul.f32	s13, s15, s14
 800123c:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800126c <Distance_Calculation+0x248>
 8001240:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001248:	4b19      	ldr	r3, [pc, #100]	; (80012b0 <Distance_Calculation+0x28c>)
 800124a:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <Distance_Calculation+0x290>)
 8001250:	2201      	movs	r2, #1
 8001252:	801a      	strh	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000dc 	.word	0x200000dc
 800125c:	43b40000 	.word	0x43b40000
 8001260:	200000e0 	.word	0x200000e0
 8001264:	200000e4 	.word	0x200000e4
 8001268:	200000fc 	.word	0x200000fc
 800126c:	40490fdb 	.word	0x40490fdb
 8001270:	43340000 	.word	0x43340000
 8001274:	20000100 	.word	0x20000100
 8001278:	20000008 	.word	0x20000008
 800127c:	42700000 	.word	0x42700000
 8001280:	200000f0 	.word	0x200000f0
 8001284:	20000114 	.word	0x20000114
 8001288:	49742400 	.word	0x49742400
 800128c:	20000128 	.word	0x20000128
 8001290:	20000104 	.word	0x20000104
 8001294:	200000b0 	.word	0x200000b0
 8001298:	20000108 	.word	0x20000108
 800129c:	2000011c 	.word	0x2000011c
 80012a0:	20000130 	.word	0x20000130
 80012a4:	20000118 	.word	0x20000118
 80012a8:	2000012c 	.word	0x2000012c
 80012ac:	200000f8 	.word	0x200000f8
 80012b0:	200000f4 	.word	0x200000f4
 80012b4:	200000b2 	.word	0x200000b2

080012b8 <Trajectory_Generation>:
	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}

void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 80012b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012bc:	ed2d 8b02 	vpush	{d8}
 80012c0:	b096      	sub	sp, #88	; 0x58
 80012c2:	af00      	add	r7, sp, #0
#ifdef NO_KALMAN
	Position_Now_Rad  = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //radian
 80012c4:	4bac      	ldr	r3, [pc, #688]	; (8001578 <Trajectory_Generation+0x2c0>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012ce:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800157c <Trajectory_Generation+0x2c4>
 80012d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e6:	4ba6      	ldr	r3, [pc, #664]	; (8001580 <Trajectory_Generation+0x2c8>)
 80012e8:	edc3 7a00 	vstr	s15, [r3]
#endif

	if (Trajectory_Flag == 0)
 80012ec:	4ba5      	ldr	r3, [pc, #660]	; (8001584 <Trajectory_Generation+0x2cc>)
 80012ee:	881b      	ldrh	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10d      	bne.n	8001310 <Trajectory_Generation+0x58>
	{
		Time_Start = micros();
 80012f4:	f000 fb4e 	bl	8001994 <micros>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	49a2      	ldr	r1, [pc, #648]	; (8001588 <Trajectory_Generation+0x2d0>)
 80012fe:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Now_Rad;
 8001302:	4b9f      	ldr	r3, [pc, #636]	; (8001580 <Trajectory_Generation+0x2c8>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4ba1      	ldr	r3, [pc, #644]	; (800158c <Trajectory_Generation+0x2d4>)
 8001308:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 800130a:	4a9e      	ldr	r2, [pc, #632]	; (8001584 <Trajectory_Generation+0x2cc>)
 800130c:	2301      	movs	r3, #1
 800130e:	8013      	strh	r3, [r2, #0]
	}

	Time_Trajectory_Stamp = micros();
 8001310:	f000 fb40 	bl	8001994 <micros>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	499d      	ldr	r1, [pc, #628]	; (8001590 <Trajectory_Generation+0x2d8>)
 800131a:	e9c1 2300 	strd	r2, r3, [r1]
	Distance_Traveled = Position_Now_Rad-Position_Start;
 800131e:	4b98      	ldr	r3, [pc, #608]	; (8001580 <Trajectory_Generation+0x2c8>)
 8001320:	ed93 7a00 	vldr	s14, [r3]
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <Trajectory_Generation+0x2d4>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	4b99      	ldr	r3, [pc, #612]	; (8001594 <Trajectory_Generation+0x2dc>)
 8001330:	edc3 7a00 	vstr	s15, [r3]

	if (Distance_Length == 1)  //LONG
 8001334:	4b98      	ldr	r3, [pc, #608]	; (8001598 <Trajectory_Generation+0x2e0>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 813d 	bne.w	80015b8 <Trajectory_Generation+0x300>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 800133e:	4b94      	ldr	r3, [pc, #592]	; (8001590 <Trajectory_Generation+0x2d8>)
 8001340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001344:	4b90      	ldr	r3, [pc, #576]	; (8001588 <Trajectory_Generation+0x2d0>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	1a84      	subs	r4, r0, r2
 800134c:	653c      	str	r4, [r7, #80]	; 0x50
 800134e:	eb61 0303 	sbc.w	r3, r1, r3
 8001352:	657b      	str	r3, [r7, #84]	; 0x54
 8001354:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001358:	f7ff f806 	bl	8000368 <__aeabi_ul2f>
 800135c:	ee07 0a10 	vmov	s14, r0
 8001360:	4b8e      	ldr	r3, [pc, #568]	; (800159c <Trajectory_Generation+0x2e4>)
 8001362:	edd3 7a00 	vldr	s15, [r3]
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d825      	bhi.n	80013bc <Trajectory_Generation+0x104>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001370:	4b87      	ldr	r3, [pc, #540]	; (8001590 <Trajectory_Generation+0x2d8>)
 8001372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001376:	4b84      	ldr	r3, [pc, #528]	; (8001588 <Trajectory_Generation+0x2d0>)
 8001378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137c:	1a84      	subs	r4, r0, r2
 800137e:	64bc      	str	r4, [r7, #72]	; 0x48
 8001380:	eb61 0303 	sbc.w	r3, r1, r3
 8001384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001386:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800138a:	f7fe ffed 	bl	8000368 <__aeabi_ul2f>
 800138e:	ee06 0a90 	vmov	s13, r0
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <Trajectory_Generation+0x2e4>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800139c:	4b80      	ldr	r3, [pc, #512]	; (80015a0 <Trajectory_Generation+0x2e8>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	4b7f      	ldr	r3, [pc, #508]	; (80015a4 <Trajectory_Generation+0x2ec>)
 80013a8:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 80013ac:	4b75      	ldr	r3, [pc, #468]	; (8001584 <Trajectory_Generation+0x2cc>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	801a      	strh	r2, [r3, #0]

			P1 = Distance_Traveled;
 80013b2:	4b78      	ldr	r3, [pc, #480]	; (8001594 <Trajectory_Generation+0x2dc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <Trajectory_Generation+0x2f0>)
 80013b8:	6013      	str	r3, [r2, #0]
			Trajectory_Flag = 4;
		}
	}


}
 80013ba:	e1be      	b.n	800173a <Trajectory_Generation+0x482>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Blend_Micro) )
 80013bc:	4b74      	ldr	r3, [pc, #464]	; (8001590 <Trajectory_Generation+0x2d8>)
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	4b71      	ldr	r3, [pc, #452]	; (8001588 <Trajectory_Generation+0x2d0>)
 80013c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c8:	1a84      	subs	r4, r0, r2
 80013ca:	643c      	str	r4, [r7, #64]	; 0x40
 80013cc:	eb61 0303 	sbc.w	r3, r1, r3
 80013d0:	647b      	str	r3, [r7, #68]	; 0x44
 80013d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013d6:	f7fe ffc7 	bl	8000368 <__aeabi_ul2f>
 80013da:	ee07 0a10 	vmov	s14, r0
 80013de:	4b6f      	ldr	r3, [pc, #444]	; (800159c <Trajectory_Generation+0x2e4>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ec:	dd2d      	ble.n	800144a <Trajectory_Generation+0x192>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 80013ee:	4b68      	ldr	r3, [pc, #416]	; (8001590 <Trajectory_Generation+0x2d8>)
 80013f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f4:	4b64      	ldr	r3, [pc, #400]	; (8001588 <Trajectory_Generation+0x2d0>)
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	1a84      	subs	r4, r0, r2
 80013fc:	63bc      	str	r4, [r7, #56]	; 0x38
 80013fe:	eb61 0303 	sbc.w	r3, r1, r3
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001404:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001408:	f7fe ffae 	bl	8000368 <__aeabi_ul2f>
 800140c:	ee06 0a90 	vmov	s13, r0
 8001410:	4b66      	ldr	r3, [pc, #408]	; (80015ac <Trajectory_Generation+0x2f4>)
 8001412:	ed93 7a00 	vldr	s14, [r3]
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <Trajectory_Generation+0x2e4>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	d50f      	bpl.n	800144a <Trajectory_Generation+0x192>
			Velocity_Want_RPM = Velocity_Max_RPM;
 800142a:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <Trajectory_Generation+0x2e8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5d      	ldr	r2, [pc, #372]	; (80015a4 <Trajectory_Generation+0x2ec>)
 8001430:	6013      	str	r3, [r2, #0]
			P2 = Distance_Traveled-P1;
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <Trajectory_Generation+0x2dc>)
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <Trajectory_Generation+0x2f0>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	4b5b      	ldr	r3, [pc, #364]	; (80015b0 <Trajectory_Generation+0x2f8>)
 8001444:	edc3 7a00 	vstr	s15, [r3]
 8001448:	e177      	b.n	800173a <Trajectory_Generation+0x482>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 800144a:	4b51      	ldr	r3, [pc, #324]	; (8001590 <Trajectory_Generation+0x2d8>)
 800144c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <Trajectory_Generation+0x2d0>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	1a84      	subs	r4, r0, r2
 8001458:	633c      	str	r4, [r7, #48]	; 0x30
 800145a:	eb61 0303 	sbc.w	r3, r1, r3
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
 8001460:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001464:	f7fe ff80 	bl	8000368 <__aeabi_ul2f>
 8001468:	ee06 0a90 	vmov	s13, r0
 800146c:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <Trajectory_Generation+0x2f4>)
 800146e:	ed93 7a00 	vldr	s14, [r3]
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <Trajectory_Generation+0x2e4>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	db5a      	blt.n	800153c <Trajectory_Generation+0x284>
				&& (Time_Trajectory_Stamp-Time_Start <= Time_All_Micro) )
 8001486:	4b42      	ldr	r3, [pc, #264]	; (8001590 <Trajectory_Generation+0x2d8>)
 8001488:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <Trajectory_Generation+0x2d0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	1a84      	subs	r4, r0, r2
 8001494:	62bc      	str	r4, [r7, #40]	; 0x28
 8001496:	eb61 0303 	sbc.w	r3, r1, r3
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80014a0:	f7fe ff62 	bl	8000368 <__aeabi_ul2f>
 80014a4:	ee07 0a10 	vmov	s14, r0
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <Trajectory_Generation+0x2f4>)
 80014aa:	edd3 7a00 	vldr	s15, [r3]
 80014ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b6:	d841      	bhi.n	800153c <Trajectory_Generation+0x284>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <Trajectory_Generation+0x2e8>)
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	eeb1 8a67 	vneg.f32	s16, s15
 80014c2:	4b33      	ldr	r3, [pc, #204]	; (8001590 <Trajectory_Generation+0x2d8>)
 80014c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <Trajectory_Generation+0x2d0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	1a84      	subs	r4, r0, r2
 80014d0:	623c      	str	r4, [r7, #32]
 80014d2:	eb61 0303 	sbc.w	r3, r1, r3
 80014d6:	627b      	str	r3, [r7, #36]	; 0x24
								-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 80014d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014dc:	f7fe ff44 	bl	8000368 <__aeabi_ul2f>
 80014e0:	ee06 0a90 	vmov	s13, r0
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <Trajectory_Generation+0x2f4>)
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	4b2c      	ldr	r3, [pc, #176]	; (800159c <Trajectory_Generation+0x2e4>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <Trajectory_Generation+0x2e4>)
 80014fa:	ed93 7a00 	vldr	s14, [r3]
 80014fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001506:	ee77 7ac7 	vsub.f32	s15, s15, s14
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)
 800150a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800150e:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <Trajectory_Generation+0x2ec>)
 8001510:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <Trajectory_Generation+0x2cc>)
 8001516:	2203      	movs	r2, #3
 8001518:	801a      	strh	r2, [r3, #0]
			P3 = Distance_Traveled-P2-P1;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <Trajectory_Generation+0x2dc>)
 800151c:	ed93 7a00 	vldr	s14, [r3]
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <Trajectory_Generation+0x2f8>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <Trajectory_Generation+0x2f0>)
 800152c:	edd3 7a00 	vldr	s15, [r3]
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <Trajectory_Generation+0x2fc>)
 8001536:	edc3 7a00 	vstr	s15, [r3]
 800153a:	e0fe      	b.n	800173a <Trajectory_Generation+0x482>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <Trajectory_Generation+0x2d8>)
 800153e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <Trajectory_Generation+0x2d0>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	1a84      	subs	r4, r0, r2
 800154a:	61bc      	str	r4, [r7, #24]
 800154c:	eb61 0303 	sbc.w	r3, r1, r3
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001556:	f7fe ff07 	bl	8000368 <__aeabi_ul2f>
 800155a:	ee07 0a10 	vmov	s14, r0
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <Trajectory_Generation+0x2f4>)
 8001560:	edd3 7a00 	vldr	s15, [r3]
 8001564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156c:	da00      	bge.n	8001570 <Trajectory_Generation+0x2b8>
}
 800156e:	e0e4      	b.n	800173a <Trajectory_Generation+0x482>
			Trajectory_Flag = 4;
 8001570:	4b04      	ldr	r3, [pc, #16]	; (8001584 <Trajectory_Generation+0x2cc>)
 8001572:	2204      	movs	r2, #4
 8001574:	801a      	strh	r2, [r3, #0]
}
 8001576:	e0e0      	b.n	800173a <Trajectory_Generation+0x482>
 8001578:	200000dc 	.word	0x200000dc
 800157c:	40490fdb 	.word	0x40490fdb
 8001580:	20000110 	.word	0x20000110
 8001584:	20000134 	.word	0x20000134
 8001588:	20000120 	.word	0x20000120
 800158c:	2000010c 	.word	0x2000010c
 8001590:	200000a8 	.word	0x200000a8
 8001594:	20000144 	.word	0x20000144
 8001598:	200000b0 	.word	0x200000b0
 800159c:	20000128 	.word	0x20000128
 80015a0:	20000008 	.word	0x20000008
 80015a4:	200000c0 	.word	0x200000c0
 80015a8:	20000138 	.word	0x20000138
 80015ac:	2000012c 	.word	0x2000012c
 80015b0:	2000013c 	.word	0x2000013c
 80015b4:	20000140 	.word	0x20000140
	else if (Distance_Length == 0)  //SHORT
 80015b8:	4b63      	ldr	r3, [pc, #396]	; (8001748 <Trajectory_Generation+0x490>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 80bc 	bne.w	800173a <Trajectory_Generation+0x482>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 80015c2:	4b62      	ldr	r3, [pc, #392]	; (800174c <Trajectory_Generation+0x494>)
 80015c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c8:	4b61      	ldr	r3, [pc, #388]	; (8001750 <Trajectory_Generation+0x498>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	1a84      	subs	r4, r0, r2
 80015d0:	eb61 0503 	sbc.w	r5, r1, r3
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fec6 	bl	8000368 <__aeabi_ul2f>
 80015dc:	ee07 0a10 	vmov	s14, r0
 80015e0:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <Trajectory_Generation+0x49c>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ee:	d821      	bhi.n	8001634 <Trajectory_Generation+0x37c>
			Velocity_Want_RPM = Velocity_Achieve_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 80015f0:	4b56      	ldr	r3, [pc, #344]	; (800174c <Trajectory_Generation+0x494>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	4b56      	ldr	r3, [pc, #344]	; (8001750 <Trajectory_Generation+0x498>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	1a84      	subs	r4, r0, r2
 80015fe:	613c      	str	r4, [r7, #16]
 8001600:	eb61 0303 	sbc.w	r3, r1, r3
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800160a:	f7fe fead 	bl	8000368 <__aeabi_ul2f>
 800160e:	ee06 0a90 	vmov	s13, r0
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <Trajectory_Generation+0x49c>)
 8001614:	edd3 7a00 	vldr	s15, [r3]
 8001618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <Trajectory_Generation+0x4a0>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001626:	4b4d      	ldr	r3, [pc, #308]	; (800175c <Trajectory_Generation+0x4a4>)
 8001628:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <Trajectory_Generation+0x4a8>)
 800162e:	2202      	movs	r2, #2
 8001630:	801a      	strh	r2, [r3, #0]
}
 8001632:	e082      	b.n	800173a <Trajectory_Generation+0x482>
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 8001634:	4b45      	ldr	r3, [pc, #276]	; (800174c <Trajectory_Generation+0x494>)
 8001636:	e9d3 0100 	ldrd	r0, r1, [r3]
 800163a:	4b45      	ldr	r3, [pc, #276]	; (8001750 <Trajectory_Generation+0x498>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	1a84      	subs	r4, r0, r2
 8001642:	60bc      	str	r4, [r7, #8]
 8001644:	eb61 0303 	sbc.w	r3, r1, r3
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800164e:	f7fe fe8b 	bl	8000368 <__aeabi_ul2f>
 8001652:	ee07 0a10 	vmov	s14, r0
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <Trajectory_Generation+0x49c>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	db46      	blt.n	80016f4 <Trajectory_Generation+0x43c>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <Trajectory_Generation+0x494>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <Trajectory_Generation+0x498>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	1a84      	subs	r4, r0, r2
 8001674:	603c      	str	r4, [r7, #0]
 8001676:	eb61 0303 	sbc.w	r3, r1, r3
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001680:	f7fe fe72 	bl	8000368 <__aeabi_ul2f>
 8001684:	ee07 0a10 	vmov	s14, r0
 8001688:	4b32      	ldr	r3, [pc, #200]	; (8001754 <Trajectory_Generation+0x49c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169a:	d52b      	bpl.n	80016f4 <Trajectory_Generation+0x43c>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 800169c:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <Trajectory_Generation+0x4a0>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb1 8a67 	vneg.f32	s16, s15
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <Trajectory_Generation+0x494>)
 80016a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016ac:	4b28      	ldr	r3, [pc, #160]	; (8001750 <Trajectory_Generation+0x498>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	ebb0 0a02 	subs.w	sl, r0, r2
 80016b6:	eb61 0b03 	sbc.w	fp, r1, r3
 80016ba:	4650      	mov	r0, sl
 80016bc:	4659      	mov	r1, fp
 80016be:	f7fe fe53 	bl	8000368 <__aeabi_ul2f>
 80016c2:	ee07 0a10 	vmov	s14, r0
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <Trajectory_Generation+0x49c>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <Trajectory_Generation+0x49c>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <Trajectory_Generation+0x4a4>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <Trajectory_Generation+0x4a8>)
 80016ee:	2203      	movs	r2, #3
 80016f0:	801a      	strh	r2, [r3, #0]
 80016f2:	e022      	b.n	800173a <Trajectory_Generation+0x482>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <Trajectory_Generation+0x494>)
 80016f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <Trajectory_Generation+0x498>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	ebb0 0802 	subs.w	r8, r0, r2
 8001704:	eb61 0903 	sbc.w	r9, r1, r3
 8001708:	4640      	mov	r0, r8
 800170a:	4649      	mov	r1, r9
 800170c:	f7fe fe2c 	bl	8000368 <__aeabi_ul2f>
 8001710:	ee07 0a10 	vmov	s14, r0
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <Trajectory_Generation+0x49c>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800171e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	da00      	bge.n	800172a <Trajectory_Generation+0x472>
}
 8001728:	e007      	b.n	800173a <Trajectory_Generation+0x482>
			Velocity_Want_RPM = 0;
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <Trajectory_Generation+0x4a4>)
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <Trajectory_Generation+0x4a8>)
 8001734:	2204      	movs	r2, #4
 8001736:	801a      	strh	r2, [r3, #0]
}
 8001738:	e7ff      	b.n	800173a <Trajectory_Generation+0x482>
 800173a:	bf00      	nop
 800173c:	3758      	adds	r7, #88	; 0x58
 800173e:	46bd      	mov	sp, r7
 8001740:	ecbd 8b02 	vpop	{d8}
 8001744:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001748:	200000b0 	.word	0x200000b0
 800174c:	200000a8 	.word	0x200000a8
 8001750:	20000120 	.word	0x20000120
 8001754:	20000128 	.word	0x20000128
 8001758:	200000f4 	.word	0x200000f4
 800175c:	200000c0 	.word	0x200000c0
 8001760:	20000134 	.word	0x20000134

08001764 <HAL_TIM_PeriodElapsedCallback>:
	Velocity_Kalman = Velocity_Kalman_New;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	ed2d 8b02 	vpush	{d8}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)  //Timer overflow
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a59      	ldr	r2, [pc, #356]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d10a      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micros += 4294967295;
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x178>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001782:	f143 0500 	adc.w	r5, r3, #0
 8001786:	4b55      	ldr	r3, [pc, #340]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001788:	e9c3 4500 	strd	r4, r5, [r3]
			Motor_Drive_PWM();			//Drive

		}
		Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
	}
}
 800178c:	e09e      	b.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x168>
	else if (htim == &htim4)  //Control Loop
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a53      	ldr	r2, [pc, #332]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	f040 809a 	bne.w	80018cc <HAL_TIM_PeriodElapsedCallback+0x168>
		Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 8001798:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80018e8 <HAL_TIM_PeriodElapsedCallback+0x184>
 80017a2:	ee27 8a87 	vmul.f32	s16, s15, s14
 80017a6:	f7ff fae7 	bl	8000d78 <Encoder_Velocity_Update>
 80017aa:	eef0 7a40 	vmov.f32	s15, s0
 80017ae:	ee38 7a27 	vadd.f32	s14, s16, s15
 80017b2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80018ec <HAL_TIM_PeriodElapsedCallback+0x188>
 80017b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ba:	4b4a      	ldr	r3, [pc, #296]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80017bc:	edc3 7a00 	vstr	s15, [r3]
		Position_Read_Encoder = htim1.Instance->CNT; //Read Encoder
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017d0:	edc3 7a00 	vstr	s15, [r3]
		Position_Now_Degree = (Position_Read_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 80017d4:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80017d6:	edd3 7a00 	vldr	s15, [r3]
 80017da:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80018f8 <HAL_TIM_PeriodElapsedCallback+0x194>
 80017de:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x198>)
 80017f4:	edc3 7a00 	vstr	s15, [r3]
		if ((Distance_Calculated == 0 ) && (Position_Now_Degree != Position_Want_Degree)  && (GO == 0)) //Distance not calculated and not arrive at next station
 80017f8:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d111      	bne.n	8001824 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001802:	ed93 7a00 	vldr	s14, [r3]
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d006      	beq.n	8001824 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d102      	bne.n	8001824 <HAL_TIM_PeriodElapsedCallback+0xc0>
			Distance_Calculation();		//Calculate distance
 800181e:	f7ff fc01 	bl	8001024 <Distance_Calculation>
 8001822:	e027      	b.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
		else if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree) && (Trajectory_Flag < 5) && (GO == 1)) //Distance calculated and not arrive at next station
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d123      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
 800182c:	4b33      	ldr	r3, [pc, #204]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x198>)
 800182e:	ed93 7a00 	vldr	s14, [r3]
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d018      	beq.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001842:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	2b04      	cmp	r3, #4
 8001848:	d814      	bhi.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
 800184a:	4b2f      	ldr	r3, [pc, #188]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d110      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
			Trajectory_Generation();	//Get Velocity_Want_RPM
 8001852:	f7ff fd31 	bl	80012b8 <Trajectory_Generation>
			Velocity_Control();
 8001856:	f7ff fb31 	bl	8000ebc <Velocity_Control>
			Motor_Drive_PWM();			//Drive
 800185a:	f7ff fae9 	bl	8000e30 <Motor_Drive_PWM>
			if(Trajectory_Flag == 4)
 800185e:	4b2b      	ldr	r3, [pc, #172]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d106      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
				if(Distance_Length == 0)
 8001866:	4b2a      	ldr	r3, [pc, #168]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x110>
					Trajectory_Flag = 5;
 800186e:	4b27      	ldr	r3, [pc, #156]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001870:	2205      	movs	r2, #5
 8001872:	801a      	strh	r2, [r3, #0]
		if (Trajectory_Flag == 5)		//Reach next station
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001876:	881b      	ldrh	r3, [r3, #0]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d123      	bne.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x160>
			if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800187e:	ed93 7a00 	vldr	s14, [r3]
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	eeb4 7a67 	vcmp.f32	s14, s15
 800188c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001890:	d010      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0x150>
				Trajectory_Flag = 0;	//Reset flag
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001894:	2200      	movs	r2, #0
 8001896:	801a      	strh	r2, [r3, #0]
				Distance_Calculated = 0;//Reset distance
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800189a:	2200      	movs	r2, #0
 800189c:	801a      	strh	r2, [r3, #0]
				Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 800189e:	4b1e      	ldr	r3, [pc, #120]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018a0:	f04f 0200 	mov.w	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
				Velocity_Error_Sum = 0;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
				GO = 0;
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	801a      	strh	r2, [r3, #0]
			Velocity_Want_RPM = 0;
 80018b4:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
			Velocity_Control();
 80018bc:	f7ff fafe 	bl	8000ebc <Velocity_Control>
			Motor_Drive_PWM();			//Drive
 80018c0:	f7ff fab6 	bl	8000e30 <Motor_Drive_PWM>
		Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	ecbd 8b02 	vpop	{d8}
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}
 80018d8:	20000364 	.word	0x20000364
 80018dc:	200000a0 	.word	0x200000a0
 80018e0:	200001d8 	.word	0x200001d8
 80018e4:	200000b8 	.word	0x200000b8
 80018e8:	461c3c00 	.word	0x461c3c00
 80018ec:	461c4000 	.word	0x461c4000
 80018f0:	2000031c 	.word	0x2000031c
 80018f4:	200000dc 	.word	0x200000dc
 80018f8:	43b40000 	.word	0x43b40000
 80018fc:	200000e0 	.word	0x200000e0
 8001900:	200000b2 	.word	0x200000b2
 8001904:	200000e4 	.word	0x200000e4
 8001908:	200000b4 	.word	0x200000b4
 800190c:	20000134 	.word	0x20000134
 8001910:	200000b0 	.word	0x200000b0
 8001914:	200000e8 	.word	0x200000e8
 8001918:	200000c0 	.word	0x200000c0
 800191c:	200000cc 	.word	0x200000cc

08001920 <UARTInit>:
void UARTInit(UARTStucrture *uart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <UARTInit+0x4c>)
 800192a:	88db      	ldrh	r3, [r3, #6]
 800192c:	4619      	mov	r1, r3
 800192e:	2001      	movs	r0, #1
 8001930:	f004 f802 	bl	8005938 <calloc>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800193c:	4b0b      	ldr	r3, [pc, #44]	; (800196c <UARTInit+0x4c>)
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	4619      	mov	r1, r3
 8001942:	2001      	movs	r0, #1
 8001944:	f003 fff8 	bl	8005938 <calloc>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	81da      	strh	r2, [r3, #14]

}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000148 	.word	0x20000148

08001970 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6919      	ldr	r1, [r3, #16]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	88db      	ldrh	r3, [r3, #6]
 8001984:	461a      	mov	r2, r3
 8001986:	f003 f994 	bl	8004cb2 <HAL_UART_Receive_DMA>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <micros>:
	break;
	}

}
uint64_t micros()
{
 8001994:	b4b0      	push	{r4, r5, r7}
 8001996:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <micros+0x2c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	4618      	mov	r0, r3
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <micros+0x30>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	1884      	adds	r4, r0, r2
 80019ac:	eb41 0503 	adc.w	r5, r1, r3
 80019b0:	4622      	mov	r2, r4
 80019b2:	462b      	mov	r3, r5
}
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bcb0      	pop	{r4, r5, r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000364 	.word	0x20000364
 80019c4:	200000a0 	.word	0x200000a0

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>
	...

080019d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	; 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	; 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a12:	2007      	movs	r0, #7
 8001a14:	f000 fbf8 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800

08001a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_I2C_MspInit+0x84>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d12c      	bne.n	8001aa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a50:	f043 0302 	orr.w	r3, r3, #2
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a70:	2303      	movs	r3, #3
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a74:	2304      	movs	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <HAL_I2C_MspInit+0x8c>)
 8001a80:	f001 f806 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a92:	6413      	str	r3, [r2, #64]	; 0x40
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_I2C_MspInit+0x88>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	; 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	; 0x28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x84>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12c      	bne.n	8001b30 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a10      	ldr	r2, [pc, #64]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x88>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8001b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001b2c:	f000 ffb0 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d116      	bne.n	8001b84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	201c      	movs	r0, #28
 8001b78:	f000 fb51 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b7c:	201c      	movs	r0, #28
 8001b7e:	f000 fb6a 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001b82:	e02e      	b.n	8001be2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_TIM_Base_MspInit+0xac>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10e      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
}
 8001baa:	e01a      	b.n	8001be2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_TIM_Base_MspInit+0xb0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d115      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_TIM_Base_MspInit+0xa8>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	201e      	movs	r0, #30
 8001bd8:	f000 fb21 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bdc:	201e      	movs	r0, #30
 8001bde:	f000 fb3a 	bl	8002256 <HAL_NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40000400 	.word	0x40000400
 8001bf4:	40000800 	.word	0x40000800

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <HAL_TIM_MspPostInit+0x68>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d11d      	bne.n	8001c56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_TIM_MspPostInit+0x6c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c36:	2302      	movs	r3, #2
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c46:	2302      	movs	r3, #2
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_TIM_MspPostInit+0x70>)
 8001c52:	f000 ff1d 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3720      	adds	r7, #32
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40000400 	.word	0x40000400
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020400 	.word	0x40020400

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	f040 8091 	bne.w	8001db2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	4a49      	ldr	r2, [pc, #292]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca0:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	613b      	str	r3, [r7, #16]
 8001caa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	4b43      	ldr	r3, [pc, #268]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb4:	4a42      	ldr	r2, [pc, #264]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6313      	str	r3, [r2, #48]	; 0x30
 8001cbc:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cc8:	230c      	movs	r3, #12
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd8:	2307      	movs	r3, #7
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4838      	ldr	r0, [pc, #224]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001ce4:	f000 fed4 	bl	8002a90 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ce8:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001cea:	4a38      	ldr	r2, [pc, #224]	; (8001dcc <HAL_UART_MspInit+0x160>)
 8001cec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001cee:	4b36      	ldr	r3, [pc, #216]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cf6:	4b34      	ldr	r3, [pc, #208]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d02:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d08:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d0a:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d1c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d24:	4b28      	ldr	r3, [pc, #160]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d2a:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d2c:	f000 faae 	bl	800228c <HAL_DMA_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001d36:	f7ff fe47 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a22      	ldr	r2, [pc, #136]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d3e:	639a      	str	r2, [r3, #56]	; 0x38
 8001d40:	4a21      	ldr	r2, [pc, #132]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d46:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <HAL_UART_MspInit+0x168>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d86:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d88:	f000 fa80 	bl	800228c <HAL_DMA_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001d92:	f7ff fe19 	bl	80019c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9c:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <HAL_UART_MspInit+0x164>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2100      	movs	r1, #0
 8001da6:	2026      	movs	r0, #38	; 0x26
 8001da8:	f000 fa39 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dac:	2026      	movs	r0, #38	; 0x26
 8001dae:	f000 fa52 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	20000178 	.word	0x20000178
 8001dcc:	40026088 	.word	0x40026088
 8001dd0:	200002bc 	.word	0x200002bc
 8001dd4:	400260a0 	.word	0x400260a0

08001dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <NMI_Handler+0x4>

08001dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <MemManage_Handler+0x4>

08001dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <BusFault_Handler+0x4>

08001df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <UsageFault_Handler+0x4>

08001df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e24:	f000 f900 	bl	8002028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA1_Stream5_IRQHandler+0x10>)
 8001e32:	f000 fbc3 	bl	80025bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000178 	.word	0x20000178

08001e40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA1_Stream6_IRQHandler+0x10>)
 8001e46:	f000 fbb9 	bl	80025bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002bc 	.word	0x200002bc

08001e54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <TIM2_IRQHandler+0x10>)
 8001e5a:	f002 f8dd 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000364 	.word	0x20000364

08001e68 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <TIM4_IRQHandler+0x10>)
 8001e6e:	f002 f8d3 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200001d8 	.word	0x200001d8

08001e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <USART2_IRQHandler+0x10>)
 8001e82:	f002 ff47 	bl	8004d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200003ac 	.word	0x200003ac

08001e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e98:	f000 ff98 	bl	8002dcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f003 fd3a 	bl	8005948 <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20020000 	.word	0x20020000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	2000016c 	.word	0x2000016c
 8001f08:	20000408 	.word	0x20000408

08001f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f36:	490e      	ldr	r1, [pc, #56]	; (8001f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f38:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f3c:	e002      	b.n	8001f44 <LoopCopyDataInit>

08001f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f42:	3304      	adds	r3, #4

08001f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f48:	d3f9      	bcc.n	8001f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4a:	4a0b      	ldr	r2, [pc, #44]	; (8001f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f4c:	4c0b      	ldr	r4, [pc, #44]	; (8001f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f50:	e001      	b.n	8001f56 <LoopFillZerobss>

08001f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f54:	3204      	adds	r2, #4

08001f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f58:	d3fb      	bcc.n	8001f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f5a:	f7ff ffd7 	bl	8001f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f003 fcf9 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f62:	f7fe fbc3 	bl	80006ec <main>
  bx  lr    
 8001f66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f74:	080063fc 	.word	0x080063fc
  ldr r2, =_sbss
 8001f78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f7c:	20000404 	.word	0x20000404

08001f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC_IRQHandler>
	...

08001f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_Init+0x40>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_Init+0x40>)
 8001f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_Init+0x40>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_Init+0x40>)
 8001f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa0:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <HAL_Init+0x40>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <HAL_Init+0x40>)
 8001fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fac:	2003      	movs	r0, #3
 8001fae:	f000 f92b 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f808 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fb8:	f7ff fd0c 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_InitTick+0x54>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x58>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f943 	bl	8002272 <HAL_SYSTICK_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e00e      	b.n	8002014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0f      	cmp	r3, #15
 8001ffa:	d80a      	bhi.n	8002012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	f000 f90b 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <HAL_InitTick+0x5c>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	e000      	b.n	8002014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000000c 	.word	0x2000000c
 8002020:	20000014 	.word	0x20000014
 8002024:	20000010 	.word	0x20000010

08002028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_IncTick+0x20>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x24>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4413      	add	r3, r2
 8002038:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_IncTick+0x24>)
 800203a:	6013      	str	r3, [r2, #0]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000014 	.word	0x20000014
 800204c:	200003f0 	.word	0x200003f0

08002050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <HAL_GetTick+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	200003f0 	.word	0x200003f0

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	; (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	; (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	; 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff feda 	bl	8002050 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e099      	b.n	80023dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e00f      	b.n	80022ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff fec1 	bl	8002050 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d908      	bls.n	80022ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e078      	b.n	80023dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e8      	bne.n	80022ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4b38      	ldr	r3, [pc, #224]	; (80023e4 <HAL_DMA_Init+0x158>)
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f023 0307 	bic.w	r3, r3, #7
 800236a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237a:	2b04      	cmp	r3, #4
 800237c:	d117      	bne.n	80023ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00e      	beq.n	80023ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fb01 	bl	8002998 <DMA_CheckFifoParam>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023aa:	2301      	movs	r3, #1
 80023ac:	e016      	b.n	80023dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fab8 	bl	800292c <DMA_CalcBaseAndBitshift>
 80023bc:	4603      	mov	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c4:	223f      	movs	r2, #63	; 0x3f
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	f010803f 	.word	0xf010803f

080023e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_DMA_Start_IT+0x26>
 800240a:	2302      	movs	r3, #2
 800240c:	e040      	b.n	8002490 <HAL_DMA_Start_IT+0xa8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12f      	bne.n	8002482 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fa4a 	bl	80028d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	223f      	movs	r2, #63	; 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0216 	orr.w	r2, r2, #22
 8002456:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e005      	b.n	800248e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a6:	f7ff fdd3 	bl	8002050 <HAL_GetTick>
 80024aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d008      	beq.n	80024ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e052      	b.n	8002570 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0216 	bic.w	r2, r2, #22
 80024d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_DMA_Abort+0x62>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800251a:	e013      	b.n	8002544 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251c:	f7ff fd98 	bl	8002050 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b05      	cmp	r3, #5
 8002528:	d90c      	bls.n	8002544 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2220      	movs	r2, #32
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e015      	b.n	8002570 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e4      	bne.n	800251c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	223f      	movs	r2, #63	; 0x3f
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d004      	beq.n	8002596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e00c      	b.n	80025b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2205      	movs	r2, #5
 800259a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c8:	4b92      	ldr	r3, [pc, #584]	; (8002814 <HAL_DMA_IRQHandler+0x258>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a92      	ldr	r2, [pc, #584]	; (8002818 <HAL_DMA_IRQHandler+0x25c>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	0a9b      	lsrs	r3, r3, #10
 80025d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e6:	2208      	movs	r2, #8
 80025e8:	409a      	lsls	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01a      	beq.n	8002628 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d013      	beq.n	8002628 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0204 	bic.w	r2, r2, #4
 800260e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	2208      	movs	r2, #8
 8002616:	409a      	lsls	r2, r3
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	2201      	movs	r2, #1
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d012      	beq.n	800265e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00b      	beq.n	800265e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2201      	movs	r2, #1
 800264c:	409a      	lsls	r2, r3
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002662:	2204      	movs	r2, #4
 8002664:	409a      	lsls	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4013      	ands	r3, r2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	2204      	movs	r2, #4
 8002682:	409a      	lsls	r2, r3
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f043 0204 	orr.w	r2, r3, #4
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2210      	movs	r2, #16
 800269a:	409a      	lsls	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d043      	beq.n	800272c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d03c      	beq.n	800272c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2210      	movs	r2, #16
 80026b8:	409a      	lsls	r2, r3
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d018      	beq.n	80026fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d108      	bne.n	80026ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d024      	beq.n	800272c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	4798      	blx	r3
 80026ea:	e01f      	b.n	800272c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d01b      	beq.n	800272c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	4798      	blx	r3
 80026fc:	e016      	b.n	800272c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2220      	movs	r2, #32
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 808e 	beq.w	800285a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8086 	beq.w	800285a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002752:	2220      	movs	r2, #32
 8002754:	409a      	lsls	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b05      	cmp	r3, #5
 8002764:	d136      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0216 	bic.w	r2, r2, #22
 8002774:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002784:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_DMA_IRQHandler+0x1da>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002792:	2b00      	cmp	r3, #0
 8002794:	d007      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0208 	bic.w	r2, r2, #8
 80027a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	223f      	movs	r2, #63	; 0x3f
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07d      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	4798      	blx	r3
        }
        return;
 80027d2:	e078      	b.n	80028c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d01c      	beq.n	800281c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d030      	beq.n	800285a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e02b      	b.n	800285a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d027      	beq.n	800285a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
 8002812:	e022      	b.n	800285a <HAL_DMA_IRQHandler+0x29e>
 8002814:	2000000c 	.word	0x2000000c
 8002818:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10f      	bne.n	800284a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0210 	bic.w	r2, r2, #16
 8002838:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285e:	2b00      	cmp	r3, #0
 8002860:	d032      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	429a      	cmp	r2, r3
 8002890:	d307      	bcc.n	80028a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f2      	bne.n	8002886 <HAL_DMA_IRQHandler+0x2ca>
 80028a0:	e000      	b.n	80028a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80028a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	4798      	blx	r3
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028c6:	bf00      	nop
    }
  }
}
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop

080028d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d108      	bne.n	8002910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290e:	e007      	b.n	8002920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3b10      	subs	r3, #16
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <DMA_CalcBaseAndBitshift+0x64>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002946:	4a13      	ldr	r2, [pc, #76]	; (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d909      	bls.n	800296e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	1d1a      	adds	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	659a      	str	r2, [r3, #88]	; 0x58
 800296c:	e007      	b.n	800297e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002976:	f023 0303 	bic.w	r3, r3, #3
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	aaaaaaab 	.word	0xaaaaaaab
 8002994:	080063c0 	.word	0x080063c0

08002998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <DMA_CheckFifoParam+0x5a>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d856      	bhi.n	8002a66 <DMA_CheckFifoParam+0xce>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DMA_CheckFifoParam+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029e3 	.word	0x080029e3
 80029c8:	080029d1 	.word	0x080029d1
 80029cc:	08002a67 	.word	0x08002a67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d046      	beq.n	8002a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e043      	b.n	8002a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ea:	d140      	bne.n	8002a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e03d      	b.n	8002a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d121      	bne.n	8002a40 <DMA_CheckFifoParam+0xa8>
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d837      	bhi.n	8002a72 <DMA_CheckFifoParam+0xda>
 8002a02:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <DMA_CheckFifoParam+0x70>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a1f 	.word	0x08002a1f
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002a31 	.word	0x08002a31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e030      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d025      	beq.n	8002a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2e:	e022      	b.n	8002a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a38:	d11f      	bne.n	8002a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3e:	e01c      	b.n	8002a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d903      	bls.n	8002a4e <DMA_CheckFifoParam+0xb6>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d003      	beq.n	8002a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a4c:	e018      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      break;
 8002a52:	e015      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e00b      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a66:	bf00      	nop
 8002a68:	e00a      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e008      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e006      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e159      	b.n	8002d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 8148 	bne.w	8002d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a2 	beq.w	8002d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b57      	ldr	r3, [pc, #348]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a56      	ldr	r2, [pc, #344]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_GPIO_Init+0x2e8>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a52      	ldr	r2, [pc, #328]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a49      	ldr	r2, [pc, #292]	; (8002d80 <HAL_GPIO_Init+0x2f0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d019      	beq.n	8002c92 <HAL_GPIO_Init+0x202>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a48      	ldr	r2, [pc, #288]	; (8002d84 <HAL_GPIO_Init+0x2f4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_GPIO_Init+0x1fe>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a47      	ldr	r2, [pc, #284]	; (8002d88 <HAL_GPIO_Init+0x2f8>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00d      	beq.n	8002c8a <HAL_GPIO_Init+0x1fa>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a46      	ldr	r2, [pc, #280]	; (8002d8c <HAL_GPIO_Init+0x2fc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0x1f6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a45      	ldr	r2, [pc, #276]	; (8002d90 <HAL_GPIO_Init+0x300>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_GPIO_Init+0x1f2>
 8002c7e:	2304      	movs	r3, #4
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x204>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	; (8002d7c <HAL_GPIO_Init+0x2ec>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd6:	4a2f      	ldr	r2, [pc, #188]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cdc:	4b2d      	ldr	r3, [pc, #180]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d00:	4a24      	ldr	r2, [pc, #144]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_GPIO_Init+0x304>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f aea2 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	; 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f806 	bl	8002dfc <HAL_GPIO_EXTI_Callback>
  }
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e12b      	b.n	800307e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fe fdf2 	bl	8001a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e78:	f000 fd5c 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8002e7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	4a81      	ldr	r2, [pc, #516]	; (8003088 <HAL_I2C_Init+0x274>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d807      	bhi.n	8002e98 <HAL_I2C_Init+0x84>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a80      	ldr	r2, [pc, #512]	; (800308c <HAL_I2C_Init+0x278>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e006      	b.n	8002ea6 <HAL_I2C_Init+0x92>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4a7d      	ldr	r2, [pc, #500]	; (8003090 <HAL_I2C_Init+0x27c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0e7      	b.n	800307e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4a78      	ldr	r2, [pc, #480]	; (8003094 <HAL_I2C_Init+0x280>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4a6a      	ldr	r2, [pc, #424]	; (8003088 <HAL_I2C_Init+0x274>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d802      	bhi.n	8002ee8 <HAL_I2C_Init+0xd4>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	e009      	b.n	8002efc <HAL_I2C_Init+0xe8>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a69      	ldr	r2, [pc, #420]	; (8003098 <HAL_I2C_Init+0x284>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	099b      	lsrs	r3, r3, #6
 8002efa:	3301      	adds	r3, #1
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	495c      	ldr	r1, [pc, #368]	; (8003088 <HAL_I2C_Init+0x274>)
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	d819      	bhi.n	8002f50 <HAL_I2C_Init+0x13c>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e59      	subs	r1, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f2a:	1c59      	adds	r1, r3, #1
 8002f2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f30:	400b      	ands	r3, r1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_I2C_Init+0x138>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1e59      	subs	r1, r3, #1
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4a:	e051      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e04f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_I2C_Init+0x168>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e012      	b.n	8002fa2 <HAL_I2C_Init+0x18e>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	1e58      	subs	r0, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	0099      	lsls	r1, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f92:	3301      	adds	r3, #1
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf0c      	ite	eq
 8002f9c:	2301      	moveq	r3, #1
 8002f9e:	2300      	movne	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Init+0x196>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e022      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_I2C_Init+0x1bc>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1e58      	subs	r0, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6859      	ldr	r1, [r3, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	440b      	add	r3, r1
 8002fc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Init+0x1dc>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1e58      	subs	r0, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6859      	ldr	r1, [r3, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800301e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6911      	ldr	r1, [r2, #16]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68d2      	ldr	r2, [r2, #12]
 800302a:	4311      	orrs	r1, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0201 	orr.w	r2, r2, #1
 800305e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	000186a0 	.word	0x000186a0
 800308c:	001e847f 	.word	0x001e847f
 8003090:	003d08ff 	.word	0x003d08ff
 8003094:	431bde83 	.word	0x431bde83
 8003098:	10624dd3 	.word	0x10624dd3

0800309c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e264      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d075      	beq.n	80031a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ba:	4ba3      	ldr	r3, [pc, #652]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d00c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4ba0      	ldr	r3, [pc, #640]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d112      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030d2:	4b9d      	ldr	r3, [pc, #628]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030de:	d10b      	bne.n	80030f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	4b99      	ldr	r3, [pc, #612]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d05b      	beq.n	80031a4 <HAL_RCC_OscConfig+0x108>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d157      	bne.n	80031a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e23f      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d106      	bne.n	8003110 <HAL_RCC_OscConfig+0x74>
 8003102:	4b91      	ldr	r3, [pc, #580]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a90      	ldr	r2, [pc, #576]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e01d      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x98>
 800311a:	4b8b      	ldr	r3, [pc, #556]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a8a      	ldr	r2, [pc, #552]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b88      	ldr	r3, [pc, #544]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a87      	ldr	r2, [pc, #540]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0xb0>
 8003134:	4b84      	ldr	r3, [pc, #528]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a83      	ldr	r2, [pc, #524]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b81      	ldr	r3, [pc, #516]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a80      	ldr	r2, [pc, #512]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800314a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d013      	beq.n	800317c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003154:	f7fe ff7c 	bl	8002050 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	e008      	b.n	800316e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800315c:	f7fe ff78 	bl	8002050 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	2b64      	cmp	r3, #100	; 0x64
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e204      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	4b76      	ldr	r3, [pc, #472]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f0      	beq.n	800315c <HAL_RCC_OscConfig+0xc0>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317c:	f7fe ff68 	bl	8002050 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003184:	f7fe ff64 	bl	8002050 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b64      	cmp	r3, #100	; 0x64
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e1f0      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	4b6c      	ldr	r3, [pc, #432]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f0      	bne.n	8003184 <HAL_RCC_OscConfig+0xe8>
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d063      	beq.n	800327a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031b2:	4b65      	ldr	r3, [pc, #404]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b62      	ldr	r3, [pc, #392]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d11c      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ca:	4b5f      	ldr	r3, [pc, #380]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d116      	bne.n	8003204 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d6:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d001      	beq.n	80031ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e1c4      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4952      	ldr	r1, [pc, #328]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003202:	e03a      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d020      	beq.n	800324e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b4f      	ldr	r3, [pc, #316]	; (800334c <HAL_RCC_OscConfig+0x2b0>)
 800320e:	2201      	movs	r2, #1
 8003210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003212:	f7fe ff1d 	bl	8002050 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321a:	f7fe ff19 	bl	8002050 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e1a5      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	4b46      	ldr	r3, [pc, #280]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b43      	ldr	r3, [pc, #268]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	4940      	ldr	r1, [pc, #256]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e015      	b.n	800327a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324e:	4b3f      	ldr	r3, [pc, #252]	; (800334c <HAL_RCC_OscConfig+0x2b0>)
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fefc 	bl	8002050 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325c:	f7fe fef8 	bl	8002050 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e184      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1f0      	bne.n	800325c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d030      	beq.n	80032e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328e:	4b30      	ldr	r3, [pc, #192]	; (8003350 <HAL_RCC_OscConfig+0x2b4>)
 8003290:	2201      	movs	r2, #1
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fedc 	bl	8002050 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe fed8 	bl	8002050 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e164      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0f0      	beq.n	800329c <HAL_RCC_OscConfig+0x200>
 80032ba:	e015      	b.n	80032e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032bc:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_OscConfig+0x2b4>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe fec5 	bl	8002050 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe fec1 	bl	8002050 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e14d      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f0      	bne.n	80032ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a0 	beq.w	8003436 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b13      	ldr	r3, [pc, #76]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a0e      	ldr	r2, [pc, #56]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <HAL_RCC_OscConfig+0x2ac>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCC_OscConfig+0x2b8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d121      	bne.n	8003376 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_RCC_OscConfig+0x2b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a07      	ldr	r2, [pc, #28]	; (8003354 <HAL_RCC_OscConfig+0x2b8>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7fe fe87 	bl	8002050 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e011      	b.n	800336a <HAL_RCC_OscConfig+0x2ce>
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800
 800334c:	42470000 	.word	0x42470000
 8003350:	42470e80 	.word	0x42470e80
 8003354:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fe fe7a 	bl	8002050 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e106      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_OscConfig+0x4e4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x2f0>
 800337e:	4b81      	ldr	r3, [pc, #516]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	4a80      	ldr	r2, [pc, #512]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6713      	str	r3, [r2, #112]	; 0x70
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x32a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x312>
 8003394:	4b7b      	ldr	r3, [pc, #492]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a7a      	ldr	r2, [pc, #488]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	4b78      	ldr	r3, [pc, #480]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a77      	ldr	r2, [pc, #476]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x32a>
 80033ae:	4b75      	ldr	r3, [pc, #468]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a74      	ldr	r2, [pc, #464]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	4b72      	ldr	r3, [pc, #456]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	4a71      	ldr	r2, [pc, #452]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ce:	f7fe fe3f 	bl	8002050 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe fe3b 	bl	8002050 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0c5      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b65      	ldr	r3, [pc, #404]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x33a>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fe29 	bl	8002050 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fe25 	bl	8002050 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0af      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b5a      	ldr	r3, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b56      	ldr	r3, [pc, #344]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a55      	ldr	r2, [pc, #340]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 809b 	beq.w	8003576 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003440:	4b50      	ldr	r3, [pc, #320]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d05c      	beq.n	8003506 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d141      	bne.n	80034d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe fdf9 	bl	8002050 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fdf5 	bl	8002050 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e081      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	019b      	lsls	r3, r3, #6
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	061b      	lsls	r3, r3, #24
 80034a4:	4937      	ldr	r1, [pc, #220]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034aa:	4b37      	ldr	r3, [pc, #220]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 80034ac:	2201      	movs	r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fdce 	bl	8002050 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fe fdca 	bl	8002050 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e056      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b2e      	ldr	r3, [pc, #184]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x41c>
 80034d6:	e04e      	b.n	8003576 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b2b      	ldr	r3, [pc, #172]	; (8003588 <HAL_RCC_OscConfig+0x4ec>)
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034de:	f7fe fdb7 	bl	8002050 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e6:	f7fe fdb3 	bl	8002050 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e03f      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f8:	4b22      	ldr	r3, [pc, #136]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f0      	bne.n	80034e6 <HAL_RCC_OscConfig+0x44a>
 8003504:	e037      	b.n	8003576 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e032      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003512:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <HAL_RCC_OscConfig+0x4e8>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d028      	beq.n	8003572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d121      	bne.n	8003572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d11a      	bne.n	8003572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003542:	4013      	ands	r3, r2
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003548:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354a:	4293      	cmp	r3, r2
 800354c:	d111      	bne.n	8003572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	085b      	lsrs	r3, r3, #1
 800355a:	3b01      	subs	r3, #1
 800355c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d107      	bne.n	8003572 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40007000 	.word	0x40007000
 8003584:	40023800 	.word	0x40023800
 8003588:	42470060 	.word	0x42470060

0800358c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cc      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a0:	4b68      	ldr	r3, [pc, #416]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d90c      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ae:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003602:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d044      	beq.n	80036ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d119      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d003      	beq.n	800364a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800364a:	4b3f      	ldr	r3, [pc, #252]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800365a:	4b3b      	ldr	r3, [pc, #236]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e067      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f023 0203 	bic.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4934      	ldr	r1, [pc, #208]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003678:	4313      	orrs	r3, r2
 800367a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800367c:	f7fe fce8 	bl	8002050 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003682:	e00a      	b.n	800369a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003684:	f7fe fce4 	bl	8002050 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003692:	4293      	cmp	r3, r2
 8003694:	d901      	bls.n	800369a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e04f      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 020c 	and.w	r2, r3, #12
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d1eb      	bne.n	8003684 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d20c      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ba:	4b22      	ldr	r3, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c0>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1c4>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1c8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fe fc48 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023c00 	.word	0x40023c00
 8003748:	40023800 	.word	0x40023800
 800374c:	080063a8 	.word	0x080063a8
 8003750:	2000000c 	.word	0x2000000c
 8003754:	20000010 	.word	0x20000010

08003758 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	2300      	movs	r3, #0
 800376a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003770:	4b67      	ldr	r3, [pc, #412]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 030c 	and.w	r3, r3, #12
 8003778:	2b08      	cmp	r3, #8
 800377a:	d00d      	beq.n	8003798 <HAL_RCC_GetSysClockFreq+0x40>
 800377c:	2b08      	cmp	r3, #8
 800377e:	f200 80bd 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x34>
 8003786:	2b04      	cmp	r3, #4
 8003788:	d003      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x3a>
 800378a:	e0b7      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800378e:	60bb      	str	r3, [r7, #8]
       break;
 8003790:	e0b7      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003792:	4b61      	ldr	r3, [pc, #388]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003794:	60bb      	str	r3, [r7, #8]
      break;
 8003796:	e0b4      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003798:	4b5d      	ldr	r3, [pc, #372]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037a2:	4b5b      	ldr	r3, [pc, #364]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d04d      	beq.n	800384a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b58      	ldr	r3, [pc, #352]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	461a      	mov	r2, r3
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80037be:	f04f 0100 	mov.w	r1, #0
 80037c2:	ea02 0800 	and.w	r8, r2, r0
 80037c6:	ea03 0901 	and.w	r9, r3, r1
 80037ca:	4640      	mov	r0, r8
 80037cc:	4649      	mov	r1, r9
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	f04f 0300 	mov.w	r3, #0
 80037d6:	014b      	lsls	r3, r1, #5
 80037d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80037dc:	0142      	lsls	r2, r0, #5
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	ebb0 0008 	subs.w	r0, r0, r8
 80037e6:	eb61 0109 	sbc.w	r1, r1, r9
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	018b      	lsls	r3, r1, #6
 80037f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037f8:	0182      	lsls	r2, r0, #6
 80037fa:	1a12      	subs	r2, r2, r0
 80037fc:	eb63 0301 	sbc.w	r3, r3, r1
 8003800:	f04f 0000 	mov.w	r0, #0
 8003804:	f04f 0100 	mov.w	r1, #0
 8003808:	00d9      	lsls	r1, r3, #3
 800380a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800380e:	00d0      	lsls	r0, r2, #3
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	eb12 0208 	adds.w	r2, r2, r8
 8003818:	eb43 0309 	adc.w	r3, r3, r9
 800381c:	f04f 0000 	mov.w	r0, #0
 8003820:	f04f 0100 	mov.w	r1, #0
 8003824:	0259      	lsls	r1, r3, #9
 8003826:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800382a:	0250      	lsls	r0, r2, #9
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	461a      	mov	r2, r3
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f7fc fdda 	bl	80003f4 <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4613      	mov	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e04a      	b.n	80038e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	461a      	mov	r2, r3
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	f240 10ff 	movw	r0, #511	; 0x1ff
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	ea02 0400 	and.w	r4, r2, r0
 8003862:	ea03 0501 	and.w	r5, r3, r1
 8003866:	4620      	mov	r0, r4
 8003868:	4629      	mov	r1, r5
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	f04f 0300 	mov.w	r3, #0
 8003872:	014b      	lsls	r3, r1, #5
 8003874:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003878:	0142      	lsls	r2, r0, #5
 800387a:	4610      	mov	r0, r2
 800387c:	4619      	mov	r1, r3
 800387e:	1b00      	subs	r0, r0, r4
 8003880:	eb61 0105 	sbc.w	r1, r1, r5
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	018b      	lsls	r3, r1, #6
 800388e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003892:	0182      	lsls	r2, r0, #6
 8003894:	1a12      	subs	r2, r2, r0
 8003896:	eb63 0301 	sbc.w	r3, r3, r1
 800389a:	f04f 0000 	mov.w	r0, #0
 800389e:	f04f 0100 	mov.w	r1, #0
 80038a2:	00d9      	lsls	r1, r3, #3
 80038a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80038a8:	00d0      	lsls	r0, r2, #3
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	1912      	adds	r2, r2, r4
 80038b0:	eb45 0303 	adc.w	r3, r5, r3
 80038b4:	f04f 0000 	mov.w	r0, #0
 80038b8:	f04f 0100 	mov.w	r1, #0
 80038bc:	0299      	lsls	r1, r3, #10
 80038be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80038c2:	0290      	lsls	r0, r2, #10
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f7fc fd8e 	bl	80003f4 <__aeabi_uldivmod>
 80038d8:	4602      	mov	r2, r0
 80038da:	460b      	mov	r3, r1
 80038dc:	4613      	mov	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	3301      	adds	r3, #1
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	60bb      	str	r3, [r7, #8]
      break;
 80038fa:	e002      	b.n	8003902 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038fe:	60bb      	str	r3, [r7, #8]
      break;
 8003900:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003902:	68bb      	ldr	r3, [r7, #8]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800390e:	bf00      	nop
 8003910:	40023800 	.word	0x40023800
 8003914:	00f42400 	.word	0x00f42400
 8003918:	007a1200 	.word	0x007a1200

0800391c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_RCC_GetHCLKFreq+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	2000000c 	.word	0x2000000c

08003934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003938:	f7ff fff0 	bl	800391c <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0a9b      	lsrs	r3, r3, #10
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4903      	ldr	r1, [pc, #12]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x24>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40023800 	.word	0x40023800
 8003958:	080063b8 	.word	0x080063b8

0800395c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003960:	f7ff ffdc 	bl	800391c <HAL_RCC_GetHCLKFreq>
 8003964:	4602      	mov	r2, r0
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	0b5b      	lsrs	r3, r3, #13
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	4903      	ldr	r1, [pc, #12]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003972:	5ccb      	ldrb	r3, [r1, r3]
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40023800 	.word	0x40023800
 8003980:	080063b8 	.word	0x080063b8

08003984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fe f8ca 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fdda 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d001      	beq.n	8003a3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e03c      	b.n	8003ab6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_TIM_Base_Start+0xa0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <HAL_TIM_Base_Start+0x5c>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a56:	d013      	beq.n	8003a80 <HAL_TIM_Base_Start+0x5c>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a1a      	ldr	r2, [pc, #104]	; (8003ac8 <HAL_TIM_Base_Start+0xa4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <HAL_TIM_Base_Start+0x5c>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a19      	ldr	r2, [pc, #100]	; (8003acc <HAL_TIM_Base_Start+0xa8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <HAL_TIM_Base_Start+0x5c>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <HAL_TIM_Base_Start+0xac>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_TIM_Base_Start+0x5c>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_TIM_Base_Start+0xb0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d111      	bne.n	8003aa4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b06      	cmp	r3, #6
 8003a90:	d010      	beq.n	8003ab4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0201 	orr.w	r2, r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa2:	e007      	b.n	8003ab4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40010000 	.word	0x40010000
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800
 8003ad0:	40000c00 	.word	0x40000c00
 8003ad4:	40014000 	.word	0x40014000

08003ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d001      	beq.n	8003af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e044      	b.n	8003b7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a1e      	ldr	r2, [pc, #120]	; (8003b88 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b1a:	d013      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1a      	ldr	r2, [pc, #104]	; (8003b8c <HAL_TIM_Base_Start_IT+0xb4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a17      	ldr	r2, [pc, #92]	; (8003b94 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x6c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_TIM_Base_Start_IT+0xc0>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d111      	bne.n	8003b68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d010      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e007      	b.n	8003b78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000

08003b9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d106      	bne.n	8003bc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f839 	bl	8003c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4610      	mov	r0, r2
 8003bdc:	f000 fcce 	bl	800457c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
	...

08003c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_TIM_PWM_Start+0x24>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	bf14      	ite	ne
 8003c6c:	2301      	movne	r3, #1
 8003c6e:	2300      	moveq	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	e022      	b.n	8003cba <HAL_TIM_PWM_Start+0x6a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	d109      	bne.n	8003c8e <HAL_TIM_PWM_Start+0x3e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	e015      	b.n	8003cba <HAL_TIM_PWM_Start+0x6a>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d109      	bne.n	8003ca8 <HAL_TIM_PWM_Start+0x58>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	bf14      	ite	ne
 8003ca0:	2301      	movne	r3, #1
 8003ca2:	2300      	moveq	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e008      	b.n	8003cba <HAL_TIM_PWM_Start+0x6a>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	bf14      	ite	ne
 8003cb4:	2301      	movne	r3, #1
 8003cb6:	2300      	moveq	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e068      	b.n	8003d94 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <HAL_TIM_PWM_Start+0x82>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cd0:	e013      	b.n	8003cfa <HAL_TIM_PWM_Start+0xaa>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b04      	cmp	r3, #4
 8003cd6:	d104      	bne.n	8003ce2 <HAL_TIM_PWM_Start+0x92>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ce0:	e00b      	b.n	8003cfa <HAL_TIM_PWM_Start+0xaa>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d104      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0xa2>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2202      	movs	r2, #2
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cf0:	e003      	b.n	8003cfa <HAL_TIM_PWM_Start+0xaa>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2202      	movs	r2, #2
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	6839      	ldr	r1, [r7, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fee0 	bl	8004ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <HAL_TIM_PWM_Start+0x14c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d107      	bne.n	8003d22 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1d      	ldr	r2, [pc, #116]	; (8003d9c <HAL_TIM_PWM_Start+0x14c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d018      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x10e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d013      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x10e>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_TIM_PWM_Start+0x150>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d00e      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x10e>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <HAL_TIM_PWM_Start+0x154>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d009      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x10e>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <HAL_TIM_PWM_Start+0x158>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d004      	beq.n	8003d5e <HAL_TIM_PWM_Start+0x10e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <HAL_TIM_PWM_Start+0x15c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d111      	bne.n	8003d82 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b06      	cmp	r3, #6
 8003d6e:	d010      	beq.n	8003d92 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d80:	e007      	b.n	8003d92 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f042 0201 	orr.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40010000 	.word	0x40010000
 8003da0:	40000400 	.word	0x40000400
 8003da4:	40000800 	.word	0x40000800
 8003da8:	40000c00 	.word	0x40000c00
 8003dac:	40014000 	.word	0x40014000

08003db0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e097      	b.n	8003ef4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fd fe6b 	bl	8001ab4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003df4:	f023 0307 	bic.w	r3, r3, #7
 8003df8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f000 fbb9 	bl	800457c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	f023 0303 	bic.w	r3, r3, #3
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	021b      	lsls	r3, r3, #8
 8003e42:	4313      	orrs	r3, r2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003e50:	f023 030c 	bic.w	r3, r3, #12
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	021b      	lsls	r3, r3, #8
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	011a      	lsls	r2, r3, #4
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	031b      	lsls	r3, r3, #12
 8003e80:	4313      	orrs	r3, r2
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003e96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d110      	bne.n	8003f4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f32:	7b7b      	ldrb	r3, [r7, #13]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d001      	beq.n	8003f3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e069      	b.n	8004010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f4c:	e031      	b.n	8003fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d110      	bne.n	8003f76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d102      	bne.n	8003f60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5a:	7b3b      	ldrb	r3, [r7, #12]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d001      	beq.n	8003f64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e055      	b.n	8004010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f74:	e01d      	b.n	8003fb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d108      	bne.n	8003f8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f7c:	7bbb      	ldrb	r3, [r7, #14]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f82:	7b7b      	ldrb	r3, [r7, #13]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f88:	7b3b      	ldrb	r3, [r7, #12]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d001      	beq.n	8003f92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e03e      	b.n	8004010 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2202      	movs	r2, #2
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_TIM_Encoder_Start+0xc4>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d008      	beq.n	8003fd0 <HAL_TIM_Encoder_Start+0xd4>
 8003fbe:	e00f      	b.n	8003fe0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fd7d 	bl	8004ac8 <TIM_CCxChannelCmd>
      break;
 8003fce:	e016      	b.n	8003ffe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fd75 	bl	8004ac8 <TIM_CCxChannelCmd>
      break;
 8003fde:	e00e      	b.n	8003ffe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fd6d 	bl	8004ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd66 	bl	8004ac8 <TIM_CCxChannelCmd>
      break;
 8003ffc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d122      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d11b      	bne.n	8004074 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0202 	mvn.w	r2, #2
 8004044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa70 	bl	8004540 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa62 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa73 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b04      	cmp	r3, #4
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa46 	bl	8004540 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa38 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa49 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0208 	mvn.w	r2, #8
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2204      	movs	r2, #4
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa1c 	bl	8004540 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fa0e 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fa1f 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b10      	cmp	r3, #16
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b10      	cmp	r3, #16
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0210 	mvn.w	r2, #16
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2208      	movs	r2, #8
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f9f2 	bl	8004540 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f9e4 	bl	800452c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f9f5 	bl	8004554 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d10e      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	d107      	bne.n	800419c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fae4 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d10e      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d107      	bne.n	80041c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fd1e 	bl	8004c04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d10e      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b40      	cmp	r3, #64	; 0x40
 80041e2:	d107      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9ba 	bl	8004568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0320 	and.w	r3, r3, #32
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b20      	cmp	r3, #32
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0220 	mvn.w	r2, #32
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 fce8 	bl	8004bf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800423e:	2302      	movs	r3, #2
 8004240:	e0ac      	b.n	800439c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	f200 809f 	bhi.w	8004390 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800428d 	.word	0x0800428d
 800425c:	08004391 	.word	0x08004391
 8004260:	08004391 	.word	0x08004391
 8004264:	08004391 	.word	0x08004391
 8004268:	080042cd 	.word	0x080042cd
 800426c:	08004391 	.word	0x08004391
 8004270:	08004391 	.word	0x08004391
 8004274:	08004391 	.word	0x08004391
 8004278:	0800430f 	.word	0x0800430f
 800427c:	08004391 	.word	0x08004391
 8004280:	08004391 	.word	0x08004391
 8004284:	08004391 	.word	0x08004391
 8004288:	0800434f 	.word	0x0800434f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 f9f2 	bl	800467c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	699a      	ldr	r2, [r3, #24]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0208 	orr.w	r2, r2, #8
 80042a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0204 	bic.w	r2, r2, #4
 80042b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	619a      	str	r2, [r3, #24]
      break;
 80042ca:	e062      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fa38 	bl	8004748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	021a      	lsls	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
      break;
 800430c:	e041      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fa83 	bl	8004820 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69da      	ldr	r2, [r3, #28]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0208 	orr.w	r2, r2, #8
 8004328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0204 	bic.w	r2, r2, #4
 8004338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69d9      	ldr	r1, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	61da      	str	r2, [r3, #28]
      break;
 800434c:	e021      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 facd 	bl	80048f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	021a      	lsls	r2, r3, #8
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	61da      	str	r2, [r3, #28]
      break;
 800438e:	e000      	b.n	8004392 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_TIM_ConfigClockSource+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e0b3      	b.n	8004524 <HAL_TIM_ConfigClockSource+0x180>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043f4:	d03e      	beq.n	8004474 <HAL_TIM_ConfigClockSource+0xd0>
 80043f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fa:	f200 8087 	bhi.w	800450c <HAL_TIM_ConfigClockSource+0x168>
 80043fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004402:	f000 8085 	beq.w	8004510 <HAL_TIM_ConfigClockSource+0x16c>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440a:	d87f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 800440c:	2b70      	cmp	r3, #112	; 0x70
 800440e:	d01a      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xa2>
 8004410:	2b70      	cmp	r3, #112	; 0x70
 8004412:	d87b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 8004414:	2b60      	cmp	r3, #96	; 0x60
 8004416:	d050      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0x116>
 8004418:	2b60      	cmp	r3, #96	; 0x60
 800441a:	d877      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 800441c:	2b50      	cmp	r3, #80	; 0x50
 800441e:	d03c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0xf6>
 8004420:	2b50      	cmp	r3, #80	; 0x50
 8004422:	d873      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 8004424:	2b40      	cmp	r3, #64	; 0x40
 8004426:	d058      	beq.n	80044da <HAL_TIM_ConfigClockSource+0x136>
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d86f      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d064      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x156>
 8004430:	2b30      	cmp	r3, #48	; 0x30
 8004432:	d86b      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 8004434:	2b20      	cmp	r3, #32
 8004436:	d060      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x156>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d867      	bhi.n	800450c <HAL_TIM_ConfigClockSource+0x168>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d05c      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x156>
 8004440:	2b10      	cmp	r3, #16
 8004442:	d05a      	beq.n	80044fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004444:	e062      	b.n	800450c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f000 fb17 	bl	8004a88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004468:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	609a      	str	r2, [r3, #8]
      break;
 8004472:	e04e      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	6899      	ldr	r1, [r3, #8]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f000 fb00 	bl	8004a88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004496:	609a      	str	r2, [r3, #8]
      break;
 8004498:	e03b      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6859      	ldr	r1, [r3, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	461a      	mov	r2, r3
 80044a8:	f000 fa74 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2150      	movs	r1, #80	; 0x50
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 facd 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044b8:	e02b      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6859      	ldr	r1, [r3, #4]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 fa93 	bl	80049f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2160      	movs	r1, #96	; 0x60
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fabd 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044d8:	e01b      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	461a      	mov	r2, r3
 80044e8:	f000 fa54 	bl	8004994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2140      	movs	r1, #64	; 0x40
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 faad 	bl	8004a52 <TIM_ITRx_SetConfig>
      break;
 80044f8:	e00b      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f000 faa4 	bl	8004a52 <TIM_ITRx_SetConfig>
        break;
 800450a:	e002      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004510:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a34      	ldr	r2, [pc, #208]	; (8004660 <TIM_Base_SetConfig+0xe4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a31      	ldr	r2, [pc, #196]	; (8004664 <TIM_Base_SetConfig+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a30      	ldr	r2, [pc, #192]	; (8004668 <TIM_Base_SetConfig+0xec>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0x38>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a2f      	ldr	r2, [pc, #188]	; (800466c <TIM_Base_SetConfig+0xf0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d108      	bne.n	80045c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a25      	ldr	r2, [pc, #148]	; (8004660 <TIM_Base_SetConfig+0xe4>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01b      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d4:	d017      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a22      	ldr	r2, [pc, #136]	; (8004664 <TIM_Base_SetConfig+0xe8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a21      	ldr	r2, [pc, #132]	; (8004668 <TIM_Base_SetConfig+0xec>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00f      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a20      	ldr	r2, [pc, #128]	; (800466c <TIM_Base_SetConfig+0xf0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d00b      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	; (8004670 <TIM_Base_SetConfig+0xf4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d007      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <TIM_Base_SetConfig+0xf8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d003      	beq.n	8004606 <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <TIM_Base_SetConfig+0xfc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d108      	bne.n	8004618 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a08      	ldr	r2, [pc, #32]	; (8004660 <TIM_Base_SetConfig+0xe4>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d103      	bne.n	800464c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691a      	ldr	r2, [r3, #16]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	615a      	str	r2, [r3, #20]
}
 8004652:	bf00      	nop
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40010000 	.word	0x40010000
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800

0800467c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	f023 0201 	bic.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f023 0302 	bic.w	r3, r3, #2
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a1c      	ldr	r2, [pc, #112]	; (8004744 <TIM_OC1_SetConfig+0xc8>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d10c      	bne.n	80046f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0308 	bic.w	r3, r3, #8
 80046de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0304 	bic.w	r3, r3, #4
 80046f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a13      	ldr	r2, [pc, #76]	; (8004744 <TIM_OC1_SetConfig+0xc8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d111      	bne.n	800471e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	621a      	str	r2, [r3, #32]
}
 8004738:	bf00      	nop
 800473a:	371c      	adds	r7, #28
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40010000 	.word	0x40010000

08004748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f023 0210 	bic.w	r2, r3, #16
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	4313      	orrs	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0320 	bic.w	r3, r3, #32
 8004792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4313      	orrs	r3, r2
 800479e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	; (800481c <TIM_OC2_SetConfig+0xd4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d10d      	bne.n	80047c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a15      	ldr	r2, [pc, #84]	; (800481c <TIM_OC2_SetConfig+0xd4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d113      	bne.n	80047f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40010000 	.word	0x40010000

08004820 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <TIM_OC3_SetConfig+0xd0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d10d      	bne.n	800489a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a14      	ldr	r2, [pc, #80]	; (80048f0 <TIM_OC3_SetConfig+0xd0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d113      	bne.n	80048ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	621a      	str	r2, [r3, #32]
}
 80048e4:	bf00      	nop
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	40010000 	.word	0x40010000

080048f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	021b      	lsls	r3, r3, #8
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800493e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	031b      	lsls	r3, r3, #12
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a10      	ldr	r2, [pc, #64]	; (8004990 <TIM_OC4_SetConfig+0x9c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d109      	bne.n	8004968 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800495a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	4313      	orrs	r3, r2
 8004966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	621a      	str	r2, [r3, #32]
}
 8004982:	bf00      	nop
 8004984:	371c      	adds	r7, #28
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000

08004994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 030a 	bic.w	r3, r3, #10
 80049d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b087      	sub	sp, #28
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	60f8      	str	r0, [r7, #12]
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f023 0210 	bic.w	r2, r3, #16
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	031b      	lsls	r3, r3, #12
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	621a      	str	r2, [r3, #32]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b085      	sub	sp, #20
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f043 0307 	orr.w	r3, r3, #7
 8004a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	609a      	str	r2, [r3, #8]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b087      	sub	sp, #28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
 8004a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	021a      	lsls	r2, r3, #8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	609a      	str	r2, [r3, #8]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	f003 031f 	and.w	r3, r3, #31
 8004ada:	2201      	movs	r2, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	401a      	ands	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	f003 031f 	and.w	r3, r3, #31
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	fa01 f303 	lsl.w	r3, r1, r3
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e050      	b.n	8004bce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d10c      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40014000 	.word	0x40014000

08004bf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e03f      	b.n	8004caa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d106      	bne.n	8004c44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f7fd f814 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2224      	movs	r2, #36	; 0x24
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fca3 	bl	80055a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d11d      	bne.n	8004d08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Receive_DMA+0x26>
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e016      	b.n	8004d0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d101      	bne.n	8004cea <HAL_UART_Receive_DMA+0x38>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	e00f      	b.n	8004d0a <HAL_UART_Receive_DMA+0x58>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004cf8:	88fb      	ldrh	r3, [r7, #6]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	68b9      	ldr	r1, [r7, #8]
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fa98 	bl	8005234 <UART_Start_Receive_DMA>
 8004d04:	4603      	mov	r3, r0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08a      	sub	sp, #40	; 0x28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_UART_IRQHandler+0x52>
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fb8b 	bl	800547a <UART_Receive_IT>
      return;
 8004d64:	e17c      	b.n	8005060 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80b1 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x1bc>
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_UART_IRQHandler+0x70>
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80a6 	beq.w	8004ed0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_UART_IRQHandler+0x90>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f043 0201 	orr.w	r2, r3, #1
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xb0>
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbc:	f043 0202 	orr.w	r2, r3, #2
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_UART_IRQHandler+0xd0>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ddc:	f043 0204 	orr.w	r2, r3, #4
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00f      	beq.n	8004e0e <HAL_UART_IRQHandler+0xfa>
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d104      	bne.n	8004e02 <HAL_UART_IRQHandler+0xee>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	f043 0208 	orr.w	r2, r3, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 811f 	beq.w	8005056 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_UART_IRQHandler+0x11e>
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb24 	bl	800547a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	bf0c      	ite	eq
 8004e40:	2301      	moveq	r3, #1
 8004e42:	2300      	movne	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4c:	f003 0308 	and.w	r3, r3, #8
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_UART_IRQHandler+0x146>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d031      	beq.n	8004ebe <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fa64 	bl	8005328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d123      	bne.n	8004eb6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e7c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d013      	beq.n	8004eae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8a:	4a77      	ldr	r2, [pc, #476]	; (8005068 <HAL_UART_IRQHandler+0x354>)
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fb70 	bl	8002578 <HAL_DMA_Abort_IT>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00e      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f8fa 	bl	80050a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e00a      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f8f6 	bl	80050a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ebc:	e006      	b.n	8004ecc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f8f2 	bl	80050a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004eca:	e0c4      	b.n	8005056 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ecc:	bf00      	nop
    return;
 8004ece:	e0c2      	b.n	8005056 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	f040 80a2 	bne.w	800501e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 809c 	beq.w	800501e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	f003 0310 	and.w	r3, r3, #16
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8096 	beq.w	800501e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	2b40      	cmp	r3, #64	; 0x40
 8004f14:	d14f      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004f20:	8a3b      	ldrh	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 8099 	beq.w	800505a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f2c:	8a3a      	ldrh	r2, [r7, #16]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f080 8093 	bcs.w	800505a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8a3a      	ldrh	r2, [r7, #16]
 8004f38:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d02b      	beq.n	8004f9e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f54:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f74:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2220      	movs	r2, #32
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0210 	bic.w	r2, r2, #16
 8004f92:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fd fa7d 	bl	8002498 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f884 	bl	80050bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004fb4:	e051      	b.n	800505a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d047      	beq.n	800505e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004fce:	8a7b      	ldrh	r3, [r7, #18]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d044      	beq.n	800505e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fe2:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 0201 	bic.w	r2, r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0210 	bic.w	r2, r2, #16
 8005010:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005012:	8a7b      	ldrh	r3, [r7, #18]
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f850 	bl	80050bc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800501c:	e01f      	b.n	800505e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_UART_IRQHandler+0x326>
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 f9b9 	bl	80053aa <UART_Transmit_IT>
    return;
 8005038:	e012      	b.n	8005060 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00d      	beq.n	8005060 <HAL_UART_IRQHandler+0x34c>
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9fb 	bl	800544a <UART_EndTransmit_IT>
    return;
 8005054:	e004      	b.n	8005060 <HAL_UART_IRQHandler+0x34c>
    return;
 8005056:	bf00      	nop
 8005058:	e002      	b.n	8005060 <HAL_UART_IRQHandler+0x34c>
      return;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <HAL_UART_IRQHandler+0x34c>
      return;
 800505e:	bf00      	nop
  }
}
 8005060:	3728      	adds	r7, #40	; 0x28
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	08005383 	.word	0x08005383

0800506c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d12a      	bne.n	8005146 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005104:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0201 	bic.w	r2, r2, #1
 8005114:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695a      	ldr	r2, [r3, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005124:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	2b01      	cmp	r3, #1
 8005134:	d107      	bne.n	8005146 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0210 	bic.w	r2, r2, #16
 8005144:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	2b01      	cmp	r3, #1
 800514c:	d106      	bne.n	800515c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005152:	4619      	mov	r1, r3
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f7ff ffb1 	bl	80050bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800515a:	e002      	b.n	8005162 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f7ff ff8f 	bl	8005080 <HAL_UART_RxCpltCallback>
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005184:	085b      	lsrs	r3, r3, #1
 8005186:	b29b      	uxth	r3, r3
 8005188:	4619      	mov	r1, r3
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f7ff ff96 	bl	80050bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005190:	e002      	b.n	8005198 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005192:	68f8      	ldr	r0, [r7, #12]
 8005194:	f7ff ff7e 	bl	8005094 <HAL_UART_RxHalfCpltCallback>
}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051bc:	2b80      	cmp	r3, #128	; 0x80
 80051be:	bf0c      	ite	eq
 80051c0:	2301      	moveq	r3, #1
 80051c2:	2300      	movne	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b21      	cmp	r3, #33	; 0x21
 80051d2:	d108      	bne.n	80051e6 <UART_DMAError+0x46>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	2200      	movs	r2, #0
 80051de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80051e0:	68b8      	ldr	r0, [r7, #8]
 80051e2:	f000 f88b 	bl	80052fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b22      	cmp	r3, #34	; 0x22
 8005206:	d108      	bne.n	800521a <UART_DMAError+0x7a>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d005      	beq.n	800521a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005214:	68b8      	ldr	r0, [r7, #8]
 8005216:	f000 f887 	bl	8005328 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0210 	orr.w	r2, r3, #16
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005226:	68b8      	ldr	r0, [r7, #8]
 8005228:	f7ff ff3e 	bl	80050a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4613      	mov	r3, r2
 8005240:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	88fa      	ldrh	r2, [r7, #6]
 800524c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2222      	movs	r2, #34	; 0x22
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	4a23      	ldr	r2, [pc, #140]	; (80052f0 <UART_Start_Receive_DMA+0xbc>)
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <UART_Start_Receive_DMA+0xc0>)
 800526a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005270:	4a21      	ldr	r2, [pc, #132]	; (80052f8 <UART_Start_Receive_DMA+0xc4>)
 8005272:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	2200      	movs	r2, #0
 800527a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	88fb      	ldrh	r3, [r7, #6]
 8005294:	f7fd f8a8 	bl	80023e8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005298:	2300      	movs	r3, #0
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	613b      	str	r3, [r7, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	080050d5 	.word	0x080050d5
 80052f4:	0800516b 	.word	0x0800516b
 80052f8:	080051a1 	.word	0x080051a1

080052fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68da      	ldr	r2, [r3, #12]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005312:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800533e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	2b01      	cmp	r3, #1
 8005356:	d107      	bne.n	8005368 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0210 	bic.w	r2, r2, #16
 8005366:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fe83 	bl	80050a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b21      	cmp	r3, #33	; 0x21
 80053bc:	d13e      	bne.n	800543c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d114      	bne.n	80053f2 <UART_Transmit_IT+0x48>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]
 80053f0:	e008      	b.n	8005404 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6211      	str	r1, [r2, #32]
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4619      	mov	r1, r3
 8005412:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005436:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fdfe 	bl	800506c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b22      	cmp	r3, #34	; 0x22
 800548c:	f040 8087 	bne.w	800559e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d117      	bne.n	80054ca <UART_Receive_IT+0x50>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e026      	b.n	8005518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <UART_Receive_IT+0x74>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <UART_Receive_IT+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e008      	b.n	800550e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d136      	bne.n	800559a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0220 	bic.w	r2, r2, #32
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d10e      	bne.n	800558a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68da      	ldr	r2, [r3, #12]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0210 	bic.w	r2, r2, #16
 800557a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fd9a 	bl	80050bc <HAL_UARTEx_RxEventCallback>
 8005588:	e002      	b.n	8005590 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff fd78 	bl	8005080 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e002      	b.n	80055a0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800559a:	2300      	movs	r3, #0
 800559c:	e000      	b.n	80055a0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800559e:	2302      	movs	r3, #2
  }
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ac:	b09f      	sub	sp, #124	; 0x7c
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055be:	68d9      	ldr	r1, [r3, #12]
 80055c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	ea40 0301 	orr.w	r3, r0, r1
 80055c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	431a      	orrs	r2, r3
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	4313      	orrs	r3, r2
 80055e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80055e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055ec:	f021 010c 	bic.w	r1, r1, #12
 80055f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f6:	430b      	orrs	r3, r1
 80055f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005606:	6999      	ldr	r1, [r3, #24]
 8005608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	ea40 0301 	orr.w	r3, r0, r1
 8005610:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4bc5      	ldr	r3, [pc, #788]	; (800592c <UART_SetConfig+0x384>)
 8005618:	429a      	cmp	r2, r3
 800561a:	d004      	beq.n	8005626 <UART_SetConfig+0x7e>
 800561c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4bc3      	ldr	r3, [pc, #780]	; (8005930 <UART_SetConfig+0x388>)
 8005622:	429a      	cmp	r2, r3
 8005624:	d103      	bne.n	800562e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005626:	f7fe f999 	bl	800395c <HAL_RCC_GetPCLK2Freq>
 800562a:	6778      	str	r0, [r7, #116]	; 0x74
 800562c:	e002      	b.n	8005634 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800562e:	f7fe f981 	bl	8003934 <HAL_RCC_GetPCLK1Freq>
 8005632:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563c:	f040 80b6 	bne.w	80057ac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005642:	461c      	mov	r4, r3
 8005644:	f04f 0500 	mov.w	r5, #0
 8005648:	4622      	mov	r2, r4
 800564a:	462b      	mov	r3, r5
 800564c:	1891      	adds	r1, r2, r2
 800564e:	6439      	str	r1, [r7, #64]	; 0x40
 8005650:	415b      	adcs	r3, r3
 8005652:	647b      	str	r3, [r7, #68]	; 0x44
 8005654:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005658:	1912      	adds	r2, r2, r4
 800565a:	eb45 0303 	adc.w	r3, r5, r3
 800565e:	f04f 0000 	mov.w	r0, #0
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	00d9      	lsls	r1, r3, #3
 8005668:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800566c:	00d0      	lsls	r0, r2, #3
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
 8005672:	1911      	adds	r1, r2, r4
 8005674:	6639      	str	r1, [r7, #96]	; 0x60
 8005676:	416b      	adcs	r3, r5
 8005678:	667b      	str	r3, [r7, #100]	; 0x64
 800567a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	461a      	mov	r2, r3
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	1891      	adds	r1, r2, r2
 8005686:	63b9      	str	r1, [r7, #56]	; 0x38
 8005688:	415b      	adcs	r3, r3
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005690:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005694:	f7fa feae 	bl	80003f4 <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4ba5      	ldr	r3, [pc, #660]	; (8005934 <UART_SetConfig+0x38c>)
 800569e:	fba3 2302 	umull	r2, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	011e      	lsls	r6, r3, #4
 80056a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a8:	461c      	mov	r4, r3
 80056aa:	f04f 0500 	mov.w	r5, #0
 80056ae:	4622      	mov	r2, r4
 80056b0:	462b      	mov	r3, r5
 80056b2:	1891      	adds	r1, r2, r2
 80056b4:	6339      	str	r1, [r7, #48]	; 0x30
 80056b6:	415b      	adcs	r3, r3
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80056be:	1912      	adds	r2, r2, r4
 80056c0:	eb45 0303 	adc.w	r3, r5, r3
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f04f 0100 	mov.w	r1, #0
 80056cc:	00d9      	lsls	r1, r3, #3
 80056ce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056d2:	00d0      	lsls	r0, r2, #3
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	1911      	adds	r1, r2, r4
 80056da:	65b9      	str	r1, [r7, #88]	; 0x58
 80056dc:	416b      	adcs	r3, r5
 80056de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	461a      	mov	r2, r3
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80056ee:	415b      	adcs	r3, r3
 80056f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056f6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80056fa:	f7fa fe7b 	bl	80003f4 <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4b8c      	ldr	r3, [pc, #560]	; (8005934 <UART_SetConfig+0x38c>)
 8005704:	fba3 1302 	umull	r1, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	2164      	movs	r1, #100	; 0x64
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	3332      	adds	r3, #50	; 0x32
 8005716:	4a87      	ldr	r2, [pc, #540]	; (8005934 <UART_SetConfig+0x38c>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005724:	441e      	add	r6, r3
 8005726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005728:	4618      	mov	r0, r3
 800572a:	f04f 0100 	mov.w	r1, #0
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	1894      	adds	r4, r2, r2
 8005734:	623c      	str	r4, [r7, #32]
 8005736:	415b      	adcs	r3, r3
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800573e:	1812      	adds	r2, r2, r0
 8005740:	eb41 0303 	adc.w	r3, r1, r3
 8005744:	f04f 0400 	mov.w	r4, #0
 8005748:	f04f 0500 	mov.w	r5, #0
 800574c:	00dd      	lsls	r5, r3, #3
 800574e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005752:	00d4      	lsls	r4, r2, #3
 8005754:	4622      	mov	r2, r4
 8005756:	462b      	mov	r3, r5
 8005758:	1814      	adds	r4, r2, r0
 800575a:	653c      	str	r4, [r7, #80]	; 0x50
 800575c:	414b      	adcs	r3, r1
 800575e:	657b      	str	r3, [r7, #84]	; 0x54
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	461a      	mov	r2, r3
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	1891      	adds	r1, r2, r2
 800576c:	61b9      	str	r1, [r7, #24]
 800576e:	415b      	adcs	r3, r3
 8005770:	61fb      	str	r3, [r7, #28]
 8005772:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005776:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800577a:	f7fa fe3b 	bl	80003f4 <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4b6c      	ldr	r3, [pc, #432]	; (8005934 <UART_SetConfig+0x38c>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a67      	ldr	r2, [pc, #412]	; (8005934 <UART_SetConfig+0x38c>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 0207 	and.w	r2, r3, #7
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4432      	add	r2, r6
 80057a8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057aa:	e0b9      	b.n	8005920 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ae:	461c      	mov	r4, r3
 80057b0:	f04f 0500 	mov.w	r5, #0
 80057b4:	4622      	mov	r2, r4
 80057b6:	462b      	mov	r3, r5
 80057b8:	1891      	adds	r1, r2, r2
 80057ba:	6139      	str	r1, [r7, #16]
 80057bc:	415b      	adcs	r3, r3
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80057c4:	1912      	adds	r2, r2, r4
 80057c6:	eb45 0303 	adc.w	r3, r5, r3
 80057ca:	f04f 0000 	mov.w	r0, #0
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	00d9      	lsls	r1, r3, #3
 80057d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057d8:	00d0      	lsls	r0, r2, #3
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	eb12 0804 	adds.w	r8, r2, r4
 80057e2:	eb43 0905 	adc.w	r9, r3, r5
 80057e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f04f 0100 	mov.w	r1, #0
 80057f0:	f04f 0200 	mov.w	r2, #0
 80057f4:	f04f 0300 	mov.w	r3, #0
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057fe:	0082      	lsls	r2, r0, #2
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	f7fa fdf6 	bl	80003f4 <__aeabi_uldivmod>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4b49      	ldr	r3, [pc, #292]	; (8005934 <UART_SetConfig+0x38c>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	011e      	lsls	r6, r3, #4
 8005816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005818:	4618      	mov	r0, r3
 800581a:	f04f 0100 	mov.w	r1, #0
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	1894      	adds	r4, r2, r2
 8005824:	60bc      	str	r4, [r7, #8]
 8005826:	415b      	adcs	r3, r3
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800582e:	1812      	adds	r2, r2, r0
 8005830:	eb41 0303 	adc.w	r3, r1, r3
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	f04f 0500 	mov.w	r5, #0
 800583c:	00dd      	lsls	r5, r3, #3
 800583e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005842:	00d4      	lsls	r4, r2, #3
 8005844:	4622      	mov	r2, r4
 8005846:	462b      	mov	r3, r5
 8005848:	1814      	adds	r4, r2, r0
 800584a:	64bc      	str	r4, [r7, #72]	; 0x48
 800584c:	414b      	adcs	r3, r1
 800584e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	f04f 0100 	mov.w	r1, #0
 800585a:	f04f 0200 	mov.w	r2, #0
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	008b      	lsls	r3, r1, #2
 8005864:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005868:	0082      	lsls	r2, r0, #2
 800586a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800586e:	f7fa fdc1 	bl	80003f4 <__aeabi_uldivmod>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	4b2f      	ldr	r3, [pc, #188]	; (8005934 <UART_SetConfig+0x38c>)
 8005878:	fba3 1302 	umull	r1, r3, r3, r2
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	2164      	movs	r1, #100	; 0x64
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	3332      	adds	r3, #50	; 0x32
 800588a:	4a2a      	ldr	r2, [pc, #168]	; (8005934 <UART_SetConfig+0x38c>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005896:	441e      	add	r6, r3
 8005898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589a:	4618      	mov	r0, r3
 800589c:	f04f 0100 	mov.w	r1, #0
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	1894      	adds	r4, r2, r2
 80058a6:	603c      	str	r4, [r7, #0]
 80058a8:	415b      	adcs	r3, r3
 80058aa:	607b      	str	r3, [r7, #4]
 80058ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058b0:	1812      	adds	r2, r2, r0
 80058b2:	eb41 0303 	adc.w	r3, r1, r3
 80058b6:	f04f 0400 	mov.w	r4, #0
 80058ba:	f04f 0500 	mov.w	r5, #0
 80058be:	00dd      	lsls	r5, r3, #3
 80058c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c4:	00d4      	lsls	r4, r2, #3
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	eb12 0a00 	adds.w	sl, r2, r0
 80058ce:	eb43 0b01 	adc.w	fp, r3, r1
 80058d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f04f 0100 	mov.w	r1, #0
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	008b      	lsls	r3, r1, #2
 80058e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ea:	0082      	lsls	r2, r0, #2
 80058ec:	4650      	mov	r0, sl
 80058ee:	4659      	mov	r1, fp
 80058f0:	f7fa fd80 	bl	80003f4 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <UART_SetConfig+0x38c>)
 80058fa:	fba3 1302 	umull	r1, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2164      	movs	r1, #100	; 0x64
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	3332      	adds	r3, #50	; 0x32
 800590c:	4a09      	ldr	r2, [pc, #36]	; (8005934 <UART_SetConfig+0x38c>)
 800590e:	fba2 2303 	umull	r2, r3, r2, r3
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	f003 020f 	and.w	r2, r3, #15
 8005918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4432      	add	r2, r6
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	377c      	adds	r7, #124	; 0x7c
 8005924:	46bd      	mov	sp, r7
 8005926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800592a:	bf00      	nop
 800592c:	40011000 	.word	0x40011000
 8005930:	40011400 	.word	0x40011400
 8005934:	51eb851f 	.word	0x51eb851f

08005938 <calloc>:
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <calloc+0xc>)
 800593a:	460a      	mov	r2, r1
 800593c:	4601      	mov	r1, r0
 800593e:	6818      	ldr	r0, [r3, #0]
 8005940:	f000 b834 	b.w	80059ac <_calloc_r>
 8005944:	20000018 	.word	0x20000018

08005948 <__errno>:
 8005948:	4b01      	ldr	r3, [pc, #4]	; (8005950 <__errno+0x8>)
 800594a:	6818      	ldr	r0, [r3, #0]
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000018 	.word	0x20000018

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4d0d      	ldr	r5, [pc, #52]	; (800598c <__libc_init_array+0x38>)
 8005958:	4c0d      	ldr	r4, [pc, #52]	; (8005990 <__libc_init_array+0x3c>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	2600      	movs	r6, #0
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	4d0b      	ldr	r5, [pc, #44]	; (8005994 <__libc_init_array+0x40>)
 8005966:	4c0c      	ldr	r4, [pc, #48]	; (8005998 <__libc_init_array+0x44>)
 8005968:	f000 fd12 	bl	8006390 <_init>
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	2600      	movs	r6, #0
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	080063f4 	.word	0x080063f4
 8005990:	080063f4 	.word	0x080063f4
 8005994:	080063f4 	.word	0x080063f4
 8005998:	080063f8 	.word	0x080063f8

0800599c <memset>:
 800599c:	4402      	add	r2, r0
 800599e:	4603      	mov	r3, r0
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d100      	bne.n	80059a6 <memset+0xa>
 80059a4:	4770      	bx	lr
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	e7f9      	b.n	80059a0 <memset+0x4>

080059ac <_calloc_r>:
 80059ac:	b513      	push	{r0, r1, r4, lr}
 80059ae:	434a      	muls	r2, r1
 80059b0:	4611      	mov	r1, r2
 80059b2:	9201      	str	r2, [sp, #4]
 80059b4:	f000 f80a 	bl	80059cc <_malloc_r>
 80059b8:	4604      	mov	r4, r0
 80059ba:	b118      	cbz	r0, 80059c4 <_calloc_r+0x18>
 80059bc:	9a01      	ldr	r2, [sp, #4]
 80059be:	2100      	movs	r1, #0
 80059c0:	f7ff ffec 	bl	800599c <memset>
 80059c4:	4620      	mov	r0, r4
 80059c6:	b002      	add	sp, #8
 80059c8:	bd10      	pop	{r4, pc}
	...

080059cc <_malloc_r>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	1ccd      	adds	r5, r1, #3
 80059d0:	f025 0503 	bic.w	r5, r5, #3
 80059d4:	3508      	adds	r5, #8
 80059d6:	2d0c      	cmp	r5, #12
 80059d8:	bf38      	it	cc
 80059da:	250c      	movcc	r5, #12
 80059dc:	2d00      	cmp	r5, #0
 80059de:	4606      	mov	r6, r0
 80059e0:	db01      	blt.n	80059e6 <_malloc_r+0x1a>
 80059e2:	42a9      	cmp	r1, r5
 80059e4:	d903      	bls.n	80059ee <_malloc_r+0x22>
 80059e6:	230c      	movs	r3, #12
 80059e8:	6033      	str	r3, [r6, #0]
 80059ea:	2000      	movs	r0, #0
 80059ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ee:	f000 f857 	bl	8005aa0 <__malloc_lock>
 80059f2:	4921      	ldr	r1, [pc, #132]	; (8005a78 <_malloc_r+0xac>)
 80059f4:	680a      	ldr	r2, [r1, #0]
 80059f6:	4614      	mov	r4, r2
 80059f8:	b99c      	cbnz	r4, 8005a22 <_malloc_r+0x56>
 80059fa:	4f20      	ldr	r7, [pc, #128]	; (8005a7c <_malloc_r+0xb0>)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	b923      	cbnz	r3, 8005a0a <_malloc_r+0x3e>
 8005a00:	4621      	mov	r1, r4
 8005a02:	4630      	mov	r0, r6
 8005a04:	f000 f83c 	bl	8005a80 <_sbrk_r>
 8005a08:	6038      	str	r0, [r7, #0]
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f000 f837 	bl	8005a80 <_sbrk_r>
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	d123      	bne.n	8005a5e <_malloc_r+0x92>
 8005a16:	230c      	movs	r3, #12
 8005a18:	6033      	str	r3, [r6, #0]
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	f000 f846 	bl	8005aac <__malloc_unlock>
 8005a20:	e7e3      	b.n	80059ea <_malloc_r+0x1e>
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	1b5b      	subs	r3, r3, r5
 8005a26:	d417      	bmi.n	8005a58 <_malloc_r+0x8c>
 8005a28:	2b0b      	cmp	r3, #11
 8005a2a:	d903      	bls.n	8005a34 <_malloc_r+0x68>
 8005a2c:	6023      	str	r3, [r4, #0]
 8005a2e:	441c      	add	r4, r3
 8005a30:	6025      	str	r5, [r4, #0]
 8005a32:	e004      	b.n	8005a3e <_malloc_r+0x72>
 8005a34:	6863      	ldr	r3, [r4, #4]
 8005a36:	42a2      	cmp	r2, r4
 8005a38:	bf0c      	ite	eq
 8005a3a:	600b      	streq	r3, [r1, #0]
 8005a3c:	6053      	strne	r3, [r2, #4]
 8005a3e:	4630      	mov	r0, r6
 8005a40:	f000 f834 	bl	8005aac <__malloc_unlock>
 8005a44:	f104 000b 	add.w	r0, r4, #11
 8005a48:	1d23      	adds	r3, r4, #4
 8005a4a:	f020 0007 	bic.w	r0, r0, #7
 8005a4e:	1ac2      	subs	r2, r0, r3
 8005a50:	d0cc      	beq.n	80059ec <_malloc_r+0x20>
 8005a52:	1a1b      	subs	r3, r3, r0
 8005a54:	50a3      	str	r3, [r4, r2]
 8005a56:	e7c9      	b.n	80059ec <_malloc_r+0x20>
 8005a58:	4622      	mov	r2, r4
 8005a5a:	6864      	ldr	r4, [r4, #4]
 8005a5c:	e7cc      	b.n	80059f8 <_malloc_r+0x2c>
 8005a5e:	1cc4      	adds	r4, r0, #3
 8005a60:	f024 0403 	bic.w	r4, r4, #3
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d0e3      	beq.n	8005a30 <_malloc_r+0x64>
 8005a68:	1a21      	subs	r1, r4, r0
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 f808 	bl	8005a80 <_sbrk_r>
 8005a70:	3001      	adds	r0, #1
 8005a72:	d1dd      	bne.n	8005a30 <_malloc_r+0x64>
 8005a74:	e7cf      	b.n	8005a16 <_malloc_r+0x4a>
 8005a76:	bf00      	nop
 8005a78:	20000170 	.word	0x20000170
 8005a7c:	20000174 	.word	0x20000174

08005a80 <_sbrk_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	; (8005a9c <_sbrk_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fc fa08 	bl	8001ea0 <_sbrk>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_sbrk_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_sbrk_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200003f4 	.word	0x200003f4

08005aa0 <__malloc_lock>:
 8005aa0:	4801      	ldr	r0, [pc, #4]	; (8005aa8 <__malloc_lock+0x8>)
 8005aa2:	f000 b809 	b.w	8005ab8 <__retarget_lock_acquire_recursive>
 8005aa6:	bf00      	nop
 8005aa8:	200003fc 	.word	0x200003fc

08005aac <__malloc_unlock>:
 8005aac:	4801      	ldr	r0, [pc, #4]	; (8005ab4 <__malloc_unlock+0x8>)
 8005aae:	f000 b804 	b.w	8005aba <__retarget_lock_release_recursive>
 8005ab2:	bf00      	nop
 8005ab4:	200003fc 	.word	0x200003fc

08005ab8 <__retarget_lock_acquire_recursive>:
 8005ab8:	4770      	bx	lr

08005aba <__retarget_lock_release_recursive>:
 8005aba:	4770      	bx	lr

08005abc <powf>:
 8005abc:	b508      	push	{r3, lr}
 8005abe:	ed2d 8b04 	vpush	{d8-d9}
 8005ac2:	eeb0 9a40 	vmov.f32	s18, s0
 8005ac6:	eef0 8a60 	vmov.f32	s17, s1
 8005aca:	f000 f8b5 	bl	8005c38 <__ieee754_powf>
 8005ace:	4b43      	ldr	r3, [pc, #268]	; (8005bdc <powf+0x120>)
 8005ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8005ada:	d012      	beq.n	8005b02 <powf+0x46>
 8005adc:	eef4 8a68 	vcmp.f32	s17, s17
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	d60d      	bvs.n	8005b02 <powf+0x46>
 8005ae6:	eeb4 9a49 	vcmp.f32	s18, s18
 8005aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aee:	d70d      	bvc.n	8005b0c <powf+0x50>
 8005af0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005afc:	bf08      	it	eq
 8005afe:	eeb0 8a67 	vmoveq.f32	s16, s15
 8005b02:	eeb0 0a48 	vmov.f32	s0, s16
 8005b06:	ecbd 8b04 	vpop	{d8-d9}
 8005b0a:	bd08      	pop	{r3, pc}
 8005b0c:	eddf 9a34 	vldr	s19, [pc, #208]	; 8005be0 <powf+0x124>
 8005b10:	eeb4 9a69 	vcmp.f32	s18, s19
 8005b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b18:	d116      	bne.n	8005b48 <powf+0x8c>
 8005b1a:	eef4 8a69 	vcmp.f32	s17, s19
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	d057      	beq.n	8005bd4 <powf+0x118>
 8005b24:	eeb0 0a68 	vmov.f32	s0, s17
 8005b28:	f000 fb50 	bl	80061cc <finitef>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d0e8      	beq.n	8005b02 <powf+0x46>
 8005b30:	eef4 8ae9 	vcmpe.f32	s17, s19
 8005b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b38:	d5e3      	bpl.n	8005b02 <powf+0x46>
 8005b3a:	f7ff ff05 	bl	8005948 <__errno>
 8005b3e:	2321      	movs	r3, #33	; 0x21
 8005b40:	6003      	str	r3, [r0, #0]
 8005b42:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8005be4 <powf+0x128>
 8005b46:	e7dc      	b.n	8005b02 <powf+0x46>
 8005b48:	f000 fb40 	bl	80061cc <finitef>
 8005b4c:	bb50      	cbnz	r0, 8005ba4 <powf+0xe8>
 8005b4e:	eeb0 0a49 	vmov.f32	s0, s18
 8005b52:	f000 fb3b 	bl	80061cc <finitef>
 8005b56:	b328      	cbz	r0, 8005ba4 <powf+0xe8>
 8005b58:	eeb0 0a68 	vmov.f32	s0, s17
 8005b5c:	f000 fb36 	bl	80061cc <finitef>
 8005b60:	b300      	cbz	r0, 8005ba4 <powf+0xe8>
 8005b62:	eeb4 8a48 	vcmp.f32	s16, s16
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	d706      	bvc.n	8005b7a <powf+0xbe>
 8005b6c:	f7ff feec 	bl	8005948 <__errno>
 8005b70:	2321      	movs	r3, #33	; 0x21
 8005b72:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 8005b76:	6003      	str	r3, [r0, #0]
 8005b78:	e7c3      	b.n	8005b02 <powf+0x46>
 8005b7a:	f7ff fee5 	bl	8005948 <__errno>
 8005b7e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8005b82:	2322      	movs	r3, #34	; 0x22
 8005b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	d508      	bpl.n	8005b9e <powf+0xe2>
 8005b8c:	eeb0 0a68 	vmov.f32	s0, s17
 8005b90:	f000 fb30 	bl	80061f4 <rintf>
 8005b94:	eeb4 0a68 	vcmp.f32	s0, s17
 8005b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9c:	d1d1      	bne.n	8005b42 <powf+0x86>
 8005b9e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8005be8 <powf+0x12c>
 8005ba2:	e7ae      	b.n	8005b02 <powf+0x46>
 8005ba4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	d1a9      	bne.n	8005b02 <powf+0x46>
 8005bae:	eeb0 0a49 	vmov.f32	s0, s18
 8005bb2:	f000 fb0b 	bl	80061cc <finitef>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d0a3      	beq.n	8005b02 <powf+0x46>
 8005bba:	eeb0 0a68 	vmov.f32	s0, s17
 8005bbe:	f000 fb05 	bl	80061cc <finitef>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d09d      	beq.n	8005b02 <powf+0x46>
 8005bc6:	f7ff febf 	bl	8005948 <__errno>
 8005bca:	2322      	movs	r3, #34	; 0x22
 8005bcc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8005be0 <powf+0x124>
 8005bd0:	6003      	str	r3, [r0, #0]
 8005bd2:	e796      	b.n	8005b02 <powf+0x46>
 8005bd4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005bd8:	e793      	b.n	8005b02 <powf+0x46>
 8005bda:	bf00      	nop
 8005bdc:	2000007c 	.word	0x2000007c
 8005be0:	00000000 	.word	0x00000000
 8005be4:	ff800000 	.word	0xff800000
 8005be8:	7f800000 	.word	0x7f800000

08005bec <sqrtf>:
 8005bec:	b508      	push	{r3, lr}
 8005bee:	ed2d 8b02 	vpush	{d8}
 8005bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8005bf6:	f000 fadf 	bl	80061b8 <__ieee754_sqrtf>
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <sqrtf+0x44>)
 8005bfc:	f993 3000 	ldrsb.w	r3, [r3]
 8005c00:	3301      	adds	r3, #1
 8005c02:	d011      	beq.n	8005c28 <sqrtf+0x3c>
 8005c04:	eeb4 8a48 	vcmp.f32	s16, s16
 8005c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0c:	d60c      	bvs.n	8005c28 <sqrtf+0x3c>
 8005c0e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8005c34 <sqrtf+0x48>
 8005c12:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1a:	d505      	bpl.n	8005c28 <sqrtf+0x3c>
 8005c1c:	f7ff fe94 	bl	8005948 <__errno>
 8005c20:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005c24:	2321      	movs	r3, #33	; 0x21
 8005c26:	6003      	str	r3, [r0, #0]
 8005c28:	ecbd 8b02 	vpop	{d8}
 8005c2c:	bd08      	pop	{r3, pc}
 8005c2e:	bf00      	nop
 8005c30:	2000007c 	.word	0x2000007c
 8005c34:	00000000 	.word	0x00000000

08005c38 <__ieee754_powf>:
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	ee10 5a90 	vmov	r5, s1
 8005c40:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005c44:	ed2d 8b02 	vpush	{d8}
 8005c48:	eeb0 8a40 	vmov.f32	s16, s0
 8005c4c:	eef0 8a60 	vmov.f32	s17, s1
 8005c50:	f000 8291 	beq.w	8006176 <__ieee754_powf+0x53e>
 8005c54:	ee10 8a10 	vmov	r8, s0
 8005c58:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005c5c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005c60:	dc06      	bgt.n	8005c70 <__ieee754_powf+0x38>
 8005c62:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005c66:	dd0a      	ble.n	8005c7e <__ieee754_powf+0x46>
 8005c68:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005c6c:	f000 8283 	beq.w	8006176 <__ieee754_powf+0x53e>
 8005c70:	ecbd 8b02 	vpop	{d8}
 8005c74:	48d8      	ldr	r0, [pc, #864]	; (8005fd8 <__ieee754_powf+0x3a0>)
 8005c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c7a:	f000 bab5 	b.w	80061e8 <nanf>
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	da1f      	bge.n	8005cc4 <__ieee754_powf+0x8c>
 8005c84:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005c88:	da2e      	bge.n	8005ce8 <__ieee754_powf+0xb0>
 8005c8a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005c8e:	f2c0 827b 	blt.w	8006188 <__ieee754_powf+0x550>
 8005c92:	15fb      	asrs	r3, r7, #23
 8005c94:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005c98:	fa47 f603 	asr.w	r6, r7, r3
 8005c9c:	fa06 f303 	lsl.w	r3, r6, r3
 8005ca0:	42bb      	cmp	r3, r7
 8005ca2:	f040 8271 	bne.w	8006188 <__ieee754_powf+0x550>
 8005ca6:	f006 0601 	and.w	r6, r6, #1
 8005caa:	f1c6 0602 	rsb	r6, r6, #2
 8005cae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005cb2:	d120      	bne.n	8005cf6 <__ieee754_powf+0xbe>
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	f280 8264 	bge.w	8006182 <__ieee754_powf+0x54a>
 8005cba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005cbe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005cc2:	e00d      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005cc4:	2600      	movs	r6, #0
 8005cc6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005cca:	d1f0      	bne.n	8005cae <__ieee754_powf+0x76>
 8005ccc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005cd0:	f000 8251 	beq.w	8006176 <__ieee754_powf+0x53e>
 8005cd4:	dd0a      	ble.n	8005cec <__ieee754_powf+0xb4>
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	f280 8250 	bge.w	800617c <__ieee754_powf+0x544>
 8005cdc:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8005fdc <__ieee754_powf+0x3a4>
 8005ce0:	ecbd 8b02 	vpop	{d8}
 8005ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce8:	2602      	movs	r6, #2
 8005cea:	e7ec      	b.n	8005cc6 <__ieee754_powf+0x8e>
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	daf5      	bge.n	8005cdc <__ieee754_powf+0xa4>
 8005cf0:	eeb1 0a68 	vneg.f32	s0, s17
 8005cf4:	e7f4      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005cf6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005cfa:	d102      	bne.n	8005d02 <__ieee754_powf+0xca>
 8005cfc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005d00:	e7ee      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005d02:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005d06:	eeb0 0a48 	vmov.f32	s0, s16
 8005d0a:	d108      	bne.n	8005d1e <__ieee754_powf+0xe6>
 8005d0c:	f1b8 0f00 	cmp.w	r8, #0
 8005d10:	db05      	blt.n	8005d1e <__ieee754_powf+0xe6>
 8005d12:	ecbd 8b02 	vpop	{d8}
 8005d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d1a:	f000 ba4d 	b.w	80061b8 <__ieee754_sqrtf>
 8005d1e:	f000 fa4e 	bl	80061be <fabsf>
 8005d22:	b124      	cbz	r4, 8005d2e <__ieee754_powf+0xf6>
 8005d24:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005d28:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005d2c:	d117      	bne.n	8005d5e <__ieee754_powf+0x126>
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	bfbc      	itt	lt
 8005d32:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005d36:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005d3a:	f1b8 0f00 	cmp.w	r8, #0
 8005d3e:	dacf      	bge.n	8005ce0 <__ieee754_powf+0xa8>
 8005d40:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005d44:	ea54 0306 	orrs.w	r3, r4, r6
 8005d48:	d104      	bne.n	8005d54 <__ieee754_powf+0x11c>
 8005d4a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005d4e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005d52:	e7c5      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005d54:	2e01      	cmp	r6, #1
 8005d56:	d1c3      	bne.n	8005ce0 <__ieee754_powf+0xa8>
 8005d58:	eeb1 0a40 	vneg.f32	s0, s0
 8005d5c:	e7c0      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005d5e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8005d62:	3801      	subs	r0, #1
 8005d64:	ea56 0300 	orrs.w	r3, r6, r0
 8005d68:	d104      	bne.n	8005d74 <__ieee754_powf+0x13c>
 8005d6a:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005d6e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005d72:	e7b5      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005d74:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8005d78:	dd6b      	ble.n	8005e52 <__ieee754_powf+0x21a>
 8005d7a:	4b99      	ldr	r3, [pc, #612]	; (8005fe0 <__ieee754_powf+0x3a8>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	dc06      	bgt.n	8005d8e <__ieee754_powf+0x156>
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	daab      	bge.n	8005cdc <__ieee754_powf+0xa4>
 8005d84:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8005fe4 <__ieee754_powf+0x3ac>
 8005d88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005d8c:	e7a8      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005d8e:	4b96      	ldr	r3, [pc, #600]	; (8005fe8 <__ieee754_powf+0x3b0>)
 8005d90:	429c      	cmp	r4, r3
 8005d92:	dd02      	ble.n	8005d9a <__ieee754_powf+0x162>
 8005d94:	2d00      	cmp	r5, #0
 8005d96:	dcf5      	bgt.n	8005d84 <__ieee754_powf+0x14c>
 8005d98:	e7a0      	b.n	8005cdc <__ieee754_powf+0xa4>
 8005d9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005d9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005da2:	eddf 6a92 	vldr	s13, [pc, #584]	; 8005fec <__ieee754_powf+0x3b4>
 8005da6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005daa:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005dae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005db2:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8005db6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005ff0 <__ieee754_powf+0x3b8>
 8005dc2:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8005dc6:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005ff4 <__ieee754_powf+0x3bc>
 8005dca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005dce:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005ff8 <__ieee754_powf+0x3c0>
 8005dd2:	eef0 6a67 	vmov.f32	s13, s15
 8005dd6:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005dda:	ee16 3a90 	vmov	r3, s13
 8005dde:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005de2:	f023 030f 	bic.w	r3, r3, #15
 8005de6:	ee00 3a90 	vmov	s1, r3
 8005dea:	eee0 0a47 	vfms.f32	s1, s0, s14
 8005dee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8005df2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005df6:	f025 050f 	bic.w	r5, r5, #15
 8005dfa:	ee07 5a10 	vmov	s14, r5
 8005dfe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8005e02:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005e0e:	3e01      	subs	r6, #1
 8005e10:	ea56 0200 	orrs.w	r2, r6, r0
 8005e14:	ee07 5a10 	vmov	s14, r5
 8005e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e1c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005e20:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8005e24:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005e28:	ee17 4a10 	vmov	r4, s14
 8005e2c:	bf08      	it	eq
 8005e2e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005e32:	2c00      	cmp	r4, #0
 8005e34:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005e38:	f340 8184 	ble.w	8006144 <__ieee754_powf+0x50c>
 8005e3c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005e40:	f340 80fc 	ble.w	800603c <__ieee754_powf+0x404>
 8005e44:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005fe4 <__ieee754_powf+0x3ac>
 8005e48:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005e4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e50:	e746      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8005e52:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 8005e56:	bf01      	itttt	eq
 8005e58:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8005ffc <__ieee754_powf+0x3c4>
 8005e5c:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8005e60:	f06f 0217 	mvneq.w	r2, #23
 8005e64:	ee17 4a90 	vmoveq	r4, s15
 8005e68:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8005e6c:	bf18      	it	ne
 8005e6e:	2200      	movne	r2, #0
 8005e70:	3b7f      	subs	r3, #127	; 0x7f
 8005e72:	4413      	add	r3, r2
 8005e74:	4a62      	ldr	r2, [pc, #392]	; (8006000 <__ieee754_powf+0x3c8>)
 8005e76:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005e7a:	4294      	cmp	r4, r2
 8005e7c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005e80:	dd06      	ble.n	8005e90 <__ieee754_powf+0x258>
 8005e82:	4a60      	ldr	r2, [pc, #384]	; (8006004 <__ieee754_powf+0x3cc>)
 8005e84:	4294      	cmp	r4, r2
 8005e86:	f340 80a4 	ble.w	8005fd2 <__ieee754_powf+0x39a>
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005e90:	2400      	movs	r4, #0
 8005e92:	4a5d      	ldr	r2, [pc, #372]	; (8006008 <__ieee754_powf+0x3d0>)
 8005e94:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005e98:	ee07 1a90 	vmov	s15, r1
 8005e9c:	ed92 7a00 	vldr	s14, [r2]
 8005ea0:	4a5a      	ldr	r2, [pc, #360]	; (800600c <__ieee754_powf+0x3d4>)
 8005ea2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005ea6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005eaa:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8005eae:	1049      	asrs	r1, r1, #1
 8005eb0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005eb4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005eb8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005ebc:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8005ec0:	ee06 1a10 	vmov	s12, r1
 8005ec4:	ee65 4a26 	vmul.f32	s9, s10, s13
 8005ec8:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005ecc:	ee14 7a90 	vmov	r7, s9
 8005ed0:	4017      	ands	r7, r2
 8005ed2:	ee05 7a90 	vmov	s11, r7
 8005ed6:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8005eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ede:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8006010 <__ieee754_powf+0x3d8>
 8005ee2:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8005ee6:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005eea:	ee25 6a26 	vmul.f32	s12, s10, s13
 8005eee:	eddf 6a49 	vldr	s13, [pc, #292]	; 8006014 <__ieee754_powf+0x3dc>
 8005ef2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005ef6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006018 <__ieee754_powf+0x3e0>
 8005efa:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005efe:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005fec <__ieee754_powf+0x3b4>
 8005f02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f06:	eddf 6a45 	vldr	s13, [pc, #276]	; 800601c <__ieee754_powf+0x3e4>
 8005f0a:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005f0e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006020 <__ieee754_powf+0x3e8>
 8005f12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005f16:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8005f1a:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8005f1e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005f22:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005f26:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8005f2a:	eef0 7a45 	vmov.f32	s15, s10
 8005f2e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee17 1a90 	vmov	r1, s15
 8005f3a:	4011      	ands	r1, r2
 8005f3c:	ee07 1a90 	vmov	s15, r1
 8005f40:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8005f44:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8005f48:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005f4c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005f50:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005f54:	eeb0 6a47 	vmov.f32	s12, s14
 8005f58:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8005f5c:	ee16 1a10 	vmov	r1, s12
 8005f60:	4011      	ands	r1, r2
 8005f62:	ee06 1a90 	vmov	s13, r1
 8005f66:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8005f6a:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8006024 <__ieee754_powf+0x3ec>
 8005f6e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006028 <__ieee754_powf+0x3f0>
 8005f72:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005f76:	ee06 1a10 	vmov	s12, r1
 8005f7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f7e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800602c <__ieee754_powf+0x3f4>
 8005f82:	492b      	ldr	r1, [pc, #172]	; (8006030 <__ieee754_powf+0x3f8>)
 8005f84:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005f88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f8c:	edd1 7a00 	vldr	s15, [r1]
 8005f90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <__ieee754_powf+0x3fc>)
 8005f9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005f9e:	eef0 7a47 	vmov.f32	s15, s14
 8005fa2:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005fa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005faa:	edd4 0a00 	vldr	s1, [r4]
 8005fae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee17 3a90 	vmov	r3, s15
 8005fba:	4013      	ands	r3, r2
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005fc4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8005fc8:	eee6 6a65 	vfms.f32	s13, s12, s11
 8005fcc:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005fd0:	e70f      	b.n	8005df2 <__ieee754_powf+0x1ba>
 8005fd2:	2401      	movs	r4, #1
 8005fd4:	e75d      	b.n	8005e92 <__ieee754_powf+0x25a>
 8005fd6:	bf00      	nop
 8005fd8:	080063c8 	.word	0x080063c8
 8005fdc:	00000000 	.word	0x00000000
 8005fe0:	3f7ffff7 	.word	0x3f7ffff7
 8005fe4:	7149f2ca 	.word	0x7149f2ca
 8005fe8:	3f800007 	.word	0x3f800007
 8005fec:	3eaaaaab 	.word	0x3eaaaaab
 8005ff0:	3fb8aa3b 	.word	0x3fb8aa3b
 8005ff4:	36eca570 	.word	0x36eca570
 8005ff8:	3fb8aa00 	.word	0x3fb8aa00
 8005ffc:	4b800000 	.word	0x4b800000
 8006000:	001cc471 	.word	0x001cc471
 8006004:	005db3d6 	.word	0x005db3d6
 8006008:	080063cc 	.word	0x080063cc
 800600c:	fffff000 	.word	0xfffff000
 8006010:	3e6c3255 	.word	0x3e6c3255
 8006014:	3e53f142 	.word	0x3e53f142
 8006018:	3e8ba305 	.word	0x3e8ba305
 800601c:	3edb6db7 	.word	0x3edb6db7
 8006020:	3f19999a 	.word	0x3f19999a
 8006024:	3f76384f 	.word	0x3f76384f
 8006028:	3f763800 	.word	0x3f763800
 800602c:	369dc3a0 	.word	0x369dc3a0
 8006030:	080063dc 	.word	0x080063dc
 8006034:	080063d4 	.word	0x080063d4
 8006038:	3338aa3c 	.word	0x3338aa3c
 800603c:	f040 8092 	bne.w	8006164 <__ieee754_powf+0x52c>
 8006040:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006038 <__ieee754_powf+0x400>
 8006044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006048:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800604c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006054:	f73f aef6 	bgt.w	8005e44 <__ieee754_powf+0x20c>
 8006058:	15db      	asrs	r3, r3, #23
 800605a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800605e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006062:	4103      	asrs	r3, r0
 8006064:	4423      	add	r3, r4
 8006066:	4949      	ldr	r1, [pc, #292]	; (800618c <__ieee754_powf+0x554>)
 8006068:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800606c:	3a7f      	subs	r2, #127	; 0x7f
 800606e:	4111      	asrs	r1, r2
 8006070:	ea23 0101 	bic.w	r1, r3, r1
 8006074:	ee07 1a10 	vmov	s14, r1
 8006078:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800607c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006080:	f1c2 0217 	rsb	r2, r2, #23
 8006084:	4110      	asrs	r0, r2
 8006086:	2c00      	cmp	r4, #0
 8006088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800608c:	bfb8      	it	lt
 800608e:	4240      	neglt	r0, r0
 8006090:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006094:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8006190 <__ieee754_powf+0x558>
 8006098:	ee17 3a10 	vmov	r3, s14
 800609c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80060a0:	f023 030f 	bic.w	r3, r3, #15
 80060a4:	ee07 3a10 	vmov	s14, r3
 80060a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ac:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80060b0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8006194 <__ieee754_powf+0x55c>
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80060bc:	eddf 6a36 	vldr	s13, [pc, #216]	; 8006198 <__ieee754_powf+0x560>
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	eea7 0a26 	vfma.f32	s0, s14, s13
 80060c8:	eeb0 6a40 	vmov.f32	s12, s0
 80060cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 80060d0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80060d4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80060d8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800619c <__ieee754_powf+0x564>
 80060dc:	ed9f 6a30 	vldr	s12, [pc, #192]	; 80061a0 <__ieee754_powf+0x568>
 80060e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 80060e4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80061a4 <__ieee754_powf+0x56c>
 80060e8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80060ec:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 80061a8 <__ieee754_powf+0x570>
 80060f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 80060f4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 80061ac <__ieee754_powf+0x574>
 80060f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80060fc:	eeb0 6a40 	vmov.f32	s12, s0
 8006100:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006104:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006108:	eeb0 7a46 	vmov.f32	s14, s12
 800610c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006110:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006114:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006118:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800611c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006120:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006124:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006128:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800612c:	ee10 3a10 	vmov	r3, s0
 8006130:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006138:	da1a      	bge.n	8006170 <__ieee754_powf+0x538>
 800613a:	f000 f8b7 	bl	80062ac <scalbnf>
 800613e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006142:	e5cd      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8006144:	4a1a      	ldr	r2, [pc, #104]	; (80061b0 <__ieee754_powf+0x578>)
 8006146:	4293      	cmp	r3, r2
 8006148:	dd02      	ble.n	8006150 <__ieee754_powf+0x518>
 800614a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80061b4 <__ieee754_powf+0x57c>
 800614e:	e67b      	b.n	8005e48 <__ieee754_powf+0x210>
 8006150:	d108      	bne.n	8006164 <__ieee754_powf+0x52c>
 8006152:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006156:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	f6ff af7b 	blt.w	8006058 <__ieee754_powf+0x420>
 8006162:	e7f2      	b.n	800614a <__ieee754_powf+0x512>
 8006164:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006168:	f73f af76 	bgt.w	8006058 <__ieee754_powf+0x420>
 800616c:	2000      	movs	r0, #0
 800616e:	e78f      	b.n	8006090 <__ieee754_powf+0x458>
 8006170:	ee00 3a10 	vmov	s0, r3
 8006174:	e7e3      	b.n	800613e <__ieee754_powf+0x506>
 8006176:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800617a:	e5b1      	b.n	8005ce0 <__ieee754_powf+0xa8>
 800617c:	eeb0 0a68 	vmov.f32	s0, s17
 8006180:	e5ae      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8006182:	eeb0 0a48 	vmov.f32	s0, s16
 8006186:	e5ab      	b.n	8005ce0 <__ieee754_powf+0xa8>
 8006188:	2600      	movs	r6, #0
 800618a:	e590      	b.n	8005cae <__ieee754_powf+0x76>
 800618c:	007fffff 	.word	0x007fffff
 8006190:	3f317218 	.word	0x3f317218
 8006194:	35bfbe8c 	.word	0x35bfbe8c
 8006198:	3f317200 	.word	0x3f317200
 800619c:	3331bb4c 	.word	0x3331bb4c
 80061a0:	b5ddea0e 	.word	0xb5ddea0e
 80061a4:	388ab355 	.word	0x388ab355
 80061a8:	bb360b61 	.word	0xbb360b61
 80061ac:	3e2aaaab 	.word	0x3e2aaaab
 80061b0:	43160000 	.word	0x43160000
 80061b4:	0da24260 	.word	0x0da24260

080061b8 <__ieee754_sqrtf>:
 80061b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80061bc:	4770      	bx	lr

080061be <fabsf>:
 80061be:	ee10 3a10 	vmov	r3, s0
 80061c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061c6:	ee00 3a10 	vmov	s0, r3
 80061ca:	4770      	bx	lr

080061cc <finitef>:
 80061cc:	b082      	sub	sp, #8
 80061ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 80061d2:	9801      	ldr	r0, [sp, #4]
 80061d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061d8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80061dc:	bfac      	ite	ge
 80061de:	2000      	movge	r0, #0
 80061e0:	2001      	movlt	r0, #1
 80061e2:	b002      	add	sp, #8
 80061e4:	4770      	bx	lr
	...

080061e8 <nanf>:
 80061e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061f0 <nanf+0x8>
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	7fc00000 	.word	0x7fc00000

080061f4 <rintf>:
 80061f4:	ee10 2a10 	vmov	r2, s0
 80061f8:	b513      	push	{r0, r1, r4, lr}
 80061fa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80061fe:	397f      	subs	r1, #127	; 0x7f
 8006200:	2916      	cmp	r1, #22
 8006202:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8006206:	dc47      	bgt.n	8006298 <rintf+0xa4>
 8006208:	b32b      	cbz	r3, 8006256 <rintf+0x62>
 800620a:	2900      	cmp	r1, #0
 800620c:	ee10 3a10 	vmov	r3, s0
 8006210:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8006214:	da21      	bge.n	800625a <rintf+0x66>
 8006216:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800621a:	425b      	negs	r3, r3
 800621c:	4921      	ldr	r1, [pc, #132]	; (80062a4 <rintf+0xb0>)
 800621e:	0a5b      	lsrs	r3, r3, #9
 8006220:	0d12      	lsrs	r2, r2, #20
 8006222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006226:	0512      	lsls	r2, r2, #20
 8006228:	4313      	orrs	r3, r2
 800622a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	edd1 6a00 	vldr	s13, [r1]
 8006236:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800623a:	ed8d 7a01 	vstr	s14, [sp, #4]
 800623e:	eddd 7a01 	vldr	s15, [sp, #4]
 8006242:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006246:	ee17 3a90 	vmov	r3, s15
 800624a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800624e:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006252:	ee00 3a10 	vmov	s0, r3
 8006256:	b002      	add	sp, #8
 8006258:	bd10      	pop	{r4, pc}
 800625a:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <rintf+0xb4>)
 800625c:	410a      	asrs	r2, r1
 800625e:	4213      	tst	r3, r2
 8006260:	d0f9      	beq.n	8006256 <rintf+0x62>
 8006262:	0854      	lsrs	r4, r2, #1
 8006264:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8006268:	d006      	beq.n	8006278 <rintf+0x84>
 800626a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800626e:	ea23 0304 	bic.w	r3, r3, r4
 8006272:	fa42 f101 	asr.w	r1, r2, r1
 8006276:	430b      	orrs	r3, r1
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <rintf+0xb0>)
 800627a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800627e:	ed90 7a00 	vldr	s14, [r0]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800628a:	edcd 7a01 	vstr	s15, [sp, #4]
 800628e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006292:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006296:	e7de      	b.n	8006256 <rintf+0x62>
 8006298:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800629c:	d3db      	bcc.n	8006256 <rintf+0x62>
 800629e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062a2:	e7d8      	b.n	8006256 <rintf+0x62>
 80062a4:	080063e4 	.word	0x080063e4
 80062a8:	007fffff 	.word	0x007fffff

080062ac <scalbnf>:
 80062ac:	ee10 3a10 	vmov	r3, s0
 80062b0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80062b4:	d025      	beq.n	8006302 <scalbnf+0x56>
 80062b6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80062ba:	d302      	bcc.n	80062c2 <scalbnf+0x16>
 80062bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80062c0:	4770      	bx	lr
 80062c2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80062c6:	d122      	bne.n	800630e <scalbnf+0x62>
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <scalbnf+0xc8>)
 80062ca:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006378 <scalbnf+0xcc>
 80062ce:	4298      	cmp	r0, r3
 80062d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80062d4:	db16      	blt.n	8006304 <scalbnf+0x58>
 80062d6:	ee10 3a10 	vmov	r3, s0
 80062da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80062de:	3a19      	subs	r2, #25
 80062e0:	4402      	add	r2, r0
 80062e2:	2afe      	cmp	r2, #254	; 0xfe
 80062e4:	dd15      	ble.n	8006312 <scalbnf+0x66>
 80062e6:	ee10 3a10 	vmov	r3, s0
 80062ea:	eddf 7a24 	vldr	s15, [pc, #144]	; 800637c <scalbnf+0xd0>
 80062ee:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006380 <scalbnf+0xd4>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	eeb0 7a67 	vmov.f32	s14, s15
 80062f8:	bfb8      	it	lt
 80062fa:	eef0 7a66 	vmovlt.f32	s15, s13
 80062fe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8006302:	4770      	bx	lr
 8006304:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006384 <scalbnf+0xd8>
 8006308:	ee20 0a27 	vmul.f32	s0, s0, s15
 800630c:	4770      	bx	lr
 800630e:	0dd2      	lsrs	r2, r2, #23
 8006310:	e7e6      	b.n	80062e0 <scalbnf+0x34>
 8006312:	2a00      	cmp	r2, #0
 8006314:	dd06      	ble.n	8006324 <scalbnf+0x78>
 8006316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800631a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800631e:	ee00 3a10 	vmov	s0, r3
 8006322:	4770      	bx	lr
 8006324:	f112 0f16 	cmn.w	r2, #22
 8006328:	da1a      	bge.n	8006360 <scalbnf+0xb4>
 800632a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800632e:	4298      	cmp	r0, r3
 8006330:	ee10 3a10 	vmov	r3, s0
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006338:	dd0a      	ble.n	8006350 <scalbnf+0xa4>
 800633a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800637c <scalbnf+0xd0>
 800633e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006380 <scalbnf+0xd4>
 8006342:	eef0 7a40 	vmov.f32	s15, s0
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf18      	it	ne
 800634a:	eeb0 0a47 	vmovne.f32	s0, s14
 800634e:	e7db      	b.n	8006308 <scalbnf+0x5c>
 8006350:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8006384 <scalbnf+0xd8>
 8006354:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006388 <scalbnf+0xdc>
 8006358:	eef0 7a40 	vmov.f32	s15, s0
 800635c:	2b00      	cmp	r3, #0
 800635e:	e7f3      	b.n	8006348 <scalbnf+0x9c>
 8006360:	3219      	adds	r2, #25
 8006362:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006366:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800636a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800638c <scalbnf+0xe0>
 800636e:	ee07 3a10 	vmov	s14, r3
 8006372:	e7c4      	b.n	80062fe <scalbnf+0x52>
 8006374:	ffff3cb0 	.word	0xffff3cb0
 8006378:	4c000000 	.word	0x4c000000
 800637c:	7149f2ca 	.word	0x7149f2ca
 8006380:	f149f2ca 	.word	0xf149f2ca
 8006384:	0da24260 	.word	0x0da24260
 8006388:	8da24260 	.word	0x8da24260
 800638c:	33000000 	.word	0x33000000

08006390 <_init>:
 8006390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006392:	bf00      	nop
 8006394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006396:	bc08      	pop	{r3}
 8006398:	469e      	mov	lr, r3
 800639a:	4770      	bx	lr

0800639c <_fini>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr
