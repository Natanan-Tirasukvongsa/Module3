
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a68  08004a68  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000090  08004b00  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004b00  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf56  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197e  00000000  00000000  0002c016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e83  00000000  00000000  0002f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bae8  00000000  00000000  00044f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5f5  00000000  00000000  00050a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000de010  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003464  00000000  00000000  000de064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a0c 	.word	0x08004a0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08004a0c 	.word	0x08004a0c

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006f0:	ed2d 8b02 	vpush	{d8}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f001 f9d3 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f8cf 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 fa7f 	bl	8000c00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000702:	f000 fa53 	bl	8000bac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000706:	f000 f931 	bl	800096c <MX_TIM1_Init>
  MX_TIM3_Init();
 800070a:	f000 f9d9 	bl	8000ac0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800070e:	f000 f985 	bl	8000a1c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000712:	4851      	ldr	r0, [pc, #324]	; (8000858 <main+0x16c>)
 8000714:	f002 fa28 	bl	8002b68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000718:	213c      	movs	r1, #60	; 0x3c
 800071a:	4850      	ldr	r0, [pc, #320]	; (800085c <main+0x170>)
 800071c:	f002 fc36 	bl	8002f8c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 8000720:	484f      	ldr	r0, [pc, #316]	; (8000860 <main+0x174>)
 8000722:	f002 f9c7 	bl	8002ab4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000726:	210c      	movs	r1, #12
 8000728:	484d      	ldr	r0, [pc, #308]	; (8000860 <main+0x174>)
 800072a:	f002 fad9 	bl	8002ce0 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (micros() - Time_Velocity_Stamp >= 100)
 800072e:	f000 fff1 	bl	8001714 <micros>
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <main+0x178>)
 8000734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000738:	1a84      	subs	r4, r0, r2
 800073a:	eb61 0503 	sbc.w	r5, r1, r3
 800073e:	2d00      	cmp	r5, #0
 8000740:	bf08      	it	eq
 8000742:	2c64      	cmpeq	r4, #100	; 0x64
 8000744:	d31a      	bcc.n	800077c <main+0x90>
	  {
		  Time_Velocity_Stamp = micros();
 8000746:	f000 ffe5 	bl	8001714 <micros>
 800074a:	4602      	mov	r2, r0
 800074c:	460b      	mov	r3, r1
 800074e:	4945      	ldr	r1, [pc, #276]	; (8000864 <main+0x178>)
 8000750:	e9c1 2300 	strd	r2, r3, [r1]
		  Velocity_Encoder = (Velocity_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 8000754:	4b44      	ldr	r3, [pc, #272]	; (8000868 <main+0x17c>)
 8000756:	edd3 7a00 	vldr	s15, [r3]
 800075a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800086c <main+0x180>
 800075e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8000762:	f000 fb05 	bl	8000d70 <Encoder_Velocity_Update>
 8000766:	eef0 7a40 	vmov.f32	s15, s0
 800076a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800076e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8000870 <main+0x184>
 8000772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000776:	4b3c      	ldr	r3, [pc, #240]	; (8000868 <main+0x17c>)
 8000778:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if (micros() - Time_Sampling_Stamp >= 1000)	  //Control loop
 800077c:	f000 ffca 	bl	8001714 <micros>
 8000780:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x188>)
 8000782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000786:	ebb0 0802 	subs.w	r8, r0, r2
 800078a:	eb61 0903 	sbc.w	r9, r1, r3
 800078e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	454b      	cmp	r3, r9
 8000798:	bf08      	it	eq
 800079a:	4542      	cmpeq	r2, r8
 800079c:	d2c7      	bcs.n	800072e <main+0x42>
	  {
			Time_Sampling_Stamp = micros();
 800079e:	f000 ffb9 	bl	8001714 <micros>
 80007a2:	4602      	mov	r2, r0
 80007a4:	460b      	mov	r3, r1
 80007a6:	4933      	ldr	r1, [pc, #204]	; (8000874 <main+0x188>)
 80007a8:	e9c1 2300 	strd	r2, r3, [r1]
			Position_Encoder = htim1.Instance->CNT; //Read Encoder
 80007ac:	4b2b      	ldr	r3, [pc, #172]	; (800085c <main+0x170>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b2:	ee07 3a90 	vmov	s15, r3
 80007b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ba:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <main+0x18c>)
 80007bc:	edc3 7a00 	vstr	s15, [r3]
			Position_Now_Degree = (Position_Encoder*360)/Encoder_Resolution; //Convert Encoder CNT to degree
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x18c>)
 80007c2:	edd3 7a00 	vldr	s15, [r3]
 80007c6:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800087c <main+0x190>
 80007ca:	ee67 6a87 	vmul.f32	s13, s15, s14
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <main+0x194>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	ee07 3a90 	vmov	s15, r3
 80007d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <main+0x198>)
 80007e0:	edc3 7a00 	vstr	s15, [r3]
			if (Distance_Calculated == 0) //Distance not calculated and not arrive at next station
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <main+0x19c>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d101      	bne.n	80007f0 <main+0x104>
			{
				Distance_Calculation();		//Calculate distance
 80007ec:	f000 fc08 	bl	8001000 <Distance_Calculation>
			}
			if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree)) //Distance calculated and not arrive at next station
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <main+0x19c>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d110      	bne.n	800081a <main+0x12e>
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x198>)
 80007fa:	ed93 7a00 	vldr	s14, [r3]
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <main+0x1a0>)
 8000800:	edd3 7a00 	vldr	s15, [r3]
 8000804:	eeb4 7a67 	vcmp.f32	s14, s15
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	d005      	beq.n	800081a <main+0x12e>
			{
				Trajectory_Generation();	//Get Velocity_Want_RPM
 800080e:	f000 fd2b 	bl	8001268 <Trajectory_Generation>
				Velocity_Control();			//Get PWM_Out
 8000812:	f000 fb53 	bl	8000ebc <Velocity_Control>
				Motor_Drive_PWM();			//Drive
 8000816:	f000 fb0b 	bl	8000e30 <Motor_Drive_PWM>
			}


			if (Trajectory_Flag == 4)		//Reach next station
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <main+0x1a4>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d114      	bne.n	800084c <main+0x160>
			{
				if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 8000822:	4b1c      	ldr	r3, [pc, #112]	; (8000894 <main+0x1a8>)
 8000824:	ed93 7a00 	vldr	s14, [r3]
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <main+0x1a0>)
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000836:	d009      	beq.n	800084c <main+0x160>
				{
					Trajectory_Flag = 0;	//Reset flag
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <main+0x1a4>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
					Distance_Calculated = 0;//Reset distance
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <main+0x19c>)
 8000840:	2200      	movs	r2, #0
 8000842:	801a      	strh	r2, [r3, #0]
					Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 8000844:	4b14      	ldr	r3, [pc, #80]	; (8000898 <main+0x1ac>)
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
				}

			}
			Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <main+0x1a0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a10      	ldr	r2, [pc, #64]	; (8000894 <main+0x1a8>)
 8000852:	6013      	str	r3, [r2, #0]
	  if (micros() - Time_Velocity_Stamp >= 100)
 8000854:	e76b      	b.n	800072e <main+0x42>
 8000856:	bf00      	nop
 8000858:	200001e4 	.word	0x200001e4
 800085c:	2000019c 	.word	0x2000019c
 8000860:	20000154 	.word	0x20000154
 8000864:	200000c0 	.word	0x200000c0
 8000868:	200000d4 	.word	0x200000d4
 800086c:	461c3c00 	.word	0x461c3c00
 8000870:	461c4000 	.word	0x461c4000
 8000874:	200000b8 	.word	0x200000b8
 8000878:	200000f4 	.word	0x200000f4
 800087c:	43b40000 	.word	0x43b40000
 8000880:	20000000 	.word	0x20000000
 8000884:	200000f8 	.word	0x200000f8
 8000888:	200000d2 	.word	0x200000d2
 800088c:	20000014 	.word	0x20000014
 8000890:	20000140 	.word	0x20000140
 8000894:	200000fc 	.word	0x200000fc
 8000898:	20000008 	.word	0x20000008

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0320 	add.w	r3, r7, #32
 80008a6:	2230      	movs	r2, #48	; 0x30
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f003 fc3c 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <SystemClock_Config+0xc8>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	4a26      	ldr	r2, [pc, #152]	; (8000964 <SystemClock_Config+0xc8>)
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6413      	str	r3, [r2, #64]	; 0x40
 80008d0:	4b24      	ldr	r3, [pc, #144]	; (8000964 <SystemClock_Config+0xc8>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <SystemClock_Config+0xcc>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <SystemClock_Config+0xcc>)
 80008e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008ea:	6013      	str	r3, [r2, #0]
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <SystemClock_Config+0xcc>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000900:	2310      	movs	r3, #16
 8000902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000904:	2302      	movs	r3, #2
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	2300      	movs	r3, #0
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800090c:	2308      	movs	r3, #8
 800090e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000910:	2364      	movs	r3, #100	; 0x64
 8000912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000914:	2302      	movs	r3, #2
 8000916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000918:	2304      	movs	r3, #4
 800091a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	4618      	mov	r0, r3
 8000922:	f001 fc03 	bl	800212c <HAL_RCC_OscConfig>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800092c:	f000 ff0c 	bl	8001748 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000930:	230f      	movs	r3, #15
 8000932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000934:	2302      	movs	r3, #2
 8000936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2103      	movs	r1, #3
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fe65 	bl	800261c <HAL_RCC_ClockConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000958:	f000 fef6 	bl	8001748 <Error_Handler>
  }
}
 800095c:	bf00      	nop
 800095e:	3750      	adds	r7, #80	; 0x50
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2224      	movs	r2, #36	; 0x24
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f003 fbd4 	bl	8004128 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <MX_TIM1_Init+0xa8>)
 800098a:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <MX_TIM1_Init+0xac>)
 800098c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_TIM1_Init+0xa8>)
 8000990:	2200      	movs	r2, #0
 8000992:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <MX_TIM1_Init+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_TIM1_Init+0xa8>)
 800099c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80009a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <MX_TIM1_Init+0xa8>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_TIM1_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <MX_TIM1_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b4:	2303      	movs	r3, #3
 80009b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009bc:	2301      	movs	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009cc:	2301      	movs	r3, #1
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	480d      	ldr	r0, [pc, #52]	; (8000a14 <MX_TIM1_Init+0xa8>)
 80009e0:	f002 fa2e 	bl	8002e40 <HAL_TIM_Encoder_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80009ea:	f000 fead 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_TIM1_Init+0xa8>)
 80009fc:	f003 f8d2 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000a06:	f000 fe9f 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	; 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000019c 	.word	0x2000019c
 8000a18:	40010000 	.word	0x40010000

08000a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	f107 0308 	add.w	r3, r7, #8
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a30:	463b      	mov	r3, r7
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a42:	2263      	movs	r2, #99	; 0x63
 8000a44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a60:	4816      	ldr	r0, [pc, #88]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a62:	f001 ffd7 	bl	8002a14 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a6c:	f000 fe6c 	bl	8001748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480f      	ldr	r0, [pc, #60]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a7e:	f002 fcd9 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a88:	f000 fe5e 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000a9a:	f003 f883 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aa4:	f000 fe50 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <MX_TIM2_Init+0xa0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f06f 0201 	mvn.w	r2, #1
 8000ab0:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200001e4 	.word	0x200001e4

08000ac0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08e      	sub	sp, #56	; 0x38
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 0320 	add.w	r3, r7, #32
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]
 8000aec:	615a      	str	r2, [r3, #20]
 8000aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000af2:	4a2d      	ldr	r2, [pc, #180]	; (8000ba8 <MX_TIM3_Init+0xe8>)
 8000af4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000af6:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b04:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b18:	f001 ff7c 	bl	8002a14 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b22:	f000 fe11 	bl	8001748 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b30:	4619      	mov	r1, r3
 8000b32:	481c      	ldr	r0, [pc, #112]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b34:	f002 fc7e 	bl	8003434 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b3e:	f000 fe03 	bl	8001748 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b44:	f002 f872 	bl	8002c2c <HAL_TIM_PWM_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b4e:	f000 fdfb 	bl	8001748 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4810      	ldr	r0, [pc, #64]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b62:	f003 f81f 	bl	8003ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000b6c:	f000 fdec 	bl	8001748 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b70:	2360      	movs	r3, #96	; 0x60
 8000b72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	220c      	movs	r2, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b88:	f002 fb96 	bl	80032b8 <HAL_TIM_PWM_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000b92:	f000 fdd9 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM3_Init+0xe4>)
 8000b98:	f000 fe88 	bl	80018ac <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3738      	adds	r7, #56	; 0x38
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000154 	.word	0x20000154
 8000ba8:	40000400 	.word	0x40000400

08000bac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART2_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART2_UART_Init+0x4c>)
 8000be4:	f003 f860 	bl	8003ca8 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 fdab 	bl	8001748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000022c 	.word	0x2000022c
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08a      	sub	sp, #40	; 0x28
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	4b50      	ldr	r3, [pc, #320]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a4f      	ldr	r2, [pc, #316]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b4d      	ldr	r3, [pc, #308]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	4a48      	ldr	r2, [pc, #288]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c40:	6313      	str	r3, [r2, #48]	; 0x30
 8000c42:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a41      	ldr	r2, [pc, #260]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a3a      	ldr	r2, [pc, #232]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b38      	ldr	r3, [pc, #224]	; (8000d5c <MX_GPIO_Init+0x15c>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4835      	ldr	r0, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x160>)
 8000c8c:	f001 fa10 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c96:	4833      	ldr	r0, [pc, #204]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000c98:	f001 fa0a 	bl	80020b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <MX_GPIO_Init+0x168>)
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482e      	ldr	r0, [pc, #184]	; (8000d6c <MX_GPIO_Init+0x16c>)
 8000cb2:	f001 f879 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000cb6:	2381      	movs	r3, #129	; 0x81
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4828      	ldr	r0, [pc, #160]	; (8000d6c <MX_GPIO_Init+0x16c>)
 8000cca:	f001 f86d 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	481f      	ldr	r0, [pc, #124]	; (8000d60 <MX_GPIO_Init+0x160>)
 8000ce2:	f001 f861 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <MX_GPIO_Init+0x160>)
 8000cfe:	f001 f853 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4812      	ldr	r0, [pc, #72]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000d1c:	f001 f844 	bl	8001da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d26:	2312      	movs	r3, #18
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d32:	2304      	movs	r3, #4
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4809      	ldr	r0, [pc, #36]	; (8000d64 <MX_GPIO_Init+0x164>)
 8000d3e:	f001 f833 	bl	8001da8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2028      	movs	r0, #40	; 0x28
 8000d48:	f000 fff7 	bl	8001d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d4c:	2028      	movs	r0, #40	; 0x28
 8000d4e:	f001 f810 	bl	8001d72 <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020000 	.word	0x40020000
 8000d64:	40020400 	.word	0x40020400
 8000d68:	10210000 	.word	0x10210000
 8000d6c:	40020800 	.word	0x40020800

08000d70 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8000d70:	b5b0      	push	{r4, r5, r7, lr}
 8000d72:	ed2d 8b02 	vpush	{d8}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 8000d7a:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <Encoder_Velocity_Update+0xa8>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d80:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000d82:	f000 fcc7 	bl	8001714 <micros>
 8000d86:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <Encoder_Velocity_Update+0xac>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d94:	1a84      	subs	r4, r0, r2
 8000d96:	eb61 0503 	sbc.w	r5, r1, r3
 8000d9a:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <Encoder_Velocity_Update+0xb0>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <Encoder_Velocity_Update+0xb4>)
 8000daa:	881b      	ldrh	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	4293      	cmp	r3, r2
 8000db2:	db06      	blt.n	8000dc2 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <Encoder_Velocity_Update+0xb8>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00b      	b.n	8000dda <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	4a17      	ldr	r2, [pc, #92]	; (8000e24 <Encoder_Velocity_Update+0xb4>)
 8000dc8:	8812      	ldrh	r2, [r2, #0]
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	db05      	blt.n	8000dda <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <Encoder_Velocity_Update+0xb8>)
 8000dd0:	881b      	ldrh	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000dda:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <Encoder_Velocity_Update+0xb0>)
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000de0:	490e      	ldr	r1, [pc, #56]	; (8000e1c <Encoder_Velocity_Update+0xac>)
 8000de2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000de6:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4a0f      	ldr	r2, [pc, #60]	; (8000e2c <Encoder_Velocity_Update+0xbc>)
 8000dee:	fb02 f303 	mul.w	r3, r2, r3
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000dfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dfe:	f7ff fab3 	bl	8000368 <__aeabi_ul2f>
 8000e02:	ee07 0a10 	vmov	s14, r0
 8000e06:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8000e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	ecbd 8b02 	vpop	{d8}
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	2000019c 	.word	0x2000019c
 8000e1c:	20000148 	.word	0x20000148
 8000e20:	20000150 	.word	0x20000150
 8000e24:	20000002 	.word	0x20000002
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	000f4240 	.word	0x000f4240

08000e30 <Motor_Drive_PWM>:

#define PWM_CHANNEL TIM_CHANNEL_4			//Set channel for PWM
#define GPIO_PIN_DIRECTION GPIO_PIN_10		//Set pin for direction
void Motor_Drive_PWM()	//Motor drive
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	if (PWM_Out > 10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	dd04      	ble.n	8000e4c <Motor_Drive_PWM+0x1c>
	{
		PWM_Out = 10000;		//Run with Velocity_Max_RPM
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e44:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e48:	801a      	strh	r2, [r3, #0]
 8000e4a:	e009      	b.n	8000e60 <Motor_Drive_PWM+0x30>
	}
	else if (PWM_Out < -10000)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e52:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <Motor_Drive_PWM+0x80>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	da03      	bge.n	8000e60 <Motor_Drive_PWM+0x30>
	{
		PWM_Out = -10000;		//Run with Velocity_Max_RPM
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e5a:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8000e5e:	801a      	strh	r2, [r3, #0]
	}

	if (PWM_Out < 0)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da0d      	bge.n	8000e86 <Motor_Drive_PWM+0x56>
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, -PWM_Out);
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	425a      	negs	r2, r3
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <Motor_Drive_PWM+0x84>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <Motor_Drive_PWM+0x88>)
 8000e80:	f001 f916 	bl	80020b0 <HAL_GPIO_WritePin>
	else if (PWM_Out >= 0)
	{
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
	}
}
 8000e84:	e010      	b.n	8000ea8 <Motor_Drive_PWM+0x78>
	else if (PWM_Out >= 0)
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0b      	blt.n	8000ea8 <Motor_Drive_PWM+0x78>
		__HAL_TIM_SET_COMPARE(&htim3, PWM_CHANNEL, PWM_Out);
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <Motor_Drive_PWM+0x7c>)
 8000e92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <Motor_Drive_PWM+0x84>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_DIRECTION, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <Motor_Drive_PWM+0x88>)
 8000ea4:	f001 f904 	bl	80020b0 <HAL_GPIO_WritePin>
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000f0 	.word	0x200000f0
 8000eb0:	ffffd8f0 	.word	0xffffd8f0
 8000eb4:	20000154 	.word	0x20000154
 8000eb8:	40020400 	.word	0x40020400

08000ebc <Velocity_Control>:
void Velocity_Control()  //Velocity Control PID
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

	Velocity_Now_RPM = (Velocity_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Encoder (Encoder's velocity at the moment) to RPM
 8000ec0:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <Velocity_Control+0x10c>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000fcc <Velocity_Control+0x110>
 8000eca:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000ece:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <Velocity_Control+0x114>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <Velocity_Control+0x118>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <Velocity_Control+0x11c>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <Velocity_Control+0x120>)
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef8:	dd04      	ble.n	8000f04 <Velocity_Control+0x48>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000efa:	4b38      	ldr	r3, [pc, #224]	; (8000fdc <Velocity_Control+0x120>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <Velocity_Control+0x11c>)
 8000f00:	6013      	str	r3, [r2, #0]
 8000f02:	e014      	b.n	8000f2e <Velocity_Control+0x72>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f04:	4b35      	ldr	r3, [pc, #212]	; (8000fdc <Velocity_Control+0x120>)
 8000f06:	edd3 7a00 	vldr	s15, [r3]
 8000f0a:	eeb1 7a67 	vneg.f32	s14, s15
 8000f0e:	4b32      	ldr	r3, [pc, #200]	; (8000fd8 <Velocity_Control+0x11c>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1c:	dd07      	ble.n	8000f2e <Velocity_Control+0x72>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	; (8000fdc <Velocity_Control+0x120>)
 8000f20:	edd3 7a00 	vldr	s15, [r3]
 8000f24:	eef1 7a67 	vneg.f32	s15, s15
 8000f28:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <Velocity_Control+0x11c>)
 8000f2a:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <Velocity_Control+0x11c>)
 8000f30:	ed93 7a00 	vldr	s14, [r3]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <Velocity_Control+0x118>)
 8000f36:	edd3 7a00 	vldr	s15, [r3]
 8000f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <Velocity_Control+0x124>)
 8000f40:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <Velocity_Control+0x128>)
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	4b25      	ldr	r3, [pc, #148]	; (8000fe0 <Velocity_Control+0x124>)
 8000f4c:	edd3 7a00 	vldr	s15, [r3]
 8000f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <Velocity_Control+0x128>)
 8000f56:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <Velocity_Control+0x124>)
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <Velocity_Control+0x12c>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <Velocity_Control+0x130>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <Velocity_Control+0x124>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <Velocity_Control+0x12c>)
 8000f76:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <Velocity_Control+0x134>)
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <Velocity_Control+0x124>)
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <Velocity_Control+0x138>)
 8000f8a:	edd3 6a00 	vldr	s13, [r3]
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <Velocity_Control+0x128>)
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f9c:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <Velocity_Control+0x13c>)
 8000f9e:	edd3 6a00 	vldr	s13, [r3]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <Velocity_Control+0x130>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb4:	ee17 3a90 	vmov	r3, s15
 8000fb8:	b21a      	sxth	r2, r3
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <Velocity_Control+0x140>)
 8000fbc:	801a      	strh	r2, [r3, #0]

}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	200000d4 	.word	0x200000d4
 8000fcc:	42700000 	.word	0x42700000
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	200000d8 	.word	0x200000d8
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000018 	.word	0x20000018
 8000fe0:	200000e0 	.word	0x200000e0
 8000fe4:	200000e4 	.word	0x200000e4
 8000fe8:	200000ec 	.word	0x200000ec
 8000fec:	200000e8 	.word	0x200000e8
 8000ff0:	2000000c 	.word	0x2000000c
 8000ff4:	20000010 	.word	0x20000010
 8000ff8:	200000dc 	.word	0x200000dc
 8000ffc:	200000f0 	.word	0x200000f0

08001000 <Distance_Calculation>:
void Distance_Calculation()	//Calculate that distance is short or long
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 8001004:	4b81      	ldr	r3, [pc, #516]	; (800120c <Distance_Calculation+0x20c>)
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <Distance_Calculation+0x210>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	4b7f      	ldr	r3, [pc, #508]	; (8001214 <Distance_Calculation+0x214>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 800101a:	4b7e      	ldr	r3, [pc, #504]	; (8001214 <Distance_Calculation+0x214>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d509      	bpl.n	800103e <Distance_Calculation+0x3e>
	{
		Distance_Degree_Set += 360;
 800102a:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <Distance_Calculation+0x214>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001218 <Distance_Calculation+0x218>
 8001034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001038:	4b76      	ldr	r3, [pc, #472]	; (8001214 <Distance_Calculation+0x214>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 800103e:	4b75      	ldr	r3, [pc, #468]	; (8001214 <Distance_Calculation+0x214>)
 8001040:	ed93 7a00 	vldr	s14, [r3]
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <Distance_Calculation+0x21c>)
 8001046:	edd3 7a00 	vldr	s15, [r3]
 800104a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104e:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001220 <Distance_Calculation+0x220>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	4b73      	ldr	r3, [pc, #460]	; (8001224 <Distance_Calculation+0x224>)
 8001058:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 800105c:	4b72      	ldr	r3, [pc, #456]	; (8001228 <Distance_Calculation+0x228>)
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001066:	4b6d      	ldr	r3, [pc, #436]	; (800121c <Distance_Calculation+0x21c>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001070:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800122c <Distance_Calculation+0x22c>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	4b6d      	ldr	r3, [pc, #436]	; (8001230 <Distance_Calculation+0x230>)
 800107a:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800107e:	4b6c      	ldr	r3, [pc, #432]	; (8001230 <Distance_Calculation+0x230>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001088:	4b6a      	ldr	r3, [pc, #424]	; (8001234 <Distance_Calculation+0x234>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 800108e:	4b69      	ldr	r3, [pc, #420]	; (8001234 <Distance_Calculation+0x234>)
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001238 <Distance_Calculation+0x238>
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	4b67      	ldr	r3, [pc, #412]	; (800123c <Distance_Calculation+0x23c>)
 800109e:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 80010a2:	4b63      	ldr	r3, [pc, #396]	; (8001230 <Distance_Calculation+0x230>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	f003 f842 	bl	8004138 <powf>
 80010b4:	eef0 7a40 	vmov.f32	s15, s0
 80010b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010bc:	4b60      	ldr	r3, [pc, #384]	; (8001240 <Distance_Calculation+0x240>)
 80010be:	edc3 7a00 	vstr	s15, [r3]


	Position_Start = htim1.Instance->CNT;							   //Set starting point
 80010c2:	4b60      	ldr	r3, [pc, #384]	; (8001244 <Distance_Calculation+0x244>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	4b5d      	ldr	r3, [pc, #372]	; (8001248 <Distance_Calculation+0x248>)
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 80010d6:	4b5a      	ldr	r3, [pc, #360]	; (8001240 <Distance_Calculation+0x240>)
 80010d8:	edd3 7a00 	vldr	s15, [r3]
 80010dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <Distance_Calculation+0x224>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	d52c      	bpl.n	800114a <Distance_Calculation+0x14a>
	{
		Distance_Length = LONG;
 80010f0:	4b56      	ldr	r3, [pc, #344]	; (800124c <Distance_Calculation+0x24c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	801a      	strh	r2, [r3, #0]
		Distance_Center = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <Distance_Calculation+0x224>)
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	4b50      	ldr	r3, [pc, #320]	; (8001240 <Distance_Calculation+0x240>)
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	4b51      	ldr	r3, [pc, #324]	; (8001250 <Distance_Calculation+0x250>)
 800110c:	edc3 7a00 	vstr	s15, [r3]

		Time_All = (2*Time_Blend) + (Distance_Center/Velocity_Max_Rad);//Time use to reach next station
 8001110:	4b48      	ldr	r3, [pc, #288]	; (8001234 <Distance_Calculation+0x234>)
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800111a:	4b4d      	ldr	r3, [pc, #308]	; (8001250 <Distance_Calculation+0x250>)
 800111c:	ed93 6a00 	vldr	s12, [r3]
 8001120:	4b43      	ldr	r3, [pc, #268]	; (8001230 <Distance_Calculation+0x230>)
 8001122:	edd3 6a00 	vldr	s13, [r3]
 8001126:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800112a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112e:	4b49      	ldr	r3, [pc, #292]	; (8001254 <Distance_Calculation+0x254>)
 8001130:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 8001134:	4b47      	ldr	r3, [pc, #284]	; (8001254 <Distance_Calculation+0x254>)
 8001136:	edd3 7a00 	vldr	s15, [r3]
 800113a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001238 <Distance_Calculation+0x238>
 800113e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <Distance_Calculation+0x258>)
 8001144:	edc3 7a00 	vstr	s15, [r3]
 8001148:	e05a      	b.n	8001200 <Distance_Calculation+0x200>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <Distance_Calculation+0x240>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <Distance_Calculation+0x224>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	db4d      	blt.n	8001200 <Distance_Calculation+0x200>
	{
		Distance_Length = SHORT;
 8001164:	4b39      	ldr	r3, [pc, #228]	; (800124c <Distance_Calculation+0x24c>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <Distance_Calculation+0x224>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	f003 f876 	bl	8004268 <sqrtf>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <Distance_Calculation+0x234>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 8001186:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <Distance_Calculation+0x234>)
 8001188:	edd3 7a00 	vldr	s15, [r3]
 800118c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001238 <Distance_Calculation+0x238>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <Distance_Calculation+0x23c>)
 8001196:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <Distance_Calculation+0x234>)
 800119c:	edd3 7a00 	vldr	s15, [r3]
 80011a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <Distance_Calculation+0x254>)
 80011a6:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <Distance_Calculation+0x254>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001238 <Distance_Calculation+0x238>
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	4b27      	ldr	r3, [pc, #156]	; (8001258 <Distance_Calculation+0x258>)
 80011ba:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <Distance_Calculation+0x224>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011cc:	eeb0 0a47 	vmov.f32	s0, s14
 80011d0:	f003 f84a 	bl	8004268 <sqrtf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	4b20      	ldr	r3, [pc, #128]	; (800125c <Distance_Calculation+0x25c>)
 80011da:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Distance_Calculation+0x25c>)
 80011e0:	edd3 7a00 	vldr	s15, [r3]
 80011e4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800122c <Distance_Calculation+0x22c>
 80011e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <Distance_Calculation+0x21c>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fa:	4b19      	ldr	r3, [pc, #100]	; (8001260 <Distance_Calculation+0x260>)
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <Distance_Calculation+0x264>)
 8001202:	2201      	movs	r2, #1
 8001204:	801a      	strh	r2, [r3, #0]
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000014 	.word	0x20000014
 8001210:	200000f8 	.word	0x200000f8
 8001214:	2000010c 	.word	0x2000010c
 8001218:	43b40000 	.word	0x43b40000
 800121c:	20000004 	.word	0x20000004
 8001220:	43340000 	.word	0x43340000
 8001224:	20000110 	.word	0x20000110
 8001228:	20000018 	.word	0x20000018
 800122c:	42700000 	.word	0x42700000
 8001230:	20000100 	.word	0x20000100
 8001234:	20000124 	.word	0x20000124
 8001238:	49742400 	.word	0x49742400
 800123c:	20000138 	.word	0x20000138
 8001240:	20000114 	.word	0x20000114
 8001244:	2000019c 	.word	0x2000019c
 8001248:	2000011c 	.word	0x2000011c
 800124c:	200000d0 	.word	0x200000d0
 8001250:	20000118 	.word	0x20000118
 8001254:	20000128 	.word	0x20000128
 8001258:	2000013c 	.word	0x2000013c
 800125c:	20000108 	.word	0x20000108
 8001260:	20000104 	.word	0x20000104
 8001264:	200000d2 	.word	0x200000d2

08001268 <Trajectory_Generation>:

	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}
void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	ed2d 8b02 	vpush	{d8}
 8001270:	b094      	sub	sp, #80	; 0x50
 8001272:	af00      	add	r7, sp, #0

	Position_Encoder = htim1.Instance->CNT;
 8001274:	4bbf      	ldr	r3, [pc, #764]	; (8001574 <Trajectory_Generation+0x30c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001282:	4bbd      	ldr	r3, [pc, #756]	; (8001578 <Trajectory_Generation+0x310>)
 8001284:	edc3 7a00 	vstr	s15, [r3]
	Position_Rad  = (Position_Encoder*2*pi)/Encoder_Resolution;  //radian
 8001288:	4bbb      	ldr	r3, [pc, #748]	; (8001578 <Trajectory_Generation+0x310>)
 800128a:	edd3 7a00 	vldr	s15, [r3]
 800128e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001292:	4bba      	ldr	r3, [pc, #744]	; (800157c <Trajectory_Generation+0x314>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee67 6a27 	vmul.f32	s13, s14, s15
 800129c:	4bb8      	ldr	r3, [pc, #736]	; (8001580 <Trajectory_Generation+0x318>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ac:	4bb5      	ldr	r3, [pc, #724]	; (8001584 <Trajectory_Generation+0x31c>)
 80012ae:	edc3 7a00 	vstr	s15, [r3]
	if (Trajectory_Flag == 0)
 80012b2:	4bb5      	ldr	r3, [pc, #724]	; (8001588 <Trajectory_Generation+0x320>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10d      	bne.n	80012d6 <Trajectory_Generation+0x6e>
	{
		Time_Start = micros();
 80012ba:	f000 fa2b 	bl	8001714 <micros>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	49b2      	ldr	r1, [pc, #712]	; (800158c <Trajectory_Generation+0x324>)
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Rad;
 80012c8:	4bae      	ldr	r3, [pc, #696]	; (8001584 <Trajectory_Generation+0x31c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4bb0      	ldr	r3, [pc, #704]	; (8001590 <Trajectory_Generation+0x328>)
 80012ce:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 80012d0:	4aad      	ldr	r2, [pc, #692]	; (8001588 <Trajectory_Generation+0x320>)
 80012d2:	2301      	movs	r3, #1
 80012d4:	8013      	strh	r3, [r2, #0]
	}
	Time_Trajectory_Stamp = micros();
 80012d6:	f000 fa1d 	bl	8001714 <micros>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	49ad      	ldr	r1, [pc, #692]	; (8001594 <Trajectory_Generation+0x32c>)
 80012e0:	e9c1 2300 	strd	r2, r3, [r1]

	if (Distance_Length == LONG)
 80012e4:	4bac      	ldr	r3, [pc, #688]	; (8001598 <Trajectory_Generation+0x330>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	f040 8105 	bne.w	80014f8 <Trajectory_Generation+0x290>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 80012ee:	4ba9      	ldr	r3, [pc, #676]	; (8001594 <Trajectory_Generation+0x32c>)
 80012f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012f4:	4ba5      	ldr	r3, [pc, #660]	; (800158c <Trajectory_Generation+0x324>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	1a84      	subs	r4, r0, r2
 80012fc:	64bc      	str	r4, [r7, #72]	; 0x48
 80012fe:	eb61 0303 	sbc.w	r3, r1, r3
 8001302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001304:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001308:	f7ff f82e 	bl	8000368 <__aeabi_ul2f>
 800130c:	ee07 0a10 	vmov	s14, r0
 8001310:	4ba2      	ldr	r3, [pc, #648]	; (800159c <Trajectory_Generation+0x334>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	d821      	bhi.n	8001364 <Trajectory_Generation+0xfc>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001320:	4b9c      	ldr	r3, [pc, #624]	; (8001594 <Trajectory_Generation+0x32c>)
 8001322:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001326:	4b99      	ldr	r3, [pc, #612]	; (800158c <Trajectory_Generation+0x324>)
 8001328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132c:	1a84      	subs	r4, r0, r2
 800132e:	643c      	str	r4, [r7, #64]	; 0x40
 8001330:	eb61 0303 	sbc.w	r3, r1, r3
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
 8001336:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800133a:	f7ff f815 	bl	8000368 <__aeabi_ul2f>
 800133e:	ee06 0a90 	vmov	s13, r0
 8001342:	4b96      	ldr	r3, [pc, #600]	; (800159c <Trajectory_Generation+0x334>)
 8001344:	edd3 7a00 	vldr	s15, [r3]
 8001348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800134c:	4b94      	ldr	r3, [pc, #592]	; (80015a0 <Trajectory_Generation+0x338>)
 800134e:	edd3 7a00 	vldr	s15, [r3]
 8001352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001356:	4b93      	ldr	r3, [pc, #588]	; (80015a4 <Trajectory_Generation+0x33c>)
 8001358:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 800135c:	4b8a      	ldr	r3, [pc, #552]	; (8001588 <Trajectory_Generation+0x320>)
 800135e:	2202      	movs	r2, #2
 8001360:	801a      	strh	r2, [r3, #0]
			Trajectory_Flag = 4;
		}
	}


}
 8001362:	e1a8      	b.n	80016b6 <Trajectory_Generation+0x44e>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Start+Time_Blend_Micro) )
 8001364:	4b8b      	ldr	r3, [pc, #556]	; (8001594 <Trajectory_Generation+0x32c>)
 8001366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136a:	4b88      	ldr	r3, [pc, #544]	; (800158c <Trajectory_Generation+0x324>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	1a84      	subs	r4, r0, r2
 8001372:	63bc      	str	r4, [r7, #56]	; 0x38
 8001374:	eb61 0303 	sbc.w	r3, r1, r3
 8001378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800137a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800137e:	f7fe fff3 	bl	8000368 <__aeabi_ul2f>
 8001382:	ee08 0a10 	vmov	s16, r0
 8001386:	4b81      	ldr	r3, [pc, #516]	; (800158c <Trajectory_Generation+0x324>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7fe ffea 	bl	8000368 <__aeabi_ul2f>
 8001394:	ee07 0a10 	vmov	s14, r0
 8001398:	4b80      	ldr	r3, [pc, #512]	; (800159c <Trajectory_Generation+0x334>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013a2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	dd22      	ble.n	80013f2 <Trajectory_Generation+0x18a>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 80013ac:	4b79      	ldr	r3, [pc, #484]	; (8001594 <Trajectory_Generation+0x32c>)
 80013ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <Trajectory_Generation+0x324>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	1a84      	subs	r4, r0, r2
 80013ba:	633c      	str	r4, [r7, #48]	; 0x30
 80013bc:	eb61 0303 	sbc.w	r3, r1, r3
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
 80013c2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013c6:	f7fe ffcf 	bl	8000368 <__aeabi_ul2f>
 80013ca:	ee06 0a90 	vmov	s13, r0
 80013ce:	4b76      	ldr	r3, [pc, #472]	; (80015a8 <Trajectory_Generation+0x340>)
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	4b71      	ldr	r3, [pc, #452]	; (800159c <Trajectory_Generation+0x334>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	d504      	bpl.n	80013f2 <Trajectory_Generation+0x18a>
			Velocity_Want_RPM = Velocity_Max_RPM;
 80013e8:	4b6d      	ldr	r3, [pc, #436]	; (80015a0 <Trajectory_Generation+0x338>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a6d      	ldr	r2, [pc, #436]	; (80015a4 <Trajectory_Generation+0x33c>)
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e161      	b.n	80016b6 <Trajectory_Generation+0x44e>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 80013f2:	4b68      	ldr	r3, [pc, #416]	; (8001594 <Trajectory_Generation+0x32c>)
 80013f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <Trajectory_Generation+0x324>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	1a84      	subs	r4, r0, r2
 8001400:	62bc      	str	r4, [r7, #40]	; 0x28
 8001402:	eb61 0303 	sbc.w	r3, r1, r3
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001408:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800140c:	f7fe ffac 	bl	8000368 <__aeabi_ul2f>
 8001410:	ee06 0a90 	vmov	s13, r0
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <Trajectory_Generation+0x340>)
 8001416:	ed93 7a00 	vldr	s14, [r3]
 800141a:	4b60      	ldr	r3, [pc, #384]	; (800159c <Trajectory_Generation+0x334>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001424:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	db42      	blt.n	80014b4 <Trajectory_Generation+0x24c>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro) )
 800142e:	4b59      	ldr	r3, [pc, #356]	; (8001594 <Trajectory_Generation+0x32c>)
 8001430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001434:	4b55      	ldr	r3, [pc, #340]	; (800158c <Trajectory_Generation+0x324>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	1a84      	subs	r4, r0, r2
 800143c:	623c      	str	r4, [r7, #32]
 800143e:	eb61 0303 	sbc.w	r3, r1, r3
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
 8001444:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001448:	f7fe ff8e 	bl	8000368 <__aeabi_ul2f>
 800144c:	ee07 0a10 	vmov	s14, r0
 8001450:	4b55      	ldr	r3, [pc, #340]	; (80015a8 <Trajectory_Generation+0x340>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	d529      	bpl.n	80014b4 <Trajectory_Generation+0x24c>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*(((Time_Trajectory_Stamp-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 8001460:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <Trajectory_Generation+0x338>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb1 8a67 	vneg.f32	s16, s15
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <Trajectory_Generation+0x32c>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	f7fe ff78 	bl	8000368 <__aeabi_ul2f>
 8001478:	ee06 0a90 	vmov	s13, r0
 800147c:	4b4a      	ldr	r3, [pc, #296]	; (80015a8 <Trajectory_Generation+0x340>)
 800147e:	ed93 7a00 	vldr	s14, [r3]
 8001482:	4b46      	ldr	r3, [pc, #280]	; (800159c <Trajectory_Generation+0x334>)
 8001484:	edd3 7a00 	vldr	s15, [r3]
 8001488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <Trajectory_Generation+0x334>)
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800149a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <Trajectory_Generation+0x33c>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <Trajectory_Generation+0x320>)
 80014ae:	2203      	movs	r2, #3
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	e100      	b.n	80016b6 <Trajectory_Generation+0x44e>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <Trajectory_Generation+0x32c>)
 80014b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ba:	4b34      	ldr	r3, [pc, #208]	; (800158c <Trajectory_Generation+0x324>)
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	1a84      	subs	r4, r0, r2
 80014c2:	61bc      	str	r4, [r7, #24]
 80014c4:	eb61 0303 	sbc.w	r3, r1, r3
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014ce:	f7fe ff4b 	bl	8000368 <__aeabi_ul2f>
 80014d2:	ee07 0a10 	vmov	s14, r0
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <Trajectory_Generation+0x340>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	da00      	bge.n	80014e8 <Trajectory_Generation+0x280>
}
 80014e6:	e0e6      	b.n	80016b6 <Trajectory_Generation+0x44e>
			Velocity_Want_RPM = 0;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <Trajectory_Generation+0x33c>)
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <Trajectory_Generation+0x320>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	801a      	strh	r2, [r3, #0]
}
 80014f6:	e0de      	b.n	80016b6 <Trajectory_Generation+0x44e>
	else if (Distance_Length == SHORT)
 80014f8:	4b27      	ldr	r3, [pc, #156]	; (8001598 <Trajectory_Generation+0x330>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f040 80da 	bne.w	80016b6 <Trajectory_Generation+0x44e>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001502:	4b24      	ldr	r3, [pc, #144]	; (8001594 <Trajectory_Generation+0x32c>)
 8001504:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <Trajectory_Generation+0x324>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	1a84      	subs	r4, r0, r2
 8001510:	eb61 0503 	sbc.w	r5, r1, r3
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7fe ff26 	bl	8000368 <__aeabi_ul2f>
 800151c:	ee07 0a10 	vmov	s14, r0
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <Trajectory_Generation+0x334>)
 8001522:	edd3 7a00 	vldr	s15, [r3]
 8001526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152e:	d83f      	bhi.n	80015b0 <Trajectory_Generation+0x348>
			Velocity_Want_RPM = Velocity_Achieve_RPM*(float)((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <Trajectory_Generation+0x32c>)
 8001532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <Trajectory_Generation+0x324>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	1a84      	subs	r4, r0, r2
 800153e:	613c      	str	r4, [r7, #16]
 8001540:	eb61 0303 	sbc.w	r3, r1, r3
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800154a:	f7fe ff0d 	bl	8000368 <__aeabi_ul2f>
 800154e:	ee06 0a90 	vmov	s13, r0
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <Trajectory_Generation+0x334>)
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <Trajectory_Generation+0x344>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <Trajectory_Generation+0x33c>)
 8001568:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <Trajectory_Generation+0x320>)
 800156e:	2202      	movs	r2, #2
 8001570:	801a      	strh	r2, [r3, #0]
}
 8001572:	e0a0      	b.n	80016b6 <Trajectory_Generation+0x44e>
 8001574:	2000019c 	.word	0x2000019c
 8001578:	200000f4 	.word	0x200000f4
 800157c:	20000004 	.word	0x20000004
 8001580:	20000000 	.word	0x20000000
 8001584:	20000120 	.word	0x20000120
 8001588:	20000140 	.word	0x20000140
 800158c:	20000130 	.word	0x20000130
 8001590:	2000011c 	.word	0x2000011c
 8001594:	200000c8 	.word	0x200000c8
 8001598:	200000d0 	.word	0x200000d0
 800159c:	20000138 	.word	0x20000138
 80015a0:	20000018 	.word	0x20000018
 80015a4:	20000008 	.word	0x20000008
 80015a8:	2000013c 	.word	0x2000013c
 80015ac:	20000104 	.word	0x20000104
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 80015b0:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <Trajectory_Generation+0x45c>)
 80015b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015b6:	4b44      	ldr	r3, [pc, #272]	; (80016c8 <Trajectory_Generation+0x460>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	1a84      	subs	r4, r0, r2
 80015be:	60bc      	str	r4, [r7, #8]
 80015c0:	eb61 0303 	sbc.w	r3, r1, r3
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015ca:	f7fe fecd 	bl	8000368 <__aeabi_ul2f>
 80015ce:	ee07 0a10 	vmov	s14, r0
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <Trajectory_Generation+0x464>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e0:	db46      	blt.n	8001670 <Trajectory_Generation+0x408>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <Trajectory_Generation+0x45c>)
 80015e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015e8:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <Trajectory_Generation+0x460>)
 80015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ee:	1a84      	subs	r4, r0, r2
 80015f0:	603c      	str	r4, [r7, #0]
 80015f2:	eb61 0303 	sbc.w	r3, r1, r3
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fc:	f7fe feb4 	bl	8000368 <__aeabi_ul2f>
 8001600:	ee07 0a10 	vmov	s14, r0
 8001604:	4b31      	ldr	r3, [pc, #196]	; (80016cc <Trajectory_Generation+0x464>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800160e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001616:	d52b      	bpl.n	8001670 <Trajectory_Generation+0x408>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*(float)((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <Trajectory_Generation+0x468>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb1 8a67 	vneg.f32	s16, s15
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <Trajectory_Generation+0x45c>)
 8001624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <Trajectory_Generation+0x460>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	ebb0 0a02 	subs.w	sl, r0, r2
 8001632:	eb61 0b03 	sbc.w	fp, r1, r3
 8001636:	4650      	mov	r0, sl
 8001638:	4659      	mov	r1, fp
 800163a:	f7fe fe95 	bl	8000368 <__aeabi_ul2f>
 800163e:	ee07 0a10 	vmov	s14, r0
 8001642:	4b22      	ldr	r3, [pc, #136]	; (80016cc <Trajectory_Generation+0x464>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	ee77 6a67 	vsub.f32	s13, s14, s15
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <Trajectory_Generation+0x464>)
 800164e:	ed93 7a00 	vldr	s14, [r3]
 8001652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800165a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800165e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <Trajectory_Generation+0x46c>)
 8001664:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <Trajectory_Generation+0x470>)
 800166a:	2203      	movs	r2, #3
 800166c:	801a      	strh	r2, [r3, #0]
 800166e:	e022      	b.n	80016b6 <Trajectory_Generation+0x44e>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <Trajectory_Generation+0x45c>)
 8001672:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <Trajectory_Generation+0x460>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	ebb0 0802 	subs.w	r8, r0, r2
 8001680:	eb61 0903 	sbc.w	r9, r1, r3
 8001684:	4640      	mov	r0, r8
 8001686:	4649      	mov	r1, r9
 8001688:	f7fe fe6e 	bl	8000368 <__aeabi_ul2f>
 800168c:	ee07 0a10 	vmov	s14, r0
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <Trajectory_Generation+0x464>)
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	da00      	bge.n	80016a6 <Trajectory_Generation+0x43e>
}
 80016a4:	e007      	b.n	80016b6 <Trajectory_Generation+0x44e>
			Velocity_Want_RPM = 0;
 80016a6:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <Trajectory_Generation+0x46c>)
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <Trajectory_Generation+0x470>)
 80016b0:	2204      	movs	r2, #4
 80016b2:	801a      	strh	r2, [r3, #0]
}
 80016b4:	e7ff      	b.n	80016b6 <Trajectory_Generation+0x44e>
 80016b6:	bf00      	nop
 80016b8:	3750      	adds	r7, #80	; 0x50
 80016ba:	46bd      	mov	sp, r7
 80016bc:	ecbd 8b02 	vpop	{d8}
 80016c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016c4:	200000c8 	.word	0x200000c8
 80016c8:	20000130 	.word	0x20000130
 80016cc:	20000138 	.word	0x20000138
 80016d0:	20000104 	.word	0x20000104
 80016d4:	20000008 	.word	0x20000008
 80016d8:	20000140 	.word	0x20000140

080016dc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016dc:	b4b0      	push	{r4, r5, r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d109      	bne.n	8001700 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f112 34ff 	adds.w	r4, r2, #4294967295
 80016f6:	f143 0500 	adc.w	r5, r3, #0
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80016fc:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bcb0      	pop	{r4, r5, r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200001e4 	.word	0x200001e4
 8001710:	200000b0 	.word	0x200000b0

08001714 <micros>:
uint64_t micros()
{
 8001714:	b4b0      	push	{r4, r5, r7}
 8001716:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <micros+0x2c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	4618      	mov	r0, r3
 8001720:	f04f 0100 	mov.w	r1, #0
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <micros+0x30>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	1884      	adds	r4, r0, r2
 800172c:	eb41 0503 	adc.w	r5, r1, r3
 8001730:	4622      	mov	r2, r4
 8001732:	462b      	mov	r3, r5
}
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bcb0      	pop	{r4, r5, r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200001e4 	.word	0x200001e4
 8001744:	200000b0 	.word	0x200000b0

08001748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001750:	e7fe      	b.n	8001750 <Error_Handler+0x8>
	...

08001754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	4a0f      	ldr	r2, [pc, #60]	; (80017a0 <HAL_MspInit+0x4c>)
 8001764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001768:	6453      	str	r3, [r2, #68]	; 0x44
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <HAL_MspInit+0x4c>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	; 0x40
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001792:	2007      	movs	r0, #7
 8001794:	f000 fac6 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_TIM_Encoder_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_TIM_Encoder_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 80017fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001810:	2301      	movs	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <HAL_TIM_Encoder_MspInit+0x8c>)
 800181c:	f000 fac4 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40010000 	.word	0x40010000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d116      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	201c      	movs	r0, #28
 8001868:	f000 fa67 	bl	8001d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186c:	201c      	movs	r0, #28
 800186e:	f000 fa80 	bl	8001d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001872:	e012      	b.n	800189a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <HAL_TIM_Base_MspInit+0x74>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10d      	bne.n	800189a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_TIM_Base_MspInit+0x70>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40000400 	.word	0x40000400

080018ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_TIM_MspPostInit+0x68>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d11d      	bne.n	800190a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_TIM_MspPostInit+0x6c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <HAL_TIM_MspPostInit+0x6c>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_TIM_MspPostInit+0x6c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018ea:	2302      	movs	r3, #2
 80018ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018fa:	2302      	movs	r3, #2
 80018fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <HAL_TIM_MspPostInit+0x70>)
 8001906:	f000 fa4f 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40000400 	.word	0x40000400
 8001918:	40023800 	.word	0x40023800
 800191c:	40020400 	.word	0x40020400

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08a      	sub	sp, #40	; 0x28
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0x84>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12b      	bne.n	800199a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <HAL_UART_MspInit+0x88>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_UART_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_UART_MspInit+0x8c>)
 8001996:	f000 fa07 	bl	8001da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40004400 	.word	0x40004400
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019fc:	f000 f8a2 	bl	8001b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM2_IRQHandler+0x10>)
 8001a0a:	f001 fb4d 	bl	80030a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200001e4 	.word	0x200001e4

08001a18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a20:	f000 fb60 	bl	80020e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a52:	490e      	ldr	r1, [pc, #56]	; (8001a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a68:	4c0b      	ldr	r4, [pc, #44]	; (8001a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a76:	f7ff ffd7 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f002 fb31 	bl	80040e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a7e:	f7fe fe35 	bl	80006ec <main>
  bx  lr    
 8001a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001a90:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 8001a94:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001a98:	20000274 	.word	0x20000274

08001a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_Init+0x40>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_Init+0x40>)
 8001aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_Init+0x40>)
 8001ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_Init+0x40>)
 8001ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f000 f92b 	bl	8001d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f808 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad4:	f7ff fe3e 	bl	8001754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023c00 	.word	0x40023c00

08001ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aec:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_InitTick+0x54>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x58>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4619      	mov	r1, r3
 8001af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 f943 	bl	8001d8e <HAL_SYSTICK_Config>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00e      	b.n	8001b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	d80a      	bhi.n	8001b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f90b 	bl	8001d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <HAL_InitTick+0x5c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	2000001c 	.word	0x2000001c
 8001b3c:	20000024 	.word	0x20000024
 8001b40:	20000020 	.word	0x20000020

08001b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_IncTick+0x20>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x24>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <HAL_IncTick+0x24>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000024 	.word	0x20000024
 8001b68:	20000270 	.word	0x20000270

08001b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b70:	4b03      	ldr	r3, [pc, #12]	; (8001b80 <HAL_GetTick+0x14>)
 8001b72:	681b      	ldr	r3, [r3, #0]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000270 	.word	0x20000270

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4907      	ldr	r1, [pc, #28]	; (8001c20 <__NVIC_EnableIRQ+0x38>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000e100 	.word	0xe000e100

08001c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	6039      	str	r1, [r7, #0]
 8001c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	db0a      	blt.n	8001c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	490c      	ldr	r1, [pc, #48]	; (8001c70 <__NVIC_SetPriority+0x4c>)
 8001c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c42:	0112      	lsls	r2, r2, #4
 8001c44:	b2d2      	uxtb	r2, r2
 8001c46:	440b      	add	r3, r1
 8001c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c4c:	e00a      	b.n	8001c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4908      	ldr	r1, [pc, #32]	; (8001c74 <__NVIC_SetPriority+0x50>)
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3b04      	subs	r3, #4
 8001c5c:	0112      	lsls	r2, r2, #4
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	440b      	add	r3, r1
 8001c62:	761a      	strb	r2, [r3, #24]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f1c3 0307 	rsb	r3, r3, #7
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	bf28      	it	cs
 8001c96:	2304      	movcs	r3, #4
 8001c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d902      	bls.n	8001ca8 <NVIC_EncodePriority+0x30>
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	e000      	b.n	8001caa <NVIC_EncodePriority+0x32>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cac:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	401a      	ands	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cca:	43d9      	mvns	r1, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	4313      	orrs	r3, r2
         );
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cf0:	d301      	bcc.n	8001cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00f      	b.n	8001d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf6:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <SysTick_Config+0x40>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfe:	210f      	movs	r1, #15
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f7ff ff8e 	bl	8001c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SysTick_Config+0x40>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0e:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <SysTick_Config+0x40>)
 8001d10:	2207      	movs	r2, #7
 8001d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	e000e010 	.word	0xe000e010

08001d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff29 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
 8001d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d4c:	f7ff ff3e 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	6978      	ldr	r0, [r7, #20]
 8001d58:	f7ff ff8e 	bl	8001c78 <NVIC_EncodePriority>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff5d 	bl	8001c24 <__NVIC_SetPriority>
}
 8001d6a:	bf00      	nop
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff31 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ffa2 	bl	8001ce0 <SysTick_Config>
 8001d9c:	4603      	mov	r3, r0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	; 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	e159      	b.n	8002078 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f040 8148 	bne.w	8002072 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d005      	beq.n	8001dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d130      	bne.n	8001e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	2203      	movs	r2, #3
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e30:	2201      	movs	r2, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	091b      	lsrs	r3, r3, #4
 8001e46:	f003 0201 	and.w	r2, r3, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d017      	beq.n	8001e98 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2203      	movs	r2, #3
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d123      	bne.n	8001eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	220f      	movs	r2, #15
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0203 	and.w	r2, r3, #3
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 80a2 	beq.w	8002072 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a56      	ldr	r2, [pc, #344]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b54      	ldr	r3, [pc, #336]	; (8002090 <HAL_GPIO_Init+0x2e8>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4a:	4a52      	ldr	r2, [pc, #328]	; (8002094 <HAL_GPIO_Init+0x2ec>)
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	3302      	adds	r3, #2
 8001f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	220f      	movs	r2, #15
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43db      	mvns	r3, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a49      	ldr	r2, [pc, #292]	; (8002098 <HAL_GPIO_Init+0x2f0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d019      	beq.n	8001faa <HAL_GPIO_Init+0x202>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <HAL_GPIO_Init+0x2f4>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <HAL_GPIO_Init+0x1fe>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a47      	ldr	r2, [pc, #284]	; (80020a0 <HAL_GPIO_Init+0x2f8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <HAL_GPIO_Init+0x1fa>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <HAL_GPIO_Init+0x2fc>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x1f6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a45      	ldr	r2, [pc, #276]	; (80020a8 <HAL_GPIO_Init+0x300>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_GPIO_Init+0x1f2>
 8001f96:	2304      	movs	r3, #4
 8001f98:	e008      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	e006      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e004      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e002      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <HAL_GPIO_Init+0x204>
 8001faa:	2300      	movs	r3, #0
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	f002 0203 	and.w	r2, r2, #3
 8001fb2:	0092      	lsls	r2, r2, #2
 8001fb4:	4093      	lsls	r3, r2
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fbc:	4935      	ldr	r1, [pc, #212]	; (8002094 <HAL_GPIO_Init+0x2ec>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fca:	4b38      	ldr	r3, [pc, #224]	; (80020ac <HAL_GPIO_Init+0x304>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fee:	4a2f      	ldr	r2, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x304>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <HAL_GPIO_Init+0x304>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002018:	4a24      	ldr	r2, [pc, #144]	; (80020ac <HAL_GPIO_Init+0x304>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800201e:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_GPIO_Init+0x304>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	43db      	mvns	r3, r3
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	4013      	ands	r3, r2
 800202c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002042:	4a1a      	ldr	r2, [pc, #104]	; (80020ac <HAL_GPIO_Init+0x304>)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_GPIO_Init+0x304>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800206c:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <HAL_GPIO_Init+0x304>)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3301      	adds	r3, #1
 8002076:	61fb      	str	r3, [r7, #28]
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	f67f aea2 	bls.w	8001dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3724      	adds	r7, #36	; 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	40013800 	.word	0x40013800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40013c00 	.word	0x40013c00

080020b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	807b      	strh	r3, [r7, #2]
 80020bc:	4613      	mov	r3, r2
 80020be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020cc:	e003      	b.n	80020d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ce:	887b      	ldrh	r3, [r7, #2]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	619a      	str	r2, [r3, #24]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fa:	4a05      	ldr	r2, [pc, #20]	; (8002110 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f806 	bl	8002114 <HAL_GPIO_EXTI_Callback>
  }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e264      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d075      	beq.n	8002236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4ba0      	ldr	r3, [pc, #640]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b9d      	ldr	r3, [pc, #628]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b99      	ldr	r3, [pc, #612]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e23f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x74>
 8002192:	4b91      	ldr	r3, [pc, #580]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b88      	ldr	r3, [pc, #544]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a87      	ldr	r2, [pc, #540]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021c4:	4b84      	ldr	r3, [pc, #528]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a83      	ldr	r2, [pc, #524]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b81      	ldr	r3, [pc, #516]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a80      	ldr	r2, [pc, #512]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fcc2 	bl	8001b6c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fcbe 	bl	8001b6c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e204      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b76      	ldr	r3, [pc, #472]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xc0>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220c:	f7ff fcae 	bl	8001b6c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fcaa 	bl	8001b6c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1f0      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b6c      	ldr	r3, [pc, #432]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xe8>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002242:	4b65      	ldr	r3, [pc, #404]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b62      	ldr	r3, [pc, #392]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b5f      	ldr	r3, [pc, #380]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b5c      	ldr	r3, [pc, #368]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1c4      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b56      	ldr	r3, [pc, #344]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4952      	ldr	r1, [pc, #328]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b4f      	ldr	r3, [pc, #316]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff fc63 	bl	8001b6c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff fc5f 	bl	8001b6c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1a5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b43      	ldr	r3, [pc, #268]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4940      	ldr	r1, [pc, #256]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b3f      	ldr	r3, [pc, #252]	; (80023dc <HAL_RCC_OscConfig+0x2b0>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fc42 	bl	8001b6c <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7ff fc3e 	bl	8001b6c <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e184      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d030      	beq.n	8002378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7ff fc22 	bl	8001b6c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7ff fc1e 	bl	8001b6c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e164      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x200>
 800234a:	e015      	b.n	8002378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCC_OscConfig+0x2b4>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7ff fc0b 	bl	8001b6c <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff fc07 	bl	8001b6c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e14d      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a0 	beq.w	80024c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b08      	ldr	r3, [pc, #32]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_RCC_OscConfig+0x2b8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7ff fbcd 	bl	8001b6c <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e011      	b.n	80023fa <HAL_RCC_OscConfig+0x2ce>
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	42470000 	.word	0x42470000
 80023e0:	42470e80 	.word	0x42470e80
 80023e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7ff fbc0 	bl	8001b6c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e106      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x4e4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x2f0>
 800240e:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
 800241a:	e01c      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b05      	cmp	r3, #5
 8002422:	d10c      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002424:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002428:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800242a:	f043 0304 	orr.w	r3, r3, #4
 800242e:	6713      	str	r3, [r2, #112]	; 0x70
 8002430:	4b78      	ldr	r3, [pc, #480]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002434:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6713      	str	r3, [r2, #112]	; 0x70
 800243c:	e00b      	b.n	8002456 <HAL_RCC_OscConfig+0x32a>
 800243e:	4b75      	ldr	r3, [pc, #468]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002442:	4a74      	ldr	r2, [pc, #464]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	6713      	str	r3, [r2, #112]	; 0x70
 800244a:	4b72      	ldr	r3, [pc, #456]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244e:	4a71      	ldr	r2, [pc, #452]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002450:	f023 0304 	bic.w	r3, r3, #4
 8002454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d015      	beq.n	800248a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800245e:	f7ff fb85 	bl	8001b6c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7ff fb81 	bl	8001b6c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0c5      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800247c:	4b65      	ldr	r3, [pc, #404]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0ee      	beq.n	8002466 <HAL_RCC_OscConfig+0x33a>
 8002488:	e014      	b.n	80024b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248a:	f7ff fb6f 	bl	8001b6c <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002492:	f7ff fb6b 	bl	8001b6c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e0af      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a8:	4b5a      	ldr	r3, [pc, #360]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1ee      	bne.n	8002492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ba:	4b56      	ldr	r3, [pc, #344]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	4a55      	ldr	r2, [pc, #340]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 809b 	beq.w	8002606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d05c      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d141      	bne.n	8002568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7ff fb3f 	bl	8001b6c <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f2:	f7ff fb3b 	bl	8001b6c <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e081      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002504:	4b43      	ldr	r3, [pc, #268]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f0      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	019b      	lsls	r3, r3, #6
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	3b01      	subs	r3, #1
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800253c:	2201      	movs	r2, #1
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff fb14 	bl	8001b6c <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff fb10 	bl	8001b6c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e056      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255a:	4b2e      	ldr	r3, [pc, #184]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0x41c>
 8002566:	e04e      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x4ec>)
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256e:	f7ff fafd 	bl	8001b6c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002576:	f7ff faf9 	bl	8001b6c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e03f      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002588:	4b22      	ldr	r3, [pc, #136]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f0      	bne.n	8002576 <HAL_RCC_OscConfig+0x44a>
 8002594:	e037      	b.n	8002606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e032      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x4e8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d028      	beq.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d121      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d11a      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025da:	4293      	cmp	r3, r2
 80025dc:	d111      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40007000 	.word	0x40007000
 8002614:	40023800 	.word	0x40023800
 8002618:	42470060 	.word	0x42470060

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0cc      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d90c      	bls.n	8002658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b65      	ldr	r3, [pc, #404]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	429a      	cmp	r2, r3
 8002652:	d001      	beq.n	8002658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e0b8      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d020      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800267a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002688:	4b53      	ldr	r3, [pc, #332]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4a52      	ldr	r2, [pc, #328]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	494d      	ldr	r1, [pc, #308]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d044      	beq.n	800273c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d107      	bne.n	80026ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d119      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d003      	beq.n	80026da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d107      	bne.n	80026ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e06f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e067      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b37      	ldr	r3, [pc, #220]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4934      	ldr	r1, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800270c:	f7ff fa2e 	bl	8001b6c <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff fa2a 	bl	8001b6c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e04f      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20c      	bcs.n	8002764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e032      	b.n	80027ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002770:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4916      	ldr	r1, [pc, #88]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	4313      	orrs	r3, r2
 8002780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d009      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	490e      	ldr	r1, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027a2:	f000 f821 	bl	80027e8 <HAL_RCC_GetSysClockFreq>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	490a      	ldr	r1, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	5ccb      	ldrb	r3, [r1, r3]
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f98e 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00
 80027d8:	40023800 	.word	0x40023800
 80027dc:	08004a24 	.word	0x08004a24
 80027e0:	2000001c 	.word	0x2000001c
 80027e4:	20000020 	.word	0x20000020

080027e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
 80027f8:	2300      	movs	r3, #0
 80027fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002800:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 030c 	and.w	r3, r3, #12
 8002808:	2b08      	cmp	r3, #8
 800280a:	d00d      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x40>
 800280c:	2b08      	cmp	r3, #8
 800280e:	f200 80bd 	bhi.w	800298c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002812:	2b00      	cmp	r3, #0
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x34>
 8002816:	2b04      	cmp	r3, #4
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x3a>
 800281a:	e0b7      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800281e:	60bb      	str	r3, [r7, #8]
       break;
 8002820:	e0b7      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002822:	4b61      	ldr	r3, [pc, #388]	; (80029a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002824:	60bb      	str	r3, [r7, #8]
      break;
 8002826:	e0b4      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002828:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002832:	4b5b      	ldr	r3, [pc, #364]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d04d      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800283e:	4b58      	ldr	r3, [pc, #352]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	099b      	lsrs	r3, r3, #6
 8002844:	461a      	mov	r2, r3
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800284e:	f04f 0100 	mov.w	r1, #0
 8002852:	ea02 0800 	and.w	r8, r2, r0
 8002856:	ea03 0901 	and.w	r9, r3, r1
 800285a:	4640      	mov	r0, r8
 800285c:	4649      	mov	r1, r9
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	014b      	lsls	r3, r1, #5
 8002868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800286c:	0142      	lsls	r2, r0, #5
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	ebb0 0008 	subs.w	r0, r0, r8
 8002876:	eb61 0109 	sbc.w	r1, r1, r9
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002888:	0182      	lsls	r2, r0, #6
 800288a:	1a12      	subs	r2, r2, r0
 800288c:	eb63 0301 	sbc.w	r3, r3, r1
 8002890:	f04f 0000 	mov.w	r0, #0
 8002894:	f04f 0100 	mov.w	r1, #0
 8002898:	00d9      	lsls	r1, r3, #3
 800289a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800289e:	00d0      	lsls	r0, r2, #3
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	eb12 0208 	adds.w	r2, r2, r8
 80028a8:	eb43 0309 	adc.w	r3, r3, r9
 80028ac:	f04f 0000 	mov.w	r0, #0
 80028b0:	f04f 0100 	mov.w	r1, #0
 80028b4:	0259      	lsls	r1, r3, #9
 80028b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80028ba:	0250      	lsls	r0, r2, #9
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4610      	mov	r0, r2
 80028c2:	4619      	mov	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	f7fd fd92 	bl	80003f4 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	e04a      	b.n	8002970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	461a      	mov	r2, r3
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	ea02 0400 	and.w	r4, r2, r0
 80028f2:	ea03 0501 	and.w	r5, r3, r1
 80028f6:	4620      	mov	r0, r4
 80028f8:	4629      	mov	r1, r5
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	014b      	lsls	r3, r1, #5
 8002904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002908:	0142      	lsls	r2, r0, #5
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	1b00      	subs	r0, r0, r4
 8002910:	eb61 0105 	sbc.w	r1, r1, r5
 8002914:	f04f 0200 	mov.w	r2, #0
 8002918:	f04f 0300 	mov.w	r3, #0
 800291c:	018b      	lsls	r3, r1, #6
 800291e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002922:	0182      	lsls	r2, r0, #6
 8002924:	1a12      	subs	r2, r2, r0
 8002926:	eb63 0301 	sbc.w	r3, r3, r1
 800292a:	f04f 0000 	mov.w	r0, #0
 800292e:	f04f 0100 	mov.w	r1, #0
 8002932:	00d9      	lsls	r1, r3, #3
 8002934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002938:	00d0      	lsls	r0, r2, #3
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	1912      	adds	r2, r2, r4
 8002940:	eb45 0303 	adc.w	r3, r5, r3
 8002944:	f04f 0000 	mov.w	r0, #0
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	0299      	lsls	r1, r3, #10
 800294e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002952:	0290      	lsls	r0, r2, #10
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	461a      	mov	r2, r3
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	f7fd fd46 	bl	80003f4 <__aeabi_uldivmod>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4613      	mov	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	0c1b      	lsrs	r3, r3, #16
 8002976:	f003 0303 	and.w	r3, r3, #3
 800297a:	3301      	adds	r3, #1
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	60bb      	str	r3, [r7, #8]
      break;
 800298a:	e002      	b.n	8002992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800298e:	60bb      	str	r3, [r7, #8]
      break;
 8002990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002992:	68bb      	ldr	r3, [r7, #8]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	00f42400 	.word	0x00f42400
 80029a8:	007a1200 	.word	0x007a1200

080029ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b0:	4b03      	ldr	r3, [pc, #12]	; (80029c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	2000001c 	.word	0x2000001c

080029c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029c8:	f7ff fff0 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0a9b      	lsrs	r3, r3, #10
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08004a34 	.word	0x08004a34

080029ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f0:	f7ff ffdc 	bl	80029ac <HAL_RCC_GetHCLKFreq>
 80029f4:	4602      	mov	r2, r0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	0b5b      	lsrs	r3, r3, #13
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	4903      	ldr	r1, [pc, #12]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a02:	5ccb      	ldrb	r3, [r1, r3]
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	08004a34 	.word	0x08004a34

08002a14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e041      	b.n	8002aaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fefa 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f000 fdda 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d001      	beq.n	8002acc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e03c      	b.n	8002b46 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_TIM_Base_Start+0xa0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d018      	beq.n	8002b10 <HAL_TIM_Base_Start+0x5c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d013      	beq.n	8002b10 <HAL_TIM_Base_Start+0x5c>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1a      	ldr	r2, [pc, #104]	; (8002b58 <HAL_TIM_Base_Start+0xa4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <HAL_TIM_Base_Start+0x5c>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a19      	ldr	r2, [pc, #100]	; (8002b5c <HAL_TIM_Base_Start+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d009      	beq.n	8002b10 <HAL_TIM_Base_Start+0x5c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a17      	ldr	r2, [pc, #92]	; (8002b60 <HAL_TIM_Base_Start+0xac>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d004      	beq.n	8002b10 <HAL_TIM_Base_Start+0x5c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	; (8002b64 <HAL_TIM_Base_Start+0xb0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d111      	bne.n	8002b34 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2b06      	cmp	r3, #6
 8002b20:	d010      	beq.n	8002b44 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b32:	e007      	b.n	8002b44 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0201 	orr.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40000400 	.word	0x40000400
 8002b5c:	40000800 	.word	0x40000800
 8002b60:	40000c00 	.word	0x40000c00
 8002b64:	40014000 	.word	0x40014000

08002b68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e044      	b.n	8002c0a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68da      	ldr	r2, [r3, #12]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_TIM_Base_Start_IT+0xb0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d018      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002baa:	d013      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_TIM_Base_Start_IT+0xb4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00e      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a19      	ldr	r2, [pc, #100]	; (8002c20 <HAL_TIM_Base_Start_IT+0xb8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <HAL_TIM_Base_Start_IT+0xbc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIM_Base_Start_IT+0x6c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a16      	ldr	r2, [pc, #88]	; (8002c28 <HAL_TIM_Base_Start_IT+0xc0>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d111      	bne.n	8002bf8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b06      	cmp	r3, #6
 8002be4:	d010      	beq.n	8002c08 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf6:	e007      	b.n	8002c08 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	40010000 	.word	0x40010000
 8002c1c:	40000400 	.word	0x40000400
 8002c20:	40000800 	.word	0x40000800
 8002c24:	40000c00 	.word	0x40000c00
 8002c28:	40014000 	.word	0x40014000

08002c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e041      	b.n	8002cc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f839 	bl	8002cca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f000 fcce 	bl	800360c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_TIM_PWM_Start+0x24>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e022      	b.n	8002d4a <HAL_TIM_PWM_Start+0x6a>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d109      	bne.n	8002d1e <HAL_TIM_PWM_Start+0x3e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	bf14      	ite	ne
 8002d16:	2301      	movne	r3, #1
 8002d18:	2300      	moveq	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e015      	b.n	8002d4a <HAL_TIM_PWM_Start+0x6a>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d109      	bne.n	8002d38 <HAL_TIM_PWM_Start+0x58>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	e008      	b.n	8002d4a <HAL_TIM_PWM_Start+0x6a>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	bf14      	ite	ne
 8002d44:	2301      	movne	r3, #1
 8002d46:	2300      	moveq	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e068      	b.n	8002e24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d104      	bne.n	8002d62 <HAL_TIM_PWM_Start+0x82>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d60:	e013      	b.n	8002d8a <HAL_TIM_PWM_Start+0xaa>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d104      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x92>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d70:	e00b      	b.n	8002d8a <HAL_TIM_PWM_Start+0xaa>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d104      	bne.n	8002d82 <HAL_TIM_PWM_Start+0xa2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d80:	e003      	b.n	8002d8a <HAL_TIM_PWM_Start+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	6839      	ldr	r1, [r7, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fee0 	bl	8003b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_TIM_PWM_Start+0x14c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d107      	bne.n	8002db2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1d      	ldr	r2, [pc, #116]	; (8002e2c <HAL_TIM_PWM_Start+0x14c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <HAL_TIM_PWM_Start+0x10e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc4:	d013      	beq.n	8002dee <HAL_TIM_PWM_Start+0x10e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_TIM_PWM_Start+0x150>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <HAL_TIM_PWM_Start+0x10e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_TIM_PWM_Start+0x154>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_TIM_PWM_Start+0x10e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a16      	ldr	r2, [pc, #88]	; (8002e38 <HAL_TIM_PWM_Start+0x158>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_TIM_PWM_Start+0x10e>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIM_PWM_Start+0x15c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d111      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b06      	cmp	r3, #6
 8002dfe:	d010      	beq.n	8002e22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	e007      	b.n	8002e22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40014000 	.word	0x40014000

08002e40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e097      	b.n	8002f84 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fe fc9b 	bl	80017a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e84:	f023 0307 	bic.w	r3, r3, #7
 8002e88:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f000 fbb9 	bl	800360c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	021b      	lsls	r3, r3, #8
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ee0:	f023 030c 	bic.w	r3, r3, #12
 8002ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	021b      	lsls	r3, r3, #8
 8002efc:	4313      	orrs	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	011a      	lsls	r2, r3, #4
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	031b      	lsls	r3, r3, #12
 8002f10:	4313      	orrs	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f1e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	4313      	orrs	r3, r2
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fa4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d110      	bne.n	8002fde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fc2:	7b7b      	ldrb	r3, [r7, #13]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d001      	beq.n	8002fcc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e069      	b.n	80030a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	e031      	b.n	8003042 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d110      	bne.n	8003006 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fe4:	7bbb      	ldrb	r3, [r7, #14]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fea:	7b3b      	ldrb	r3, [r7, #12]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d001      	beq.n	8002ff4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e055      	b.n	80030a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003004:	e01d      	b.n	8003042 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003006:	7bfb      	ldrb	r3, [r7, #15]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003012:	7b7b      	ldrb	r3, [r7, #13]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003018:	7b3b      	ldrb	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e03e      	b.n	80030a0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_Encoder_Start+0xc4>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b04      	cmp	r3, #4
 800304c:	d008      	beq.n	8003060 <HAL_TIM_Encoder_Start+0xd4>
 800304e:	e00f      	b.n	8003070 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fd7d 	bl	8003b58 <TIM_CCxChannelCmd>
      break;
 800305e:	e016      	b.n	800308e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2201      	movs	r2, #1
 8003066:	2104      	movs	r1, #4
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fd75 	bl	8003b58 <TIM_CCxChannelCmd>
      break;
 800306e:	e00e      	b.n	800308e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fd6d 	bl	8003b58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2201      	movs	r2, #1
 8003084:	2104      	movs	r1, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fd66 	bl	8003b58 <TIM_CCxChannelCmd>
      break;
 800308c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0201 	orr.w	r2, r2, #1
 800309c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d122      	bne.n	8003104 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d11b      	bne.n	8003104 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0202 	mvn.w	r2, #2
 80030d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fa70 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 80030f0:	e005      	b.n	80030fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fa62 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 fa73 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b04      	cmp	r3, #4
 8003110:	d122      	bne.n	8003158 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b04      	cmp	r3, #4
 800311e:	d11b      	bne.n	8003158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0204 	mvn.w	r2, #4
 8003128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2202      	movs	r2, #2
 800312e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa46 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 8003144:	e005      	b.n	8003152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fa38 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 fa49 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b08      	cmp	r3, #8
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0208 	mvn.w	r2, #8
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa1c 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa0e 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa1f 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0310 	and.w	r3, r3, #16
 80031c4:	2b10      	cmp	r3, #16
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0210 	mvn.w	r2, #16
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2208      	movs	r2, #8
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f9f2 	bl	80035d0 <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f9e4 	bl	80035bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f9f5 	bl	80035e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b01      	cmp	r3, #1
 800320c:	d10e      	bne.n	800322c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d107      	bne.n	800322c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0201 	mvn.w	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7fe fa58 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d10e      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003244:	2b80      	cmp	r3, #128	; 0x80
 8003246:	d107      	bne.n	8003258 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fd1e 	bl	8003c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b40      	cmp	r3, #64	; 0x40
 8003264:	d10e      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b40      	cmp	r3, #64	; 0x40
 8003272:	d107      	bne.n	8003284 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800327c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 f9ba 	bl	80035f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b20      	cmp	r3, #32
 8003290:	d10e      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f003 0320 	and.w	r3, r3, #32
 800329c:	2b20      	cmp	r3, #32
 800329e:	d107      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0220 	mvn.w	r2, #32
 80032a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fce8 	bl	8003c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0ac      	b.n	800342c <HAL_TIM_PWM_ConfigChannel+0x174>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0c      	cmp	r3, #12
 80032de:	f200 809f 	bhi.w	8003420 <HAL_TIM_PWM_ConfigChannel+0x168>
 80032e2:	a201      	add	r2, pc, #4	; (adr r2, 80032e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	0800331d 	.word	0x0800331d
 80032ec:	08003421 	.word	0x08003421
 80032f0:	08003421 	.word	0x08003421
 80032f4:	08003421 	.word	0x08003421
 80032f8:	0800335d 	.word	0x0800335d
 80032fc:	08003421 	.word	0x08003421
 8003300:	08003421 	.word	0x08003421
 8003304:	08003421 	.word	0x08003421
 8003308:	0800339f 	.word	0x0800339f
 800330c:	08003421 	.word	0x08003421
 8003310:	08003421 	.word	0x08003421
 8003314:	08003421 	.word	0x08003421
 8003318:	080033df 	.word	0x080033df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68b9      	ldr	r1, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f9f2 	bl	800370c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0208 	orr.w	r2, r2, #8
 8003336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0204 	bic.w	r2, r2, #4
 8003346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6999      	ldr	r1, [r3, #24]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
      break;
 800335a:	e062      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fa38 	bl	80037d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6999      	ldr	r1, [r3, #24]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	021a      	lsls	r2, r3, #8
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	619a      	str	r2, [r3, #24]
      break;
 800339c:	e041      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 fa83 	bl	80038b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0208 	orr.w	r2, r2, #8
 80033b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69da      	ldr	r2, [r3, #28]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0204 	bic.w	r2, r2, #4
 80033c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	69d9      	ldr	r1, [r3, #28]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	61da      	str	r2, [r3, #28]
      break;
 80033dc:	e021      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68b9      	ldr	r1, [r7, #8]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 facd 	bl	8003984 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	69da      	ldr	r2, [r3, #28]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	69d9      	ldr	r1, [r3, #28]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	021a      	lsls	r2, r3, #8
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	61da      	str	r2, [r3, #28]
      break;
 800341e:	e000      	b.n	8003422 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003420:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x18>
 8003448:	2302      	movs	r3, #2
 800344a:	e0b3      	b.n	80035b4 <HAL_TIM_ConfigClockSource+0x180>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d03e      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0xd0>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	f200 8087 	bhi.w	800359c <HAL_TIM_ConfigClockSource+0x168>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	f000 8085 	beq.w	80035a0 <HAL_TIM_ConfigClockSource+0x16c>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d87f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d01a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xa2>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d87b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d050      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x116>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d877      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d03c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xf6>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d873      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d058      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x136>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d86f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d064      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d867      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x168>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d05a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80034d4:	e062      	b.n	800359c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 fb17 	bl	8003b18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	609a      	str	r2, [r3, #8]
      break;
 8003502:	e04e      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f000 fb00 	bl	8003b18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fa74 	bl	8003a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f000 facd 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003548:	e02b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fa93 	bl	8003a82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fabd 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003568:	e01b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 fa54 	bl	8003a24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f000 faad 	bl	8003ae2 <TIM_ITRx_SetConfig>
      break;
 8003588:	e00b      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 faa4 	bl	8003ae2 <TIM_ITRx_SetConfig>
        break;
 800359a:	e002      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800359c:	bf00      	nop
 800359e:	e000      	b.n	80035a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80035a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a34      	ldr	r2, [pc, #208]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00f      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362a:	d00b      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <TIM_Base_SetConfig+0xe8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d007      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a30      	ldr	r2, [pc, #192]	; (80036f8 <TIM_Base_SetConfig+0xec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d003      	beq.n	8003644 <TIM_Base_SetConfig+0x38>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <TIM_Base_SetConfig+0xf0>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d108      	bne.n	8003656 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d01b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003664:	d017      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_Base_SetConfig+0xe8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a21      	ldr	r2, [pc, #132]	; (80036f8 <TIM_Base_SetConfig+0xec>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d00f      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a20      	ldr	r2, [pc, #128]	; (80036fc <TIM_Base_SetConfig+0xf0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00b      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <TIM_Base_SetConfig+0xf4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1e      	ldr	r2, [pc, #120]	; (8003704 <TIM_Base_SetConfig+0xf8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d003      	beq.n	8003696 <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a1d      	ldr	r2, [pc, #116]	; (8003708 <TIM_Base_SetConfig+0xfc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <TIM_Base_SetConfig+0xe4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40010000 	.word	0x40010000
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800
 80036fc:	40000c00 	.word	0x40000c00
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0302 	bic.w	r3, r3, #2
 8003754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <TIM_OC1_SetConfig+0xc8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d10c      	bne.n	8003782 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0308 	bic.w	r3, r3, #8
 800376e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0304 	bic.w	r3, r3, #4
 8003780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <TIM_OC1_SetConfig+0xc8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d111      	bne.n	80037ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	621a      	str	r2, [r3, #32]
}
 80037c8:	bf00      	nop
 80037ca:	371c      	adds	r7, #28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40010000 	.word	0x40010000

080037d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0210 	bic.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4313      	orrs	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <TIM_OC2_SetConfig+0xd4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10d      	bne.n	8003854 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003852:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <TIM_OC2_SetConfig+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d113      	bne.n	8003884 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003862:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800386a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	621a      	str	r2, [r3, #32]
}
 800389e:	bf00      	nop
 80038a0:	371c      	adds	r7, #28
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	40010000 	.word	0x40010000

080038b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	4313      	orrs	r3, r2
 8003904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1d      	ldr	r2, [pc, #116]	; (8003980 <TIM_OC3_SetConfig+0xd0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10d      	bne.n	800392a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <TIM_OC3_SetConfig+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d113      	bne.n	800395a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	621a      	str	r2, [r3, #32]
}
 8003974:	bf00      	nop
 8003976:	371c      	adds	r7, #28
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40010000 	.word	0x40010000

08003984 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	021b      	lsls	r3, r3, #8
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	031b      	lsls	r3, r3, #12
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <TIM_OC4_SetConfig+0x9c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d109      	bne.n	80039f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	019b      	lsls	r3, r3, #6
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	621a      	str	r2, [r3, #32]
}
 8003a12:	bf00      	nop
 8003a14:	371c      	adds	r7, #28
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000

08003a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	f023 0201 	bic.w	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f023 030a 	bic.w	r3, r3, #10
 8003a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	621a      	str	r2, [r3, #32]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b087      	sub	sp, #28
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0210 	bic.w	r2, r3, #16
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	031b      	lsls	r3, r3, #12
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003abe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b085      	sub	sp, #20
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f043 0307 	orr.w	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e050      	b.n	8003c5e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d013      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a15      	ldr	r2, [pc, #84]	; (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10c      	bne.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40014000 	.word	0x40014000

08003c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e03f      	b.n	8003d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fd fe26 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2224      	movs	r2, #36	; 0x24
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f829 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	695a      	ldr	r2, [r3, #20]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d48:	b09f      	sub	sp, #124	; 0x7c
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5a:	68d9      	ldr	r1, [r3, #12]
 8003d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	ea40 0301 	orr.w	r3, r0, r1
 8003d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	689a      	ldr	r2, [r3, #8]
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	431a      	orrs	r2, r3
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d88:	f021 010c 	bic.w	r1, r1, #12
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d92:	430b      	orrs	r3, r1
 8003d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da2:	6999      	ldr	r1, [r3, #24]
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	ea40 0301 	orr.w	r3, r0, r1
 8003dac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4bc5      	ldr	r3, [pc, #788]	; (80040c8 <UART_SetConfig+0x384>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d004      	beq.n	8003dc2 <UART_SetConfig+0x7e>
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4bc3      	ldr	r3, [pc, #780]	; (80040cc <UART_SetConfig+0x388>)
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d103      	bne.n	8003dca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc2:	f7fe fe13 	bl	80029ec <HAL_RCC_GetPCLK2Freq>
 8003dc6:	6778      	str	r0, [r7, #116]	; 0x74
 8003dc8:	e002      	b.n	8003dd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dca:	f7fe fdfb 	bl	80029c4 <HAL_RCC_GetPCLK1Freq>
 8003dce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	f040 80b6 	bne.w	8003f48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dde:	461c      	mov	r4, r3
 8003de0:	f04f 0500 	mov.w	r5, #0
 8003de4:	4622      	mov	r2, r4
 8003de6:	462b      	mov	r3, r5
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	6439      	str	r1, [r7, #64]	; 0x40
 8003dec:	415b      	adcs	r3, r3
 8003dee:	647b      	str	r3, [r7, #68]	; 0x44
 8003df0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003df4:	1912      	adds	r2, r2, r4
 8003df6:	eb45 0303 	adc.w	r3, r5, r3
 8003dfa:	f04f 0000 	mov.w	r0, #0
 8003dfe:	f04f 0100 	mov.w	r1, #0
 8003e02:	00d9      	lsls	r1, r3, #3
 8003e04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e08:	00d0      	lsls	r0, r2, #3
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	1911      	adds	r1, r2, r4
 8003e10:	6639      	str	r1, [r7, #96]	; 0x60
 8003e12:	416b      	adcs	r3, r5
 8003e14:	667b      	str	r3, [r7, #100]	; 0x64
 8003e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	1891      	adds	r1, r2, r2
 8003e22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e24:	415b      	adcs	r3, r3
 8003e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e30:	f7fc fae0 	bl	80003f4 <__aeabi_uldivmod>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4ba5      	ldr	r3, [pc, #660]	; (80040d0 <UART_SetConfig+0x38c>)
 8003e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	011e      	lsls	r6, r3, #4
 8003e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e44:	461c      	mov	r4, r3
 8003e46:	f04f 0500 	mov.w	r5, #0
 8003e4a:	4622      	mov	r2, r4
 8003e4c:	462b      	mov	r3, r5
 8003e4e:	1891      	adds	r1, r2, r2
 8003e50:	6339      	str	r1, [r7, #48]	; 0x30
 8003e52:	415b      	adcs	r3, r3
 8003e54:	637b      	str	r3, [r7, #52]	; 0x34
 8003e56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e5a:	1912      	adds	r2, r2, r4
 8003e5c:	eb45 0303 	adc.w	r3, r5, r3
 8003e60:	f04f 0000 	mov.w	r0, #0
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	00d9      	lsls	r1, r3, #3
 8003e6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e6e:	00d0      	lsls	r0, r2, #3
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	1911      	adds	r1, r2, r4
 8003e76:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e78:	416b      	adcs	r3, r5
 8003e7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	1891      	adds	r1, r2, r2
 8003e88:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e8a:	415b      	adcs	r3, r3
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003e96:	f7fc faad 	bl	80003f4 <__aeabi_uldivmod>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4b8c      	ldr	r3, [pc, #560]	; (80040d0 <UART_SetConfig+0x38c>)
 8003ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	2164      	movs	r1, #100	; 0x64
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	3332      	adds	r3, #50	; 0x32
 8003eb2:	4a87      	ldr	r2, [pc, #540]	; (80040d0 <UART_SetConfig+0x38c>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ec0:	441e      	add	r6, r3
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f04f 0100 	mov.w	r1, #0
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	1894      	adds	r4, r2, r2
 8003ed0:	623c      	str	r4, [r7, #32]
 8003ed2:	415b      	adcs	r3, r3
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003eda:	1812      	adds	r2, r2, r0
 8003edc:	eb41 0303 	adc.w	r3, r1, r3
 8003ee0:	f04f 0400 	mov.w	r4, #0
 8003ee4:	f04f 0500 	mov.w	r5, #0
 8003ee8:	00dd      	lsls	r5, r3, #3
 8003eea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003eee:	00d4      	lsls	r4, r2, #3
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	1814      	adds	r4, r2, r0
 8003ef6:	653c      	str	r4, [r7, #80]	; 0x50
 8003ef8:	414b      	adcs	r3, r1
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	461a      	mov	r2, r3
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	1891      	adds	r1, r2, r2
 8003f08:	61b9      	str	r1, [r7, #24]
 8003f0a:	415b      	adcs	r3, r3
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f16:	f7fc fa6d 	bl	80003f4 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4b6c      	ldr	r3, [pc, #432]	; (80040d0 <UART_SetConfig+0x38c>)
 8003f20:	fba3 1302 	umull	r1, r3, r3, r2
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	2164      	movs	r1, #100	; 0x64
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	3332      	adds	r3, #50	; 0x32
 8003f32:	4a67      	ldr	r2, [pc, #412]	; (80040d0 <UART_SetConfig+0x38c>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	f003 0207 	and.w	r2, r3, #7
 8003f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4432      	add	r2, r6
 8003f44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f46:	e0b9      	b.n	80040bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4a:	461c      	mov	r4, r3
 8003f4c:	f04f 0500 	mov.w	r5, #0
 8003f50:	4622      	mov	r2, r4
 8003f52:	462b      	mov	r3, r5
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	6139      	str	r1, [r7, #16]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f60:	1912      	adds	r2, r2, r4
 8003f62:	eb45 0303 	adc.w	r3, r5, r3
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	00d9      	lsls	r1, r3, #3
 8003f70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f74:	00d0      	lsls	r0, r2, #3
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	eb12 0804 	adds.w	r8, r2, r4
 8003f7e:	eb43 0905 	adc.w	r9, r3, r5
 8003f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f04f 0100 	mov.w	r1, #0
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	008b      	lsls	r3, r1, #2
 8003f96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f9a:	0082      	lsls	r2, r0, #2
 8003f9c:	4640      	mov	r0, r8
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	f7fc fa28 	bl	80003f4 <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <UART_SetConfig+0x38c>)
 8003faa:	fba3 2302 	umull	r2, r3, r3, r2
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	011e      	lsls	r6, r3, #4
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	4602      	mov	r2, r0
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	1894      	adds	r4, r2, r2
 8003fc0:	60bc      	str	r4, [r7, #8]
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fca:	1812      	adds	r2, r2, r0
 8003fcc:	eb41 0303 	adc.w	r3, r1, r3
 8003fd0:	f04f 0400 	mov.w	r4, #0
 8003fd4:	f04f 0500 	mov.w	r5, #0
 8003fd8:	00dd      	lsls	r5, r3, #3
 8003fda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fde:	00d4      	lsls	r4, r2, #3
 8003fe0:	4622      	mov	r2, r4
 8003fe2:	462b      	mov	r3, r5
 8003fe4:	1814      	adds	r4, r2, r0
 8003fe6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003fe8:	414b      	adcs	r3, r1
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f04f 0100 	mov.w	r1, #0
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	f04f 0300 	mov.w	r3, #0
 8003ffe:	008b      	lsls	r3, r1, #2
 8004000:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004004:	0082      	lsls	r2, r0, #2
 8004006:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800400a:	f7fc f9f3 	bl	80003f4 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <UART_SetConfig+0x38c>)
 8004014:	fba3 1302 	umull	r1, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2164      	movs	r1, #100	; 0x64
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	3332      	adds	r3, #50	; 0x32
 8004026:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <UART_SetConfig+0x38c>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004032:	441e      	add	r6, r3
 8004034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004036:	4618      	mov	r0, r3
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	1894      	adds	r4, r2, r2
 8004042:	603c      	str	r4, [r7, #0]
 8004044:	415b      	adcs	r3, r3
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	e9d7 2300 	ldrd	r2, r3, [r7]
 800404c:	1812      	adds	r2, r2, r0
 800404e:	eb41 0303 	adc.w	r3, r1, r3
 8004052:	f04f 0400 	mov.w	r4, #0
 8004056:	f04f 0500 	mov.w	r5, #0
 800405a:	00dd      	lsls	r5, r3, #3
 800405c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004060:	00d4      	lsls	r4, r2, #3
 8004062:	4622      	mov	r2, r4
 8004064:	462b      	mov	r3, r5
 8004066:	eb12 0a00 	adds.w	sl, r2, r0
 800406a:	eb43 0b01 	adc.w	fp, r3, r1
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4618      	mov	r0, r3
 8004074:	f04f 0100 	mov.w	r1, #0
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004086:	0082      	lsls	r2, r0, #2
 8004088:	4650      	mov	r0, sl
 800408a:	4659      	mov	r1, fp
 800408c:	f7fc f9b2 	bl	80003f4 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4b0e      	ldr	r3, [pc, #56]	; (80040d0 <UART_SetConfig+0x38c>)
 8004096:	fba3 1302 	umull	r1, r3, r3, r2
 800409a:	095b      	lsrs	r3, r3, #5
 800409c:	2164      	movs	r1, #100	; 0x64
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	3332      	adds	r3, #50	; 0x32
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <UART_SetConfig+0x38c>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	f003 020f 	and.w	r2, r3, #15
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4432      	add	r2, r6
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	377c      	adds	r7, #124	; 0x7c
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c6:	bf00      	nop
 80040c8:	40011000 	.word	0x40011000
 80040cc:	40011400 	.word	0x40011400
 80040d0:	51eb851f 	.word	0x51eb851f

080040d4 <__errno>:
 80040d4:	4b01      	ldr	r3, [pc, #4]	; (80040dc <__errno+0x8>)
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20000028 	.word	0x20000028

080040e0 <__libc_init_array>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4d0d      	ldr	r5, [pc, #52]	; (8004118 <__libc_init_array+0x38>)
 80040e4:	4c0d      	ldr	r4, [pc, #52]	; (800411c <__libc_init_array+0x3c>)
 80040e6:	1b64      	subs	r4, r4, r5
 80040e8:	10a4      	asrs	r4, r4, #2
 80040ea:	2600      	movs	r6, #0
 80040ec:	42a6      	cmp	r6, r4
 80040ee:	d109      	bne.n	8004104 <__libc_init_array+0x24>
 80040f0:	4d0b      	ldr	r5, [pc, #44]	; (8004120 <__libc_init_array+0x40>)
 80040f2:	4c0c      	ldr	r4, [pc, #48]	; (8004124 <__libc_init_array+0x44>)
 80040f4:	f000 fc8a 	bl	8004a0c <_init>
 80040f8:	1b64      	subs	r4, r4, r5
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	2600      	movs	r6, #0
 80040fe:	42a6      	cmp	r6, r4
 8004100:	d105      	bne.n	800410e <__libc_init_array+0x2e>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f855 3b04 	ldr.w	r3, [r5], #4
 8004108:	4798      	blx	r3
 800410a:	3601      	adds	r6, #1
 800410c:	e7ee      	b.n	80040ec <__libc_init_array+0xc>
 800410e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004112:	4798      	blx	r3
 8004114:	3601      	adds	r6, #1
 8004116:	e7f2      	b.n	80040fe <__libc_init_array+0x1e>
 8004118:	08004a68 	.word	0x08004a68
 800411c:	08004a68 	.word	0x08004a68
 8004120:	08004a68 	.word	0x08004a68
 8004124:	08004a6c 	.word	0x08004a6c

08004128 <memset>:
 8004128:	4402      	add	r2, r0
 800412a:	4603      	mov	r3, r0
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	f803 1b01 	strb.w	r1, [r3], #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <powf>:
 8004138:	b508      	push	{r3, lr}
 800413a:	ed2d 8b04 	vpush	{d8-d9}
 800413e:	eeb0 9a40 	vmov.f32	s18, s0
 8004142:	eef0 8a60 	vmov.f32	s17, s1
 8004146:	f000 f8b5 	bl	80042b4 <__ieee754_powf>
 800414a:	4b43      	ldr	r3, [pc, #268]	; (8004258 <powf+0x120>)
 800414c:	f993 3000 	ldrsb.w	r3, [r3]
 8004150:	3301      	adds	r3, #1
 8004152:	eeb0 8a40 	vmov.f32	s16, s0
 8004156:	d012      	beq.n	800417e <powf+0x46>
 8004158:	eef4 8a68 	vcmp.f32	s17, s17
 800415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004160:	d60d      	bvs.n	800417e <powf+0x46>
 8004162:	eeb4 9a49 	vcmp.f32	s18, s18
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	d70d      	bvc.n	8004188 <powf+0x50>
 800416c:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004178:	bf08      	it	eq
 800417a:	eeb0 8a67 	vmoveq.f32	s16, s15
 800417e:	eeb0 0a48 	vmov.f32	s0, s16
 8004182:	ecbd 8b04 	vpop	{d8-d9}
 8004186:	bd08      	pop	{r3, pc}
 8004188:	eddf 9a34 	vldr	s19, [pc, #208]	; 800425c <powf+0x124>
 800418c:	eeb4 9a69 	vcmp.f32	s18, s19
 8004190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004194:	d116      	bne.n	80041c4 <powf+0x8c>
 8004196:	eef4 8a69 	vcmp.f32	s17, s19
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	d057      	beq.n	8004250 <powf+0x118>
 80041a0:	eeb0 0a68 	vmov.f32	s0, s17
 80041a4:	f000 fb50 	bl	8004848 <finitef>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d0e8      	beq.n	800417e <powf+0x46>
 80041ac:	eef4 8ae9 	vcmpe.f32	s17, s19
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	d5e3      	bpl.n	800417e <powf+0x46>
 80041b6:	f7ff ff8d 	bl	80040d4 <__errno>
 80041ba:	2321      	movs	r3, #33	; 0x21
 80041bc:	6003      	str	r3, [r0, #0]
 80041be:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8004260 <powf+0x128>
 80041c2:	e7dc      	b.n	800417e <powf+0x46>
 80041c4:	f000 fb40 	bl	8004848 <finitef>
 80041c8:	bb50      	cbnz	r0, 8004220 <powf+0xe8>
 80041ca:	eeb0 0a49 	vmov.f32	s0, s18
 80041ce:	f000 fb3b 	bl	8004848 <finitef>
 80041d2:	b328      	cbz	r0, 8004220 <powf+0xe8>
 80041d4:	eeb0 0a68 	vmov.f32	s0, s17
 80041d8:	f000 fb36 	bl	8004848 <finitef>
 80041dc:	b300      	cbz	r0, 8004220 <powf+0xe8>
 80041de:	eeb4 8a48 	vcmp.f32	s16, s16
 80041e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e6:	d706      	bvc.n	80041f6 <powf+0xbe>
 80041e8:	f7ff ff74 	bl	80040d4 <__errno>
 80041ec:	2321      	movs	r3, #33	; 0x21
 80041ee:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80041f2:	6003      	str	r3, [r0, #0]
 80041f4:	e7c3      	b.n	800417e <powf+0x46>
 80041f6:	f7ff ff6d 	bl	80040d4 <__errno>
 80041fa:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80041fe:	2322      	movs	r3, #34	; 0x22
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	6003      	str	r3, [r0, #0]
 8004206:	d508      	bpl.n	800421a <powf+0xe2>
 8004208:	eeb0 0a68 	vmov.f32	s0, s17
 800420c:	f000 fb30 	bl	8004870 <rintf>
 8004210:	eeb4 0a68 	vcmp.f32	s0, s17
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	d1d1      	bne.n	80041be <powf+0x86>
 800421a:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8004264 <powf+0x12c>
 800421e:	e7ae      	b.n	800417e <powf+0x46>
 8004220:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	d1a9      	bne.n	800417e <powf+0x46>
 800422a:	eeb0 0a49 	vmov.f32	s0, s18
 800422e:	f000 fb0b 	bl	8004848 <finitef>
 8004232:	2800      	cmp	r0, #0
 8004234:	d0a3      	beq.n	800417e <powf+0x46>
 8004236:	eeb0 0a68 	vmov.f32	s0, s17
 800423a:	f000 fb05 	bl	8004848 <finitef>
 800423e:	2800      	cmp	r0, #0
 8004240:	d09d      	beq.n	800417e <powf+0x46>
 8004242:	f7ff ff47 	bl	80040d4 <__errno>
 8004246:	2322      	movs	r3, #34	; 0x22
 8004248:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800425c <powf+0x124>
 800424c:	6003      	str	r3, [r0, #0]
 800424e:	e796      	b.n	800417e <powf+0x46>
 8004250:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004254:	e793      	b.n	800417e <powf+0x46>
 8004256:	bf00      	nop
 8004258:	2000008c 	.word	0x2000008c
 800425c:	00000000 	.word	0x00000000
 8004260:	ff800000 	.word	0xff800000
 8004264:	7f800000 	.word	0x7f800000

08004268 <sqrtf>:
 8004268:	b508      	push	{r3, lr}
 800426a:	ed2d 8b02 	vpush	{d8}
 800426e:	eeb0 8a40 	vmov.f32	s16, s0
 8004272:	f000 fadf 	bl	8004834 <__ieee754_sqrtf>
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <sqrtf+0x44>)
 8004278:	f993 3000 	ldrsb.w	r3, [r3]
 800427c:	3301      	adds	r3, #1
 800427e:	d011      	beq.n	80042a4 <sqrtf+0x3c>
 8004280:	eeb4 8a48 	vcmp.f32	s16, s16
 8004284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004288:	d60c      	bvs.n	80042a4 <sqrtf+0x3c>
 800428a:	eddf 8a09 	vldr	s17, [pc, #36]	; 80042b0 <sqrtf+0x48>
 800428e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8004292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004296:	d505      	bpl.n	80042a4 <sqrtf+0x3c>
 8004298:	f7ff ff1c 	bl	80040d4 <__errno>
 800429c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80042a0:	2321      	movs	r3, #33	; 0x21
 80042a2:	6003      	str	r3, [r0, #0]
 80042a4:	ecbd 8b02 	vpop	{d8}
 80042a8:	bd08      	pop	{r3, pc}
 80042aa:	bf00      	nop
 80042ac:	2000008c 	.word	0x2000008c
 80042b0:	00000000 	.word	0x00000000

080042b4 <__ieee754_powf>:
 80042b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042b8:	ee10 5a90 	vmov	r5, s1
 80042bc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80042c0:	ed2d 8b02 	vpush	{d8}
 80042c4:	eeb0 8a40 	vmov.f32	s16, s0
 80042c8:	eef0 8a60 	vmov.f32	s17, s1
 80042cc:	f000 8291 	beq.w	80047f2 <__ieee754_powf+0x53e>
 80042d0:	ee10 8a10 	vmov	r8, s0
 80042d4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80042d8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80042dc:	dc06      	bgt.n	80042ec <__ieee754_powf+0x38>
 80042de:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80042e2:	dd0a      	ble.n	80042fa <__ieee754_powf+0x46>
 80042e4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80042e8:	f000 8283 	beq.w	80047f2 <__ieee754_powf+0x53e>
 80042ec:	ecbd 8b02 	vpop	{d8}
 80042f0:	48d8      	ldr	r0, [pc, #864]	; (8004654 <__ieee754_powf+0x3a0>)
 80042f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042f6:	f000 bab5 	b.w	8004864 <nanf>
 80042fa:	f1b8 0f00 	cmp.w	r8, #0
 80042fe:	da1f      	bge.n	8004340 <__ieee754_powf+0x8c>
 8004300:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8004304:	da2e      	bge.n	8004364 <__ieee754_powf+0xb0>
 8004306:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800430a:	f2c0 827b 	blt.w	8004804 <__ieee754_powf+0x550>
 800430e:	15fb      	asrs	r3, r7, #23
 8004310:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004314:	fa47 f603 	asr.w	r6, r7, r3
 8004318:	fa06 f303 	lsl.w	r3, r6, r3
 800431c:	42bb      	cmp	r3, r7
 800431e:	f040 8271 	bne.w	8004804 <__ieee754_powf+0x550>
 8004322:	f006 0601 	and.w	r6, r6, #1
 8004326:	f1c6 0602 	rsb	r6, r6, #2
 800432a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800432e:	d120      	bne.n	8004372 <__ieee754_powf+0xbe>
 8004330:	2d00      	cmp	r5, #0
 8004332:	f280 8264 	bge.w	80047fe <__ieee754_powf+0x54a>
 8004336:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800433a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800433e:	e00d      	b.n	800435c <__ieee754_powf+0xa8>
 8004340:	2600      	movs	r6, #0
 8004342:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004346:	d1f0      	bne.n	800432a <__ieee754_powf+0x76>
 8004348:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800434c:	f000 8251 	beq.w	80047f2 <__ieee754_powf+0x53e>
 8004350:	dd0a      	ble.n	8004368 <__ieee754_powf+0xb4>
 8004352:	2d00      	cmp	r5, #0
 8004354:	f280 8250 	bge.w	80047f8 <__ieee754_powf+0x544>
 8004358:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8004658 <__ieee754_powf+0x3a4>
 800435c:	ecbd 8b02 	vpop	{d8}
 8004360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004364:	2602      	movs	r6, #2
 8004366:	e7ec      	b.n	8004342 <__ieee754_powf+0x8e>
 8004368:	2d00      	cmp	r5, #0
 800436a:	daf5      	bge.n	8004358 <__ieee754_powf+0xa4>
 800436c:	eeb1 0a68 	vneg.f32	s0, s17
 8004370:	e7f4      	b.n	800435c <__ieee754_powf+0xa8>
 8004372:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8004376:	d102      	bne.n	800437e <__ieee754_powf+0xca>
 8004378:	ee28 0a08 	vmul.f32	s0, s16, s16
 800437c:	e7ee      	b.n	800435c <__ieee754_powf+0xa8>
 800437e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004382:	eeb0 0a48 	vmov.f32	s0, s16
 8004386:	d108      	bne.n	800439a <__ieee754_powf+0xe6>
 8004388:	f1b8 0f00 	cmp.w	r8, #0
 800438c:	db05      	blt.n	800439a <__ieee754_powf+0xe6>
 800438e:	ecbd 8b02 	vpop	{d8}
 8004392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	f000 ba4d 	b.w	8004834 <__ieee754_sqrtf>
 800439a:	f000 fa4e 	bl	800483a <fabsf>
 800439e:	b124      	cbz	r4, 80043aa <__ieee754_powf+0xf6>
 80043a0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80043a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80043a8:	d117      	bne.n	80043da <__ieee754_powf+0x126>
 80043aa:	2d00      	cmp	r5, #0
 80043ac:	bfbc      	itt	lt
 80043ae:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80043b2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80043b6:	f1b8 0f00 	cmp.w	r8, #0
 80043ba:	dacf      	bge.n	800435c <__ieee754_powf+0xa8>
 80043bc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80043c0:	ea54 0306 	orrs.w	r3, r4, r6
 80043c4:	d104      	bne.n	80043d0 <__ieee754_powf+0x11c>
 80043c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80043ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80043ce:	e7c5      	b.n	800435c <__ieee754_powf+0xa8>
 80043d0:	2e01      	cmp	r6, #1
 80043d2:	d1c3      	bne.n	800435c <__ieee754_powf+0xa8>
 80043d4:	eeb1 0a40 	vneg.f32	s0, s0
 80043d8:	e7c0      	b.n	800435c <__ieee754_powf+0xa8>
 80043da:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80043de:	3801      	subs	r0, #1
 80043e0:	ea56 0300 	orrs.w	r3, r6, r0
 80043e4:	d104      	bne.n	80043f0 <__ieee754_powf+0x13c>
 80043e6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80043ea:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80043ee:	e7b5      	b.n	800435c <__ieee754_powf+0xa8>
 80043f0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80043f4:	dd6b      	ble.n	80044ce <__ieee754_powf+0x21a>
 80043f6:	4b99      	ldr	r3, [pc, #612]	; (800465c <__ieee754_powf+0x3a8>)
 80043f8:	429c      	cmp	r4, r3
 80043fa:	dc06      	bgt.n	800440a <__ieee754_powf+0x156>
 80043fc:	2d00      	cmp	r5, #0
 80043fe:	daab      	bge.n	8004358 <__ieee754_powf+0xa4>
 8004400:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8004660 <__ieee754_powf+0x3ac>
 8004404:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004408:	e7a8      	b.n	800435c <__ieee754_powf+0xa8>
 800440a:	4b96      	ldr	r3, [pc, #600]	; (8004664 <__ieee754_powf+0x3b0>)
 800440c:	429c      	cmp	r4, r3
 800440e:	dd02      	ble.n	8004416 <__ieee754_powf+0x162>
 8004410:	2d00      	cmp	r5, #0
 8004412:	dcf5      	bgt.n	8004400 <__ieee754_powf+0x14c>
 8004414:	e7a0      	b.n	8004358 <__ieee754_powf+0xa4>
 8004416:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800441a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800441e:	eddf 6a92 	vldr	s13, [pc, #584]	; 8004668 <__ieee754_powf+0x3b4>
 8004422:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004426:	eee0 6a67 	vfms.f32	s13, s0, s15
 800442a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800442e:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004432:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800466c <__ieee754_powf+0x3b8>
 800443e:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8004442:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8004670 <__ieee754_powf+0x3bc>
 8004446:	eee0 7a07 	vfma.f32	s15, s0, s14
 800444a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004674 <__ieee754_powf+0x3c0>
 800444e:	eef0 6a67 	vmov.f32	s13, s15
 8004452:	eee0 6a07 	vfma.f32	s13, s0, s14
 8004456:	ee16 3a90 	vmov	r3, s13
 800445a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800445e:	f023 030f 	bic.w	r3, r3, #15
 8004462:	ee00 3a90 	vmov	s1, r3
 8004466:	eee0 0a47 	vfms.f32	s1, s0, s14
 800446a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800446e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004472:	f025 050f 	bic.w	r5, r5, #15
 8004476:	ee07 5a10 	vmov	s14, r5
 800447a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800447e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eee7 0a27 	vfma.f32	s1, s14, s15
 800448a:	3e01      	subs	r6, #1
 800448c:	ea56 0200 	orrs.w	r2, r6, r0
 8004490:	ee07 5a10 	vmov	s14, r5
 8004494:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004498:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800449c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80044a0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80044a4:	ee17 4a10 	vmov	r4, s14
 80044a8:	bf08      	it	eq
 80044aa:	eeb0 8a40 	vmoveq.f32	s16, s0
 80044ae:	2c00      	cmp	r4, #0
 80044b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80044b4:	f340 8184 	ble.w	80047c0 <__ieee754_powf+0x50c>
 80044b8:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80044bc:	f340 80fc 	ble.w	80046b8 <__ieee754_powf+0x404>
 80044c0:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004660 <__ieee754_powf+0x3ac>
 80044c4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80044c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80044cc:	e746      	b.n	800435c <__ieee754_powf+0xa8>
 80044ce:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80044d2:	bf01      	itttt	eq
 80044d4:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8004678 <__ieee754_powf+0x3c4>
 80044d8:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80044dc:	f06f 0217 	mvneq.w	r2, #23
 80044e0:	ee17 4a90 	vmoveq	r4, s15
 80044e4:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80044e8:	bf18      	it	ne
 80044ea:	2200      	movne	r2, #0
 80044ec:	3b7f      	subs	r3, #127	; 0x7f
 80044ee:	4413      	add	r3, r2
 80044f0:	4a62      	ldr	r2, [pc, #392]	; (800467c <__ieee754_powf+0x3c8>)
 80044f2:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80044f6:	4294      	cmp	r4, r2
 80044f8:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80044fc:	dd06      	ble.n	800450c <__ieee754_powf+0x258>
 80044fe:	4a60      	ldr	r2, [pc, #384]	; (8004680 <__ieee754_powf+0x3cc>)
 8004500:	4294      	cmp	r4, r2
 8004502:	f340 80a4 	ble.w	800464e <__ieee754_powf+0x39a>
 8004506:	3301      	adds	r3, #1
 8004508:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800450c:	2400      	movs	r4, #0
 800450e:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <__ieee754_powf+0x3d0>)
 8004510:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004514:	ee07 1a90 	vmov	s15, r1
 8004518:	ed92 7a00 	vldr	s14, [r2]
 800451c:	4a5a      	ldr	r2, [pc, #360]	; (8004688 <__ieee754_powf+0x3d4>)
 800451e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004522:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004526:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800452a:	1049      	asrs	r1, r1, #1
 800452c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004530:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004534:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004538:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800453c:	ee06 1a10 	vmov	s12, r1
 8004540:	ee65 4a26 	vmul.f32	s9, s10, s13
 8004544:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004548:	ee14 7a90 	vmov	r7, s9
 800454c:	4017      	ands	r7, r2
 800454e:	ee05 7a90 	vmov	s11, r7
 8004552:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8004556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800455a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800468c <__ieee754_powf+0x3d8>
 800455e:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8004562:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004566:	ee25 6a26 	vmul.f32	s12, s10, s13
 800456a:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004690 <__ieee754_powf+0x3dc>
 800456e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8004572:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004694 <__ieee754_powf+0x3e0>
 8004576:	eee7 6a27 	vfma.f32	s13, s14, s15
 800457a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004668 <__ieee754_powf+0x3b4>
 800457e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004582:	eddf 6a45 	vldr	s13, [pc, #276]	; 8004698 <__ieee754_powf+0x3e4>
 8004586:	eee7 6a27 	vfma.f32	s13, s14, s15
 800458a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800469c <__ieee754_powf+0x3e8>
 800458e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004592:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8004596:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800459a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800459e:	eee5 6a07 	vfma.f32	s13, s10, s14
 80045a2:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80045a6:	eef0 7a45 	vmov.f32	s15, s10
 80045aa:	eee5 7aa5 	vfma.f32	s15, s11, s11
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee17 1a90 	vmov	r1, s15
 80045b6:	4011      	ands	r1, r2
 80045b8:	ee07 1a90 	vmov	s15, r1
 80045bc:	ee37 7ac5 	vsub.f32	s14, s15, s10
 80045c0:	eea5 7ae5 	vfms.f32	s14, s11, s11
 80045c4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80045c8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80045cc:	eea6 7a27 	vfma.f32	s14, s12, s15
 80045d0:	eeb0 6a47 	vmov.f32	s12, s14
 80045d4:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80045d8:	ee16 1a10 	vmov	r1, s12
 80045dc:	4011      	ands	r1, r2
 80045de:	ee06 1a90 	vmov	s13, r1
 80045e2:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80045e6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 80046a0 <__ieee754_powf+0x3ec>
 80045ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80046a4 <__ieee754_powf+0x3f0>
 80045ee:	ee37 7a66 	vsub.f32	s14, s14, s13
 80045f2:	ee06 1a10 	vmov	s12, r1
 80045f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fa:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80046a8 <__ieee754_powf+0x3f4>
 80045fe:	492b      	ldr	r1, [pc, #172]	; (80046ac <__ieee754_powf+0x3f8>)
 8004600:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004604:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004608:	edd1 7a00 	vldr	s15, [r1]
 800460c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004610:	ee07 3a90 	vmov	s15, r3
 8004614:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <__ieee754_powf+0x3fc>)
 8004616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800461a:	eef0 7a47 	vmov.f32	s15, s14
 800461e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004622:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004626:	edd4 0a00 	vldr	s1, [r4]
 800462a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800462e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004632:	ee17 3a90 	vmov	r3, s15
 8004636:	4013      	ands	r3, r2
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8004640:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8004644:	eee6 6a65 	vfms.f32	s13, s12, s11
 8004648:	ee77 7a66 	vsub.f32	s15, s14, s13
 800464c:	e70f      	b.n	800446e <__ieee754_powf+0x1ba>
 800464e:	2401      	movs	r4, #1
 8004650:	e75d      	b.n	800450e <__ieee754_powf+0x25a>
 8004652:	bf00      	nop
 8004654:	08004a3c 	.word	0x08004a3c
 8004658:	00000000 	.word	0x00000000
 800465c:	3f7ffff7 	.word	0x3f7ffff7
 8004660:	7149f2ca 	.word	0x7149f2ca
 8004664:	3f800007 	.word	0x3f800007
 8004668:	3eaaaaab 	.word	0x3eaaaaab
 800466c:	3fb8aa3b 	.word	0x3fb8aa3b
 8004670:	36eca570 	.word	0x36eca570
 8004674:	3fb8aa00 	.word	0x3fb8aa00
 8004678:	4b800000 	.word	0x4b800000
 800467c:	001cc471 	.word	0x001cc471
 8004680:	005db3d6 	.word	0x005db3d6
 8004684:	08004a40 	.word	0x08004a40
 8004688:	fffff000 	.word	0xfffff000
 800468c:	3e6c3255 	.word	0x3e6c3255
 8004690:	3e53f142 	.word	0x3e53f142
 8004694:	3e8ba305 	.word	0x3e8ba305
 8004698:	3edb6db7 	.word	0x3edb6db7
 800469c:	3f19999a 	.word	0x3f19999a
 80046a0:	3f76384f 	.word	0x3f76384f
 80046a4:	3f763800 	.word	0x3f763800
 80046a8:	369dc3a0 	.word	0x369dc3a0
 80046ac:	08004a50 	.word	0x08004a50
 80046b0:	08004a48 	.word	0x08004a48
 80046b4:	3338aa3c 	.word	0x3338aa3c
 80046b8:	f040 8092 	bne.w	80047e0 <__ieee754_powf+0x52c>
 80046bc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80046b4 <__ieee754_powf+0x400>
 80046c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046c4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80046c8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80046cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d0:	f73f aef6 	bgt.w	80044c0 <__ieee754_powf+0x20c>
 80046d4:	15db      	asrs	r3, r3, #23
 80046d6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80046da:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80046de:	4103      	asrs	r3, r0
 80046e0:	4423      	add	r3, r4
 80046e2:	4949      	ldr	r1, [pc, #292]	; (8004808 <__ieee754_powf+0x554>)
 80046e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80046e8:	3a7f      	subs	r2, #127	; 0x7f
 80046ea:	4111      	asrs	r1, r2
 80046ec:	ea23 0101 	bic.w	r1, r3, r1
 80046f0:	ee07 1a10 	vmov	s14, r1
 80046f4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80046f8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80046fc:	f1c2 0217 	rsb	r2, r2, #23
 8004700:	4110      	asrs	r0, r2
 8004702:	2c00      	cmp	r4, #0
 8004704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004708:	bfb8      	it	lt
 800470a:	4240      	neglt	r0, r0
 800470c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004710:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800480c <__ieee754_powf+0x558>
 8004714:	ee17 3a10 	vmov	r3, s14
 8004718:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800471c:	f023 030f 	bic.w	r3, r3, #15
 8004720:	ee07 3a10 	vmov	s14, r3
 8004724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004728:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800472c:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004810 <__ieee754_powf+0x55c>
 8004730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004734:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004738:	eddf 6a36 	vldr	s13, [pc, #216]	; 8004814 <__ieee754_powf+0x560>
 800473c:	eeb0 0a67 	vmov.f32	s0, s15
 8004740:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004744:	eeb0 6a40 	vmov.f32	s12, s0
 8004748:	eea7 6a66 	vfms.f32	s12, s14, s13
 800474c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004750:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004754:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004818 <__ieee754_powf+0x564>
 8004758:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800481c <__ieee754_powf+0x568>
 800475c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004760:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004820 <__ieee754_powf+0x56c>
 8004764:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004768:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8004824 <__ieee754_powf+0x570>
 800476c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004770:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004828 <__ieee754_powf+0x574>
 8004774:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004778:	eeb0 6a40 	vmov.f32	s12, s0
 800477c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004780:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004784:	eeb0 7a46 	vmov.f32	s14, s12
 8004788:	ee77 6a66 	vsub.f32	s13, s14, s13
 800478c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004790:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004794:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80047a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80047a4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80047a8:	ee10 3a10 	vmov	r3, s0
 80047ac:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80047b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80047b4:	da1a      	bge.n	80047ec <__ieee754_powf+0x538>
 80047b6:	f000 f8b7 	bl	8004928 <scalbnf>
 80047ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80047be:	e5cd      	b.n	800435c <__ieee754_powf+0xa8>
 80047c0:	4a1a      	ldr	r2, [pc, #104]	; (800482c <__ieee754_powf+0x578>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	dd02      	ble.n	80047cc <__ieee754_powf+0x518>
 80047c6:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8004830 <__ieee754_powf+0x57c>
 80047ca:	e67b      	b.n	80044c4 <__ieee754_powf+0x210>
 80047cc:	d108      	bne.n	80047e0 <__ieee754_powf+0x52c>
 80047ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047d2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80047d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047da:	f6ff af7b 	blt.w	80046d4 <__ieee754_powf+0x420>
 80047de:	e7f2      	b.n	80047c6 <__ieee754_powf+0x512>
 80047e0:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80047e4:	f73f af76 	bgt.w	80046d4 <__ieee754_powf+0x420>
 80047e8:	2000      	movs	r0, #0
 80047ea:	e78f      	b.n	800470c <__ieee754_powf+0x458>
 80047ec:	ee00 3a10 	vmov	s0, r3
 80047f0:	e7e3      	b.n	80047ba <__ieee754_powf+0x506>
 80047f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80047f6:	e5b1      	b.n	800435c <__ieee754_powf+0xa8>
 80047f8:	eeb0 0a68 	vmov.f32	s0, s17
 80047fc:	e5ae      	b.n	800435c <__ieee754_powf+0xa8>
 80047fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004802:	e5ab      	b.n	800435c <__ieee754_powf+0xa8>
 8004804:	2600      	movs	r6, #0
 8004806:	e590      	b.n	800432a <__ieee754_powf+0x76>
 8004808:	007fffff 	.word	0x007fffff
 800480c:	3f317218 	.word	0x3f317218
 8004810:	35bfbe8c 	.word	0x35bfbe8c
 8004814:	3f317200 	.word	0x3f317200
 8004818:	3331bb4c 	.word	0x3331bb4c
 800481c:	b5ddea0e 	.word	0xb5ddea0e
 8004820:	388ab355 	.word	0x388ab355
 8004824:	bb360b61 	.word	0xbb360b61
 8004828:	3e2aaaab 	.word	0x3e2aaaab
 800482c:	43160000 	.word	0x43160000
 8004830:	0da24260 	.word	0x0da24260

08004834 <__ieee754_sqrtf>:
 8004834:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004838:	4770      	bx	lr

0800483a <fabsf>:
 800483a:	ee10 3a10 	vmov	r3, s0
 800483e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004842:	ee00 3a10 	vmov	s0, r3
 8004846:	4770      	bx	lr

08004848 <finitef>:
 8004848:	b082      	sub	sp, #8
 800484a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800484e:	9801      	ldr	r0, [sp, #4]
 8004850:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004854:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004858:	bfac      	ite	ge
 800485a:	2000      	movge	r0, #0
 800485c:	2001      	movlt	r0, #1
 800485e:	b002      	add	sp, #8
 8004860:	4770      	bx	lr
	...

08004864 <nanf>:
 8004864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800486c <nanf+0x8>
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	7fc00000 	.word	0x7fc00000

08004870 <rintf>:
 8004870:	ee10 2a10 	vmov	r2, s0
 8004874:	b513      	push	{r0, r1, r4, lr}
 8004876:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800487a:	397f      	subs	r1, #127	; 0x7f
 800487c:	2916      	cmp	r1, #22
 800487e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8004882:	dc47      	bgt.n	8004914 <rintf+0xa4>
 8004884:	b32b      	cbz	r3, 80048d2 <rintf+0x62>
 8004886:	2900      	cmp	r1, #0
 8004888:	ee10 3a10 	vmov	r3, s0
 800488c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8004890:	da21      	bge.n	80048d6 <rintf+0x66>
 8004892:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8004896:	425b      	negs	r3, r3
 8004898:	4921      	ldr	r1, [pc, #132]	; (8004920 <rintf+0xb0>)
 800489a:	0a5b      	lsrs	r3, r3, #9
 800489c:	0d12      	lsrs	r2, r2, #20
 800489e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a2:	0512      	lsls	r2, r2, #20
 80048a4:	4313      	orrs	r3, r2
 80048a6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	edd1 6a00 	vldr	s13, [r1]
 80048b2:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80048b6:	ed8d 7a01 	vstr	s14, [sp, #4]
 80048ba:	eddd 7a01 	vldr	s15, [sp, #4]
 80048be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80048c2:	ee17 3a90 	vmov	r3, s15
 80048c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048ca:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80048ce:	ee00 3a10 	vmov	s0, r3
 80048d2:	b002      	add	sp, #8
 80048d4:	bd10      	pop	{r4, pc}
 80048d6:	4a13      	ldr	r2, [pc, #76]	; (8004924 <rintf+0xb4>)
 80048d8:	410a      	asrs	r2, r1
 80048da:	4213      	tst	r3, r2
 80048dc:	d0f9      	beq.n	80048d2 <rintf+0x62>
 80048de:	0854      	lsrs	r4, r2, #1
 80048e0:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 80048e4:	d006      	beq.n	80048f4 <rintf+0x84>
 80048e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80048ea:	ea23 0304 	bic.w	r3, r3, r4
 80048ee:	fa42 f101 	asr.w	r1, r2, r1
 80048f2:	430b      	orrs	r3, r1
 80048f4:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <rintf+0xb0>)
 80048f6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80048fa:	ed90 7a00 	vldr	s14, [r0]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004906:	edcd 7a01 	vstr	s15, [sp, #4]
 800490a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800490e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004912:	e7de      	b.n	80048d2 <rintf+0x62>
 8004914:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004918:	d3db      	bcc.n	80048d2 <rintf+0x62>
 800491a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800491e:	e7d8      	b.n	80048d2 <rintf+0x62>
 8004920:	08004a58 	.word	0x08004a58
 8004924:	007fffff 	.word	0x007fffff

08004928 <scalbnf>:
 8004928:	ee10 3a10 	vmov	r3, s0
 800492c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004930:	d025      	beq.n	800497e <scalbnf+0x56>
 8004932:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004936:	d302      	bcc.n	800493e <scalbnf+0x16>
 8004938:	ee30 0a00 	vadd.f32	s0, s0, s0
 800493c:	4770      	bx	lr
 800493e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004942:	d122      	bne.n	800498a <scalbnf+0x62>
 8004944:	4b2a      	ldr	r3, [pc, #168]	; (80049f0 <scalbnf+0xc8>)
 8004946:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80049f4 <scalbnf+0xcc>
 800494a:	4298      	cmp	r0, r3
 800494c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004950:	db16      	blt.n	8004980 <scalbnf+0x58>
 8004952:	ee10 3a10 	vmov	r3, s0
 8004956:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800495a:	3a19      	subs	r2, #25
 800495c:	4402      	add	r2, r0
 800495e:	2afe      	cmp	r2, #254	; 0xfe
 8004960:	dd15      	ble.n	800498e <scalbnf+0x66>
 8004962:	ee10 3a10 	vmov	r3, s0
 8004966:	eddf 7a24 	vldr	s15, [pc, #144]	; 80049f8 <scalbnf+0xd0>
 800496a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80049fc <scalbnf+0xd4>
 800496e:	2b00      	cmp	r3, #0
 8004970:	eeb0 7a67 	vmov.f32	s14, s15
 8004974:	bfb8      	it	lt
 8004976:	eef0 7a66 	vmovlt.f32	s15, s13
 800497a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800497e:	4770      	bx	lr
 8004980:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004a00 <scalbnf+0xd8>
 8004984:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004988:	4770      	bx	lr
 800498a:	0dd2      	lsrs	r2, r2, #23
 800498c:	e7e6      	b.n	800495c <scalbnf+0x34>
 800498e:	2a00      	cmp	r2, #0
 8004990:	dd06      	ble.n	80049a0 <scalbnf+0x78>
 8004992:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004996:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800499a:	ee00 3a10 	vmov	s0, r3
 800499e:	4770      	bx	lr
 80049a0:	f112 0f16 	cmn.w	r2, #22
 80049a4:	da1a      	bge.n	80049dc <scalbnf+0xb4>
 80049a6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80049aa:	4298      	cmp	r0, r3
 80049ac:	ee10 3a10 	vmov	r3, s0
 80049b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049b4:	dd0a      	ble.n	80049cc <scalbnf+0xa4>
 80049b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80049f8 <scalbnf+0xd0>
 80049ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80049fc <scalbnf+0xd4>
 80049be:	eef0 7a40 	vmov.f32	s15, s0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	bf18      	it	ne
 80049c6:	eeb0 0a47 	vmovne.f32	s0, s14
 80049ca:	e7db      	b.n	8004984 <scalbnf+0x5c>
 80049cc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004a00 <scalbnf+0xd8>
 80049d0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004a04 <scalbnf+0xdc>
 80049d4:	eef0 7a40 	vmov.f32	s15, s0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	e7f3      	b.n	80049c4 <scalbnf+0x9c>
 80049dc:	3219      	adds	r2, #25
 80049de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049e2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80049e6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004a08 <scalbnf+0xe0>
 80049ea:	ee07 3a10 	vmov	s14, r3
 80049ee:	e7c4      	b.n	800497a <scalbnf+0x52>
 80049f0:	ffff3cb0 	.word	0xffff3cb0
 80049f4:	4c000000 	.word	0x4c000000
 80049f8:	7149f2ca 	.word	0x7149f2ca
 80049fc:	f149f2ca 	.word	0xf149f2ca
 8004a00:	0da24260 	.word	0x0da24260
 8004a04:	8da24260 	.word	0x8da24260
 8004a08:	33000000 	.word	0x33000000

08004a0c <_init>:
 8004a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0e:	bf00      	nop
 8004a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a12:	bc08      	pop	{r3}
 8004a14:	469e      	mov	lr, r3
 8004a16:	4770      	bx	lr

08004a18 <_fini>:
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	bf00      	nop
 8004a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a1e:	bc08      	pop	{r3}
 8004a20:	469e      	mov	lr, r3
 8004a22:	4770      	bx	lr
