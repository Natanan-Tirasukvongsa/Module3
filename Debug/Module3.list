
Module3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08005f00  08005f00  00015f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f44  08005f44  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f44  08005f44  00015f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f4c  08005f4c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08005f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  20000090  08005fe0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08005fe0  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f951  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8d  00000000  00000000  0002fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000327f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b4b  00000000  00000000  000336c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109a8  00000000  00000000  0004a20b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000910e2  00000000  00000000  0005abb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ebc95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000ebce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005ee8 	.word	0x08005ee8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08005ee8 	.word	0x08005ee8

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	; 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_uldivmod>:
 80003f4:	b953      	cbnz	r3, 800040c <__aeabi_uldivmod+0x18>
 80003f6:	b94a      	cbnz	r2, 800040c <__aeabi_uldivmod+0x18>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	bf08      	it	eq
 80003fc:	2800      	cmpeq	r0, #0
 80003fe:	bf1c      	itt	ne
 8000400:	f04f 31ff 	movne.w	r1, #4294967295
 8000404:	f04f 30ff 	movne.w	r0, #4294967295
 8000408:	f000 b96e 	b.w	80006e8 <__aeabi_idiv0>
 800040c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000410:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000414:	f000 f806 	bl	8000424 <__udivmoddi4>
 8000418:	f8dd e004 	ldr.w	lr, [sp, #4]
 800041c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000420:	b004      	add	sp, #16
 8000422:	4770      	bx	lr

08000424 <__udivmoddi4>:
 8000424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000428:	9d08      	ldr	r5, [sp, #32]
 800042a:	4604      	mov	r4, r0
 800042c:	468c      	mov	ip, r1
 800042e:	2b00      	cmp	r3, #0
 8000430:	f040 8083 	bne.w	800053a <__udivmoddi4+0x116>
 8000434:	428a      	cmp	r2, r1
 8000436:	4617      	mov	r7, r2
 8000438:	d947      	bls.n	80004ca <__udivmoddi4+0xa6>
 800043a:	fab2 f282 	clz	r2, r2
 800043e:	b142      	cbz	r2, 8000452 <__udivmoddi4+0x2e>
 8000440:	f1c2 0020 	rsb	r0, r2, #32
 8000444:	fa24 f000 	lsr.w	r0, r4, r0
 8000448:	4091      	lsls	r1, r2
 800044a:	4097      	lsls	r7, r2
 800044c:	ea40 0c01 	orr.w	ip, r0, r1
 8000450:	4094      	lsls	r4, r2
 8000452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000456:	0c23      	lsrs	r3, r4, #16
 8000458:	fbbc f6f8 	udiv	r6, ip, r8
 800045c:	fa1f fe87 	uxth.w	lr, r7
 8000460:	fb08 c116 	mls	r1, r8, r6, ip
 8000464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000468:	fb06 f10e 	mul.w	r1, r6, lr
 800046c:	4299      	cmp	r1, r3
 800046e:	d909      	bls.n	8000484 <__udivmoddi4+0x60>
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	f106 30ff 	add.w	r0, r6, #4294967295
 8000476:	f080 8119 	bcs.w	80006ac <__udivmoddi4+0x288>
 800047a:	4299      	cmp	r1, r3
 800047c:	f240 8116 	bls.w	80006ac <__udivmoddi4+0x288>
 8000480:	3e02      	subs	r6, #2
 8000482:	443b      	add	r3, r7
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3310 	mls	r3, r8, r0, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb00 fe0e 	mul.w	lr, r0, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x8c>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a2:	f080 8105 	bcs.w	80006b0 <__udivmoddi4+0x28c>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8102 	bls.w	80006b0 <__udivmoddi4+0x28c>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004b4:	eba4 040e 	sub.w	r4, r4, lr
 80004b8:	2600      	movs	r6, #0
 80004ba:	b11d      	cbz	r5, 80004c4 <__udivmoddi4+0xa0>
 80004bc:	40d4      	lsrs	r4, r2
 80004be:	2300      	movs	r3, #0
 80004c0:	e9c5 4300 	strd	r4, r3, [r5]
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	b902      	cbnz	r2, 80004ce <__udivmoddi4+0xaa>
 80004cc:	deff      	udf	#255	; 0xff
 80004ce:	fab2 f282 	clz	r2, r2
 80004d2:	2a00      	cmp	r2, #0
 80004d4:	d150      	bne.n	8000578 <__udivmoddi4+0x154>
 80004d6:	1bcb      	subs	r3, r1, r7
 80004d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004dc:	fa1f f887 	uxth.w	r8, r7
 80004e0:	2601      	movs	r6, #1
 80004e2:	fbb3 fcfe 	udiv	ip, r3, lr
 80004e6:	0c21      	lsrs	r1, r4, #16
 80004e8:	fb0e 331c 	mls	r3, lr, ip, r3
 80004ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004f0:	fb08 f30c 	mul.w	r3, r8, ip
 80004f4:	428b      	cmp	r3, r1
 80004f6:	d907      	bls.n	8000508 <__udivmoddi4+0xe4>
 80004f8:	1879      	adds	r1, r7, r1
 80004fa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0xe2>
 8000500:	428b      	cmp	r3, r1
 8000502:	f200 80e9 	bhi.w	80006d8 <__udivmoddi4+0x2b4>
 8000506:	4684      	mov	ip, r0
 8000508:	1ac9      	subs	r1, r1, r3
 800050a:	b2a3      	uxth	r3, r4
 800050c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000510:	fb0e 1110 	mls	r1, lr, r0, r1
 8000514:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000518:	fb08 f800 	mul.w	r8, r8, r0
 800051c:	45a0      	cmp	r8, r4
 800051e:	d907      	bls.n	8000530 <__udivmoddi4+0x10c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	d202      	bcs.n	800052e <__udivmoddi4+0x10a>
 8000528:	45a0      	cmp	r8, r4
 800052a:	f200 80d9 	bhi.w	80006e0 <__udivmoddi4+0x2bc>
 800052e:	4618      	mov	r0, r3
 8000530:	eba4 0408 	sub.w	r4, r4, r8
 8000534:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000538:	e7bf      	b.n	80004ba <__udivmoddi4+0x96>
 800053a:	428b      	cmp	r3, r1
 800053c:	d909      	bls.n	8000552 <__udivmoddi4+0x12e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	f000 80b1 	beq.w	80006a6 <__udivmoddi4+0x282>
 8000544:	2600      	movs	r6, #0
 8000546:	e9c5 0100 	strd	r0, r1, [r5]
 800054a:	4630      	mov	r0, r6
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	fab3 f683 	clz	r6, r3
 8000556:	2e00      	cmp	r6, #0
 8000558:	d14a      	bne.n	80005f0 <__udivmoddi4+0x1cc>
 800055a:	428b      	cmp	r3, r1
 800055c:	d302      	bcc.n	8000564 <__udivmoddi4+0x140>
 800055e:	4282      	cmp	r2, r0
 8000560:	f200 80b8 	bhi.w	80006d4 <__udivmoddi4+0x2b0>
 8000564:	1a84      	subs	r4, r0, r2
 8000566:	eb61 0103 	sbc.w	r1, r1, r3
 800056a:	2001      	movs	r0, #1
 800056c:	468c      	mov	ip, r1
 800056e:	2d00      	cmp	r5, #0
 8000570:	d0a8      	beq.n	80004c4 <__udivmoddi4+0xa0>
 8000572:	e9c5 4c00 	strd	r4, ip, [r5]
 8000576:	e7a5      	b.n	80004c4 <__udivmoddi4+0xa0>
 8000578:	f1c2 0320 	rsb	r3, r2, #32
 800057c:	fa20 f603 	lsr.w	r6, r0, r3
 8000580:	4097      	lsls	r7, r2
 8000582:	fa01 f002 	lsl.w	r0, r1, r2
 8000586:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800058a:	40d9      	lsrs	r1, r3
 800058c:	4330      	orrs	r0, r6
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	fbb1 f6fe 	udiv	r6, r1, lr
 8000594:	fa1f f887 	uxth.w	r8, r7
 8000598:	fb0e 1116 	mls	r1, lr, r6, r1
 800059c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a0:	fb06 f108 	mul.w	r1, r6, r8
 80005a4:	4299      	cmp	r1, r3
 80005a6:	fa04 f402 	lsl.w	r4, r4, r2
 80005aa:	d909      	bls.n	80005c0 <__udivmoddi4+0x19c>
 80005ac:	18fb      	adds	r3, r7, r3
 80005ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80005b2:	f080 808d 	bcs.w	80006d0 <__udivmoddi4+0x2ac>
 80005b6:	4299      	cmp	r1, r3
 80005b8:	f240 808a 	bls.w	80006d0 <__udivmoddi4+0x2ac>
 80005bc:	3e02      	subs	r6, #2
 80005be:	443b      	add	r3, r7
 80005c0:	1a5b      	subs	r3, r3, r1
 80005c2:	b281      	uxth	r1, r0
 80005c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb00 f308 	mul.w	r3, r0, r8
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d907      	bls.n	80005e8 <__udivmoddi4+0x1c4>
 80005d8:	1879      	adds	r1, r7, r1
 80005da:	f100 3cff 	add.w	ip, r0, #4294967295
 80005de:	d273      	bcs.n	80006c8 <__udivmoddi4+0x2a4>
 80005e0:	428b      	cmp	r3, r1
 80005e2:	d971      	bls.n	80006c8 <__udivmoddi4+0x2a4>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4439      	add	r1, r7
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ee:	e778      	b.n	80004e2 <__udivmoddi4+0xbe>
 80005f0:	f1c6 0c20 	rsb	ip, r6, #32
 80005f4:	fa03 f406 	lsl.w	r4, r3, r6
 80005f8:	fa22 f30c 	lsr.w	r3, r2, ip
 80005fc:	431c      	orrs	r4, r3
 80005fe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000602:	fa01 f306 	lsl.w	r3, r1, r6
 8000606:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800060a:	fa21 f10c 	lsr.w	r1, r1, ip
 800060e:	431f      	orrs	r7, r3
 8000610:	0c3b      	lsrs	r3, r7, #16
 8000612:	fbb1 f9fe 	udiv	r9, r1, lr
 8000616:	fa1f f884 	uxth.w	r8, r4
 800061a:	fb0e 1119 	mls	r1, lr, r9, r1
 800061e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000622:	fb09 fa08 	mul.w	sl, r9, r8
 8000626:	458a      	cmp	sl, r1
 8000628:	fa02 f206 	lsl.w	r2, r2, r6
 800062c:	fa00 f306 	lsl.w	r3, r0, r6
 8000630:	d908      	bls.n	8000644 <__udivmoddi4+0x220>
 8000632:	1861      	adds	r1, r4, r1
 8000634:	f109 30ff 	add.w	r0, r9, #4294967295
 8000638:	d248      	bcs.n	80006cc <__udivmoddi4+0x2a8>
 800063a:	458a      	cmp	sl, r1
 800063c:	d946      	bls.n	80006cc <__udivmoddi4+0x2a8>
 800063e:	f1a9 0902 	sub.w	r9, r9, #2
 8000642:	4421      	add	r1, r4
 8000644:	eba1 010a 	sub.w	r1, r1, sl
 8000648:	b2bf      	uxth	r7, r7
 800064a:	fbb1 f0fe 	udiv	r0, r1, lr
 800064e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000652:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000656:	fb00 f808 	mul.w	r8, r0, r8
 800065a:	45b8      	cmp	r8, r7
 800065c:	d907      	bls.n	800066e <__udivmoddi4+0x24a>
 800065e:	19e7      	adds	r7, r4, r7
 8000660:	f100 31ff 	add.w	r1, r0, #4294967295
 8000664:	d22e      	bcs.n	80006c4 <__udivmoddi4+0x2a0>
 8000666:	45b8      	cmp	r8, r7
 8000668:	d92c      	bls.n	80006c4 <__udivmoddi4+0x2a0>
 800066a:	3802      	subs	r0, #2
 800066c:	4427      	add	r7, r4
 800066e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000672:	eba7 0708 	sub.w	r7, r7, r8
 8000676:	fba0 8902 	umull	r8, r9, r0, r2
 800067a:	454f      	cmp	r7, r9
 800067c:	46c6      	mov	lr, r8
 800067e:	4649      	mov	r1, r9
 8000680:	d31a      	bcc.n	80006b8 <__udivmoddi4+0x294>
 8000682:	d017      	beq.n	80006b4 <__udivmoddi4+0x290>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x27a>
 8000686:	ebb3 020e 	subs.w	r2, r3, lr
 800068a:	eb67 0701 	sbc.w	r7, r7, r1
 800068e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000692:	40f2      	lsrs	r2, r6
 8000694:	ea4c 0202 	orr.w	r2, ip, r2
 8000698:	40f7      	lsrs	r7, r6
 800069a:	e9c5 2700 	strd	r2, r7, [r5]
 800069e:	2600      	movs	r6, #0
 80006a0:	4631      	mov	r1, r6
 80006a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006a6:	462e      	mov	r6, r5
 80006a8:	4628      	mov	r0, r5
 80006aa:	e70b      	b.n	80004c4 <__udivmoddi4+0xa0>
 80006ac:	4606      	mov	r6, r0
 80006ae:	e6e9      	b.n	8000484 <__udivmoddi4+0x60>
 80006b0:	4618      	mov	r0, r3
 80006b2:	e6fd      	b.n	80004b0 <__udivmoddi4+0x8c>
 80006b4:	4543      	cmp	r3, r8
 80006b6:	d2e5      	bcs.n	8000684 <__udivmoddi4+0x260>
 80006b8:	ebb8 0e02 	subs.w	lr, r8, r2
 80006bc:	eb69 0104 	sbc.w	r1, r9, r4
 80006c0:	3801      	subs	r0, #1
 80006c2:	e7df      	b.n	8000684 <__udivmoddi4+0x260>
 80006c4:	4608      	mov	r0, r1
 80006c6:	e7d2      	b.n	800066e <__udivmoddi4+0x24a>
 80006c8:	4660      	mov	r0, ip
 80006ca:	e78d      	b.n	80005e8 <__udivmoddi4+0x1c4>
 80006cc:	4681      	mov	r9, r0
 80006ce:	e7b9      	b.n	8000644 <__udivmoddi4+0x220>
 80006d0:	4666      	mov	r6, ip
 80006d2:	e775      	b.n	80005c0 <__udivmoddi4+0x19c>
 80006d4:	4630      	mov	r0, r6
 80006d6:	e74a      	b.n	800056e <__udivmoddi4+0x14a>
 80006d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80006dc:	4439      	add	r1, r7
 80006de:	e713      	b.n	8000508 <__udivmoddi4+0xe4>
 80006e0:	3802      	subs	r0, #2
 80006e2:	443c      	add	r4, r7
 80006e4:	e724      	b.n	8000530 <__udivmoddi4+0x10c>
 80006e6:	bf00      	nop

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f001 fd0c 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f834 	bl	8000760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f000 fa86 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fc:	f000 fa64 	bl	8000bc8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000700:	f000 fa38 	bl	8000b74 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000704:	f000 f8c2 	bl	800088c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000708:	f000 f96a 	bl	80009e0 <MX_TIM3_Init>
  MX_TIM2_Init();
 800070c:	f000 f916 	bl	800093c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000710:	f000 f88e 	bl	8000830 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000714:	f000 f9da 	bl	8000acc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);					//micros()
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <main+0x5c>)
 800071a:	f003 fa0f 	bl	8003b3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);					//Control loop
 800071e:	480b      	ldr	r0, [pc, #44]	; (800074c <main+0x60>)
 8000720:	f003 fa0c 	bl	8003b3c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);   //Start reading encoder
 8000724:	213c      	movs	r1, #60	; 0x3c
 8000726:	480a      	ldr	r0, [pc, #40]	; (8000750 <main+0x64>)
 8000728:	f003 fc1a 	bl	8003f60 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim3);						//Start TIM3
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <main+0x68>)
 800072e:	f003 f9ab 	bl	8003a88 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);			//Start PWM TIM3
 8000732:	210c      	movs	r1, #12
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <main+0x68>)
 8000736:	f003 fabd 	bl	8003cb4 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	HAL_UART_Receive_DMA(&huart2,  (uint8_t*)RxDataBuffer, 10);
 800073a:	220a      	movs	r2, #10
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <main+0x6c>)
 800073e:	4807      	ldr	r0, [pc, #28]	; (800075c <main+0x70>)
 8000740:	f004 fb7b 	bl	8004e3a <HAL_UART_Receive_DMA>
 8000744:	e7f9      	b.n	800073a <main+0x4e>
 8000746:	bf00      	nop
 8000748:	20000320 	.word	0x20000320
 800074c:	200001f4 	.word	0x200001f4
 8000750:	200002d8 	.word	0x200002d8
 8000754:	20000290 	.word	0x20000290
 8000758:	20000178 	.word	0x20000178
 800075c:	20000368 	.word	0x20000368

08000760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b094      	sub	sp, #80	; 0x50
 8000764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	2230      	movs	r2, #48	; 0x30
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f004 ff48 	bl	8005604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <SystemClock_Config+0xc8>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	4a26      	ldr	r2, [pc, #152]	; (8000828 <SystemClock_Config+0xc8>)
 800078e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000792:	6413      	str	r3, [r2, #64]	; 0x40
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <SystemClock_Config+0xc8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	4b21      	ldr	r3, [pc, #132]	; (800082c <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a20      	ldr	r2, [pc, #128]	; (800082c <SystemClock_Config+0xcc>)
 80007aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ae:	6013      	str	r3, [r2, #0]
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <SystemClock_Config+0xcc>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007bc:	2302      	movs	r3, #2
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c4:	2310      	movs	r3, #16
 80007c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c8:	2302      	movs	r3, #2
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007cc:	2300      	movs	r3, #0
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d0:	2308      	movs	r3, #8
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80007d4:	2364      	movs	r3, #100	; 0x64
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007d8:	2302      	movs	r3, #2
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f002 fc8b 	bl	8003100 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f0:	f001 fa34 	bl	8001c5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2103      	movs	r1, #3
 8000810:	4618      	mov	r0, r3
 8000812:	f002 feed 	bl	80035f0 <HAL_RCC_ClockConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800081c:	f001 fa1e 	bl	8001c5c <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	3750      	adds	r7, #80	; 0x50
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f002 fb03 	bl	8002e78 <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f001 f9f0 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000023c 	.word	0x2000023c
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08c      	sub	sp, #48	; 0x30
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2224      	movs	r2, #36	; 0x24
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f004 feb2 	bl	8005604 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a8:	4b22      	ldr	r3, [pc, #136]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <MX_TIM1_Init+0xac>)
 80008ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8191;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008bc:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80008c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c8:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM1_Init+0xa8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008d4:	2303      	movs	r3, #3
 80008d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008dc:	2301      	movs	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008ec:	2301      	movs	r3, #1
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	4619      	mov	r1, r3
 80008fe:	480d      	ldr	r0, [pc, #52]	; (8000934 <MX_TIM1_Init+0xa8>)
 8000900:	f003 fa88 	bl	8003e14 <HAL_TIM_Encoder_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800090a:	f001 f9a7 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM1_Init+0xa8>)
 800091c:	f004 f92c 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000926:	f001 f999 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3730      	adds	r7, #48	; 0x30
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200002d8 	.word	0x200002d8
 8000938:	40010000 	.word	0x40010000

0800093c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000958:	4b20      	ldr	r3, [pc, #128]	; (80009dc <MX_TIM2_Init+0xa0>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000960:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000962:	2263      	movs	r2, #99	; 0x63
 8000964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800096c:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_TIM2_Init+0xa0>)
 800096e:	f04f 32ff 	mov.w	r2, #4294967295
 8000972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_TIM2_Init+0xa0>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000980:	4816      	ldr	r0, [pc, #88]	; (80009dc <MX_TIM2_Init+0xa0>)
 8000982:	f003 f831 	bl	80039e8 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800098c:	f001 f966 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	4619      	mov	r1, r3
 800099c:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_TIM2_Init+0xa0>)
 800099e:	f003 fd33 	bl	8004408 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009a8:	f001 f958 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ac:	2300      	movs	r3, #0
 80009ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	; (80009dc <MX_TIM2_Init+0xa0>)
 80009ba:	f004 f8dd 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009c4:	f001 f94a 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <MX_TIM2_Init+0xa0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f06f 0201 	mvn.w	r2, #1
 80009d0:	611a      	str	r2, [r3, #16]

  /* USER CODE END TIM2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000320 	.word	0x20000320

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a12:	4a2d      	ldr	r2, [pc, #180]	; (8000ac8 <MX_TIM3_Init+0xe8>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000a22:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a24:	f242 7210 	movw	r2, #10000	; 0x2710
 8000a28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a36:	4823      	ldr	r0, [pc, #140]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a38:	f002 ffd6 	bl	80039e8 <HAL_TIM_Base_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a42:	f001 f90b 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a50:	4619      	mov	r1, r3
 8000a52:	481c      	ldr	r0, [pc, #112]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a54:	f003 fcd8 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a5e:	f001 f8fd 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a62:	4818      	ldr	r0, [pc, #96]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a64:	f003 f8cc 	bl	8003c00 <HAL_TIM_PWM_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a6e:	f001 f8f5 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000a82:	f004 f879 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a8c:	f001 f8e6 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a90:	2360      	movs	r3, #96	; 0x60
 8000a92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000aa8:	f003 fbf0 	bl	800428c <HAL_TIM_PWM_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ab2:	f001 f8d3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ab6:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <MX_TIM3_Init+0xe4>)
 8000ab8:	f001 f9e8 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8000abc:	bf00      	nop
 8000abe:	3738      	adds	r7, #56	; 0x38
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000290 	.word	0x20000290
 8000ac8:	40000400 	.word	0x40000400

08000acc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <MX_TIM4_Init+0xa0>)
 8000aec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000aee:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000afc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b0e:	4816      	ldr	r0, [pc, #88]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000b10:	f002 ff6a 	bl	80039e8 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b1a:	f001 f89f 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4619      	mov	r1, r3
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000b2c:	f003 fc6c 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b36:	f001 f891 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	4619      	mov	r1, r3
 8000b46:	4808      	ldr	r0, [pc, #32]	; (8000b68 <MX_TIM4_Init+0x9c>)
 8000b48:	f004 f816 	bl	8004b78 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b52:	f001 f883 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_TIM4_Init+0xa4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f06f 0201 	mvn.w	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM4_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001f4 	.word	0x200001f4
 8000b6c:	40000800 	.word	0x40000800
 8000b70:	20000320 	.word	0x20000320

08000b74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <MX_USART2_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_USART2_UART_Init+0x4c>)
 8000bac:	f004 f866 	bl	8004c7c <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f001 f851 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000368 	.word	0x20000368
 8000bc4:	40004400 	.word	0x40004400

08000bc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_DMA_Init+0x3c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2010      	movs	r0, #16
 8000bf0:	f001 fbd9 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000bf4:	2010      	movs	r0, #16
 8000bf6:	f001 fbf2 	bl	80023de <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b44      	ldr	r3, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b40      	ldr	r3, [pc, #256]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a3f      	ldr	r2, [pc, #252]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b3d      	ldr	r3, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4b39      	ldr	r3, [pc, #228]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a38      	ldr	r2, [pc, #224]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b36      	ldr	r3, [pc, #216]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c7c:	f043 0302 	orr.w	r3, r3, #2
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <MX_GPIO_Init+0x138>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	482c      	ldr	r0, [pc, #176]	; (8000d44 <MX_GPIO_Init+0x13c>)
 8000c94:	f002 f8b2 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	482a      	ldr	r0, [pc, #168]	; (8000d48 <MX_GPIO_Init+0x140>)
 8000ca0:	f002 f8ac 	bl	8002dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <MX_GPIO_Init+0x144>)
 8000cac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <MX_GPIO_Init+0x148>)
 8000cba:	f001 ff1b 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_Proxreal_Pin Encoder_X_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxreal_Pin|Encoder_X_Pin;
 8000cbe:	2381      	movs	r3, #129	; 0x81
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481f      	ldr	r0, [pc, #124]	; (8000d50 <MX_GPIO_Init+0x148>)
 8000cd2:	f001 ff0f 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_Input_Proxtest_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_Proxtest_Pin;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_Input_Proxtest_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4816      	ldr	r0, [pc, #88]	; (8000d44 <MX_GPIO_Init+0x13c>)
 8000cea:	f001 ff03 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <MX_GPIO_Init+0x13c>)
 8000d06:	f001 fef5 	bl	8002af4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_GPIO_Init+0x140>)
 8000d24:	f001 fee6 	bl	8002af4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	2028      	movs	r0, #40	; 0x28
 8000d2e:	f001 fb3a 	bl	80023a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d32:	2028      	movs	r0, #40	; 0x28
 8000d34:	f001 fb53 	bl	80023de <HAL_NVIC_EnableIRQ>

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	10210000 	.word	0x10210000
 8000d50:	40020800 	.word	0x40020800

08000d54 <Encoder_Velocity_Update>:

/* USER CODE BEGIN 4 */
float Encoder_Velocity_Update()  //Lecture code DON'T TOUCH!
{
 8000d54:	b5b0      	push	{r4, r5, r7, lr}
 8000d56:	ed2d 8b02 	vpush	{d8}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = htim1.Instance->CNT;
 8000d5e:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <Encoder_Velocity_Update+0xa8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8000d66:	f000 ff5f 	bl	8001c28 <micros>
 8000d6a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8000d6e:	4b24      	ldr	r3, [pc, #144]	; (8000e00 <Encoder_Velocity_Update+0xac>)
 8000d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0503 	sbc.w	r5, r1, r3
 8000d7e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8000d82:	4b20      	ldr	r3, [pc, #128]	; (8000e04 <Encoder_Velocity_Update+0xb0>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= Encoder_Overflow)
 8000d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d90:	461a      	mov	r2, r3
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	db06      	blt.n	8000da6 <Encoder_Velocity_Update+0x52>
	{
		EncoderPositionDiff -= Encoder_Resolution;
 8000d98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	1a9b      	subs	r3, r3, r2
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00b      	b.n	8000dbe <Encoder_Velocity_Update+0x6a>
	}
	else if (-EncoderPositionDiff >= Encoder_Overflow)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	425b      	negs	r3, r3
 8000daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dae:	4293      	cmp	r3, r2
 8000db0:	db05      	blt.n	8000dbe <Encoder_Velocity_Update+0x6a>
	{
		EncoderPositionDiff += Encoder_Resolution;
 8000db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db6:	461a      	mov	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	4413      	add	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8000dbe:	4a11      	ldr	r2, [pc, #68]	; (8000e04 <Encoder_Velocity_Update+0xb0>)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8000dc4:	490e      	ldr	r1, [pc, #56]	; (8000e00 <Encoder_Velocity_Update+0xac>)
 8000dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000dca:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000) / (float) EncoderTimeDiff;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <Encoder_Velocity_Update+0xb4>)
 8000dd2:	fb02 f303 	mul.w	r3, r2, r3
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000de2:	f7ff fac1 	bl	8000368 <__aeabi_ul2f>
 8000de6:	ee07 0a10 	vmov	s14, r0
 8000dea:	eec8 7a07 	vdiv.f32	s15, s16, s14
}
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	ecbd 8b02 	vpop	{d8}
 8000dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8000dfc:	200002d8 	.word	0x200002d8
 8000e00:	20000188 	.word	0x20000188
 8000e04:	20000190 	.word	0x20000190
 8000e08:	000f4240 	.word	0x000f4240

08000e0c <Motor_Drive_PWM>:
void Motor_Drive_PWM()	//Motor drive
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0

	if (PWM_Out >= 0)
 8000e10:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db17      	blt.n	8000e4a <Motor_Drive_PWM+0x3e>
	{
		if (PWM_Out > 10000)
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e20:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e24:	4293      	cmp	r3, r2
 8000e26:	dd03      	ble.n	8000e30 <Motor_Drive_PWM+0x24>
		{
			PWM_Out = 10000;
 8000e28:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e2e:	801a      	strh	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, PWM_Out);
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <Motor_Drive_PWM+0x80>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e42:	4813      	ldr	r0, [pc, #76]	; (8000e90 <Motor_Drive_PWM+0x84>)
 8000e44:	f001 ffda 	bl	8002dfc <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -PWM_Out);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
	}


}
 8000e48:	e01b      	b.n	8000e82 <Motor_Drive_PWM+0x76>
	else if (PWM_Out < 0)
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da16      	bge.n	8000e82 <Motor_Drive_PWM+0x76>
		if (PWM_Out < -10000)
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <Motor_Drive_PWM+0x88>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	da03      	bge.n	8000e68 <Motor_Drive_PWM+0x5c>
			PWM_Out = -10000;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e62:	f64d 02f0 	movw	r2, #55536	; 0xd8f0
 8000e66:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -PWM_Out);
 8000e68:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <Motor_Drive_PWM+0x7c>)
 8000e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6e:	425a      	negs	r2, r3
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <Motor_Drive_PWM+0x80>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <Motor_Drive_PWM+0x84>)
 8000e7e:	f001 ffbd 	bl	8002dfc <HAL_GPIO_WritePin>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200000e8 	.word	0x200000e8
 8000e8c:	20000290 	.word	0x20000290
 8000e90:	40020400 	.word	0x40020400
 8000e94:	ffffd8f0 	.word	0xffffd8f0

08000e98 <Velocity_Control>:

void Velocity_Control()  //Velocity Control PID
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

	Velocity_Now_RPM = (Velocity_Read_Encoder*60)/Encoder_Resolution;	//Convert Velocity_Read_Encoder (Encoder's velocity at the moment) to RPM
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <Velocity_Control+0x12c>)
 8000e9e:	edd3 7a00 	vldr	s15, [r3]
 8000ea2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000fc8 <Velocity_Control+0x130>
 8000ea6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eba:	4b44      	ldr	r3, [pc, #272]	; (8000fcc <Velocity_Control+0x134>)
 8000ebc:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Now_Rad = (Velocity_Now_RPM*2*pi)/60;
 8000ec0:	4b42      	ldr	r3, [pc, #264]	; (8000fcc <Velocity_Control+0x134>)
 8000ec2:	edd3 7a00 	vldr	s15, [r3]
 8000ec6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eca:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000fd0 <Velocity_Control+0x138>
 8000ece:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ed2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8000fc8 <Velocity_Control+0x130>
 8000ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eda:	4b3e      	ldr	r3, [pc, #248]	; (8000fd4 <Velocity_Control+0x13c>)
 8000edc:	edc3 7a00 	vstr	s15, [r3]

	if (Velocity_Want_RPM > Velocity_Max_RPM)		//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000ee0:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <Velocity_Control+0x140>)
 8000ee2:	ed93 7a00 	vldr	s14, [r3]
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <Velocity_Control+0x144>)
 8000ee8:	edd3 7a00 	vldr	s15, [r3]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	dd04      	ble.n	8000f00 <Velocity_Control+0x68>
	{
		Velocity_Want_RPM = Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <Velocity_Control+0x144>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a37      	ldr	r2, [pc, #220]	; (8000fd8 <Velocity_Control+0x140>)
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e014      	b.n	8000f2a <Velocity_Control+0x92>
	}
	else if (Velocity_Want_RPM < -Velocity_Max_RPM)	//If Velocity_Want_RPM exceed Velocity_Max_RPM
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <Velocity_Control+0x144>)
 8000f02:	edd3 7a00 	vldr	s15, [r3]
 8000f06:	eeb1 7a67 	vneg.f32	s14, s15
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <Velocity_Control+0x140>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	dd07      	ble.n	8000f2a <Velocity_Control+0x92>
	{
		Velocity_Want_RPM = -Velocity_Max_RPM;		//Run with Velocity_Max_RPM
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <Velocity_Control+0x144>)
 8000f1c:	edd3 7a00 	vldr	s15, [r3]
 8000f20:	eef1 7a67 	vneg.f32	s15, s15
 8000f24:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <Velocity_Control+0x140>)
 8000f26:	edc3 7a00 	vstr	s15, [r3]
	}

	Velocity_Error = Velocity_Want_RPM - Velocity_Now_RPM;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <Velocity_Control+0x140>)
 8000f2c:	ed93 7a00 	vldr	s14, [r3]
 8000f30:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <Velocity_Control+0x134>)
 8000f32:	edd3 7a00 	vldr	s15, [r3]
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <Velocity_Control+0x148>)
 8000f3c:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Sum = Velocity_Error_Sum + Velocity_Error;
 8000f40:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <Velocity_Control+0x14c>)
 8000f42:	ed93 7a00 	vldr	s14, [r3]
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <Velocity_Control+0x148>)
 8000f48:	edd3 7a00 	vldr	s15, [r3]
 8000f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <Velocity_Control+0x14c>)
 8000f52:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Diff = Velocity_Error - Velocity_Error_Prev;
 8000f56:	4b22      	ldr	r3, [pc, #136]	; (8000fe0 <Velocity_Control+0x148>)
 8000f58:	ed93 7a00 	vldr	s14, [r3]
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <Velocity_Control+0x150>)
 8000f5e:	edd3 7a00 	vldr	s15, [r3]
 8000f62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <Velocity_Control+0x154>)
 8000f68:	edc3 7a00 	vstr	s15, [r3]
	Velocity_Error_Prev = Velocity_Error;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <Velocity_Control+0x148>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <Velocity_Control+0x150>)
 8000f72:	6013      	str	r3, [r2, #0]

	PWM_Out = (Velocity_K_P*Velocity_Error) + (Velocity_K_I*Velocity_Error_Sum) + (Velocity_K_D*(Velocity_Error_Diff));
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <Velocity_Control+0x158>)
 8000f76:	ed93 7a00 	vldr	s14, [r3]
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <Velocity_Control+0x148>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <Velocity_Control+0x15c>)
 8000f86:	edd3 6a00 	vldr	s13, [r3]
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <Velocity_Control+0x14c>)
 8000f8c:	edd3 7a00 	vldr	s15, [r3]
 8000f90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f98:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <Velocity_Control+0x160>)
 8000f9a:	edd3 6a00 	vldr	s13, [r3]
 8000f9e:	4b13      	ldr	r3, [pc, #76]	; (8000fec <Velocity_Control+0x154>)
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 3a90 	vmov	r3, s15
 8000fb4:	b21a      	sxth	r2, r3
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <Velocity_Control+0x164>)
 8000fb8:	801a      	strh	r2, [r3, #0]

}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	200000c8 	.word	0x200000c8
 8000fc8:	42700000 	.word	0x42700000
 8000fcc:	200000cc 	.word	0x200000cc
 8000fd0:	40490fdb 	.word	0x40490fdb
 8000fd4:	200000f8 	.word	0x200000f8
 8000fd8:	200000d0 	.word	0x200000d0
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	200000d8 	.word	0x200000d8
 8000fe4:	200000dc 	.word	0x200000dc
 8000fe8:	200000e4 	.word	0x200000e4
 8000fec:	200000e0 	.word	0x200000e0
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004
 8000ff8:	200000d4 	.word	0x200000d4
 8000ffc:	200000e8 	.word	0x200000e8

08001000 <Distance_Calculation>:

void Distance_Calculation()	//Calculate that distance is short or long
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	//acceleration is fixed at 0.5 radian per second^2
	Distance_Degree_Set = Position_Want_Degree - Position_Now_Degree;  //Get distance from  EndPoint - StartPoint in degree
 8001004:	4b82      	ldr	r3, [pc, #520]	; (8001210 <Distance_Calculation+0x210>)
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	4b82      	ldr	r3, [pc, #520]	; (8001214 <Distance_Calculation+0x214>)
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001014:	4b80      	ldr	r3, [pc, #512]	; (8001218 <Distance_Calculation+0x218>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
	if (Distance_Degree_Set < 0)
 800101a:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <Distance_Calculation+0x218>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d509      	bpl.n	800103e <Distance_Calculation+0x3e>
	{
		Distance_Degree_Set += 360;
 800102a:	4b7b      	ldr	r3, [pc, #492]	; (8001218 <Distance_Calculation+0x218>)
 800102c:	edd3 7a00 	vldr	s15, [r3]
 8001030:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800121c <Distance_Calculation+0x21c>
 8001034:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001038:	4b77      	ldr	r3, [pc, #476]	; (8001218 <Distance_Calculation+0x218>)
 800103a:	edc3 7a00 	vstr	s15, [r3]
	}
	Distance_Radian_Set = (Distance_Degree_Set*pi)/180;				   //Change Distance_Degree_Set to radian
 800103e:	4b76      	ldr	r3, [pc, #472]	; (8001218 <Distance_Calculation+0x218>)
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001220 <Distance_Calculation+0x220>
 8001048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800104c:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001224 <Distance_Calculation+0x224>
 8001050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001054:	4b74      	ldr	r3, [pc, #464]	; (8001228 <Distance_Calculation+0x228>)
 8001056:	edc3 7a00 	vstr	s15, [r3]

	Velocity_Max_Rad = (Velocity_Max_RPM*2*pi)/60;					   //Change max velocity to radian per second
 800105a:	4b74      	ldr	r3, [pc, #464]	; (800122c <Distance_Calculation+0x22c>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001064:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001220 <Distance_Calculation+0x220>
 8001068:	ee27 7a87 	vmul.f32	s14, s15, s14
 800106c:	eddf 6a70 	vldr	s13, [pc, #448]	; 8001230 <Distance_Calculation+0x230>
 8001070:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001074:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <Distance_Calculation+0x234>)
 8001076:	edc3 7a00 	vstr	s15, [r3]

	Time_Blend = Velocity_Max_Rad*2;								   //Time used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800107a:	4b6e      	ldr	r3, [pc, #440]	; (8001234 <Distance_Calculation+0x234>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001084:	4b6c      	ldr	r3, [pc, #432]	; (8001238 <Distance_Calculation+0x238>)
 8001086:	edc3 7a00 	vstr	s15, [r3]
	Time_Blend_Micro = Time_Blend*1000000;							   //Change from second to microsecond
 800108a:	4b6b      	ldr	r3, [pc, #428]	; (8001238 <Distance_Calculation+0x238>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800123c <Distance_Calculation+0x23c>
 8001094:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001098:	4b69      	ldr	r3, [pc, #420]	; (8001240 <Distance_Calculation+0x240>)
 800109a:	edc3 7a00 	vstr	s15, [r3]

	Distance_Blend = 2*(powf(Velocity_Max_Rad, 2));					   //Distance used for motor to reach Velocity_Max_Rad with a=0.5 radian per second^2
 800109e:	4b65      	ldr	r3, [pc, #404]	; (8001234 <Distance_Calculation+0x234>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80010a8:	eeb0 0a67 	vmov.f32	s0, s15
 80010ac:	f004 fab2 	bl	8005614 <powf>
 80010b0:	eef0 7a40 	vmov.f32	s15, s0
 80010b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <Distance_Calculation+0x244>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]


	if ((2*Distance_Blend) < Distance_Radian_Set)					   //Distance_Radian_Set is long enough to achieve Velocity_Max_Rad
 80010be:	4b61      	ldr	r3, [pc, #388]	; (8001244 <Distance_Calculation+0x244>)
 80010c0:	edd3 7a00 	vldr	s15, [r3]
 80010c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010c8:	4b57      	ldr	r3, [pc, #348]	; (8001228 <Distance_Calculation+0x228>)
 80010ca:	edd3 7a00 	vldr	s15, [r3]
 80010ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d6:	d53c      	bpl.n	8001152 <Distance_Calculation+0x152>
	{
		Distance_Length = 1;
 80010d8:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <Distance_Calculation+0x248>)
 80010da:	2201      	movs	r2, #1
 80010dc:	801a      	strh	r2, [r3, #0]
		Distance_Steady = Distance_Radian_Set - (2*Distance_Blend);	   //Distance when a=0 radian per second^2
 80010de:	4b52      	ldr	r3, [pc, #328]	; (8001228 <Distance_Calculation+0x228>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4b57      	ldr	r3, [pc, #348]	; (8001244 <Distance_Calculation+0x244>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010f2:	4b56      	ldr	r3, [pc, #344]	; (800124c <Distance_Calculation+0x24c>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
		Time_Steady = Distance_Steady/Velocity_Max_Rad;
 80010f8:	4b54      	ldr	r3, [pc, #336]	; (800124c <Distance_Calculation+0x24c>)
 80010fa:	edd3 6a00 	vldr	s13, [r3]
 80010fe:	4b4d      	ldr	r3, [pc, #308]	; (8001234 <Distance_Calculation+0x234>)
 8001100:	ed93 7a00 	vldr	s14, [r3]
 8001104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <Distance_Calculation+0x250>)
 800110a:	edc3 7a00 	vstr	s15, [r3]
		Time_Steady_Micro = Time_Steady*1000000;
 800110e:	4b50      	ldr	r3, [pc, #320]	; (8001250 <Distance_Calculation+0x250>)
 8001110:	edd3 7a00 	vldr	s15, [r3]
 8001114:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800123c <Distance_Calculation+0x23c>
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <Distance_Calculation+0x254>)
 800111e:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend) + (Time_Steady);//Time use to reach next station
 8001122:	4b45      	ldr	r3, [pc, #276]	; (8001238 <Distance_Calculation+0x238>)
 8001124:	edd3 7a00 	vldr	s15, [r3]
 8001128:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800112c:	4b48      	ldr	r3, [pc, #288]	; (8001250 <Distance_Calculation+0x250>)
 800112e:	edd3 7a00 	vldr	s15, [r3]
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <Distance_Calculation+0x258>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All*1000000;							   //Change from second to microsecond
 800113c:	4b46      	ldr	r3, [pc, #280]	; (8001258 <Distance_Calculation+0x258>)
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800123c <Distance_Calculation+0x23c>
 8001146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <Distance_Calculation+0x25c>)
 800114c:	edc3 7a00 	vstr	s15, [r3]
 8001150:	e059      	b.n	8001206 <Distance_Calculation+0x206>
	}

	else if ((2*Distance_Blend) >= Distance_Radian_Set)				   //Distance_Radian_Set is not long enough to achieve Velocity_Max_Rad
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <Distance_Calculation+0x244>)
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <Distance_Calculation+0x228>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	db4c      	blt.n	8001206 <Distance_Calculation+0x206>
	{
		Distance_Length = 0;
 800116c:	4b36      	ldr	r3, [pc, #216]	; (8001248 <Distance_Calculation+0x248>)
 800116e:	2200      	movs	r2, #0
 8001170:	801a      	strh	r2, [r3, #0]
		Time_Blend = sqrtf(Distance_Radian_Set*2);					   //Time used for motor to reach Velocity_Achieve_Rad with a=0.5 radian per second^2
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <Distance_Calculation+0x228>)
 8001174:	edd3 7a00 	vldr	s15, [r3]
 8001178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	f004 fae0 	bl	8005744 <sqrtf>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <Distance_Calculation+0x238>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
		Time_Blend_Micro = Time_Blend*1000000;						   //Change from second to microsecond
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <Distance_Calculation+0x238>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800123c <Distance_Calculation+0x23c>
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <Distance_Calculation+0x240>)
 800119e:	edc3 7a00 	vstr	s15, [r3]
		Time_All = (2*Time_Blend);
 80011a2:	4b25      	ldr	r3, [pc, #148]	; (8001238 <Distance_Calculation+0x238>)
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <Distance_Calculation+0x258>)
 80011ae:	edc3 7a00 	vstr	s15, [r3]
		Time_All_Micro = Time_All * 1000000;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <Distance_Calculation+0x258>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800123c <Distance_Calculation+0x23c>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	4b26      	ldr	r3, [pc, #152]	; (800125c <Distance_Calculation+0x25c>)
 80011c2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_Rad = sqrtf(Distance_Radian_Set/2);		   //Top limit velocity that motor can achieve in short distance
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <Distance_Calculation+0x228>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80011d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011d4:	eeb0 0a47 	vmov.f32	s0, s14
 80011d8:	f004 fab4 	bl	8005744 <sqrtf>
 80011dc:	eef0 7a40 	vmov.f32	s15, s0
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <Distance_Calculation+0x260>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
		Velocity_Achieve_RPM = (Velocity_Achieve_Rad*60)/(2*pi);	   //Change from radian per second to RPM
 80011e6:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <Distance_Calculation+0x260>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001230 <Distance_Calculation+0x230>
 80011f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80011f4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001220 <Distance_Calculation+0x220>
 80011f8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <Distance_Calculation+0x264>)
 8001202:	edc3 7a00 	vstr	s15, [r3]
	}

	Distance_Calculated = 1;
 8001206:	4b18      	ldr	r3, [pc, #96]	; (8001268 <Distance_Calculation+0x268>)
 8001208:	2201      	movs	r2, #1
 800120a:	801a      	strh	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000f0 	.word	0x200000f0
 8001214:	200000ec 	.word	0x200000ec
 8001218:	20000108 	.word	0x20000108
 800121c:	43b40000 	.word	0x43b40000
 8001220:	40490fdb 	.word	0x40490fdb
 8001224:	43340000 	.word	0x43340000
 8001228:	2000010c 	.word	0x2000010c
 800122c:	20000008 	.word	0x20000008
 8001230:	42700000 	.word	0x42700000
 8001234:	200000fc 	.word	0x200000fc
 8001238:	20000120 	.word	0x20000120
 800123c:	49742400 	.word	0x49742400
 8001240:	20000138 	.word	0x20000138
 8001244:	20000110 	.word	0x20000110
 8001248:	200000c0 	.word	0x200000c0
 800124c:	20000114 	.word	0x20000114
 8001250:	20000128 	.word	0x20000128
 8001254:	20000140 	.word	0x20000140
 8001258:	20000124 	.word	0x20000124
 800125c:	2000013c 	.word	0x2000013c
 8001260:	20000104 	.word	0x20000104
 8001264:	20000100 	.word	0x20000100
 8001268:	200000c2 	.word	0x200000c2

0800126c <Trajectory_Generation>:
	Velocity_Want_RPM = (Position_K_P*Position_Error) + (Position_K_I*Position_Error_Sum) + (Position_K_D*(Position_Error_Diff));

}

void Trajectory_Generation()  //Position Control with Trajectory Generation
{
 800126c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001270:	ed2d 8b02 	vpush	{d8}
 8001274:	b096      	sub	sp, #88	; 0x58
 8001276:	af00      	add	r7, sp, #0

	//Position_Now_Rad  = (Position_Read_Encoder*2*pi)/Encoder_Resolution;  //radian

	if (Trajectory_Flag == 0)
 8001278:	4ba2      	ldr	r3, [pc, #648]	; (8001504 <Trajectory_Generation+0x298>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10d      	bne.n	800129c <Trajectory_Generation+0x30>
	{
		Time_Start = micros();
 8001280:	f000 fcd2 	bl	8001c28 <micros>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	499f      	ldr	r1, [pc, #636]	; (8001508 <Trajectory_Generation+0x29c>)
 800128a:	e9c1 2300 	strd	r2, r3, [r1]
		Position_Start = Position_Now_Rad;
 800128e:	4b9f      	ldr	r3, [pc, #636]	; (800150c <Trajectory_Generation+0x2a0>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b9f      	ldr	r3, [pc, #636]	; (8001510 <Trajectory_Generation+0x2a4>)
 8001294:	601a      	str	r2, [r3, #0]
		Trajectory_Flag = 1;
 8001296:	4a9b      	ldr	r2, [pc, #620]	; (8001504 <Trajectory_Generation+0x298>)
 8001298:	2301      	movs	r3, #1
 800129a:	8013      	strh	r3, [r2, #0]
	}

	Time_Trajectory_Stamp = micros();
 800129c:	f000 fcc4 	bl	8001c28 <micros>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	499b      	ldr	r1, [pc, #620]	; (8001514 <Trajectory_Generation+0x2a8>)
 80012a6:	e9c1 2300 	strd	r2, r3, [r1]
	Distance_Traveled = Position_Now_Rad-Position_Start;
 80012aa:	4b98      	ldr	r3, [pc, #608]	; (800150c <Trajectory_Generation+0x2a0>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	4b97      	ldr	r3, [pc, #604]	; (8001510 <Trajectory_Generation+0x2a4>)
 80012b2:	edd3 7a00 	vldr	s15, [r3]
 80012b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ba:	4b97      	ldr	r3, [pc, #604]	; (8001518 <Trajectory_Generation+0x2ac>)
 80012bc:	edc3 7a00 	vstr	s15, [r3]

	if (Distance_Length == 1)  //LONG
 80012c0:	4b96      	ldr	r3, [pc, #600]	; (800151c <Trajectory_Generation+0x2b0>)
 80012c2:	881b      	ldrh	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	f040 8139 	bne.w	800153c <Trajectory_Generation+0x2d0>
	{
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 80012ca:	4b92      	ldr	r3, [pc, #584]	; (8001514 <Trajectory_Generation+0x2a8>)
 80012cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d0:	4b8d      	ldr	r3, [pc, #564]	; (8001508 <Trajectory_Generation+0x29c>)
 80012d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d6:	1a84      	subs	r4, r0, r2
 80012d8:	653c      	str	r4, [r7, #80]	; 0x50
 80012da:	eb61 0303 	sbc.w	r3, r1, r3
 80012de:	657b      	str	r3, [r7, #84]	; 0x54
 80012e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80012e4:	f7ff f840 	bl	8000368 <__aeabi_ul2f>
 80012e8:	ee07 0a10 	vmov	s14, r0
 80012ec:	4b8c      	ldr	r3, [pc, #560]	; (8001520 <Trajectory_Generation+0x2b4>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	d825      	bhi.n	8001348 <Trajectory_Generation+0xdc>
		{
			Velocity_Want_RPM = Velocity_Max_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 80012fc:	4b85      	ldr	r3, [pc, #532]	; (8001514 <Trajectory_Generation+0x2a8>)
 80012fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001302:	4b81      	ldr	r3, [pc, #516]	; (8001508 <Trajectory_Generation+0x29c>)
 8001304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001308:	1a84      	subs	r4, r0, r2
 800130a:	64bc      	str	r4, [r7, #72]	; 0x48
 800130c:	eb61 0303 	sbc.w	r3, r1, r3
 8001310:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001312:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001316:	f7ff f827 	bl	8000368 <__aeabi_ul2f>
 800131a:	ee06 0a90 	vmov	s13, r0
 800131e:	4b80      	ldr	r3, [pc, #512]	; (8001520 <Trajectory_Generation+0x2b4>)
 8001320:	edd3 7a00 	vldr	s15, [r3]
 8001324:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001328:	4b7e      	ldr	r3, [pc, #504]	; (8001524 <Trajectory_Generation+0x2b8>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001332:	4b7d      	ldr	r3, [pc, #500]	; (8001528 <Trajectory_Generation+0x2bc>)
 8001334:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 8001338:	4b72      	ldr	r3, [pc, #456]	; (8001504 <Trajectory_Generation+0x298>)
 800133a:	2202      	movs	r2, #2
 800133c:	801a      	strh	r2, [r3, #0]

			P1 = Distance_Traveled;
 800133e:	4b76      	ldr	r3, [pc, #472]	; (8001518 <Trajectory_Generation+0x2ac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7a      	ldr	r2, [pc, #488]	; (800152c <Trajectory_Generation+0x2c0>)
 8001344:	6013      	str	r3, [r2, #0]
			Trajectory_Flag = 4;
		}
	}


}
 8001346:	e1ba      	b.n	80016be <Trajectory_Generation+0x452>
		else if (((Time_Trajectory_Stamp-Time_Start) > (Time_Blend_Micro) )
 8001348:	4b72      	ldr	r3, [pc, #456]	; (8001514 <Trajectory_Generation+0x2a8>)
 800134a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800134e:	4b6e      	ldr	r3, [pc, #440]	; (8001508 <Trajectory_Generation+0x29c>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	1a84      	subs	r4, r0, r2
 8001356:	643c      	str	r4, [r7, #64]	; 0x40
 8001358:	eb61 0303 	sbc.w	r3, r1, r3
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
 800135e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001362:	f7ff f801 	bl	8000368 <__aeabi_ul2f>
 8001366:	ee07 0a10 	vmov	s14, r0
 800136a:	4b6d      	ldr	r3, [pc, #436]	; (8001520 <Trajectory_Generation+0x2b4>)
 800136c:	edd3 7a00 	vldr	s15, [r3]
 8001370:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd2d      	ble.n	80013d6 <Trajectory_Generation+0x16a>
				&& (Time_Trajectory_Stamp-Time_Start < Time_All_Micro-Time_Blend_Micro))
 800137a:	4b66      	ldr	r3, [pc, #408]	; (8001514 <Trajectory_Generation+0x2a8>)
 800137c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <Trajectory_Generation+0x29c>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	1a84      	subs	r4, r0, r2
 8001388:	63bc      	str	r4, [r7, #56]	; 0x38
 800138a:	eb61 0303 	sbc.w	r3, r1, r3
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001390:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001394:	f7fe ffe8 	bl	8000368 <__aeabi_ul2f>
 8001398:	ee06 0a90 	vmov	s13, r0
 800139c:	4b64      	ldr	r3, [pc, #400]	; (8001530 <Trajectory_Generation+0x2c4>)
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <Trajectory_Generation+0x2b4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	eef4 6ae7 	vcmpe.f32	s13, s15
 80013b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b4:	d50f      	bpl.n	80013d6 <Trajectory_Generation+0x16a>
			Velocity_Want_RPM = Velocity_Max_RPM;
 80013b6:	4b5b      	ldr	r3, [pc, #364]	; (8001524 <Trajectory_Generation+0x2b8>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a5b      	ldr	r2, [pc, #364]	; (8001528 <Trajectory_Generation+0x2bc>)
 80013bc:	6013      	str	r3, [r2, #0]
			P2 = Distance_Traveled-P1;
 80013be:	4b56      	ldr	r3, [pc, #344]	; (8001518 <Trajectory_Generation+0x2ac>)
 80013c0:	ed93 7a00 	vldr	s14, [r3]
 80013c4:	4b59      	ldr	r3, [pc, #356]	; (800152c <Trajectory_Generation+0x2c0>)
 80013c6:	edd3 7a00 	vldr	s15, [r3]
 80013ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ce:	4b59      	ldr	r3, [pc, #356]	; (8001534 <Trajectory_Generation+0x2c8>)
 80013d0:	edc3 7a00 	vstr	s15, [r3]
 80013d4:	e173      	b.n	80016be <Trajectory_Generation+0x452>
		else if (((Time_Trajectory_Stamp-Time_Start) >= (Time_All_Micro-Time_Blend_Micro))
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <Trajectory_Generation+0x2a8>)
 80013d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013dc:	4b4a      	ldr	r3, [pc, #296]	; (8001508 <Trajectory_Generation+0x29c>)
 80013de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e2:	1a84      	subs	r4, r0, r2
 80013e4:	633c      	str	r4, [r7, #48]	; 0x30
 80013e6:	eb61 0303 	sbc.w	r3, r1, r3
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
 80013ec:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80013f0:	f7fe ffba 	bl	8000368 <__aeabi_ul2f>
 80013f4:	ee06 0a90 	vmov	s13, r0
 80013f8:	4b4d      	ldr	r3, [pc, #308]	; (8001530 <Trajectory_Generation+0x2c4>)
 80013fa:	ed93 7a00 	vldr	s14, [r3]
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <Trajectory_Generation+0x2b4>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	eef4 6ae7 	vcmpe.f32	s13, s15
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	db5a      	blt.n	80014c8 <Trajectory_Generation+0x25c>
				&& (Time_Trajectory_Stamp-Time_Start <= Time_All_Micro) )
 8001412:	4b40      	ldr	r3, [pc, #256]	; (8001514 <Trajectory_Generation+0x2a8>)
 8001414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001418:	4b3b      	ldr	r3, [pc, #236]	; (8001508 <Trajectory_Generation+0x29c>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	1a84      	subs	r4, r0, r2
 8001420:	62bc      	str	r4, [r7, #40]	; 0x28
 8001422:	eb61 0303 	sbc.w	r3, r1, r3
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001428:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800142c:	f7fe ff9c 	bl	8000368 <__aeabi_ul2f>
 8001430:	ee07 0a10 	vmov	s14, r0
 8001434:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <Trajectory_Generation+0x2c4>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	d841      	bhi.n	80014c8 <Trajectory_Generation+0x25c>
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)
 8001444:	4b37      	ldr	r3, [pc, #220]	; (8001524 <Trajectory_Generation+0x2b8>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb1 8a67 	vneg.f32	s16, s15
 800144e:	4b31      	ldr	r3, [pc, #196]	; (8001514 <Trajectory_Generation+0x2a8>)
 8001450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001454:	4b2c      	ldr	r3, [pc, #176]	; (8001508 <Trajectory_Generation+0x29c>)
 8001456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145a:	1a84      	subs	r4, r0, r2
 800145c:	623c      	str	r4, [r7, #32]
 800145e:	eb61 0303 	sbc.w	r3, r1, r3
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
								-(Time_All_Micro-Time_Blend_Micro))/Time_Blend_Micro)-1);
 8001464:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001468:	f7fe ff7e 	bl	8000368 <__aeabi_ul2f>
 800146c:	ee06 0a90 	vmov	s13, r0
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <Trajectory_Generation+0x2c4>)
 8001472:	ed93 7a00 	vldr	s14, [r3]
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <Trajectory_Generation+0x2b4>)
 8001478:	edd3 7a00 	vldr	s15, [r3]
 800147c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001480:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001484:	4b26      	ldr	r3, [pc, #152]	; (8001520 <Trajectory_Generation+0x2b4>)
 8001486:	ed93 7a00 	vldr	s14, [r3]
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001492:	ee77 7ac7 	vsub.f32	s15, s15, s14
			Velocity_Want_RPM = (-Velocity_Max_RPM)*((((Time_Trajectory_Stamp-Time_Start)
 8001496:	ee68 7a27 	vmul.f32	s15, s16, s15
 800149a:	4b23      	ldr	r3, [pc, #140]	; (8001528 <Trajectory_Generation+0x2bc>)
 800149c:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <Trajectory_Generation+0x298>)
 80014a2:	2203      	movs	r2, #3
 80014a4:	801a      	strh	r2, [r3, #0]
			P3 = Distance_Traveled-P2-P1;
 80014a6:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <Trajectory_Generation+0x2ac>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4b21      	ldr	r3, [pc, #132]	; (8001534 <Trajectory_Generation+0x2c8>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b6:	4b1d      	ldr	r3, [pc, #116]	; (800152c <Trajectory_Generation+0x2c0>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c0:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <Trajectory_Generation+0x2cc>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
 80014c6:	e0fa      	b.n	80016be <Trajectory_Generation+0x452>
		else if ((Time_Trajectory_Stamp-Time_Start) >= Time_All_Micro)
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <Trajectory_Generation+0x2a8>)
 80014ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <Trajectory_Generation+0x29c>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	1a84      	subs	r4, r0, r2
 80014d6:	61bc      	str	r4, [r7, #24]
 80014d8:	eb61 0303 	sbc.w	r3, r1, r3
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014e2:	f7fe ff41 	bl	8000368 <__aeabi_ul2f>
 80014e6:	ee07 0a10 	vmov	s14, r0
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <Trajectory_Generation+0x2c4>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	da00      	bge.n	80014fc <Trajectory_Generation+0x290>
}
 80014fa:	e0e0      	b.n	80016be <Trajectory_Generation+0x452>
			Trajectory_Flag = 4;
 80014fc:	4b01      	ldr	r3, [pc, #4]	; (8001504 <Trajectory_Generation+0x298>)
 80014fe:	2204      	movs	r2, #4
 8001500:	801a      	strh	r2, [r3, #0]
}
 8001502:	e0dc      	b.n	80016be <Trajectory_Generation+0x452>
 8001504:	20000144 	.word	0x20000144
 8001508:	20000130 	.word	0x20000130
 800150c:	2000011c 	.word	0x2000011c
 8001510:	20000118 	.word	0x20000118
 8001514:	200000b8 	.word	0x200000b8
 8001518:	20000174 	.word	0x20000174
 800151c:	200000c0 	.word	0x200000c0
 8001520:	20000138 	.word	0x20000138
 8001524:	20000008 	.word	0x20000008
 8001528:	200000d0 	.word	0x200000d0
 800152c:	20000168 	.word	0x20000168
 8001530:	2000013c 	.word	0x2000013c
 8001534:	2000016c 	.word	0x2000016c
 8001538:	20000170 	.word	0x20000170
	else if (Distance_Length == 0)  //SHORT
 800153c:	4b63      	ldr	r3, [pc, #396]	; (80016cc <Trajectory_Generation+0x460>)
 800153e:	881b      	ldrh	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	f040 80bc 	bne.w	80016be <Trajectory_Generation+0x452>
		if ((Time_Trajectory_Stamp-Time_Start) <= Time_Blend_Micro)
 8001546:	4b62      	ldr	r3, [pc, #392]	; (80016d0 <Trajectory_Generation+0x464>)
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <Trajectory_Generation+0x468>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	1a84      	subs	r4, r0, r2
 8001554:	eb61 0503 	sbc.w	r5, r1, r3
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe ff04 	bl	8000368 <__aeabi_ul2f>
 8001560:	ee07 0a10 	vmov	s14, r0
 8001564:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <Trajectory_Generation+0x46c>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d821      	bhi.n	80015b8 <Trajectory_Generation+0x34c>
			Velocity_Want_RPM = Velocity_Achieve_RPM*((Time_Trajectory_Stamp-Time_Start)/Time_Blend_Micro);
 8001574:	4b56      	ldr	r3, [pc, #344]	; (80016d0 <Trajectory_Generation+0x464>)
 8001576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157a:	4b56      	ldr	r3, [pc, #344]	; (80016d4 <Trajectory_Generation+0x468>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	1a84      	subs	r4, r0, r2
 8001582:	613c      	str	r4, [r7, #16]
 8001584:	eb61 0303 	sbc.w	r3, r1, r3
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800158e:	f7fe feeb 	bl	8000368 <__aeabi_ul2f>
 8001592:	ee06 0a90 	vmov	s13, r0
 8001596:	4b50      	ldr	r3, [pc, #320]	; (80016d8 <Trajectory_Generation+0x46c>)
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015a0:	4b4e      	ldr	r3, [pc, #312]	; (80016dc <Trajectory_Generation+0x470>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015aa:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <Trajectory_Generation+0x474>)
 80015ac:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 2;
 80015b0:	4b4c      	ldr	r3, [pc, #304]	; (80016e4 <Trajectory_Generation+0x478>)
 80015b2:	2202      	movs	r2, #2
 80015b4:	801a      	strh	r2, [r3, #0]
}
 80015b6:	e082      	b.n	80016be <Trajectory_Generation+0x452>
		else if (((Time_Trajectory_Stamp-Time_Start) >= Time_Blend_Micro)
 80015b8:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <Trajectory_Generation+0x464>)
 80015ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015be:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <Trajectory_Generation+0x468>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	1a84      	subs	r4, r0, r2
 80015c6:	60bc      	str	r4, [r7, #8]
 80015c8:	eb61 0303 	sbc.w	r3, r1, r3
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80015d2:	f7fe fec9 	bl	8000368 <__aeabi_ul2f>
 80015d6:	ee07 0a10 	vmov	s14, r0
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <Trajectory_Generation+0x46c>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	db46      	blt.n	8001678 <Trajectory_Generation+0x40c>
				&& ((Time_Trajectory_Stamp-Time_Start) < (2*Time_Blend_Micro)))
 80015ea:	4b39      	ldr	r3, [pc, #228]	; (80016d0 <Trajectory_Generation+0x464>)
 80015ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <Trajectory_Generation+0x468>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	1a84      	subs	r4, r0, r2
 80015f8:	603c      	str	r4, [r7, #0]
 80015fa:	eb61 0303 	sbc.w	r3, r1, r3
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001604:	f7fe feb0 	bl	8000368 <__aeabi_ul2f>
 8001608:	ee07 0a10 	vmov	s14, r0
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <Trajectory_Generation+0x46c>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d52b      	bpl.n	8001678 <Trajectory_Generation+0x40c>
			Velocity_Want_RPM = (-Velocity_Achieve_RPM)*((((Time_Trajectory_Stamp-Time_Start)-Time_Blend_Micro)/Time_Blend_Micro)-1);
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <Trajectory_Generation+0x470>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eeb1 8a67 	vneg.f32	s16, s15
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <Trajectory_Generation+0x464>)
 800162c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <Trajectory_Generation+0x468>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	ebb0 0a02 	subs.w	sl, r0, r2
 800163a:	eb61 0b03 	sbc.w	fp, r1, r3
 800163e:	4650      	mov	r0, sl
 8001640:	4659      	mov	r1, fp
 8001642:	f7fe fe91 	bl	8000368 <__aeabi_ul2f>
 8001646:	ee07 0a10 	vmov	s14, r0
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <Trajectory_Generation+0x46c>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001654:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <Trajectory_Generation+0x46c>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800165e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001662:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001666:	ee68 7a27 	vmul.f32	s15, s16, s15
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <Trajectory_Generation+0x474>)
 800166c:	edc3 7a00 	vstr	s15, [r3]
			Trajectory_Flag = 3;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <Trajectory_Generation+0x478>)
 8001672:	2203      	movs	r2, #3
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	e022      	b.n	80016be <Trajectory_Generation+0x452>
		else if ((Time_Trajectory_Stamp-Time_Start) >= (2*Time_Blend_Micro))
 8001678:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <Trajectory_Generation+0x464>)
 800167a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <Trajectory_Generation+0x468>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	ebb0 0802 	subs.w	r8, r0, r2
 8001688:	eb61 0903 	sbc.w	r9, r1, r3
 800168c:	4640      	mov	r0, r8
 800168e:	4649      	mov	r1, r9
 8001690:	f7fe fe6a 	bl	8000368 <__aeabi_ul2f>
 8001694:	ee07 0a10 	vmov	s14, r0
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <Trajectory_Generation+0x46c>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	da00      	bge.n	80016ae <Trajectory_Generation+0x442>
}
 80016ac:	e007      	b.n	80016be <Trajectory_Generation+0x452>
			Velocity_Want_RPM = 0;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <Trajectory_Generation+0x474>)
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
			Trajectory_Flag = 4;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <Trajectory_Generation+0x478>)
 80016b8:	2204      	movs	r2, #4
 80016ba:	801a      	strh	r2, [r3, #0]
}
 80016bc:	e7ff      	b.n	80016be <Trajectory_Generation+0x452>
 80016be:	bf00      	nop
 80016c0:	3758      	adds	r7, #88	; 0x58
 80016c2:	46bd      	mov	sp, r7
 80016c4:	ecbd 8b02 	vpop	{d8}
 80016c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016cc:	200000c0 	.word	0x200000c0
 80016d0:	200000b8 	.word	0x200000b8
 80016d4:	20000130 	.word	0x20000130
 80016d8:	20000138 	.word	0x20000138
 80016dc:	20000100 	.word	0x20000100
 80016e0:	200000d0 	.word	0x200000d0
 80016e4:	20000144 	.word	0x20000144

080016e8 <Kalman_Filter>:

void Kalman_Filter()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	ed2d 8b02 	vpush	{d8}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
	Q = powf(Sigma_a, 2);
 80016f2:	4bca      	ldr	r3, [pc, #808]	; (8001a1c <Kalman_Filter+0x334>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f003 ff88 	bl	8005614 <powf>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	4bc5      	ldr	r3, [pc, #788]	; (8001a20 <Kalman_Filter+0x338>)
 800170a:	edc3 7a00 	vstr	s15, [r3]
	R = powf(Sigma_w, 2);
 800170e:	4bc5      	ldr	r3, [pc, #788]	; (8001a24 <Kalman_Filter+0x33c>)
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f003 ff7a 	bl	8005614 <powf>
 8001720:	eef0 7a40 	vmov.f32	s15, s0
 8001724:	4bc0      	ldr	r3, [pc, #768]	; (8001a28 <Kalman_Filter+0x340>)
 8001726:	edc3 7a00 	vstr	s15, [r3]

	float Position_Kalman_New = Position_Kalman + (Velocity_Kalman*CON_T);
 800172a:	4bc0      	ldr	r3, [pc, #768]	; (8001a2c <Kalman_Filter+0x344>)
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8001a30 <Kalman_Filter+0x348>
 8001734:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001738:	4bbe      	ldr	r3, [pc, #760]	; (8001a34 <Kalman_Filter+0x34c>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001742:	edc7 7a03 	vstr	s15, [r7, #12]
	float Velocity_Kalman_New = 0 + Velocity_Kalman;
 8001746:	4bb9      	ldr	r3, [pc, #740]	; (8001a2c <Kalman_Filter+0x344>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ed9f 7aba 	vldr	s14, [pc, #744]	; 8001a38 <Kalman_Filter+0x350>
 8001750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001754:	edc7 7a02 	vstr	s15, [r7, #8]
	float ye = Velocity_Read_Encoder - Velocity_Kalman_New;
 8001758:	4bb8      	ldr	r3, [pc, #736]	; (8001a3c <Kalman_Filter+0x354>)
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001766:	edc7 7a01 	vstr	s15, [r7, #4]

	p11 = p11 + (CON_T*p21) + (Q*powf(fabs(CON_T),4))/4 + (powf(fabs(CON_T),2)*(p12 + CON_T*p22))/CON_T;
 800176a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8001a30 <Kalman_Filter+0x348>
 800176e:	4bb4      	ldr	r3, [pc, #720]	; (8001a40 <Kalman_Filter+0x358>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001778:	4bb2      	ldr	r3, [pc, #712]	; (8001a44 <Kalman_Filter+0x35c>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001782:	eddf 7aab 	vldr	s15, [pc, #684]	; 8001a30 <Kalman_Filter+0x348>
 8001786:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	f003 ff41 	bl	8005614 <powf>
 8001792:	eeb0 7a40 	vmov.f32	s14, s0
 8001796:	4ba2      	ldr	r3, [pc, #648]	; (8001a20 <Kalman_Filter+0x338>)
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a8:	ee38 8a27 	vadd.f32	s16, s16, s15
 80017ac:	eddf 7aa0 	vldr	s15, [pc, #640]	; 8001a30 <Kalman_Filter+0x348>
 80017b0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80017b4:	eeb0 0a67 	vmov.f32	s0, s15
 80017b8:	f003 ff2c 	bl	8005614 <powf>
 80017bc:	eef0 6a40 	vmov.f32	s13, s0
 80017c0:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8001a30 <Kalman_Filter+0x348>
 80017c4:	4ba0      	ldr	r3, [pc, #640]	; (8001a48 <Kalman_Filter+0x360>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ce:	4b9f      	ldr	r3, [pc, #636]	; (8001a4c <Kalman_Filter+0x364>)
 80017d0:	edd3 7a00 	vldr	s15, [r3]
 80017d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d8:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80017dc:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001a30 <Kalman_Filter+0x348>
 80017e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017e4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80017e8:	4b96      	ldr	r3, [pc, #600]	; (8001a44 <Kalman_Filter+0x35c>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 + (CON_T*p22) + (Q*CON_T*powf(fabs(CON_T),2))/2;
 80017ee:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8001a30 <Kalman_Filter+0x348>
 80017f2:	4b95      	ldr	r3, [pc, #596]	; (8001a48 <Kalman_Filter+0x360>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017fc:	4b93      	ldr	r3, [pc, #588]	; (8001a4c <Kalman_Filter+0x364>)
 80017fe:	edd3 7a00 	vldr	s15, [r3]
 8001802:	ee37 8a27 	vadd.f32	s16, s14, s15
 8001806:	4b86      	ldr	r3, [pc, #536]	; (8001a20 <Kalman_Filter+0x338>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8001a30 <Kalman_Filter+0x348>
 8001810:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001814:	eddf 7a86 	vldr	s15, [pc, #536]	; 8001a30 <Kalman_Filter+0x348>
 8001818:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800181c:	eeb0 0a67 	vmov.f32	s0, s15
 8001820:	f003 fef8 	bl	8005614 <powf>
 8001824:	eef0 7a40 	vmov.f32	s15, s0
 8001828:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800182c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001834:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <Kalman_Filter+0x364>)
 800183a:	edc3 7a00 	vstr	s15, [r3]
	p21 = (2*CON_T*p21 + Q*powf(fabs(CON_T),4) + 2*p22*powf(fabs(CON_T),2))/(2*CON_T);
 800183e:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8001a30 <Kalman_Filter+0x348>
 8001842:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001846:	4b7e      	ldr	r3, [pc, #504]	; (8001a40 <Kalman_Filter+0x358>)
 8001848:	edd3 7a00 	vldr	s15, [r3]
 800184c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001850:	eddf 7a77 	vldr	s15, [pc, #476]	; 8001a30 <Kalman_Filter+0x348>
 8001854:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f003 feda 	bl	8005614 <powf>
 8001860:	eeb0 7a40 	vmov.f32	s14, s0
 8001864:	4b6e      	ldr	r3, [pc, #440]	; (8001a20 <Kalman_Filter+0x338>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001872:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <Kalman_Filter+0x360>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee77 8aa7 	vadd.f32	s17, s15, s15
 800187c:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8001a30 <Kalman_Filter+0x348>
 8001880:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	f003 fec4 	bl	8005614 <powf>
 800188c:	eef0 7a40 	vmov.f32	s15, s0
 8001890:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8001894:	ee78 6a27 	vadd.f32	s13, s16, s15
 8001898:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001a30 <Kalman_Filter+0x348>
 800189c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a4:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <Kalman_Filter+0x358>)
 80018a6:	edc3 7a00 	vstr	s15, [r3]
	p22 = Q*powf(fabs(CON_T),2) + p22;
 80018aa:	eddf 7a61 	vldr	s15, [pc, #388]	; 8001a30 <Kalman_Filter+0x348>
 80018ae:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80018b2:	eeb0 0a67 	vmov.f32	s0, s15
 80018b6:	f003 fead 	bl	8005614 <powf>
 80018ba:	eeb0 7a40 	vmov.f32	s14, s0
 80018be:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <Kalman_Filter+0x338>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018c8:	4b5f      	ldr	r3, [pc, #380]	; (8001a48 <Kalman_Filter+0x360>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018d2:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <Kalman_Filter+0x360>)
 80018d4:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman_New = Position_Kalman_New + (p12*ye)/(R+p22);
 80018d8:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <Kalman_Filter+0x364>)
 80018da:	ed93 7a00 	vldr	s14, [r3]
 80018de:	edd7 7a01 	vldr	s15, [r7, #4]
 80018e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <Kalman_Filter+0x340>)
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <Kalman_Filter+0x360>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80018fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001902:	edc7 7a03 	vstr	s15, [r7, #12]
	Velocity_Kalman_New = Velocity_Kalman_New + (p22*ye)/(R+p22);
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <Kalman_Filter+0x360>)
 8001908:	ed93 7a00 	vldr	s14, [r3]
 800190c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001910:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001914:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <Kalman_Filter+0x340>)
 8001916:	ed93 7a00 	vldr	s14, [r3]
 800191a:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <Kalman_Filter+0x360>)
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001928:	ed97 7a02 	vldr	s14, [r7, #8]
 800192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001930:	edc7 7a02 	vstr	s15, [r7, #8]

	p11 = p11 - (p12*p21)/(R+p22);
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <Kalman_Filter+0x35c>)
 8001936:	ed93 7a00 	vldr	s14, [r3]
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <Kalman_Filter+0x364>)
 800193c:	edd3 6a00 	vldr	s13, [r3]
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <Kalman_Filter+0x358>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <Kalman_Filter+0x340>)
 800194c:	edd3 6a00 	vldr	s13, [r3]
 8001950:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <Kalman_Filter+0x360>)
 8001952:	edd3 7a00 	vldr	s15, [r3]
 8001956:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800195a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800195e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <Kalman_Filter+0x35c>)
 8001964:	edc3 7a00 	vstr	s15, [r3]
	p12 = p12 - (p12*p22)/(R+p22);
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <Kalman_Filter+0x364>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <Kalman_Filter+0x364>)
 8001970:	edd3 6a00 	vldr	s13, [r3]
 8001974:	4b34      	ldr	r3, [pc, #208]	; (8001a48 <Kalman_Filter+0x360>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <Kalman_Filter+0x340>)
 8001980:	edd3 6a00 	vldr	s13, [r3]
 8001984:	4b30      	ldr	r3, [pc, #192]	; (8001a48 <Kalman_Filter+0x360>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800198e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <Kalman_Filter+0x364>)
 8001998:	edc3 7a00 	vstr	s15, [r3]
	p21 = -p21*(p22/(R+22)-1);
 800199c:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <Kalman_Filter+0x358>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	eeb1 7a67 	vneg.f32	s14, s15
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <Kalman_Filter+0x360>)
 80019a8:	ed93 6a00 	vldr	s12, [r3]
 80019ac:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <Kalman_Filter+0x340>)
 80019ae:	edd3 7a00 	vldr	s15, [r3]
 80019b2:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 80019b6:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80019ba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <Kalman_Filter+0x358>)
 80019cc:	edc3 7a00 	vstr	s15, [r3]
	p22 = -p22*(p22/(R+22)-1);
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <Kalman_Filter+0x360>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eeb1 7a67 	vneg.f32	s14, s15
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <Kalman_Filter+0x360>)
 80019dc:	ed93 6a00 	vldr	s12, [r3]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <Kalman_Filter+0x340>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	eef3 6a06 	vmov.f32	s13, #54	; 0x41b00000  22.0
 80019ea:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80019ee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80019f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <Kalman_Filter+0x360>)
 8001a00:	edc3 7a00 	vstr	s15, [r3]

	Position_Kalman = Position_Kalman_New;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <Kalman_Filter+0x34c>)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6013      	str	r3, [r2, #0]
	Velocity_Kalman = Velocity_Kalman_New;
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <Kalman_Filter+0x344>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	6013      	str	r3, [r2, #0]

}
 8001a10:	bf00      	nop
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	ecbd 8b02 	vpop	{d8}
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000148 	.word	0x20000148
 8001a24:	20000010 	.word	0x20000010
 8001a28:	2000014c 	.word	0x2000014c
 8001a2c:	20000154 	.word	0x20000154
 8001a30:	3a83126f 	.word	0x3a83126f
 8001a34:	20000150 	.word	0x20000150
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	200000c8 	.word	0x200000c8
 8001a40:	20000160 	.word	0x20000160
 8001a44:	20000158 	.word	0x20000158
 8001a48:	20000164 	.word	0x20000164
 8001a4c:	2000015c 	.word	0x2000015c

08001a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b5b0      	push	{r4, r5, r7, lr}
 8001a52:	ed2d 8b02 	vpush	{d8}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)  //Timer overflow
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a55      	ldr	r2, [pc, #340]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d10a      	bne.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		_micros += 4294967295;
 8001a64:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6a:	f112 34ff 	adds.w	r4, r2, #4294967295
 8001a6e:	f143 0500 	adc.w	r5, r3, #0
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001a74:	e9c3 4500 	strd	r4, r5, [r3]
			Motor_Drive_PWM();			//Drive

		}
		Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
	}
}
 8001a78:	e096      	b.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x158>
	else if (htim == &htim4)  //Control Loop
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4f      	ldr	r2, [pc, #316]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	f040 8092 	bne.w	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x158>
		Velocity_Read_Encoder = (Velocity_Read_Encoder*9999 + Encoder_Velocity_Update())/(float)10000;
 8001a84:	4b4e      	ldr	r3, [pc, #312]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001bc4 <HAL_TIM_PeriodElapsedCallback+0x174>
 8001a8e:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001a92:	f7ff f95f 	bl	8000d54 <Encoder_Velocity_Update>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001a9e:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x178>
 8001aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa6:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
		Kalman_Filter();
 8001aac:	f7ff fe1c 	bl	80016e8 <Kalman_Filter>
		Position_Now_Rad = Position_Kalman;
 8001ab0:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001ab6:	6013      	str	r3, [r2, #0]
		Velocity_Now_Rad = Velocity_Kalman;
 8001ab8:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001abe:	6013      	str	r3, [r2, #0]
		if ((Distance_Calculated == 0 ) && (Position_Now_Degree != Position_Want_Degree)  && (GO == 0)) //Distance not calculated and not arrive at next station
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d111      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001ac8:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	4b45      	ldr	r3, [pc, #276]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d006      	beq.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x9c>
			Distance_Calculation();		//Calculate distance
 8001ae6:	f7ff fa8b 	bl	8001000 <Distance_Calculation>
 8001aea:	e031      	b.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
		else if ((Distance_Calculated == 1) && (Position_Now_Degree != Position_Want_Degree) && (Trajectory_Flag < 5) && (GO == 1)) //Distance calculated and not arrive at next station
 8001aec:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d12d      	bne.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
 8001af4:	4b3a      	ldr	r3, [pc, #232]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001af6:	ed93 7a00 	vldr	s14, [r3]
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b08:	d022      	beq.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d81e      	bhi.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
 8001b12:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d11a      	bne.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
			Trajectory_Generation();	//Get Velocity_Want_RPM
 8001b1a:	f7ff fba7 	bl	800126c <Trajectory_Generation>
			Velocity_Control();
 8001b1e:	f7ff f9bb 	bl	8000e98 <Velocity_Control>
			Motor_Drive_PWM();			//Drive
 8001b22:	f7ff f973 	bl	8000e0c <Motor_Drive_PWM>
			if(Trajectory_Flag == 4)
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b28:	881b      	ldrh	r3, [r3, #0]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d110      	bne.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
				if(Distance_Length == 0)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d103      	bne.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0xee>
					Trajectory_Flag = 5;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b38:	2205      	movs	r2, #5
 8001b3a:	801a      	strh	r2, [r3, #0]
 8001b3c:	e008      	b.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
				else if (Distance_Length == 1)
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d104      	bne.n	8001b50 <HAL_TIM_PeriodElapsedCallback+0x100>
					Distance_Calculation();
 8001b46:	f7ff fa5b 	bl	8001000 <Distance_Calculation>
					Trajectory_Flag = 0;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]
		if (Trajectory_Flag == 5)		//Reach next station
 8001b50:	4b26      	ldr	r3, [pc, #152]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d123      	bne.n	8001ba0 <HAL_TIM_PeriodElapsedCallback+0x150>
			if (Position_Prev_Degree != Position_Want_Degree)	//Change goal
 8001b58:	4b26      	ldr	r3, [pc, #152]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001b5a:	ed93 7a00 	vldr	s14, [r3]
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001b60:	edd3 7a00 	vldr	s15, [r3]
 8001b64:	eeb4 7a67 	vcmp.f32	s14, s15
 8001b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6c:	d010      	beq.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x140>
				Trajectory_Flag = 0;	//Reset flag
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	801a      	strh	r2, [r3, #0]
				Distance_Calculated = 0;//Reset distance
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	801a      	strh	r2, [r3, #0]
				Velocity_Want_RPM = 0;  //Reset Velocity_Want_RPM
 8001b7a:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
				Velocity_Error_Sum = 0;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
				GO = 0;
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]
			Velocity_Want_RPM = 0;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
			Velocity_Control();
 8001b98:	f7ff f97e 	bl	8000e98 <Velocity_Control>
			Motor_Drive_PWM();			//Drive
 8001b9c:	f7ff f936 	bl	8000e0c <Motor_Drive_PWM>
		Position_Prev_Degree = Position_Want_Degree; //Check that Position_Want_Degree change or not
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a13      	ldr	r2, [pc, #76]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001ba6:	6013      	str	r3, [r2, #0]
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	ecbd 8b02 	vpop	{d8}
 8001bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb4:	20000320 	.word	0x20000320
 8001bb8:	200000b0 	.word	0x200000b0
 8001bbc:	200001f4 	.word	0x200001f4
 8001bc0:	200000c8 	.word	0x200000c8
 8001bc4:	461c3c00 	.word	0x461c3c00
 8001bc8:	461c4000 	.word	0x461c4000
 8001bcc:	20000150 	.word	0x20000150
 8001bd0:	2000011c 	.word	0x2000011c
 8001bd4:	20000154 	.word	0x20000154
 8001bd8:	200000f8 	.word	0x200000f8
 8001bdc:	200000c2 	.word	0x200000c2
 8001be0:	200000ec 	.word	0x200000ec
 8001be4:	200000f0 	.word	0x200000f0
 8001be8:	200000c4 	.word	0x200000c4
 8001bec:	20000144 	.word	0x20000144
 8001bf0:	200000c0 	.word	0x200000c0
 8001bf4:	200000f4 	.word	0x200000f4
 8001bf8:	200000d0 	.word	0x200000d0
 8001bfc:	200000dc 	.word	0x200000dc

08001c00 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	//sprintf(TxDataBuffer, "Received:[%s]\r\n", RxDataBuffer);
	//HAL_UART_Transmit(&huart2, (uint8_t*)TxDataBuffer, strlen(TxDataBuffer), 1000);
	HAL_UART_Transmit(&huart2, &Acknowledge_1, 2, 1000);
 8001c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4904      	ldr	r1, [pc, #16]	; (8001c20 <HAL_UART_RxCpltCallback+0x20>)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <HAL_UART_RxCpltCallback+0x24>)
 8001c12:	f003 f880 	bl	8004d16 <HAL_UART_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000014 	.word	0x20000014
 8001c24:	20000368 	.word	0x20000368

08001c28 <micros>:
		dataPos= (dataPos+1)%huart2.RxXferSize;
	}
	return data;
}
uint64_t micros()
{
 8001c28:	b4b0      	push	{r4, r5, r7}
 8001c2a:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <micros+0x2c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	4618      	mov	r0, r3
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <micros+0x30>)
 8001c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3e:	1884      	adds	r4, r0, r2
 8001c40:	eb41 0503 	adc.w	r5, r1, r3
 8001c44:	4622      	mov	r2, r4
 8001c46:	462b      	mov	r3, r5
}
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bcb0      	pop	{r4, r5, r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000320 	.word	0x20000320
 8001c58:	200000b0 	.word	0x200000b0

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <Error_Handler+0x8>
	...

08001c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a0f      	ldr	r2, [pc, #60]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ca6:	2007      	movs	r0, #7
 8001ca8:	f000 fb72 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_I2C_MspInit+0x84>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12c      	bne.n	8001d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cf6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfc:	2312      	movs	r3, #18
 8001cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d08:	2304      	movs	r3, #4
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <HAL_I2C_MspInit+0x8c>)
 8001d14:	f000 feee 	bl	8002af4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d26:	6413      	str	r3, [r2, #64]	; 0x40
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <HAL_I2C_MspInit+0x88>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400

08001d48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_TIM_Encoder_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12c      	bne.n	8001dc4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_TIM_Encoder_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_B_Pin|Encoder_A_Pin;
 8001da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001dc0:	f000 fe98 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d116      	bne.n	8001e18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a23      	ldr	r2, [pc, #140]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	201c      	movs	r0, #28
 8001e0c:	f000 facb 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e10:	201c      	movs	r0, #28
 8001e12:	f000 fae4 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001e16:	e02e      	b.n	8001e76 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_TIM_Base_MspInit+0xac>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
}
 8001e3e:	e01a      	b.n	8001e76 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_TIM_Base_MspInit+0xb0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d115      	bne.n	8001e76 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <HAL_TIM_Base_MspInit+0xa8>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	201e      	movs	r0, #30
 8001e6c:	f000 fa9b 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e70:	201e      	movs	r0, #30
 8001e72:	f000 fab4 	bl	80023de <HAL_NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800

08001e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <HAL_TIM_MspPostInit+0x68>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d11d      	bne.n	8001eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_TIM_MspPostInit+0x6c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <HAL_TIM_MspPostInit+0x6c>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_TIM_MspPostInit+0x6c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4805      	ldr	r0, [pc, #20]	; (8001efc <HAL_TIM_MspPostInit+0x70>)
 8001ee6:	f000 fe05 	bl	8002af4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a30      	ldr	r2, [pc, #192]	; (8001fe0 <HAL_UART_MspInit+0xe0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d159      	bne.n	8001fd6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a2e      	ldr	r2, [pc, #184]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b25      	ldr	r3, [pc, #148]	; (8001fe4 <HAL_UART_MspInit+0xe4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	481c      	ldr	r0, [pc, #112]	; (8001fe8 <HAL_UART_MspInit+0xe8>)
 8001f76:	f000 fdbd 	bl	8002af4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_UART_MspInit+0xf0>)
 8001f7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f86:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001fba:	480c      	ldr	r0, [pc, #48]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fbc:	f000 fa2a 	bl	8002414 <HAL_DMA_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001fc6:	f7ff fe49 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_UART_MspInit+0xec>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3728      	adds	r7, #40	; 0x28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40004400 	.word	0x40004400
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	20000194 	.word	0x20000194
 8001ff0:	40026088 	.word	0x40026088

08001ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <NMI_Handler+0x4>

08001ffa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <MemManage_Handler+0x4>

08002006 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <UsageFault_Handler+0x4>

08002012 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002040:	f000 f8b6 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <DMA1_Stream5_IRQHandler+0x10>)
 800204e:	f000 fae7 	bl	8002620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000194 	.word	0x20000194

0800205c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM2_IRQHandler+0x10>)
 8002062:	f002 f80b 	bl	800407c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000320 	.word	0x20000320

08002070 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <TIM4_IRQHandler+0x10>)
 8002076:	f002 f801 	bl	800407c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200001f4 	.word	0x200001f4

08002084 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002088:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800208c:	f000 fed0 	bl	8002e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	bd80      	pop	{r7, pc}

08002094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020bc:	480d      	ldr	r0, [pc, #52]	; (80020f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020be:	490e      	ldr	r1, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0b      	ldr	r2, [pc, #44]	; (8002100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d4:	4c0b      	ldr	r4, [pc, #44]	; (8002104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020e2:	f7ff ffd7 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e6:	f003 fa69 	bl	80055bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7fe faff 	bl	80006ec <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80020fc:	08005f54 	.word	0x08005f54
  ldr r2, =_sbss
 8002100:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002104:	200003b0 	.word	0x200003b0

08002108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_Init+0x40>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800211a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <HAL_Init+0x40>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	; (800214c <HAL_Init+0x40>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f92b 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fd92 	bl	8001c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f943 	bl	80023fa <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 f90b 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000018 	.word	0x20000018
 80021a8:	20000020 	.word	0x20000020
 80021ac:	2000001c 	.word	0x2000001c

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000020 	.word	0x20000020
 80021d4:	200003ac 	.word	0x200003ac

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	200003ac 	.word	0x200003ac

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	; (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002420:	f7ff feda 	bl	80021d8 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e099      	b.n	8002564 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0201 	bic.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002450:	e00f      	b.n	8002472 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002452:	f7ff fec1 	bl	80021d8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b05      	cmp	r3, #5
 800245e:	d908      	bls.n	8002472 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2220      	movs	r2, #32
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2203      	movs	r2, #3
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e078      	b.n	8002564 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e8      	bne.n	8002452 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_DMA_Init+0x158>)
 800248c:	4013      	ands	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d107      	bne.n	80024dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	4313      	orrs	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f023 0307 	bic.w	r3, r3, #7
 80024f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	2b04      	cmp	r3, #4
 8002504:	d117      	bne.n	8002536 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00e      	beq.n	8002536 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fa6f 	bl	80029fc <DMA_CheckFifoParam>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2240      	movs	r2, #64	; 0x40
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002532:	2301      	movs	r3, #1
 8002534:	e016      	b.n	8002564 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa26 	bl	8002990 <DMA_CalcBaseAndBitshift>
 8002544:	4603      	mov	r3, r0
 8002546:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	223f      	movs	r2, #63	; 0x3f
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	f010803f 	.word	0xf010803f

08002570 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_DMA_Start_IT+0x26>
 8002592:	2302      	movs	r3, #2
 8002594:	e040      	b.n	8002618 <HAL_DMA_Start_IT+0xa8>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d12f      	bne.n	800260a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f9b8 	bl	8002934 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	223f      	movs	r2, #63	; 0x3f
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0216 	orr.w	r2, r2, #22
 80025de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d007      	beq.n	80025f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0208 	orr.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e005      	b.n	8002616 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002612:	2302      	movs	r3, #2
 8002614:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002616:	7dfb      	ldrb	r3, [r7, #23]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800262c:	4b92      	ldr	r3, [pc, #584]	; (8002878 <HAL_DMA_IRQHandler+0x258>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a92      	ldr	r2, [pc, #584]	; (800287c <HAL_DMA_IRQHandler+0x25c>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	0a9b      	lsrs	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2208      	movs	r2, #8
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f022 0204 	bic.w	r2, r2, #4
 8002672:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	2208      	movs	r2, #8
 800267a:	409a      	lsls	r2, r3
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f043 0201 	orr.w	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4013      	ands	r3, r2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d012      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c6:	2204      	movs	r2, #4
 80026c8:	409a      	lsls	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d012      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2204      	movs	r2, #4
 80026e6:	409a      	lsls	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fc:	2210      	movs	r2, #16
 80026fe:	409a      	lsls	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4013      	ands	r3, r2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d043      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0308 	and.w	r3, r3, #8
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03c      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2210      	movs	r2, #16
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d018      	beq.n	8002762 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d108      	bne.n	8002750 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	4798      	blx	r3
 800274e:	e01f      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01b      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
 8002760:	e016      	b.n	8002790 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d107      	bne.n	8002780 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0208 	bic.w	r2, r2, #8
 800277e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2220      	movs	r2, #32
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 808e 	beq.w	80028be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8086 	beq.w	80028be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	2220      	movs	r2, #32
 80027b8:	409a      	lsls	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d136      	bne.n	8002838 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0216 	bic.w	r2, r2, #22
 80027d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_DMA_IRQHandler+0x1da>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d007      	beq.n	800280a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0208 	bic.w	r2, r2, #8
 8002808:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280e:	223f      	movs	r2, #63	; 0x3f
 8002810:	409a      	lsls	r2, r3
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07d      	beq.n	800292a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	4798      	blx	r3
        }
        return;
 8002836:	e078      	b.n	800292a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d01c      	beq.n	8002880 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d108      	bne.n	8002866 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	2b00      	cmp	r3, #0
 800285a:	d030      	beq.n	80028be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e02b      	b.n	80028be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d027      	beq.n	80028be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
 8002876:	e022      	b.n	80028be <HAL_DMA_IRQHandler+0x29e>
 8002878:	20000018 	.word	0x20000018
 800287c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10f      	bne.n	80028ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0210 	bic.w	r2, r2, #16
 800289c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d032      	beq.n	800292c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d022      	beq.n	8002918 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2205      	movs	r2, #5
 80028d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0201 	bic.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	3301      	adds	r3, #1
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d307      	bcc.n	8002906 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f2      	bne.n	80028ea <HAL_DMA_IRQHandler+0x2ca>
 8002904:	e000      	b.n	8002908 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002906:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
 8002928:	e000      	b.n	800292c <HAL_DMA_IRQHandler+0x30c>
        return;
 800292a:	bf00      	nop
    }
  }
}
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop

08002934 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002950:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b40      	cmp	r3, #64	; 0x40
 8002960:	d108      	bne.n	8002974 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002972:	e007      	b.n	8002984 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	60da      	str	r2, [r3, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b10      	subs	r3, #16
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <DMA_CalcBaseAndBitshift+0x64>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	091b      	lsrs	r3, r3, #4
 80029a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <DMA_CalcBaseAndBitshift+0x68>)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d909      	bls.n	80029d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029c6:	f023 0303 	bic.w	r3, r3, #3
 80029ca:	1d1a      	adds	r2, r3, #4
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	659a      	str	r2, [r3, #88]	; 0x58
 80029d0:	e007      	b.n	80029e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	aaaaaaab 	.word	0xaaaaaaab
 80029f8:	08005f18 	.word	0x08005f18

080029fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d11f      	bne.n	8002a56 <DMA_CheckFifoParam+0x5a>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d856      	bhi.n	8002aca <DMA_CheckFifoParam+0xce>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <DMA_CheckFifoParam+0x28>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a47 	.word	0x08002a47
 8002a2c:	08002a35 	.word	0x08002a35
 8002a30:	08002acb 	.word	0x08002acb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d046      	beq.n	8002ace <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a44:	e043      	b.n	8002ace <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a4e:	d140      	bne.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e03d      	b.n	8002ad2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a5e:	d121      	bne.n	8002aa4 <DMA_CheckFifoParam+0xa8>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d837      	bhi.n	8002ad6 <DMA_CheckFifoParam+0xda>
 8002a66:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <DMA_CheckFifoParam+0x70>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002a7d 	.word	0x08002a7d
 8002a70:	08002a83 	.word	0x08002a83
 8002a74:	08002a7d 	.word	0x08002a7d
 8002a78:	08002a95 	.word	0x08002a95
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a80:	e030      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d025      	beq.n	8002ada <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a92:	e022      	b.n	8002ada <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002aa2:	e01c      	b.n	8002ade <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d903      	bls.n	8002ab2 <DMA_CheckFifoParam+0xb6>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d003      	beq.n	8002ab8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ab0:	e018      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab6:	e015      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00e      	beq.n	8002ae2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac8:	e00b      	b.n	8002ae2 <DMA_CheckFifoParam+0xe6>
      break;
 8002aca:	bf00      	nop
 8002acc:	e00a      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e008      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e006      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop

08002af4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e159      	b.n	8002dc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	4013      	ands	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f040 8148 	bne.w	8002dbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d005      	beq.n	8002b46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d130      	bne.n	8002ba8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	2203      	movs	r2, #3
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	69b9      	ldr	r1, [r7, #24]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a2 	beq.w	8002dbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c82:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c88:	6453      	str	r3, [r2, #68]	; 0x44
 8002c8a:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <HAL_GPIO_Init+0x2e8>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c96:	4a52      	ldr	r2, [pc, #328]	; (8002de0 <HAL_GPIO_Init+0x2ec>)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	089b      	lsrs	r3, r3, #2
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	220f      	movs	r2, #15
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a49      	ldr	r2, [pc, #292]	; (8002de4 <HAL_GPIO_Init+0x2f0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d019      	beq.n	8002cf6 <HAL_GPIO_Init+0x202>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_GPIO_Init+0x2f4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d013      	beq.n	8002cf2 <HAL_GPIO_Init+0x1fe>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a47      	ldr	r2, [pc, #284]	; (8002dec <HAL_GPIO_Init+0x2f8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00d      	beq.n	8002cee <HAL_GPIO_Init+0x1fa>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a46      	ldr	r2, [pc, #280]	; (8002df0 <HAL_GPIO_Init+0x2fc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d007      	beq.n	8002cea <HAL_GPIO_Init+0x1f6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a45      	ldr	r2, [pc, #276]	; (8002df4 <HAL_GPIO_Init+0x300>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d101      	bne.n	8002ce6 <HAL_GPIO_Init+0x1f2>
 8002ce2:	2304      	movs	r3, #4
 8002ce4:	e008      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002ce6:	2307      	movs	r3, #7
 8002ce8:	e006      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cea:	2303      	movs	r3, #3
 8002cec:	e004      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e002      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_GPIO_Init+0x204>
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	f002 0203 	and.w	r2, r2, #3
 8002cfe:	0092      	lsls	r2, r2, #2
 8002d00:	4093      	lsls	r3, r2
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d08:	4935      	ldr	r1, [pc, #212]	; (8002de0 <HAL_GPIO_Init+0x2ec>)
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	089b      	lsrs	r3, r3, #2
 8002d0e:	3302      	adds	r3, #2
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d16:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3a:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d64:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a0f      	ldr	r2, [pc, #60]	; (8002df8 <HAL_GPIO_Init+0x304>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	2b0f      	cmp	r3, #15
 8002dc8:	f67f aea2 	bls.w	8002b10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3724      	adds	r7, #36	; 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e0c:	787b      	ldrb	r3, [r7, #1]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e12:	887a      	ldrh	r2, [r7, #2]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e18:	e003      	b.n	8002e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	041a      	lsls	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	619a      	str	r2, [r3, #24]
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e3a:	4b08      	ldr	r3, [pc, #32]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f806 	bl	8002e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40013c00 	.word	0x40013c00

08002e60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e12b      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d106      	bne.n	8002ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe ff0a 	bl	8001cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	; 0x24
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002edc:	f000 fd5c 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 8002ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4a81      	ldr	r2, [pc, #516]	; (80030ec <HAL_I2C_Init+0x274>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d807      	bhi.n	8002efc <HAL_I2C_Init+0x84>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a80      	ldr	r2, [pc, #512]	; (80030f0 <HAL_I2C_Init+0x278>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	bf94      	ite	ls
 8002ef4:	2301      	movls	r3, #1
 8002ef6:	2300      	movhi	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e006      	b.n	8002f0a <HAL_I2C_Init+0x92>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4a7d      	ldr	r2, [pc, #500]	; (80030f4 <HAL_I2C_Init+0x27c>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bf94      	ite	ls
 8002f04:	2301      	movls	r3, #1
 8002f06:	2300      	movhi	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0e7      	b.n	80030e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a78      	ldr	r2, [pc, #480]	; (80030f8 <HAL_I2C_Init+0x280>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9b      	lsrs	r3, r3, #18
 8002f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a6a      	ldr	r2, [pc, #424]	; (80030ec <HAL_I2C_Init+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d802      	bhi.n	8002f4c <HAL_I2C_Init+0xd4>
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	e009      	b.n	8002f60 <HAL_I2C_Init+0xe8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f52:	fb02 f303 	mul.w	r3, r2, r3
 8002f56:	4a69      	ldr	r2, [pc, #420]	; (80030fc <HAL_I2C_Init+0x284>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	3301      	adds	r3, #1
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	495c      	ldr	r1, [pc, #368]	; (80030ec <HAL_I2C_Init+0x274>)
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	d819      	bhi.n	8002fb4 <HAL_I2C_Init+0x13c>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1e59      	subs	r1, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f8e:	1c59      	adds	r1, r3, #1
 8002f90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f94:	400b      	ands	r3, r1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_I2C_Init+0x138>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1e59      	subs	r1, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fae:	e051      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	e04f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d111      	bne.n	8002fe0 <HAL_I2C_Init+0x168>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e58      	subs	r0, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	440b      	add	r3, r1
 8002fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	e012      	b.n	8003006 <HAL_I2C_Init+0x18e>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1e58      	subs	r0, r3, #1
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6859      	ldr	r1, [r3, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	0099      	lsls	r1, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Init+0x196>
 800300a:	2301      	movs	r3, #1
 800300c:	e022      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10e      	bne.n	8003034 <HAL_I2C_Init+0x1bc>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1e58      	subs	r0, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	460b      	mov	r3, r1
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	440b      	add	r3, r1
 8003024:	fbb0 f3f3 	udiv	r3, r0, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	e00f      	b.n	8003054 <HAL_I2C_Init+0x1dc>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	0099      	lsls	r1, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	fbb0 f3f3 	udiv	r3, r0, r3
 800304a:	3301      	adds	r3, #1
 800304c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	6809      	ldr	r1, [r1, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	430a      	orrs	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6911      	ldr	r1, [r2, #16]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68d2      	ldr	r2, [r2, #12]
 800308e:	4311      	orrs	r1, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	430b      	orrs	r3, r1
 8003096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	000186a0 	.word	0x000186a0
 80030f0:	001e847f 	.word	0x001e847f
 80030f4:	003d08ff 	.word	0x003d08ff
 80030f8:	431bde83 	.word	0x431bde83
 80030fc:	10624dd3 	.word	0x10624dd3

08003100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e264      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d075      	beq.n	800320a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800311e:	4ba3      	ldr	r3, [pc, #652]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	2b04      	cmp	r3, #4
 8003128:	d00c      	beq.n	8003144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4ba0      	ldr	r3, [pc, #640]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003132:	2b08      	cmp	r3, #8
 8003134:	d112      	bne.n	800315c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4b9d      	ldr	r3, [pc, #628]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003142:	d10b      	bne.n	800315c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	4b99      	ldr	r3, [pc, #612]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05b      	beq.n	8003208 <HAL_RCC_OscConfig+0x108>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d157      	bne.n	8003208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e23f      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d106      	bne.n	8003174 <HAL_RCC_OscConfig+0x74>
 8003166:	4b91      	ldr	r3, [pc, #580]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a90      	ldr	r2, [pc, #576]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xb0>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0x98>
 800317e:	4b8b      	ldr	r3, [pc, #556]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a8a      	ldr	r2, [pc, #552]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b88      	ldr	r3, [pc, #544]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a87      	ldr	r2, [pc, #540]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xb0>
 8003198:	4b84      	ldr	r3, [pc, #528]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a83      	ldr	r2, [pc, #524]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b81      	ldr	r3, [pc, #516]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a80      	ldr	r2, [pc, #512]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7ff f80e 	bl	80021d8 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7ff f80a 	bl	80021d8 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e204      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b76      	ldr	r3, [pc, #472]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xc0>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fffa 	bl	80021d8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fff6 	bl	80021d8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1f0      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0xe8>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d063      	beq.n	80032de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003216:	4b65      	ldr	r3, [pc, #404]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003222:	4b62      	ldr	r3, [pc, #392]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800322a:	2b08      	cmp	r3, #8
 800322c:	d11c      	bne.n	8003268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d116      	bne.n	8003268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323a:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_RCC_OscConfig+0x152>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d001      	beq.n	8003252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e1c4      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003252:	4b56      	ldr	r3, [pc, #344]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4952      	ldr	r1, [pc, #328]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	e03a      	b.n	80032de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003270:	4b4f      	ldr	r3, [pc, #316]	; (80033b0 <HAL_RCC_OscConfig+0x2b0>)
 8003272:	2201      	movs	r2, #1
 8003274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe ffaf 	bl	80021d8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe ffab 	bl	80021d8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1a5      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003290:	4b46      	ldr	r3, [pc, #280]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4940      	ldr	r1, [pc, #256]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <HAL_RCC_OscConfig+0x2b0>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe ff8e 	bl	80021d8 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032c0:	f7fe ff8a 	bl	80021d8 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e184      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d2:	4b36      	ldr	r3, [pc, #216]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d030      	beq.n	800334c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f2:	4b30      	ldr	r3, [pc, #192]	; (80033b4 <HAL_RCC_OscConfig+0x2b4>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032f8:	f7fe ff6e 	bl	80021d8 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003300:	f7fe ff6a 	bl	80021d8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e164      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003312:	4b26      	ldr	r3, [pc, #152]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d0f0      	beq.n	8003300 <HAL_RCC_OscConfig+0x200>
 800331e:	e015      	b.n	800334c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003320:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCC_OscConfig+0x2b4>)
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003326:	f7fe ff57 	bl	80021d8 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332e:	f7fe ff53 	bl	80021d8 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e14d      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a0 	beq.w	800349a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335a:	2300      	movs	r3, #0
 800335c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10f      	bne.n	800338a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	60bb      	str	r3, [r7, #8]
 800336e:	4b0f      	ldr	r3, [pc, #60]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	4a0e      	ldr	r2, [pc, #56]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 8003374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003378:	6413      	str	r3, [r2, #64]	; 0x40
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <HAL_RCC_OscConfig+0x2ac>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003386:	2301      	movs	r3, #1
 8003388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCC_OscConfig+0x2b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d121      	bne.n	80033da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <HAL_RCC_OscConfig+0x2b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <HAL_RCC_OscConfig+0x2b8>)
 800339c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a2:	f7fe ff19 	bl	80021d8 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e011      	b.n	80033ce <HAL_RCC_OscConfig+0x2ce>
 80033aa:	bf00      	nop
 80033ac:	40023800 	.word	0x40023800
 80033b0:	42470000 	.word	0x42470000
 80033b4:	42470e80 	.word	0x42470e80
 80033b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033bc:	f7fe ff0c 	bl	80021d8 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e106      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b85      	ldr	r3, [pc, #532]	; (80035e4 <HAL_RCC_OscConfig+0x4e4>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x2f0>
 80033e2:	4b81      	ldr	r3, [pc, #516]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a80      	ldr	r2, [pc, #512]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
 80033ee:	e01c      	b.n	800342a <HAL_RCC_OscConfig+0x32a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d10c      	bne.n	8003412 <HAL_RCC_OscConfig+0x312>
 80033f8:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fc:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80033fe:	f043 0304 	orr.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	; 0x70
 8003404:	4b78      	ldr	r3, [pc, #480]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6713      	str	r3, [r2, #112]	; 0x70
 8003410:	e00b      	b.n	800342a <HAL_RCC_OscConfig+0x32a>
 8003412:	4b75      	ldr	r3, [pc, #468]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4a74      	ldr	r2, [pc, #464]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6713      	str	r3, [r2, #112]	; 0x70
 800341e:	4b72      	ldr	r3, [pc, #456]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a71      	ldr	r2, [pc, #452]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d015      	beq.n	800345e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe fed1 	bl	80021d8 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fecd 	bl	80021d8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	f241 3288 	movw	r2, #5000	; 0x1388
 8003448:	4293      	cmp	r3, r2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0c5      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003450:	4b65      	ldr	r3, [pc, #404]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0ee      	beq.n	800343a <HAL_RCC_OscConfig+0x33a>
 800345c:	e014      	b.n	8003488 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345e:	f7fe febb 	bl	80021d8 <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe feb7 	bl	80021d8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	; 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0af      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800347c:	4b5a      	ldr	r3, [pc, #360]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1ee      	bne.n	8003466 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003488:	7dfb      	ldrb	r3, [r7, #23]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	4a55      	ldr	r2, [pc, #340]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003498:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 809b 	beq.w	80035da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d05c      	beq.n	800356a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d141      	bne.n	800353c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b8:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <HAL_RCC_OscConfig+0x4ec>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fe fe8b 	bl	80021d8 <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fe fe87 	bl	80021d8 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e081      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d8:	4b43      	ldr	r3, [pc, #268]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	019b      	lsls	r3, r3, #6
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	085b      	lsrs	r3, r3, #1
 80034fc:	3b01      	subs	r3, #1
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	061b      	lsls	r3, r3, #24
 8003508:	4937      	ldr	r1, [pc, #220]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x4ec>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe fe60 	bl	80021d8 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe fe5c 	bl	80021d8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e056      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x41c>
 800353a:	e04e      	b.n	80035da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x4ec>)
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003542:	f7fe fe49 	bl	80021d8 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe fe45 	bl	80021d8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e03f      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355c:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x44a>
 8003568:	e037      	b.n	80035da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e032      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <HAL_RCC_OscConfig+0x4e8>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d028      	beq.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d121      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800359c:	429a      	cmp	r2, r3
 800359e:	d11a      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035a6:	4013      	ands	r3, r2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d111      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	3b01      	subs	r3, #1
 80035c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40007000 	.word	0x40007000
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470060 	.word	0x42470060

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0cc      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003604:	4b68      	ldr	r3, [pc, #416]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d90c      	bls.n	800362c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003612:	4b65      	ldr	r3, [pc, #404]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800361a:	4b63      	ldr	r3, [pc, #396]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0b8      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4a58      	ldr	r2, [pc, #352]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800364e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800365c:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003668:	4b50      	ldr	r3, [pc, #320]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	494d      	ldr	r1, [pc, #308]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d044      	beq.n	8003710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d119      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d003      	beq.n	80036ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	2b03      	cmp	r3, #3
 80036ac:	d107      	bne.n	80036be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ae:	4b3f      	ldr	r3, [pc, #252]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d109      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e06f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036be:	4b3b      	ldr	r3, [pc, #236]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e067      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ce:	4b37      	ldr	r3, [pc, #220]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4934      	ldr	r1, [pc, #208]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e0:	f7fe fd7a 	bl	80021d8 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036e8:	f7fe fd76 	bl	80021d8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e04f      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036fe:	4b2b      	ldr	r3, [pc, #172]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 020c 	and.w	r2, r3, #12
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	429a      	cmp	r2, r3
 800370e:	d1eb      	bne.n	80036e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003710:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d20c      	bcs.n	8003738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	b2d2      	uxtb	r2, r2
 8003724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e032      	b.n	800379e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4916      	ldr	r1, [pc, #88]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d009      	beq.n	8003776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003762:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	490e      	ldr	r1, [pc, #56]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003776:	f000 f821 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800377a:	4602      	mov	r2, r0
 800377c:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	490a      	ldr	r1, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003788:	5ccb      	ldrb	r3, [r1, r3]
 800378a:	fa22 f303 	lsr.w	r3, r2, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003792:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fcda 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023c00 	.word	0x40023c00
 80037ac:	40023800 	.word	0x40023800
 80037b0:	08005f00 	.word	0x08005f00
 80037b4:	20000018 	.word	0x20000018
 80037b8:	2000001c 	.word	0x2000001c

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	2300      	movs	r3, #0
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	2300      	movs	r3, #0
 80037ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037d4:	4b67      	ldr	r3, [pc, #412]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d00d      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x40>
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	f200 80bd 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x1a4>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ee:	e0b7      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037f0:	4b61      	ldr	r3, [pc, #388]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037f2:	60bb      	str	r3, [r7, #8]
       break;
 80037f4:	e0b7      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037f6:	4b61      	ldr	r3, [pc, #388]	; (800397c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80037f8:	60bb      	str	r3, [r7, #8]
      break;
 80037fa:	e0b4      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037fc:	4b5d      	ldr	r3, [pc, #372]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003804:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003806:	4b5b      	ldr	r3, [pc, #364]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d04d      	beq.n	80038ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003812:	4b58      	ldr	r3, [pc, #352]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	461a      	mov	r2, r3
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	ea02 0800 	and.w	r8, r2, r0
 800382a:	ea03 0901 	and.w	r9, r3, r1
 800382e:	4640      	mov	r0, r8
 8003830:	4649      	mov	r1, r9
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	014b      	lsls	r3, r1, #5
 800383c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003840:	0142      	lsls	r2, r0, #5
 8003842:	4610      	mov	r0, r2
 8003844:	4619      	mov	r1, r3
 8003846:	ebb0 0008 	subs.w	r0, r0, r8
 800384a:	eb61 0109 	sbc.w	r1, r1, r9
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	018b      	lsls	r3, r1, #6
 8003858:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800385c:	0182      	lsls	r2, r0, #6
 800385e:	1a12      	subs	r2, r2, r0
 8003860:	eb63 0301 	sbc.w	r3, r3, r1
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	00d9      	lsls	r1, r3, #3
 800386e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003872:	00d0      	lsls	r0, r2, #3
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	eb12 0208 	adds.w	r2, r2, r8
 800387c:	eb43 0309 	adc.w	r3, r3, r9
 8003880:	f04f 0000 	mov.w	r0, #0
 8003884:	f04f 0100 	mov.w	r1, #0
 8003888:	0259      	lsls	r1, r3, #9
 800388a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800388e:	0250      	lsls	r0, r2, #9
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	461a      	mov	r2, r3
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	f7fc fda8 	bl	80003f4 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4613      	mov	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e04a      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b31      	ldr	r3, [pc, #196]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	461a      	mov	r2, r3
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80038be:	f04f 0100 	mov.w	r1, #0
 80038c2:	ea02 0400 	and.w	r4, r2, r0
 80038c6:	ea03 0501 	and.w	r5, r3, r1
 80038ca:	4620      	mov	r0, r4
 80038cc:	4629      	mov	r1, r5
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	014b      	lsls	r3, r1, #5
 80038d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80038dc:	0142      	lsls	r2, r0, #5
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	1b00      	subs	r0, r0, r4
 80038e4:	eb61 0105 	sbc.w	r1, r1, r5
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	018b      	lsls	r3, r1, #6
 80038f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80038f6:	0182      	lsls	r2, r0, #6
 80038f8:	1a12      	subs	r2, r2, r0
 80038fa:	eb63 0301 	sbc.w	r3, r3, r1
 80038fe:	f04f 0000 	mov.w	r0, #0
 8003902:	f04f 0100 	mov.w	r1, #0
 8003906:	00d9      	lsls	r1, r3, #3
 8003908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800390c:	00d0      	lsls	r0, r2, #3
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	1912      	adds	r2, r2, r4
 8003914:	eb45 0303 	adc.w	r3, r5, r3
 8003918:	f04f 0000 	mov.w	r0, #0
 800391c:	f04f 0100 	mov.w	r1, #0
 8003920:	0299      	lsls	r1, r3, #10
 8003922:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003926:	0290      	lsls	r0, r2, #10
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4610      	mov	r0, r2
 800392e:	4619      	mov	r1, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	461a      	mov	r2, r3
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	f7fc fd5c 	bl	80003f4 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	60bb      	str	r3, [r7, #8]
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003962:	60bb      	str	r3, [r7, #8]
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	68bb      	ldr	r3, [r7, #8]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	007a1200 	.word	0x007a1200

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_RCC_GetHCLKFreq+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000018 	.word	0x20000018

08003998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800399c:	f7ff fff0 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039a0:	4602      	mov	r2, r0
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	0a9b      	lsrs	r3, r3, #10
 80039a8:	f003 0307 	and.w	r3, r3, #7
 80039ac:	4903      	ldr	r1, [pc, #12]	; (80039bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ae:	5ccb      	ldrb	r3, [r1, r3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40023800 	.word	0x40023800
 80039bc:	08005f10 	.word	0x08005f10

080039c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039c4:	f7ff ffdc 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0b5b      	lsrs	r3, r3, #13
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	08005f10 	.word	0x08005f10

080039e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e041      	b.n	8003a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe f9e2 	bl	8001dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	f000 fdda 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d001      	beq.n	8003aa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e03c      	b.n	8003b1a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIM_Base_Start+0xa0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <HAL_TIM_Base_Start+0x5c>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d013      	beq.n	8003ae4 <HAL_TIM_Base_Start+0x5c>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1a      	ldr	r2, [pc, #104]	; (8003b2c <HAL_TIM_Base_Start+0xa4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <HAL_TIM_Base_Start+0x5c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_TIM_Base_Start+0xa8>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <HAL_TIM_Base_Start+0x5c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a17      	ldr	r2, [pc, #92]	; (8003b34 <HAL_TIM_Base_Start+0xac>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_TIM_Base_Start+0x5c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <HAL_TIM_Base_Start+0xb0>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d111      	bne.n	8003b08 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2b06      	cmp	r3, #6
 8003af4:	d010      	beq.n	8003b18 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b06:	e007      	b.n	8003b18 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40010000 	.word	0x40010000
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40000800 	.word	0x40000800
 8003b34:	40000c00 	.word	0x40000c00
 8003b38:	40014000 	.word	0x40014000

08003b3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d001      	beq.n	8003b54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e044      	b.n	8003bde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <HAL_TIM_Base_Start_IT+0xb0>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d018      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d013      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1a      	ldr	r2, [pc, #104]	; (8003bf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00e      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	; (8003bf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	; (8003bf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d004      	beq.n	8003ba8 <HAL_TIM_Base_Start_IT+0x6c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	; (8003bfc <HAL_TIM_Base_Start_IT+0xc0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b06      	cmp	r3, #6
 8003bb8:	d010      	beq.n	8003bdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bca:	e007      	b.n	8003bdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3714      	adds	r7, #20
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40010000 	.word	0x40010000
 8003bf0:	40000400 	.word	0x40000400
 8003bf4:	40000800 	.word	0x40000800
 8003bf8:	40000c00 	.word	0x40000c00
 8003bfc:	40014000 	.word	0x40014000

08003c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e041      	b.n	8003c96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d106      	bne.n	8003c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f839 	bl	8003c9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	f000 fcce 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_TIM_PWM_Start+0x24>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e022      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d109      	bne.n	8003cf2 <HAL_TIM_PWM_Start+0x3e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	bf14      	ite	ne
 8003cea:	2301      	movne	r3, #1
 8003cec:	2300      	moveq	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	e015      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d109      	bne.n	8003d0c <HAL_TIM_PWM_Start+0x58>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e008      	b.n	8003d1e <HAL_TIM_PWM_Start+0x6a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e068      	b.n	8003df8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d104      	bne.n	8003d36 <HAL_TIM_PWM_Start+0x82>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d34:	e013      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_PWM_Start+0x92>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d44:	e00b      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_PWM_Start+0xa2>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_PWM_Start+0xaa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2201      	movs	r2, #1
 8003d64:	6839      	ldr	r1, [r7, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fee0 	bl	8004b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a23      	ldr	r2, [pc, #140]	; (8003e00 <HAL_TIM_PWM_Start+0x14c>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d107      	bne.n	8003d86 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_TIM_PWM_Start+0x14c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d018      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x10e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d98:	d013      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x10e>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <HAL_TIM_PWM_Start+0x150>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00e      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x10e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a17      	ldr	r2, [pc, #92]	; (8003e08 <HAL_TIM_PWM_Start+0x154>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d009      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x10e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <HAL_TIM_PWM_Start+0x158>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d004      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0x10e>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <HAL_TIM_PWM_Start+0x15c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d111      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d010      	beq.n	8003df6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de4:	e007      	b.n	8003df6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40000800 	.word	0x40000800
 8003e0c:	40000c00 	.word	0x40000c00
 8003e10:	40014000 	.word	0x40014000

08003e14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e097      	b.n	8003f58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f7fd ff83 	bl	8001d48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3304      	adds	r3, #4
 8003e66:	4619      	mov	r1, r3
 8003e68:	4610      	mov	r0, r2
 8003e6a:	f000 fbb9 	bl	80045e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003eb4:	f023 030c 	bic.w	r3, r3, #12
 8003eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	011a      	lsls	r2, r3, #4
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	031b      	lsls	r3, r3, #12
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ef2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003efa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	4313      	orrs	r3, r2
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d110      	bne.n	8003fb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f90:	7bfb      	ldrb	r3, [r7, #15]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d102      	bne.n	8003f9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f96:	7b7b      	ldrb	r3, [r7, #13]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d001      	beq.n	8003fa0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e069      	b.n	8004074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb0:	e031      	b.n	8004016 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d110      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d102      	bne.n	8003fc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fbe:	7b3b      	ldrb	r3, [r7, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e055      	b.n	8004074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fd8:	e01d      	b.n	8004016 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d108      	bne.n	8003ff2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe0:	7bbb      	ldrb	r3, [r7, #14]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d105      	bne.n	8003ff2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fe6:	7b7b      	ldrb	r3, [r7, #13]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d102      	bne.n	8003ff2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fec:	7b3b      	ldrb	r3, [r7, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d001      	beq.n	8003ff6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e03e      	b.n	8004074 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2202      	movs	r2, #2
 800400a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2202      	movs	r2, #2
 8004012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_TIM_Encoder_Start+0xc4>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b04      	cmp	r3, #4
 8004020:	d008      	beq.n	8004034 <HAL_TIM_Encoder_Start+0xd4>
 8004022:	e00f      	b.n	8004044 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	2100      	movs	r1, #0
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fd7d 	bl	8004b2c <TIM_CCxChannelCmd>
      break;
 8004032:	e016      	b.n	8004062 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2201      	movs	r2, #1
 800403a:	2104      	movs	r1, #4
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fd75 	bl	8004b2c <TIM_CCxChannelCmd>
      break;
 8004042:	e00e      	b.n	8004062 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f000 fd6d 	bl	8004b2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2201      	movs	r2, #1
 8004058:	2104      	movs	r1, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fd66 	bl	8004b2c <TIM_CCxChannelCmd>
      break;
 8004060:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d122      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b02      	cmp	r3, #2
 800409e:	d11b      	bne.n	80040d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0202 	mvn.w	r2, #2
 80040a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa70 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa62 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa73 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d122      	bne.n	800412c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d11b      	bne.n	800412c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f06f 0204 	mvn.w	r2, #4
 80040fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2202      	movs	r2, #2
 8004102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa46 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8004118:	e005      	b.n	8004126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fa38 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa49 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f003 0308 	and.w	r3, r3, #8
 8004136:	2b08      	cmp	r3, #8
 8004138:	d122      	bne.n	8004180 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d11b      	bne.n	8004180 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f06f 0208 	mvn.w	r2, #8
 8004150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2204      	movs	r2, #4
 8004156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa1c 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 800416c:	e005      	b.n	800417a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa0e 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fa1f 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b10      	cmp	r3, #16
 800418c:	d122      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b10      	cmp	r3, #16
 800419a:	d11b      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0210 	mvn.w	r2, #16
 80041a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2208      	movs	r2, #8
 80041aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9f2 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9e4 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9f5 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d10e      	bne.n	8004200 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d107      	bne.n	8004200 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0201 	mvn.w	r2, #1
 80041f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fc28 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b80      	cmp	r3, #128	; 0x80
 800420c:	d10e      	bne.n	800422c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d107      	bne.n	800422c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fd1e 	bl	8004c68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b40      	cmp	r3, #64	; 0x40
 8004238:	d10e      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d107      	bne.n	8004258 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9ba 	bl	80045cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b20      	cmp	r3, #32
 8004264:	d10e      	bne.n	8004284 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b20      	cmp	r3, #32
 8004272:	d107      	bne.n	8004284 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f06f 0220 	mvn.w	r2, #32
 800427c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fce8 	bl	8004c54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e0ac      	b.n	8004400 <HAL_TIM_PWM_ConfigChannel+0x174>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	f200 809f 	bhi.w	80043f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 80042b6:	a201      	add	r2, pc, #4	; (adr r2, 80042bc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80042b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	080043f5 	.word	0x080043f5
 80042c4:	080043f5 	.word	0x080043f5
 80042c8:	080043f5 	.word	0x080043f5
 80042cc:	08004331 	.word	0x08004331
 80042d0:	080043f5 	.word	0x080043f5
 80042d4:	080043f5 	.word	0x080043f5
 80042d8:	080043f5 	.word	0x080043f5
 80042dc:	08004373 	.word	0x08004373
 80042e0:	080043f5 	.word	0x080043f5
 80042e4:	080043f5 	.word	0x080043f5
 80042e8:	080043f5 	.word	0x080043f5
 80042ec:	080043b3 	.word	0x080043b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f9f2 	bl	80046e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0208 	orr.w	r2, r2, #8
 800430a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699a      	ldr	r2, [r3, #24]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 0204 	bic.w	r2, r2, #4
 800431a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6999      	ldr	r1, [r3, #24]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	691a      	ldr	r2, [r3, #16]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	619a      	str	r2, [r3, #24]
      break;
 800432e:	e062      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68b9      	ldr	r1, [r7, #8]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fa38 	bl	80047ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699a      	ldr	r2, [r3, #24]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800434a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6999      	ldr	r1, [r3, #24]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	021a      	lsls	r2, r3, #8
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	619a      	str	r2, [r3, #24]
      break;
 8004370:	e041      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68b9      	ldr	r1, [r7, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f000 fa83 	bl	8004884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0208 	orr.w	r2, r2, #8
 800438c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	69da      	ldr	r2, [r3, #28]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0204 	bic.w	r2, r2, #4
 800439c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	69d9      	ldr	r1, [r3, #28]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	61da      	str	r2, [r3, #28]
      break;
 80043b0:	e021      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68b9      	ldr	r1, [r7, #8]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 facd 	bl	8004958 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69da      	ldr	r2, [r3, #28]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69da      	ldr	r2, [r3, #28]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69d9      	ldr	r1, [r3, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	021a      	lsls	r2, r3, #8
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	61da      	str	r2, [r3, #28]
      break;
 80043f2:	e000      	b.n	80043f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80043f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004418:	2b01      	cmp	r3, #1
 800441a:	d101      	bne.n	8004420 <HAL_TIM_ConfigClockSource+0x18>
 800441c:	2302      	movs	r3, #2
 800441e:	e0b3      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x180>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800443e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004446:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004458:	d03e      	beq.n	80044d8 <HAL_TIM_ConfigClockSource+0xd0>
 800445a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445e:	f200 8087 	bhi.w	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	f000 8085 	beq.w	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	d87f      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004470:	2b70      	cmp	r3, #112	; 0x70
 8004472:	d01a      	beq.n	80044aa <HAL_TIM_ConfigClockSource+0xa2>
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d87b      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004478:	2b60      	cmp	r3, #96	; 0x60
 800447a:	d050      	beq.n	800451e <HAL_TIM_ConfigClockSource+0x116>
 800447c:	2b60      	cmp	r3, #96	; 0x60
 800447e:	d877      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004480:	2b50      	cmp	r3, #80	; 0x50
 8004482:	d03c      	beq.n	80044fe <HAL_TIM_ConfigClockSource+0xf6>
 8004484:	2b50      	cmp	r3, #80	; 0x50
 8004486:	d873      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d058      	beq.n	800453e <HAL_TIM_ConfigClockSource+0x136>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d86f      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004490:	2b30      	cmp	r3, #48	; 0x30
 8004492:	d064      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x156>
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d86b      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 8004498:	2b20      	cmp	r3, #32
 800449a:	d060      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x156>
 800449c:	2b20      	cmp	r3, #32
 800449e:	d867      	bhi.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d05c      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x156>
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d05a      	beq.n	800455e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044a8:	e062      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6899      	ldr	r1, [r3, #8]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f000 fb17 	bl	8004aec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
      break;
 80044d6:	e04e      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f000 fb00 	bl	8004aec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fa:	609a      	str	r2, [r3, #8]
      break;
 80044fc:	e03b      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6859      	ldr	r1, [r3, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	461a      	mov	r2, r3
 800450c:	f000 fa74 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2150      	movs	r1, #80	; 0x50
 8004516:	4618      	mov	r0, r3
 8004518:	f000 facd 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 800451c:	e02b      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6859      	ldr	r1, [r3, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	461a      	mov	r2, r3
 800452c:	f000 fa93 	bl	8004a56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2160      	movs	r1, #96	; 0x60
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fabd 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 800453c:	e01b      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6859      	ldr	r1, [r3, #4]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	461a      	mov	r2, r3
 800454c:	f000 fa54 	bl	80049f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	4618      	mov	r0, r3
 8004558:	f000 faad 	bl	8004ab6 <TIM_ITRx_SetConfig>
      break;
 800455c:	e00b      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f000 faa4 	bl	8004ab6 <TIM_ITRx_SetConfig>
        break;
 800456e:	e002      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004574:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00f      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d00b      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a31      	ldr	r2, [pc, #196]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d007      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a30      	ldr	r2, [pc, #192]	; (80046cc <TIM_Base_SetConfig+0xec>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_Base_SetConfig+0x38>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d108      	bne.n	800462a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a25      	ldr	r2, [pc, #148]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a22      	ldr	r2, [pc, #136]	; (80046c8 <TIM_Base_SetConfig+0xe8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a21      	ldr	r2, [pc, #132]	; (80046cc <TIM_Base_SetConfig+0xec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <TIM_Base_SetConfig+0xf0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <TIM_Base_SetConfig+0xf4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <TIM_Base_SetConfig+0xf8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x8a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <TIM_Base_SetConfig+0xfc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <TIM_Base_SetConfig+0xe4>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d103      	bne.n	80046b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	615a      	str	r2, [r3, #20]
}
 80046b6:	bf00      	nop
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	f023 0201 	bic.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f023 0302 	bic.w	r3, r3, #2
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a1c      	ldr	r2, [pc, #112]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d10c      	bne.n	8004756 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f023 0308 	bic.w	r3, r3, #8
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0304 	bic.w	r3, r3, #4
 8004754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <TIM_OC1_SetConfig+0xc8>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40010000 	.word	0x40010000

080047ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f023 0320 	bic.w	r3, r3, #32
 80047f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <TIM_OC2_SetConfig+0xd4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d10d      	bne.n	8004828 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a15      	ldr	r2, [pc, #84]	; (8004880 <TIM_OC2_SetConfig+0xd4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d113      	bne.n	8004858 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000

08004884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0303 	bic.w	r3, r3, #3
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	021b      	lsls	r3, r3, #8
 80048d4:	697a      	ldr	r2, [r7, #20]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <TIM_OC3_SetConfig+0xd0>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10d      	bne.n	80048fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a14      	ldr	r2, [pc, #80]	; (8004954 <TIM_OC3_SetConfig+0xd0>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d113      	bne.n	800492e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	621a      	str	r2, [r3, #32]
}
 8004948:	bf00      	nop
 800494a:	371c      	adds	r7, #28
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr
 8004954:	40010000 	.word	0x40010000

08004958 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a10      	ldr	r2, [pc, #64]	; (80049f4 <TIM_OC4_SetConfig+0x9c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d109      	bne.n	80049cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	019b      	lsls	r3, r3, #6
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000

080049f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	f023 0201 	bic.w	r2, r3, #1
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f023 030a 	bic.w	r3, r3, #10
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b087      	sub	sp, #28
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f023 0210 	bic.w	r2, r3, #16
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	031b      	lsls	r3, r3, #12
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	011b      	lsls	r3, r3, #4
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f043 0307 	orr.w	r3, r3, #7
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
}
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b087      	sub	sp, #28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	021a      	lsls	r2, r3, #8
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2201      	movs	r2, #1
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	401a      	ands	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1a      	ldr	r2, [r3, #32]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	fa01 f303 	lsl.w	r3, r1, r3
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e050      	b.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1c      	ldr	r2, [pc, #112]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d018      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bdc:	d013      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00e      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a16      	ldr	r2, [pc, #88]	; (8004c48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d004      	beq.n	8004c06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d10c      	bne.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40010000 	.word	0x40010000
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40014000 	.word	0x40014000

08004c54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e03f      	b.n	8004d0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fd f92c 	bl	8001f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 faad 	bl	8005220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ce4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b08a      	sub	sp, #40	; 0x28
 8004d1a:	af02      	add	r7, sp, #8
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	603b      	str	r3, [r7, #0]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d17c      	bne.n	8004e30 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_UART_Transmit+0x2c>
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e075      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x3e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e06e      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2221      	movs	r2, #33	; 0x21
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd fa35 	bl	80021d8 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	88fa      	ldrh	r2, [r7, #6]
 8004d7a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d84:	d108      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	e003      	b.n	8004da0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004da8:	e02a      	b.n	8004e00 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f940 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e036      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10b      	bne.n	8004de2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	3302      	adds	r3, #2
 8004dde:	61bb      	str	r3, [r7, #24]
 8004de0:	e007      	b.n	8004df2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	3301      	adds	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1cf      	bne.n	8004daa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2140      	movs	r1, #64	; 0x40
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 f910 	bl	800503a <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e000      	b.n	8004e32 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
  }
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	4613      	mov	r3, r2
 8004e46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d11d      	bne.n	8004e90 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <HAL_UART_Receive_DMA+0x26>
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e016      	b.n	8004e92 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Receive_DMA+0x38>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e00f      	b.n	8004e92 <HAL_UART_Receive_DMA+0x58>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004e80:	88fb      	ldrh	r3, [r7, #6]
 8004e82:	461a      	mov	r2, r3
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f922 	bl	80050d0 <UART_Start_Receive_DMA>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	e000      	b.n	8004e92 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e90:	2302      	movs	r3, #2
  }
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004ea2:	bf00      	nop
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d12a      	bne.n	8004f4c <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f0a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d107      	bne.n	8004f4c <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68da      	ldr	r2, [r3, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0210 	bic.w	r2, r2, #16
 8004f4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d106      	bne.n	8004f62 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f7ff ffb1 	bl	8004ec2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f60:	e002      	b.n	8004f68 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7fc fe4c 	bl	8001c00 <HAL_UART_RxCpltCallback>
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d108      	bne.n	8004f98 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f8a:	085b      	lsrs	r3, r3, #1
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	4619      	mov	r1, r3
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7ff ff96 	bl	8004ec2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f96:	e002      	b.n	8004f9e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff ff7e 	bl	8004e9a <HAL_UART_RxHalfCpltCallback>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b80      	cmp	r3, #128	; 0x80
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b21      	cmp	r3, #33	; 0x21
 8004fd8:	d108      	bne.n	8004fec <UART_DMAError+0x46>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fe6:	68b8      	ldr	r0, [r7, #8]
 8004fe8:	f000 f8d6 	bl	8005198 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	bf0c      	ite	eq
 8004ffa:	2301      	moveq	r3, #1
 8004ffc:	2300      	movne	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b22      	cmp	r3, #34	; 0x22
 800500c:	d108      	bne.n	8005020 <UART_DMAError+0x7a>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800501a:	68b8      	ldr	r0, [r7, #8]
 800501c:	f000 f8d2 	bl	80051c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	f043 0210 	orr.w	r2, r3, #16
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800502c:	68b8      	ldr	r0, [r7, #8]
 800502e:	f7ff ff3e 	bl	8004eae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b084      	sub	sp, #16
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504a:	e02c      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d028      	beq.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x30>
 800505a:	f7fd f8bd 	bl	80021d8 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	429a      	cmp	r2, r3
 8005068:	d21d      	bcs.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005078:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	4013      	ands	r3, r2
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	bf0c      	ite	eq
 80050b6:	2301      	moveq	r3, #1
 80050b8:	2300      	movne	r3, #0
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d0c3      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
	...

080050d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2222      	movs	r2, #34	; 0x22
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	4a23      	ldr	r2, [pc, #140]	; (800518c <UART_Start_Receive_DMA+0xbc>)
 80050fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	4a22      	ldr	r2, [pc, #136]	; (8005190 <UART_Start_Receive_DMA+0xc0>)
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <UART_Start_Receive_DMA+0xc4>)
 800510e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005114:	2200      	movs	r2, #0
 8005116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	f7fd fa1e 	bl	8002570 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005134:	2300      	movs	r3, #0
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	613b      	str	r3, [r7, #16]
 8005148:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005160:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005180:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	08004edb 	.word	0x08004edb
 8005190:	08004f71 	.word	0x08004f71
 8005194:	08004fa7 	.word	0x08004fa7

08005198 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80051ae:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	695a      	ldr	r2, [r3, #20]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d107      	bne.n	8005204 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0210 	bic.w	r2, r2, #16
 8005202:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
	...

08005220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	b09f      	sub	sp, #124	; 0x7c
 8005226:	af00      	add	r7, sp, #0
 8005228:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800522a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	ea40 0301 	orr.w	r3, r0, r1
 8005240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	431a      	orrs	r2, r3
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	431a      	orrs	r2, r3
 8005252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	4313      	orrs	r3, r2
 8005258:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800525a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005264:	f021 010c 	bic.w	r1, r1, #12
 8005268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800526e:	430b      	orrs	r3, r1
 8005270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	6999      	ldr	r1, [r3, #24]
 8005280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	ea40 0301 	orr.w	r3, r0, r1
 8005288:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4bc5      	ldr	r3, [pc, #788]	; (80055a4 <UART_SetConfig+0x384>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d004      	beq.n	800529e <UART_SetConfig+0x7e>
 8005294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4bc3      	ldr	r3, [pc, #780]	; (80055a8 <UART_SetConfig+0x388>)
 800529a:	429a      	cmp	r2, r3
 800529c:	d103      	bne.n	80052a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800529e:	f7fe fb8f 	bl	80039c0 <HAL_RCC_GetPCLK2Freq>
 80052a2:	6778      	str	r0, [r7, #116]	; 0x74
 80052a4:	e002      	b.n	80052ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052a6:	f7fe fb77 	bl	8003998 <HAL_RCC_GetPCLK1Freq>
 80052aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	f040 80b6 	bne.w	8005424 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ba:	461c      	mov	r4, r3
 80052bc:	f04f 0500 	mov.w	r5, #0
 80052c0:	4622      	mov	r2, r4
 80052c2:	462b      	mov	r3, r5
 80052c4:	1891      	adds	r1, r2, r2
 80052c6:	6439      	str	r1, [r7, #64]	; 0x40
 80052c8:	415b      	adcs	r3, r3
 80052ca:	647b      	str	r3, [r7, #68]	; 0x44
 80052cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052d0:	1912      	adds	r2, r2, r4
 80052d2:	eb45 0303 	adc.w	r3, r5, r3
 80052d6:	f04f 0000 	mov.w	r0, #0
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	00d9      	lsls	r1, r3, #3
 80052e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052e4:	00d0      	lsls	r0, r2, #3
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	1911      	adds	r1, r2, r4
 80052ec:	6639      	str	r1, [r7, #96]	; 0x60
 80052ee:	416b      	adcs	r3, r5
 80052f0:	667b      	str	r3, [r7, #100]	; 0x64
 80052f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	1891      	adds	r1, r2, r2
 80052fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005300:	415b      	adcs	r3, r3
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005304:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005308:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800530c:	f7fb f872 	bl	80003f4 <__aeabi_uldivmod>
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	4ba5      	ldr	r3, [pc, #660]	; (80055ac <UART_SetConfig+0x38c>)
 8005316:	fba3 2302 	umull	r2, r3, r3, r2
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	011e      	lsls	r6, r3, #4
 800531e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005320:	461c      	mov	r4, r3
 8005322:	f04f 0500 	mov.w	r5, #0
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	1891      	adds	r1, r2, r2
 800532c:	6339      	str	r1, [r7, #48]	; 0x30
 800532e:	415b      	adcs	r3, r3
 8005330:	637b      	str	r3, [r7, #52]	; 0x34
 8005332:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005336:	1912      	adds	r2, r2, r4
 8005338:	eb45 0303 	adc.w	r3, r5, r3
 800533c:	f04f 0000 	mov.w	r0, #0
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	00d9      	lsls	r1, r3, #3
 8005346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800534a:	00d0      	lsls	r0, r2, #3
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	1911      	adds	r1, r2, r4
 8005352:	65b9      	str	r1, [r7, #88]	; 0x58
 8005354:	416b      	adcs	r3, r5
 8005356:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	1891      	adds	r1, r2, r2
 8005364:	62b9      	str	r1, [r7, #40]	; 0x28
 8005366:	415b      	adcs	r3, r3
 8005368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800536e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005372:	f7fb f83f 	bl	80003f4 <__aeabi_uldivmod>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	4b8c      	ldr	r3, [pc, #560]	; (80055ac <UART_SetConfig+0x38c>)
 800537c:	fba3 1302 	umull	r1, r3, r3, r2
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	2164      	movs	r1, #100	; 0x64
 8005384:	fb01 f303 	mul.w	r3, r1, r3
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	3332      	adds	r3, #50	; 0x32
 800538e:	4a87      	ldr	r2, [pc, #540]	; (80055ac <UART_SetConfig+0x38c>)
 8005390:	fba2 2303 	umull	r2, r3, r2, r3
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800539c:	441e      	add	r6, r3
 800539e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053a0:	4618      	mov	r0, r3
 80053a2:	f04f 0100 	mov.w	r1, #0
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	1894      	adds	r4, r2, r2
 80053ac:	623c      	str	r4, [r7, #32]
 80053ae:	415b      	adcs	r3, r3
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
 80053b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053b6:	1812      	adds	r2, r2, r0
 80053b8:	eb41 0303 	adc.w	r3, r1, r3
 80053bc:	f04f 0400 	mov.w	r4, #0
 80053c0:	f04f 0500 	mov.w	r5, #0
 80053c4:	00dd      	lsls	r5, r3, #3
 80053c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053ca:	00d4      	lsls	r4, r2, #3
 80053cc:	4622      	mov	r2, r4
 80053ce:	462b      	mov	r3, r5
 80053d0:	1814      	adds	r4, r2, r0
 80053d2:	653c      	str	r4, [r7, #80]	; 0x50
 80053d4:	414b      	adcs	r3, r1
 80053d6:	657b      	str	r3, [r7, #84]	; 0x54
 80053d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	461a      	mov	r2, r3
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	1891      	adds	r1, r2, r2
 80053e4:	61b9      	str	r1, [r7, #24]
 80053e6:	415b      	adcs	r3, r3
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053f2:	f7fa ffff 	bl	80003f4 <__aeabi_uldivmod>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4b6c      	ldr	r3, [pc, #432]	; (80055ac <UART_SetConfig+0x38c>)
 80053fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	2164      	movs	r1, #100	; 0x64
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	3332      	adds	r3, #50	; 0x32
 800540e:	4a67      	ldr	r2, [pc, #412]	; (80055ac <UART_SetConfig+0x38c>)
 8005410:	fba2 2303 	umull	r2, r3, r2, r3
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	f003 0207 	and.w	r2, r3, #7
 800541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4432      	add	r2, r6
 8005420:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005422:	e0b9      	b.n	8005598 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005426:	461c      	mov	r4, r3
 8005428:	f04f 0500 	mov.w	r5, #0
 800542c:	4622      	mov	r2, r4
 800542e:	462b      	mov	r3, r5
 8005430:	1891      	adds	r1, r2, r2
 8005432:	6139      	str	r1, [r7, #16]
 8005434:	415b      	adcs	r3, r3
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800543c:	1912      	adds	r2, r2, r4
 800543e:	eb45 0303 	adc.w	r3, r5, r3
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	00d9      	lsls	r1, r3, #3
 800544c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005450:	00d0      	lsls	r0, r2, #3
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	eb12 0804 	adds.w	r8, r2, r4
 800545a:	eb43 0905 	adc.w	r9, r3, r5
 800545e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4618      	mov	r0, r3
 8005464:	f04f 0100 	mov.w	r1, #0
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	008b      	lsls	r3, r1, #2
 8005472:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005476:	0082      	lsls	r2, r0, #2
 8005478:	4640      	mov	r0, r8
 800547a:	4649      	mov	r1, r9
 800547c:	f7fa ffba 	bl	80003f4 <__aeabi_uldivmod>
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	4b49      	ldr	r3, [pc, #292]	; (80055ac <UART_SetConfig+0x38c>)
 8005486:	fba3 2302 	umull	r2, r3, r3, r2
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	011e      	lsls	r6, r3, #4
 800548e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005490:	4618      	mov	r0, r3
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	1894      	adds	r4, r2, r2
 800549c:	60bc      	str	r4, [r7, #8]
 800549e:	415b      	adcs	r3, r3
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a6:	1812      	adds	r2, r2, r0
 80054a8:	eb41 0303 	adc.w	r3, r1, r3
 80054ac:	f04f 0400 	mov.w	r4, #0
 80054b0:	f04f 0500 	mov.w	r5, #0
 80054b4:	00dd      	lsls	r5, r3, #3
 80054b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80054ba:	00d4      	lsls	r4, r2, #3
 80054bc:	4622      	mov	r2, r4
 80054be:	462b      	mov	r3, r5
 80054c0:	1814      	adds	r4, r2, r0
 80054c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80054c4:	414b      	adcs	r3, r1
 80054c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	008b      	lsls	r3, r1, #2
 80054dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054e0:	0082      	lsls	r2, r0, #2
 80054e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054e6:	f7fa ff85 	bl	80003f4 <__aeabi_uldivmod>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <UART_SetConfig+0x38c>)
 80054f0:	fba3 1302 	umull	r1, r3, r3, r2
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	2164      	movs	r1, #100	; 0x64
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	3332      	adds	r3, #50	; 0x32
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <UART_SetConfig+0x38c>)
 8005504:	fba2 2303 	umull	r2, r3, r2, r3
 8005508:	095b      	lsrs	r3, r3, #5
 800550a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550e:	441e      	add	r6, r3
 8005510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005512:	4618      	mov	r0, r3
 8005514:	f04f 0100 	mov.w	r1, #0
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	1894      	adds	r4, r2, r2
 800551e:	603c      	str	r4, [r7, #0]
 8005520:	415b      	adcs	r3, r3
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005528:	1812      	adds	r2, r2, r0
 800552a:	eb41 0303 	adc.w	r3, r1, r3
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	f04f 0500 	mov.w	r5, #0
 8005536:	00dd      	lsls	r5, r3, #3
 8005538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800553c:	00d4      	lsls	r4, r2, #3
 800553e:	4622      	mov	r2, r4
 8005540:	462b      	mov	r3, r5
 8005542:	eb12 0a00 	adds.w	sl, r2, r0
 8005546:	eb43 0b01 	adc.w	fp, r3, r1
 800554a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4618      	mov	r0, r3
 8005550:	f04f 0100 	mov.w	r1, #0
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	008b      	lsls	r3, r1, #2
 800555e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005562:	0082      	lsls	r2, r0, #2
 8005564:	4650      	mov	r0, sl
 8005566:	4659      	mov	r1, fp
 8005568:	f7fa ff44 	bl	80003f4 <__aeabi_uldivmod>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4b0e      	ldr	r3, [pc, #56]	; (80055ac <UART_SetConfig+0x38c>)
 8005572:	fba3 1302 	umull	r1, r3, r3, r2
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	2164      	movs	r1, #100	; 0x64
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	3332      	adds	r3, #50	; 0x32
 8005584:	4a09      	ldr	r2, [pc, #36]	; (80055ac <UART_SetConfig+0x38c>)
 8005586:	fba2 2303 	umull	r2, r3, r2, r3
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	f003 020f 	and.w	r2, r3, #15
 8005590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4432      	add	r2, r6
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	bf00      	nop
 800559a:	377c      	adds	r7, #124	; 0x7c
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a2:	bf00      	nop
 80055a4:	40011000 	.word	0x40011000
 80055a8:	40011400 	.word	0x40011400
 80055ac:	51eb851f 	.word	0x51eb851f

080055b0 <__errno>:
 80055b0:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <__errno+0x8>)
 80055b2:	6818      	ldr	r0, [r3, #0]
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	20000024 	.word	0x20000024

080055bc <__libc_init_array>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	4d0d      	ldr	r5, [pc, #52]	; (80055f4 <__libc_init_array+0x38>)
 80055c0:	4c0d      	ldr	r4, [pc, #52]	; (80055f8 <__libc_init_array+0x3c>)
 80055c2:	1b64      	subs	r4, r4, r5
 80055c4:	10a4      	asrs	r4, r4, #2
 80055c6:	2600      	movs	r6, #0
 80055c8:	42a6      	cmp	r6, r4
 80055ca:	d109      	bne.n	80055e0 <__libc_init_array+0x24>
 80055cc:	4d0b      	ldr	r5, [pc, #44]	; (80055fc <__libc_init_array+0x40>)
 80055ce:	4c0c      	ldr	r4, [pc, #48]	; (8005600 <__libc_init_array+0x44>)
 80055d0:	f000 fc8a 	bl	8005ee8 <_init>
 80055d4:	1b64      	subs	r4, r4, r5
 80055d6:	10a4      	asrs	r4, r4, #2
 80055d8:	2600      	movs	r6, #0
 80055da:	42a6      	cmp	r6, r4
 80055dc:	d105      	bne.n	80055ea <__libc_init_array+0x2e>
 80055de:	bd70      	pop	{r4, r5, r6, pc}
 80055e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e4:	4798      	blx	r3
 80055e6:	3601      	adds	r6, #1
 80055e8:	e7ee      	b.n	80055c8 <__libc_init_array+0xc>
 80055ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ee:	4798      	blx	r3
 80055f0:	3601      	adds	r6, #1
 80055f2:	e7f2      	b.n	80055da <__libc_init_array+0x1e>
 80055f4:	08005f4c 	.word	0x08005f4c
 80055f8:	08005f4c 	.word	0x08005f4c
 80055fc:	08005f4c 	.word	0x08005f4c
 8005600:	08005f50 	.word	0x08005f50

08005604 <memset>:
 8005604:	4402      	add	r2, r0
 8005606:	4603      	mov	r3, r0
 8005608:	4293      	cmp	r3, r2
 800560a:	d100      	bne.n	800560e <memset+0xa>
 800560c:	4770      	bx	lr
 800560e:	f803 1b01 	strb.w	r1, [r3], #1
 8005612:	e7f9      	b.n	8005608 <memset+0x4>

08005614 <powf>:
 8005614:	b508      	push	{r3, lr}
 8005616:	ed2d 8b04 	vpush	{d8-d9}
 800561a:	eeb0 9a40 	vmov.f32	s18, s0
 800561e:	eef0 8a60 	vmov.f32	s17, s1
 8005622:	f000 f8b5 	bl	8005790 <__ieee754_powf>
 8005626:	4b43      	ldr	r3, [pc, #268]	; (8005734 <powf+0x120>)
 8005628:	f993 3000 	ldrsb.w	r3, [r3]
 800562c:	3301      	adds	r3, #1
 800562e:	eeb0 8a40 	vmov.f32	s16, s0
 8005632:	d012      	beq.n	800565a <powf+0x46>
 8005634:	eef4 8a68 	vcmp.f32	s17, s17
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	d60d      	bvs.n	800565a <powf+0x46>
 800563e:	eeb4 9a49 	vcmp.f32	s18, s18
 8005642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005646:	d70d      	bvc.n	8005664 <powf+0x50>
 8005648:	eef5 8a40 	vcmp.f32	s17, #0.0
 800564c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005650:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005654:	bf08      	it	eq
 8005656:	eeb0 8a67 	vmoveq.f32	s16, s15
 800565a:	eeb0 0a48 	vmov.f32	s0, s16
 800565e:	ecbd 8b04 	vpop	{d8-d9}
 8005662:	bd08      	pop	{r3, pc}
 8005664:	eddf 9a34 	vldr	s19, [pc, #208]	; 8005738 <powf+0x124>
 8005668:	eeb4 9a69 	vcmp.f32	s18, s19
 800566c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005670:	d116      	bne.n	80056a0 <powf+0x8c>
 8005672:	eef4 8a69 	vcmp.f32	s17, s19
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d057      	beq.n	800572c <powf+0x118>
 800567c:	eeb0 0a68 	vmov.f32	s0, s17
 8005680:	f000 fb50 	bl	8005d24 <finitef>
 8005684:	2800      	cmp	r0, #0
 8005686:	d0e8      	beq.n	800565a <powf+0x46>
 8005688:	eef4 8ae9 	vcmpe.f32	s17, s19
 800568c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005690:	d5e3      	bpl.n	800565a <powf+0x46>
 8005692:	f7ff ff8d 	bl	80055b0 <__errno>
 8005696:	2321      	movs	r3, #33	; 0x21
 8005698:	6003      	str	r3, [r0, #0]
 800569a:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800573c <powf+0x128>
 800569e:	e7dc      	b.n	800565a <powf+0x46>
 80056a0:	f000 fb40 	bl	8005d24 <finitef>
 80056a4:	bb50      	cbnz	r0, 80056fc <powf+0xe8>
 80056a6:	eeb0 0a49 	vmov.f32	s0, s18
 80056aa:	f000 fb3b 	bl	8005d24 <finitef>
 80056ae:	b328      	cbz	r0, 80056fc <powf+0xe8>
 80056b0:	eeb0 0a68 	vmov.f32	s0, s17
 80056b4:	f000 fb36 	bl	8005d24 <finitef>
 80056b8:	b300      	cbz	r0, 80056fc <powf+0xe8>
 80056ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	d706      	bvc.n	80056d2 <powf+0xbe>
 80056c4:	f7ff ff74 	bl	80055b0 <__errno>
 80056c8:	2321      	movs	r3, #33	; 0x21
 80056ca:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 80056ce:	6003      	str	r3, [r0, #0]
 80056d0:	e7c3      	b.n	800565a <powf+0x46>
 80056d2:	f7ff ff6d 	bl	80055b0 <__errno>
 80056d6:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80056da:	2322      	movs	r3, #34	; 0x22
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	6003      	str	r3, [r0, #0]
 80056e2:	d508      	bpl.n	80056f6 <powf+0xe2>
 80056e4:	eeb0 0a68 	vmov.f32	s0, s17
 80056e8:	f000 fb30 	bl	8005d4c <rintf>
 80056ec:	eeb4 0a68 	vcmp.f32	s0, s17
 80056f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f4:	d1d1      	bne.n	800569a <powf+0x86>
 80056f6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8005740 <powf+0x12c>
 80056fa:	e7ae      	b.n	800565a <powf+0x46>
 80056fc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005704:	d1a9      	bne.n	800565a <powf+0x46>
 8005706:	eeb0 0a49 	vmov.f32	s0, s18
 800570a:	f000 fb0b 	bl	8005d24 <finitef>
 800570e:	2800      	cmp	r0, #0
 8005710:	d0a3      	beq.n	800565a <powf+0x46>
 8005712:	eeb0 0a68 	vmov.f32	s0, s17
 8005716:	f000 fb05 	bl	8005d24 <finitef>
 800571a:	2800      	cmp	r0, #0
 800571c:	d09d      	beq.n	800565a <powf+0x46>
 800571e:	f7ff ff47 	bl	80055b0 <__errno>
 8005722:	2322      	movs	r3, #34	; 0x22
 8005724:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8005738 <powf+0x124>
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	e796      	b.n	800565a <powf+0x46>
 800572c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005730:	e793      	b.n	800565a <powf+0x46>
 8005732:	bf00      	nop
 8005734:	20000088 	.word	0x20000088
 8005738:	00000000 	.word	0x00000000
 800573c:	ff800000 	.word	0xff800000
 8005740:	7f800000 	.word	0x7f800000

08005744 <sqrtf>:
 8005744:	b508      	push	{r3, lr}
 8005746:	ed2d 8b02 	vpush	{d8}
 800574a:	eeb0 8a40 	vmov.f32	s16, s0
 800574e:	f000 fadf 	bl	8005d10 <__ieee754_sqrtf>
 8005752:	4b0d      	ldr	r3, [pc, #52]	; (8005788 <sqrtf+0x44>)
 8005754:	f993 3000 	ldrsb.w	r3, [r3]
 8005758:	3301      	adds	r3, #1
 800575a:	d011      	beq.n	8005780 <sqrtf+0x3c>
 800575c:	eeb4 8a48 	vcmp.f32	s16, s16
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	d60c      	bvs.n	8005780 <sqrtf+0x3c>
 8005766:	eddf 8a09 	vldr	s17, [pc, #36]	; 800578c <sqrtf+0x48>
 800576a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800576e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005772:	d505      	bpl.n	8005780 <sqrtf+0x3c>
 8005774:	f7ff ff1c 	bl	80055b0 <__errno>
 8005778:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800577c:	2321      	movs	r3, #33	; 0x21
 800577e:	6003      	str	r3, [r0, #0]
 8005780:	ecbd 8b02 	vpop	{d8}
 8005784:	bd08      	pop	{r3, pc}
 8005786:	bf00      	nop
 8005788:	20000088 	.word	0x20000088
 800578c:	00000000 	.word	0x00000000

08005790 <__ieee754_powf>:
 8005790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005794:	ee10 5a90 	vmov	r5, s1
 8005798:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800579c:	ed2d 8b02 	vpush	{d8}
 80057a0:	eeb0 8a40 	vmov.f32	s16, s0
 80057a4:	eef0 8a60 	vmov.f32	s17, s1
 80057a8:	f000 8291 	beq.w	8005cce <__ieee754_powf+0x53e>
 80057ac:	ee10 8a10 	vmov	r8, s0
 80057b0:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80057b4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80057b8:	dc06      	bgt.n	80057c8 <__ieee754_powf+0x38>
 80057ba:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80057be:	dd0a      	ble.n	80057d6 <__ieee754_powf+0x46>
 80057c0:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80057c4:	f000 8283 	beq.w	8005cce <__ieee754_powf+0x53e>
 80057c8:	ecbd 8b02 	vpop	{d8}
 80057cc:	48d8      	ldr	r0, [pc, #864]	; (8005b30 <__ieee754_powf+0x3a0>)
 80057ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d2:	f000 bab5 	b.w	8005d40 <nanf>
 80057d6:	f1b8 0f00 	cmp.w	r8, #0
 80057da:	da1f      	bge.n	800581c <__ieee754_powf+0x8c>
 80057dc:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80057e0:	da2e      	bge.n	8005840 <__ieee754_powf+0xb0>
 80057e2:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80057e6:	f2c0 827b 	blt.w	8005ce0 <__ieee754_powf+0x550>
 80057ea:	15fb      	asrs	r3, r7, #23
 80057ec:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80057f0:	fa47 f603 	asr.w	r6, r7, r3
 80057f4:	fa06 f303 	lsl.w	r3, r6, r3
 80057f8:	42bb      	cmp	r3, r7
 80057fa:	f040 8271 	bne.w	8005ce0 <__ieee754_powf+0x550>
 80057fe:	f006 0601 	and.w	r6, r6, #1
 8005802:	f1c6 0602 	rsb	r6, r6, #2
 8005806:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800580a:	d120      	bne.n	800584e <__ieee754_powf+0xbe>
 800580c:	2d00      	cmp	r5, #0
 800580e:	f280 8264 	bge.w	8005cda <__ieee754_powf+0x54a>
 8005812:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005816:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800581a:	e00d      	b.n	8005838 <__ieee754_powf+0xa8>
 800581c:	2600      	movs	r6, #0
 800581e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005822:	d1f0      	bne.n	8005806 <__ieee754_powf+0x76>
 8005824:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005828:	f000 8251 	beq.w	8005cce <__ieee754_powf+0x53e>
 800582c:	dd0a      	ble.n	8005844 <__ieee754_powf+0xb4>
 800582e:	2d00      	cmp	r5, #0
 8005830:	f280 8250 	bge.w	8005cd4 <__ieee754_powf+0x544>
 8005834:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8005b34 <__ieee754_powf+0x3a4>
 8005838:	ecbd 8b02 	vpop	{d8}
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	2602      	movs	r6, #2
 8005842:	e7ec      	b.n	800581e <__ieee754_powf+0x8e>
 8005844:	2d00      	cmp	r5, #0
 8005846:	daf5      	bge.n	8005834 <__ieee754_powf+0xa4>
 8005848:	eeb1 0a68 	vneg.f32	s0, s17
 800584c:	e7f4      	b.n	8005838 <__ieee754_powf+0xa8>
 800584e:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005852:	d102      	bne.n	800585a <__ieee754_powf+0xca>
 8005854:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005858:	e7ee      	b.n	8005838 <__ieee754_powf+0xa8>
 800585a:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800585e:	eeb0 0a48 	vmov.f32	s0, s16
 8005862:	d108      	bne.n	8005876 <__ieee754_powf+0xe6>
 8005864:	f1b8 0f00 	cmp.w	r8, #0
 8005868:	db05      	blt.n	8005876 <__ieee754_powf+0xe6>
 800586a:	ecbd 8b02 	vpop	{d8}
 800586e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005872:	f000 ba4d 	b.w	8005d10 <__ieee754_sqrtf>
 8005876:	f000 fa4e 	bl	8005d16 <fabsf>
 800587a:	b124      	cbz	r4, 8005886 <__ieee754_powf+0xf6>
 800587c:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005880:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005884:	d117      	bne.n	80058b6 <__ieee754_powf+0x126>
 8005886:	2d00      	cmp	r5, #0
 8005888:	bfbc      	itt	lt
 800588a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800588e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	dacf      	bge.n	8005838 <__ieee754_powf+0xa8>
 8005898:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800589c:	ea54 0306 	orrs.w	r3, r4, r6
 80058a0:	d104      	bne.n	80058ac <__ieee754_powf+0x11c>
 80058a2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80058a6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80058aa:	e7c5      	b.n	8005838 <__ieee754_powf+0xa8>
 80058ac:	2e01      	cmp	r6, #1
 80058ae:	d1c3      	bne.n	8005838 <__ieee754_powf+0xa8>
 80058b0:	eeb1 0a40 	vneg.f32	s0, s0
 80058b4:	e7c0      	b.n	8005838 <__ieee754_powf+0xa8>
 80058b6:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80058ba:	3801      	subs	r0, #1
 80058bc:	ea56 0300 	orrs.w	r3, r6, r0
 80058c0:	d104      	bne.n	80058cc <__ieee754_powf+0x13c>
 80058c2:	ee38 8a48 	vsub.f32	s16, s16, s16
 80058c6:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80058ca:	e7b5      	b.n	8005838 <__ieee754_powf+0xa8>
 80058cc:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80058d0:	dd6b      	ble.n	80059aa <__ieee754_powf+0x21a>
 80058d2:	4b99      	ldr	r3, [pc, #612]	; (8005b38 <__ieee754_powf+0x3a8>)
 80058d4:	429c      	cmp	r4, r3
 80058d6:	dc06      	bgt.n	80058e6 <__ieee754_powf+0x156>
 80058d8:	2d00      	cmp	r5, #0
 80058da:	daab      	bge.n	8005834 <__ieee754_powf+0xa4>
 80058dc:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8005b3c <__ieee754_powf+0x3ac>
 80058e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80058e4:	e7a8      	b.n	8005838 <__ieee754_powf+0xa8>
 80058e6:	4b96      	ldr	r3, [pc, #600]	; (8005b40 <__ieee754_powf+0x3b0>)
 80058e8:	429c      	cmp	r4, r3
 80058ea:	dd02      	ble.n	80058f2 <__ieee754_powf+0x162>
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	dcf5      	bgt.n	80058dc <__ieee754_powf+0x14c>
 80058f0:	e7a0      	b.n	8005834 <__ieee754_powf+0xa4>
 80058f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80058f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80058fa:	eddf 6a92 	vldr	s13, [pc, #584]	; 8005b44 <__ieee754_powf+0x3b4>
 80058fe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005902:	eee0 6a67 	vfms.f32	s13, s0, s15
 8005906:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800590a:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800590e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005b48 <__ieee754_powf+0x3b8>
 800591a:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800591e:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005b4c <__ieee754_powf+0x3bc>
 8005922:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005926:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8005b50 <__ieee754_powf+0x3c0>
 800592a:	eef0 6a67 	vmov.f32	s13, s15
 800592e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8005932:	ee16 3a90 	vmov	r3, s13
 8005936:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800593a:	f023 030f 	bic.w	r3, r3, #15
 800593e:	ee00 3a90 	vmov	s1, r3
 8005942:	eee0 0a47 	vfms.f32	s1, s0, s14
 8005946:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800594a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800594e:	f025 050f 	bic.w	r5, r5, #15
 8005952:	ee07 5a10 	vmov	s14, r5
 8005956:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800595a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800595e:	ee07 3a90 	vmov	s15, r3
 8005962:	eee7 0a27 	vfma.f32	s1, s14, s15
 8005966:	3e01      	subs	r6, #1
 8005968:	ea56 0200 	orrs.w	r2, r6, r0
 800596c:	ee07 5a10 	vmov	s14, r5
 8005970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005974:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005978:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800597c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005980:	ee17 4a10 	vmov	r4, s14
 8005984:	bf08      	it	eq
 8005986:	eeb0 8a40 	vmoveq.f32	s16, s0
 800598a:	2c00      	cmp	r4, #0
 800598c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005990:	f340 8184 	ble.w	8005c9c <__ieee754_powf+0x50c>
 8005994:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005998:	f340 80fc 	ble.w	8005b94 <__ieee754_powf+0x404>
 800599c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8005b3c <__ieee754_powf+0x3ac>
 80059a0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80059a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80059a8:	e746      	b.n	8005838 <__ieee754_powf+0xa8>
 80059aa:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 80059ae:	bf01      	itttt	eq
 80059b0:	eddf 7a68 	vldreq	s15, [pc, #416]	; 8005b54 <__ieee754_powf+0x3c4>
 80059b4:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80059b8:	f06f 0217 	mvneq.w	r2, #23
 80059bc:	ee17 4a90 	vmoveq	r4, s15
 80059c0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80059c4:	bf18      	it	ne
 80059c6:	2200      	movne	r2, #0
 80059c8:	3b7f      	subs	r3, #127	; 0x7f
 80059ca:	4413      	add	r3, r2
 80059cc:	4a62      	ldr	r2, [pc, #392]	; (8005b58 <__ieee754_powf+0x3c8>)
 80059ce:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80059d2:	4294      	cmp	r4, r2
 80059d4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80059d8:	dd06      	ble.n	80059e8 <__ieee754_powf+0x258>
 80059da:	4a60      	ldr	r2, [pc, #384]	; (8005b5c <__ieee754_powf+0x3cc>)
 80059dc:	4294      	cmp	r4, r2
 80059de:	f340 80a4 	ble.w	8005b2a <__ieee754_powf+0x39a>
 80059e2:	3301      	adds	r3, #1
 80059e4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80059e8:	2400      	movs	r4, #0
 80059ea:	4a5d      	ldr	r2, [pc, #372]	; (8005b60 <__ieee754_powf+0x3d0>)
 80059ec:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80059f0:	ee07 1a90 	vmov	s15, r1
 80059f4:	ed92 7a00 	vldr	s14, [r2]
 80059f8:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <__ieee754_powf+0x3d4>)
 80059fa:	ee37 6a27 	vadd.f32	s12, s14, s15
 80059fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005a02:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8005a06:	1049      	asrs	r1, r1, #1
 8005a08:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005a0c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005a10:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005a14:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8005a18:	ee06 1a10 	vmov	s12, r1
 8005a1c:	ee65 4a26 	vmul.f32	s9, s10, s13
 8005a20:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005a24:	ee14 7a90 	vmov	r7, s9
 8005a28:	4017      	ands	r7, r2
 8005a2a:	ee05 7a90 	vmov	s11, r7
 8005a2e:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8005a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a36:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005b68 <__ieee754_powf+0x3d8>
 8005a3a:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8005a3e:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8005a42:	ee25 6a26 	vmul.f32	s12, s10, s13
 8005a46:	eddf 6a49 	vldr	s13, [pc, #292]	; 8005b6c <__ieee754_powf+0x3dc>
 8005a4a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8005a4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b70 <__ieee754_powf+0x3e0>
 8005a52:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a56:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005b44 <__ieee754_powf+0x3b4>
 8005a5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a5e:	eddf 6a45 	vldr	s13, [pc, #276]	; 8005b74 <__ieee754_powf+0x3e4>
 8005a62:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005a66:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8005b78 <__ieee754_powf+0x3e8>
 8005a6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a6e:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8005a72:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8005a76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005a7a:	eee5 6a07 	vfma.f32	s13, s10, s14
 8005a7e:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8005a82:	eef0 7a45 	vmov.f32	s15, s10
 8005a86:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8005a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a8e:	ee17 1a90 	vmov	r1, s15
 8005a92:	4011      	ands	r1, r2
 8005a94:	ee07 1a90 	vmov	s15, r1
 8005a98:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8005a9c:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8005aa0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005aa4:	ee27 7a24 	vmul.f32	s14, s14, s9
 8005aa8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005aac:	eeb0 6a47 	vmov.f32	s12, s14
 8005ab0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8005ab4:	ee16 1a10 	vmov	r1, s12
 8005ab8:	4011      	ands	r1, r2
 8005aba:	ee06 1a90 	vmov	s13, r1
 8005abe:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8005ac2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8005b7c <__ieee754_powf+0x3ec>
 8005ac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b80 <__ieee754_powf+0x3f0>
 8005aca:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005ace:	ee06 1a10 	vmov	s12, r1
 8005ad2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ad6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005b84 <__ieee754_powf+0x3f4>
 8005ada:	492b      	ldr	r1, [pc, #172]	; (8005b88 <__ieee754_powf+0x3f8>)
 8005adc:	eea6 7a27 	vfma.f32	s14, s12, s15
 8005ae0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005ae4:	edd1 7a00 	vldr	s15, [r1]
 8005ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005aec:	ee07 3a90 	vmov	s15, r3
 8005af0:	4b26      	ldr	r3, [pc, #152]	; (8005b8c <__ieee754_powf+0x3fc>)
 8005af2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005af6:	eef0 7a47 	vmov.f32	s15, s14
 8005afa:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005afe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b02:	edd4 0a00 	vldr	s1, [r4]
 8005b06:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b0e:	ee17 3a90 	vmov	r3, s15
 8005b12:	4013      	ands	r3, r2
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8005b1c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8005b20:	eee6 6a65 	vfms.f32	s13, s12, s11
 8005b24:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005b28:	e70f      	b.n	800594a <__ieee754_powf+0x1ba>
 8005b2a:	2401      	movs	r4, #1
 8005b2c:	e75d      	b.n	80059ea <__ieee754_powf+0x25a>
 8005b2e:	bf00      	nop
 8005b30:	08005f20 	.word	0x08005f20
 8005b34:	00000000 	.word	0x00000000
 8005b38:	3f7ffff7 	.word	0x3f7ffff7
 8005b3c:	7149f2ca 	.word	0x7149f2ca
 8005b40:	3f800007 	.word	0x3f800007
 8005b44:	3eaaaaab 	.word	0x3eaaaaab
 8005b48:	3fb8aa3b 	.word	0x3fb8aa3b
 8005b4c:	36eca570 	.word	0x36eca570
 8005b50:	3fb8aa00 	.word	0x3fb8aa00
 8005b54:	4b800000 	.word	0x4b800000
 8005b58:	001cc471 	.word	0x001cc471
 8005b5c:	005db3d6 	.word	0x005db3d6
 8005b60:	08005f24 	.word	0x08005f24
 8005b64:	fffff000 	.word	0xfffff000
 8005b68:	3e6c3255 	.word	0x3e6c3255
 8005b6c:	3e53f142 	.word	0x3e53f142
 8005b70:	3e8ba305 	.word	0x3e8ba305
 8005b74:	3edb6db7 	.word	0x3edb6db7
 8005b78:	3f19999a 	.word	0x3f19999a
 8005b7c:	3f76384f 	.word	0x3f76384f
 8005b80:	3f763800 	.word	0x3f763800
 8005b84:	369dc3a0 	.word	0x369dc3a0
 8005b88:	08005f34 	.word	0x08005f34
 8005b8c:	08005f2c 	.word	0x08005f2c
 8005b90:	3338aa3c 	.word	0x3338aa3c
 8005b94:	f040 8092 	bne.w	8005cbc <__ieee754_powf+0x52c>
 8005b98:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8005b90 <__ieee754_powf+0x400>
 8005b9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ba0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8005ba4:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bac:	f73f aef6 	bgt.w	800599c <__ieee754_powf+0x20c>
 8005bb0:	15db      	asrs	r3, r3, #23
 8005bb2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8005bb6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005bba:	4103      	asrs	r3, r0
 8005bbc:	4423      	add	r3, r4
 8005bbe:	4949      	ldr	r1, [pc, #292]	; (8005ce4 <__ieee754_powf+0x554>)
 8005bc0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005bc4:	3a7f      	subs	r2, #127	; 0x7f
 8005bc6:	4111      	asrs	r1, r2
 8005bc8:	ea23 0101 	bic.w	r1, r3, r1
 8005bcc:	ee07 1a10 	vmov	s14, r1
 8005bd0:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8005bd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005bd8:	f1c2 0217 	rsb	r2, r2, #23
 8005bdc:	4110      	asrs	r0, r2
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005be4:	bfb8      	it	lt
 8005be6:	4240      	neglt	r0, r0
 8005be8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8005bec:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8005ce8 <__ieee754_powf+0x558>
 8005bf0:	ee17 3a10 	vmov	r3, s14
 8005bf4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005bf8:	f023 030f 	bic.w	r3, r3, #15
 8005bfc:	ee07 3a10 	vmov	s14, r3
 8005c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c04:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8005c08:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005cec <__ieee754_powf+0x55c>
 8005c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c10:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8005c14:	eddf 6a36 	vldr	s13, [pc, #216]	; 8005cf0 <__ieee754_powf+0x560>
 8005c18:	eeb0 0a67 	vmov.f32	s0, s15
 8005c1c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8005c20:	eeb0 6a40 	vmov.f32	s12, s0
 8005c24:	eea7 6a66 	vfms.f32	s12, s14, s13
 8005c28:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005c2c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005c30:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005cf4 <__ieee754_powf+0x564>
 8005c34:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8005cf8 <__ieee754_powf+0x568>
 8005c38:	eea7 6a26 	vfma.f32	s12, s14, s13
 8005c3c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8005cfc <__ieee754_powf+0x56c>
 8005c40:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005c44:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8005d00 <__ieee754_powf+0x570>
 8005c48:	eea6 6a87 	vfma.f32	s12, s13, s14
 8005c4c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8005d04 <__ieee754_powf+0x574>
 8005c50:	eee6 6a07 	vfma.f32	s13, s12, s14
 8005c54:	eeb0 6a40 	vmov.f32	s12, s0
 8005c58:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8005c5c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005c60:	eeb0 7a46 	vmov.f32	s14, s12
 8005c64:	ee77 6a66 	vsub.f32	s13, s14, s13
 8005c68:	ee20 6a06 	vmul.f32	s12, s0, s12
 8005c6c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8005c70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005c7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005c80:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005c84:	ee10 3a10 	vmov	r3, s0
 8005c88:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8005c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c90:	da1a      	bge.n	8005cc8 <__ieee754_powf+0x538>
 8005c92:	f000 f8b7 	bl	8005e04 <scalbnf>
 8005c96:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005c9a:	e5cd      	b.n	8005838 <__ieee754_powf+0xa8>
 8005c9c:	4a1a      	ldr	r2, [pc, #104]	; (8005d08 <__ieee754_powf+0x578>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	dd02      	ble.n	8005ca8 <__ieee754_powf+0x518>
 8005ca2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8005d0c <__ieee754_powf+0x57c>
 8005ca6:	e67b      	b.n	80059a0 <__ieee754_powf+0x210>
 8005ca8:	d108      	bne.n	8005cbc <__ieee754_powf+0x52c>
 8005caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cae:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8005cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb6:	f6ff af7b 	blt.w	8005bb0 <__ieee754_powf+0x420>
 8005cba:	e7f2      	b.n	8005ca2 <__ieee754_powf+0x512>
 8005cbc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8005cc0:	f73f af76 	bgt.w	8005bb0 <__ieee754_powf+0x420>
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	e78f      	b.n	8005be8 <__ieee754_powf+0x458>
 8005cc8:	ee00 3a10 	vmov	s0, r3
 8005ccc:	e7e3      	b.n	8005c96 <__ieee754_powf+0x506>
 8005cce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005cd2:	e5b1      	b.n	8005838 <__ieee754_powf+0xa8>
 8005cd4:	eeb0 0a68 	vmov.f32	s0, s17
 8005cd8:	e5ae      	b.n	8005838 <__ieee754_powf+0xa8>
 8005cda:	eeb0 0a48 	vmov.f32	s0, s16
 8005cde:	e5ab      	b.n	8005838 <__ieee754_powf+0xa8>
 8005ce0:	2600      	movs	r6, #0
 8005ce2:	e590      	b.n	8005806 <__ieee754_powf+0x76>
 8005ce4:	007fffff 	.word	0x007fffff
 8005ce8:	3f317218 	.word	0x3f317218
 8005cec:	35bfbe8c 	.word	0x35bfbe8c
 8005cf0:	3f317200 	.word	0x3f317200
 8005cf4:	3331bb4c 	.word	0x3331bb4c
 8005cf8:	b5ddea0e 	.word	0xb5ddea0e
 8005cfc:	388ab355 	.word	0x388ab355
 8005d00:	bb360b61 	.word	0xbb360b61
 8005d04:	3e2aaaab 	.word	0x3e2aaaab
 8005d08:	43160000 	.word	0x43160000
 8005d0c:	0da24260 	.word	0x0da24260

08005d10 <__ieee754_sqrtf>:
 8005d10:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005d14:	4770      	bx	lr

08005d16 <fabsf>:
 8005d16:	ee10 3a10 	vmov	r3, s0
 8005d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d1e:	ee00 3a10 	vmov	s0, r3
 8005d22:	4770      	bx	lr

08005d24 <finitef>:
 8005d24:	b082      	sub	sp, #8
 8005d26:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005d2a:	9801      	ldr	r0, [sp, #4]
 8005d2c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d30:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005d34:	bfac      	ite	ge
 8005d36:	2000      	movge	r0, #0
 8005d38:	2001      	movlt	r0, #1
 8005d3a:	b002      	add	sp, #8
 8005d3c:	4770      	bx	lr
	...

08005d40 <nanf>:
 8005d40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005d48 <nanf+0x8>
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	7fc00000 	.word	0x7fc00000

08005d4c <rintf>:
 8005d4c:	ee10 2a10 	vmov	r2, s0
 8005d50:	b513      	push	{r0, r1, r4, lr}
 8005d52:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005d56:	397f      	subs	r1, #127	; 0x7f
 8005d58:	2916      	cmp	r1, #22
 8005d5a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005d5e:	dc47      	bgt.n	8005df0 <rintf+0xa4>
 8005d60:	b32b      	cbz	r3, 8005dae <rintf+0x62>
 8005d62:	2900      	cmp	r1, #0
 8005d64:	ee10 3a10 	vmov	r3, s0
 8005d68:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 8005d6c:	da21      	bge.n	8005db2 <rintf+0x66>
 8005d6e:	f3c2 0316 	ubfx	r3, r2, #0, #23
 8005d72:	425b      	negs	r3, r3
 8005d74:	4921      	ldr	r1, [pc, #132]	; (8005dfc <rintf+0xb0>)
 8005d76:	0a5b      	lsrs	r3, r3, #9
 8005d78:	0d12      	lsrs	r2, r2, #20
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7e:	0512      	lsls	r2, r2, #20
 8005d80:	4313      	orrs	r3, r2
 8005d82:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	edd1 6a00 	vldr	s13, [r1]
 8005d8e:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8005d92:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005d96:	eddd 7a01 	vldr	s15, [sp, #4]
 8005d9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d9e:	ee17 3a90 	vmov	r3, s15
 8005da2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005da6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005daa:	ee00 3a10 	vmov	s0, r3
 8005dae:	b002      	add	sp, #8
 8005db0:	bd10      	pop	{r4, pc}
 8005db2:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <rintf+0xb4>)
 8005db4:	410a      	asrs	r2, r1
 8005db6:	4213      	tst	r3, r2
 8005db8:	d0f9      	beq.n	8005dae <rintf+0x62>
 8005dba:	0854      	lsrs	r4, r2, #1
 8005dbc:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 8005dc0:	d006      	beq.n	8005dd0 <rintf+0x84>
 8005dc2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005dc6:	ea23 0304 	bic.w	r3, r3, r4
 8005dca:	fa42 f101 	asr.w	r1, r2, r1
 8005dce:	430b      	orrs	r3, r1
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <rintf+0xb0>)
 8005dd2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8005dd6:	ed90 7a00 	vldr	s14, [r0]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de2:	edcd 7a01 	vstr	s15, [sp, #4]
 8005de6:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005dea:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005dee:	e7de      	b.n	8005dae <rintf+0x62>
 8005df0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005df4:	d3db      	bcc.n	8005dae <rintf+0x62>
 8005df6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005dfa:	e7d8      	b.n	8005dae <rintf+0x62>
 8005dfc:	08005f3c 	.word	0x08005f3c
 8005e00:	007fffff 	.word	0x007fffff

08005e04 <scalbnf>:
 8005e04:	ee10 3a10 	vmov	r3, s0
 8005e08:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005e0c:	d025      	beq.n	8005e5a <scalbnf+0x56>
 8005e0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e12:	d302      	bcc.n	8005e1a <scalbnf+0x16>
 8005e14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005e18:	4770      	bx	lr
 8005e1a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005e1e:	d122      	bne.n	8005e66 <scalbnf+0x62>
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <scalbnf+0xc8>)
 8005e22:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005ed0 <scalbnf+0xcc>
 8005e26:	4298      	cmp	r0, r3
 8005e28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e2c:	db16      	blt.n	8005e5c <scalbnf+0x58>
 8005e2e:	ee10 3a10 	vmov	r3, s0
 8005e32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e36:	3a19      	subs	r2, #25
 8005e38:	4402      	add	r2, r0
 8005e3a:	2afe      	cmp	r2, #254	; 0xfe
 8005e3c:	dd15      	ble.n	8005e6a <scalbnf+0x66>
 8005e3e:	ee10 3a10 	vmov	r3, s0
 8005e42:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005ed4 <scalbnf+0xd0>
 8005e46:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005ed8 <scalbnf+0xd4>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	eeb0 7a67 	vmov.f32	s14, s15
 8005e50:	bfb8      	it	lt
 8005e52:	eef0 7a66 	vmovlt.f32	s15, s13
 8005e56:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005e5a:	4770      	bx	lr
 8005e5c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005edc <scalbnf+0xd8>
 8005e60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e64:	4770      	bx	lr
 8005e66:	0dd2      	lsrs	r2, r2, #23
 8005e68:	e7e6      	b.n	8005e38 <scalbnf+0x34>
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	dd06      	ble.n	8005e7c <scalbnf+0x78>
 8005e6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e72:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005e76:	ee00 3a10 	vmov	s0, r3
 8005e7a:	4770      	bx	lr
 8005e7c:	f112 0f16 	cmn.w	r2, #22
 8005e80:	da1a      	bge.n	8005eb8 <scalbnf+0xb4>
 8005e82:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e86:	4298      	cmp	r0, r3
 8005e88:	ee10 3a10 	vmov	r3, s0
 8005e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e90:	dd0a      	ble.n	8005ea8 <scalbnf+0xa4>
 8005e92:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005ed4 <scalbnf+0xd0>
 8005e96:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005ed8 <scalbnf+0xd4>
 8005e9a:	eef0 7a40 	vmov.f32	s15, s0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf18      	it	ne
 8005ea2:	eeb0 0a47 	vmovne.f32	s0, s14
 8005ea6:	e7db      	b.n	8005e60 <scalbnf+0x5c>
 8005ea8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005edc <scalbnf+0xd8>
 8005eac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005ee0 <scalbnf+0xdc>
 8005eb0:	eef0 7a40 	vmov.f32	s15, s0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	e7f3      	b.n	8005ea0 <scalbnf+0x9c>
 8005eb8:	3219      	adds	r2, #25
 8005eba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ebe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005ec2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005ee4 <scalbnf+0xe0>
 8005ec6:	ee07 3a10 	vmov	s14, r3
 8005eca:	e7c4      	b.n	8005e56 <scalbnf+0x52>
 8005ecc:	ffff3cb0 	.word	0xffff3cb0
 8005ed0:	4c000000 	.word	0x4c000000
 8005ed4:	7149f2ca 	.word	0x7149f2ca
 8005ed8:	f149f2ca 	.word	0xf149f2ca
 8005edc:	0da24260 	.word	0x0da24260
 8005ee0:	8da24260 	.word	0x8da24260
 8005ee4:	33000000 	.word	0x33000000

08005ee8 <_init>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr

08005ef4 <_fini>:
 8005ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef6:	bf00      	nop
 8005ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005efa:	bc08      	pop	{r3}
 8005efc:	469e      	mov	lr, r3
 8005efe:	4770      	bx	lr
